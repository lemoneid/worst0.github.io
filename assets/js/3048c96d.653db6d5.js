(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[2973],{3905:function(n,a,t){"use strict";t.d(a,{Zo:function(){return o},kt:function(){return N}});var e=t(67294);function i(n,a,t){return a in n?Object.defineProperty(n,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[a]=t,n}function r(n,a){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(n);a&&(e=e.filter((function(a){return Object.getOwnPropertyDescriptor(n,a).enumerable}))),t.push.apply(t,e)}return t}function m(n){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){i(n,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(n,a,Object.getOwnPropertyDescriptor(t,a))}))}return n}function p(n,a){if(null==n)return{};var t,e,i=function(n,a){if(null==n)return{};var t,e,i={},r=Object.keys(n);for(e=0;e<r.length;e++)t=r[e],a.indexOf(t)>=0||(i[t]=n[t]);return i}(n,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(e=0;e<r.length;e++)t=r[e],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var s=e.createContext({}),l=function(n){var a=e.useContext(s),t=a;return n&&(t="function"==typeof n?n(a):m(m({},a),n)),t},o=function(n){var a=l(n.components);return e.createElement(s.Provider,{value:a},n.children)},k={inlineCode:"code",wrapper:function(n){var a=n.children;return e.createElement(e.Fragment,{},a)}},c=e.forwardRef((function(n,a){var t=n.components,i=n.mdxType,r=n.originalType,s=n.parentName,o=p(n,["components","mdxType","originalType","parentName"]),c=l(t),N=i,u=c["".concat(s,".").concat(N)]||c[N]||k[N]||r;return t?e.createElement(u,m(m({ref:a},o),{},{components:t})):e.createElement(u,m({ref:a},o))}));function N(n,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof n||i){var r=t.length,m=new Array(r);m[0]=c;var p={};for(var s in a)hasOwnProperty.call(a,s)&&(p[s]=a[s]);p.originalType=n,p.mdxType="string"==typeof n?n:i,m[1]=p;for(var l=2;l<r;l++)m[l]=t[l];return e.createElement.apply(null,m)}return e.createElement.apply(null,t)}c.displayName="MDXCreateElement"},18594:function(n,a,t){"use strict";t.r(a),t.d(a,{frontMatter:function(){return p},metadata:function(){return s},toc:function(){return l},default:function(){return k}});var e=t(22122),i=t(19756),r=(t(67294),t(3905)),m=["components"],p={id:"A3.\u6808\u548c\u961f\u5217",titile:"A3.\u6808\u548c\u961f\u5217","typora-root-url":"../"},s={unversionedId:"Algorithm/A3.\u6808\u548c\u961f\u5217",id:"Algorithm/A3.\u6808\u548c\u961f\u5217",isDocsHomePage:!1,title:"\u6808,\u961f\u5217",description:"\u6808\u89e3\u51b3\u5b8c\u5168\u5305\u542b\u95ee\u9898",source:"@site/docs/2.Algorithm/A3.\u6808\u548c\u961f\u5217.md",sourceDirName:"2.Algorithm",slug:"/Algorithm/A3.\u6808\u548c\u961f\u5217",permalink:"/Algorithm/A3.\u6808\u548c\u961f\u5217",editUrl:"https://github.com/worst0/wiki_note/edit/main/docs/2.Algorithm/A3.\u6808\u548c\u961f\u5217.md",version:"current",frontMatter:{id:"A3.\u6808\u548c\u961f\u5217",titile:"A3.\u6808\u548c\u961f\u5217","typora-root-url":"../"},sidebar:"Document\ud83d\udcbb",previous:{title:"\u6570\u7ec4\u548c\u94fe\u8868",permalink:"/Algorithm/A2.\u6570\u7ec4\u548c\u94fe\u8868"},next:{title:"\u5806\u548c\u4f18\u5148\u961f\u5217",permalink:"/Algorithm/A4.\u5806\u548c\u4f18\u5148\u961f\u5217"}},l=[{value:"\u6808",id:"\u6808",children:[{value:"\u6808\u7684\u5b9e\u73b0",id:"\u6808\u7684\u5b9e\u73b0",children:[]},{value:"\u6808\u4e60\u9898",id:"\u6808\u4e60\u9898",children:[]}]},{value:"\u961f\u5217",id:"\u961f\u5217",children:[{value:"\u961f\u5217\u7684\u5b9e\u73b0",id:"\u961f\u5217\u7684\u5b9e\u73b0",children:[]}]},{value:"\u4e8c\u3001\u5355\u8c03\u961f\u5217",id:"\u4e8c\u3001\u5355\u8c03\u961f\u5217",children:[{value:"\u6982\u8ff0",id:"\u6982\u8ff0",children:[]},{value:"RMQ\u95ee\u9898",id:"rmq\u95ee\u9898",children:[]}]},{value:"\u4e09\u3001\u5355\u8c03\u6808",id:"\u4e09\u3001\u5355\u8c03\u6808",children:[]},{value:"\u53cc\u7aef\u961f\u5217",id:"\u53cc\u7aef\u961f\u5217",children:[]},{value:"\u5e94\u7528",id:"\u5e94\u7528",children:[{value:"\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c",id:"\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c",children:[]},{value:"\u7a97\u53e3\u7684\u6700\u5927\u503c\u51cf\u53bb\u6700\u5c0f\u503c\u5c0f\u4e8e\u7b49\u4e8e <code>num</code> \u7684\u5b50\u6570\u7ec4\u4e2a\u6570",id:"\u7a97\u53e3\u7684\u6700\u5927\u503c\u51cf\u53bb\u6700\u5c0f\u503c\u5c0f\u4e8e\u7b49\u4e8e-num-\u7684\u5b50\u6570\u7ec4\u4e2a\u6570",children:[]}]}],o={toc:l};function k(n){var a=n.components,p=(0,i.Z)(n,m);return(0,r.kt)("wrapper",(0,e.Z)({},o,p,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"}," \u6808\u89e3\u51b3\u5b8c\u5168\u5305\u542b\u95ee\u9898")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"DS"),(0,r.kt)("th",{parentName:"tr",align:null},"\u5e94\u7528"),(0,r.kt)("th",{parentName:"tr",align:null},"\u5907\u6ce8"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u6808"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6811\u7684\u6df1\u5ea6\u904d\u5386,\u56fe\u7684\u6df1\u641c"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u961f\u5217(\u5faa\u73af)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6811\u7684\u5c42\u5e8f\u904d\u5386,\u56fe\u7684\u5e7f\u641c"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u5355\u8c03\u6808"),(0,r.kt)("td",{parentName:"tr",align:null},"\u4e34\u8fd1\u6700\u5927(\u5c0f)\u503c"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u5355\u8c03\u961f\u5217"),(0,r.kt)("td",{parentName:"tr",align:null},"\u533a\u95f4\u6700\u5927(\u5c0f)\u503c"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h2",{id:"\u6808"},"\u6808"),(0,r.kt)("h3",{id:"\u6808\u7684\u5b9e\u73b0"},"\u6808\u7684\u5b9e\u73b0"),(0,r.kt)("h3",{id:"\u6808\u4e60\u9898"},"\u6808\u4e60\u9898"),(0,r.kt)("h4",{id:"lc-20-\u62ec\u53f7\u5339\u914d"},"lc-20-\u62ec\u53f7\u5339\u914d"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"}," bool isValid(string s) {\n        int n = s.size();\n        if (n % 2 == 1) {\n            return false;\n        }\n        unordered_map<char, char> pairs = {\n            {')', '('},\n            {']', '['},\n            {'}', '{'}\n        };\n        stack<char> stk;\n        for (char ch: s) {\n            if (pairs.count(ch)) {\n                if (stk.empty() || stk.top() != pairs[ch]) {\n                    return false;\n                }\n                stk.pop();\n            }\n            else {\n                stk.push(ch);\n            }\n        }\n        return stk.empty();\n    }\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"bool isValid(char * s){\n    int len = strlen(s);\n    char*stack = (char *)malloc(sizeof(char) * len);\n    int top = -1, flag = 1;\n    for (int i = 0; i < len; ++i) {\n        switch (s[i]) {\n            case '(' : \n            case '[' : \n            case '{' : \n                stack[++top] = s[i]; \n                break;\n            case ')' :\n                flag = (top != -1 && stack[top--] == '(' );\n                break;\n            case ']' :\n                flag = (top != -1 && stack[top--] == '[' );\n                break;\n            case '}' :\n                flag = (top != -1 && stack[top--] == '{');\n                break;\n        }\n        if (!flag) return false;\n    }\n    return top == -1;\n}\n")),(0,r.kt)("h4",{id:"lc_946\u9a8c\u8bc1\u6808\u5e8f\u5217"},(0,r.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/validate-stack-sequences/description/"},"LC_946.\u9a8c\u8bc1\u6808\u5e8f\u5217")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool validateStackSequences(vector<int>& pushed, vector<int>& popped) {\n        if (pushed.size() != popped.size()) {\n            return false;\n        } \n        int size = pushed.size();\n        int j = 0;\n        stack<int> s;\n        for (int i = 0; i < size; i++) {\n            s.push(pushed[i]);\n            while (!s.empty() && j < size && s.top() == popped[j]) {\n                s.pop();\n                j++;\n            }\n        }\n        return j == size;\n    }\n};\n")),(0,r.kt)("h2",{id:"\u961f\u5217"},"\u961f\u5217"),(0,r.kt)("h3",{id:"\u961f\u5217\u7684\u5b9e\u73b0"},"\u961f\u5217\u7684\u5b9e\u73b0"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'/*************************************************************************\n    > File Name: 3.queue.cpp\n    > Author: weier \n    > Mail: 1931248856@qq.com\n    > Created Time: 2020\u5e7406\u670820\u65e5 \u661f\u671f\u516d 14\u65f649\u520622\u79d2\n ************************************************************************/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\ntypedef struct Queue {\n    int *data;\n    int size, head, tail, cnt;\n} Queue;\n\nQueue *init(int n) {\n    Queue *q = (Queue *)malloc(sizeof(Queue));\n    q->data = (int *)malloc(sizeof(int) * n);\n    q->size = n;\n    q->head = q->tail = q->cnt = 0;\n    return q;\n}\n\nint front(Queue *q) {\n    return q->data[q->head];\n}\n\nint empty(Queue *q) {\n    return q->cnt == 0;\n}\n\nint expand(Queue *q) {\n    int extr_size = q->size;\n    int *p;\n    while (extr_size) {\n        p = (int *)malloc(sizeof(int) * (q->size + extr_size));\n        if (p) break;\n        extr_size >>= 1;\n    }\n    if (p == NULL) return 0;\n    for (int j = 0; j < q->cnt; ++j) {\n        p[j] = q->data[(q->head + j) % q->size];\n    }\n    free(q->data);\n    q->data = p;\n    q->size += extr_size;\n    q->head = 0;\n    q->tail = q->cnt;\n    return 1;\n}\n\nint push(Queue *q, int val) {\n    if (q == NULL) return 0;\n    if (q->cnt == q->size) {\n        printf("\\033[;31m expand : %d\\033[0m\\n\\n", expand(q));\n    }\n    q->data[q->tail++] = val;\n    if(q->tail == q->size) q->tail -= q->size;\n    q->cnt += 1;\n    return 1;\n}\n\nint pop(Queue *q) {\n    if (q == NULL) return 0;\n    if (empty(q)) return 0;\n    q->head++;\n    if (q->head == q->size) q->head -= q->size;\n    q->cnt -= 1;\n    return 1;\n}\n\nvoid output(Queue *q) {\n    printf("Queue : [");\n    for (int i = 0; i < q->cnt; ++i) {\n        i != 0 && printf(", ");\n        printf("%d", q->data[(q->head + i) % q->size]);\n    }\n    printf("]\\n\\n");\n    return ;\n}\n\nvoid clear(Queue *q) {\n    if (q == NULL) return ;\n    free(q->data);\n    free(q);\n    return ;\n}\n\nint main() {\n    #define max_op 40\n    srand(time(0));\n    Queue *q = init(1);\n    for (int i = 0; i < max_op; ++i) {\n        int val  = rand() % 100;\n        int op = rand() % 4;\n        switch (op) {\n            case 0 : \n            case 1 :\n            case 2 : {\n                printf("push %d to the Queue = %d\\n", val, push(q, val));\n            } break;\n            case 3 : {\n                int head = front(q);\n                printf("pop %d from the Queue = %d\\n", head, pop(q));\n            } break;\n        }\n        output(q);\n    }\n    clear(q);\n    #undef max_op\n    return 0;\n}\n')),(0,r.kt)("h2",{id:"\u4e8c\u3001\u5355\u8c03\u961f\u5217"},"\u4e8c\u3001\u5355\u8c03\u961f\u5217"),(0,r.kt)("h3",{id:"\u6982\u8ff0"},"\u6982\u8ff0"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u672c\u8d28\u95ee\u9898\u662f\uff1a\u56fa\u5b9a\u67e5\u8be2\u7ed3\u5c3e\u7684 RMQ \u95ee\u9898\uff0c\u4f8b\u5982 ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"R"),(0,r.kt)("mi",{parentName:"mrow"},"M"),(0,r.kt)("mi",{parentName:"mrow"},"Q"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mn",{parentName:"mrow"},"7"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"RMQ(x, 7)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.00773em"}},"R"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"M"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"Q"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"7"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,r.kt)("li",{parentName:"ol"},"\u95ee\u9898\u6027\u8d28\uff1a\u7ef4\u62a4\u6ed1\u52a8\u7a97\u53e3\u6700\u503c\u95ee\u9898"),(0,r.kt)("li",{parentName:"ol"},"\u5165\u961f\uff1a\u5c06\u961f\u5c3e\u8fdd\u53cd\u5355\u8c03\u6027\u7684\u5143\u7d20\u6dd8\u6c70\u51fa\u5c40\uff0c\u518d\u5c06\u5f53\u524d\u5143\u7d20\u5165\u961f"),(0,r.kt)("li",{parentName:"ol"},"\u51fa\u961f\uff1a\u5982\u679c\u961f\u9996\u5143\u7d20\u8d85\u51fa\u4e86\u6ed1\u52a8\u7a97\u53e3\u7684\u8303\u56f4\uff0c\u961f\u9996\u51fa\u961f"),(0,r.kt)("li",{parentName:"ol"},"\u961f\u9996\u5143\u7d20\uff1a\u6ed1\u52a8\u7a97\u53e3\u5185\u7684\u6700\u503c"),(0,r.kt)("li",{parentName:"ol"},"\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(1)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord"},"1"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"))))))),(0,r.kt)("h3",{id:"rmq\u95ee\u9898"},"RMQ\u95ee\u9898"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"RMQ ( Range Minimum / Maximum Query ) \u662f\u6307\uff1a\u5bf9\u4e8e\u957f\u5ea6\u4e3a n \u7684\u6570\u5217 A\uff0c\u56de\u7b54\u82e5\u5e72\u8be2\u95ee RMQ (A , i , j ) ( i , j \u2264 n)\uff0c\u8fd4\u56de\u6570\u5217A\u4e2d\u4e0b\u6807\u5728 i , j \u91cc\u7684",(0,r.kt)("strong",{parentName:"p"},"\u6700\u5c0f\uff08\u5927\uff09\u503c"),"\u3002"),(0,r.kt)("p",{parentName:"blockquote"},"RMQ\u95ee\u9898\u662f\u6307\u6c42",(0,r.kt)("strong",{parentName:"p"},"\u533a\u95f4\u6700\u503c"),"\u7684\u95ee\u9898\u3002")),(0,r.kt)("h4",{id:"\u5355\u8c03\u961f\u5217"},"\u5355\u8c03\u961f\u5217"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#define MAX_N 300000\nint q[MAX_N + 5], head = 0, tail = 0;\nint val[MAX_N + 5];\n\nint main() {\n    int n, k;\n    cin >> n >> k;\n    for (int i = 1; i <= n; i++) {\n        cin >> val[i];\n    }\n    for (int i = 1; i <= n; i++) {\n        while (tail - head && val[q[tail - 1]] > val[i]) --tail;\n        q[tail++] = i;\n        if (q[head] <= i - k) head++;\n        if (i >= k) {\n            i > k && cout << " ";\n            cout << val[q[head]];\n        }\n    }\n    cout << endl;\n    head = tail = 0;\n    for (int i = 1; i <= n; i++) {\n        while (tail - head && val[q[tail - 1]] < val[i]) --tail;\n        q[tail++] = i;\n        if (q[head] <= i - k) head++;\n        if (i >= k) {\n            i > k && cout << " ";\n            cout << val[q[head]];\n        }\n    }\n    cout << endl;\n    return 0;\n}\n')),(0,r.kt)("h4",{id:"hzoj-271-\u6ed1\u52a8\u7a97\u53e3"},"HZOJ-271-\u6ed1\u52a8\u7a97\u53e3"),(0,r.kt)("p",null,"\u5355\u8c03\u961f\u5217\u7684\u88f8\u9898\uff0c\u6ca1\u4ec0\u4e48\u597d\u8bb2\u7684\uff0c\u4e3b\u8981\u8981\u5b66\u4e60\u4ee3\u7801\u5b9e\u73b0"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u601d\u8003\uff1a"),"\u5355\u8c03\u961f\u5217\u4e2d\u662f\u8bb0\u5f55\u503c\u8fd8\u662f\u8bb0\u5f55\u4e0b\u6807\u7684\u95ee\u9898"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u7ed3\u8bba\uff1a"),"\u8bb0\u5f55\u4e0b\u6807\uff0c\u56e0\u4e3a\u6709\u4e86\u4e0b\u6807\u53ef\u4ee5\u7d22\u5f15\u5230\u503c\uff0c\u8bb0\u5f55\u503c\u5219\u53cd\u5411\u4e0d\u53ef\u67e5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#define MAX_N 100000\nlong long s[MAX_N + 5], top;\nlong long h[MAX_N + 5], n;\nlong long l[MAX_N + 5], r[MAX_N + 5];\n\nvoid read() {\n    scanf("%lld", &n);\n    for (long long i = 1; i <= n; i++) scanf("%lld", h + i);\n    return ;\n}\n\nlong long solve() {\n    h[0] = h[n + 1] = -1;\n    top = -1;\n    s[++top] = 0;\n    for (long long i = 1; i <= n; i++) {\n        while (top != -1 && h[s[top]] >= h[i]) --top;\n        l[i] = s[top];\n        s[++top] = i;\n    }\n    top = -1;\n    s[++top] = n + 1;\n    for (long long i = n; i >= 1; i--) {\n        while (top != -1 && h[s[top]] >= h[i]) --top;\n        r[i] = s[top];\n        s[++top] = i;\n    }\n    long long ans = 0;\n    for (long long i = 1; i <= n; i++) {\n        ans = max(ans, h[i] * (r[i] - l[i] - 1));\n    }\n    return ans;\n}\n\nint main() {\n    read();\n    cout << solve() << endl;\n    return 0;\n}\n')),(0,r.kt)("h2",{id:""}),(0,r.kt)("h4",{id:"hzoj-372-\u53cc\u751f\u961f\u5217"},"hzoj-372-\u53cc\u751f\u961f\u5217"),(0,r.kt)("p",null,"\u5355\u8c03\u961f\u5217\u89e3\u51b3\u56fa\u5b9a\u672b\u5c3e\uff32\uff2d\uff31\u95ee\u9898"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"int a[MAX_N + 5], b[MAX_N + 5];\nint main() {\n    int n, p = 0;\n    cin >> n;\n    for (int i = 0; i < n; ++i) cin >> a[i];\n    for (int i = 0; i < n; ++i) cin >> b[i];\n    int top1 = -1, top2 = -1;\n    while (p < n) {\n        while (top1 != -1 && a[p] < a[top1]) --top1;\n        while (top2 != -1 && b[p] < b[top2]) --top2;\n        a[++top1] = a[p];\n        b[++top2] = b[p];\n        p += 1;\n    }\n    cout << p << endl;\n    return 0;\n}\n\n")),(0,r.kt)("h4",{id:"-1"}),(0,r.kt)("h4",{id:"\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u6700\u5927"},"\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u6700\u5927"),(0,r.kt)("p",null,"\u4f8b\u5b50\uff1a\u6709  7 6 8 12 9 10 3 \u4e03\u4e2a\u6570\u5b57\uff0c\u73b0\u5728\u8ba9\u4f60\u627e\u51fa\u8303\u56f4\uff08 i-4\uff0ci \uff09 \u7684\u6700\u5c0f\u503c\u3002"),(0,r.kt)("p",null,"\u5148\u521d\u59cb\u5316{ 0 } \uff08\u8868\u793ai=0\u65f6\u7684\u503c\uff09"),(0,r.kt)("p",null,"i=1 ->{ 0 } \uff08\u8868\u793ai=1,\u65f6\uff0c\u5728\u5176\u8303\u56f4\u5185\u6700\u5c0f\u7684\u503c\u4e3a0\uff09-> 7\u8fdb\u961f { 7 } \uff1b"),(0,r.kt)("p",null,"i=2->{ 7 }\uff08\u8868\u793ai=2,\u65f6\uff0c\u5728\u5176\u8303\u56f4\u5185\u6700\u5c0f\u7684\u503c\u4e3a7\uff09-> 6\u6bd47\u5c0f\uff0c7\u51fa\uff0c6\u8fdb { 6 }\uff1b"),(0,r.kt)("p",null,"i=3-> { 6 } \uff08\u8868\u793ai=3,\u65f6\uff0c\u5728\u5176\u8303\u56f4\u5185\u6700\u5c0f\u7684\u503c\u4e3a6\uff09->8\u6bd46\u5927\uff0c8\u8fdb  { 6, 8}\uff1b"),(0,r.kt)("p",null,"i=4->{ 6, 8}\uff08\u8868\u793ai=4,\u65f6\uff0c\u5728\u5176\u8303\u56f4\u5185\u6700\u5c0f\u7684\u503c\u4e3a6\uff09-> 12\u6bd48\u5927\uff0c12\u8fdb {6, 8 , 12};"),(0,r.kt)("p",null,"i=5-> {6, 8 , 12}\uff08\u8868\u793ai=4,\u65f6\uff0c\u5728\u5176\u8303\u56f4\u5185\u6700\u5c0f\u7684\u503c\u4e3a6\uff09-> 9\u6bd412\u5c0f\uff0c12out\uff0c9\u6bd48\u5927\uff0c9\u8fdb {6\uff0c8,  9}\uff1b"),(0,r.kt)("p",null,"i=6-> {6\uff0c8,  9} \u4f46\u662f \u5355\u8c03\u961f\u5217\u4e2d\u5143\u7d206\u7684\u4e0b\u6807\u662f2\uff0c\u4e0d\u5728\uff082, 6],\u4e2d\uff0c\u65456 out\uff0c\u8fd9\u5c31\u662f\u5355\u8c03\u961f\u5217\u7684\u7cbe\u9ad3\u4e86\u3002\u6545\u5355\u8c03\u961f\u5217\u4e3a"),(0,r.kt)("p",null,"{ 8,9 }\uff08\u8868\u793ai=5,\u65f6\uff0c\u5728\u5176\u8303\u56f4\u5185\u6700\u5c0f\u7684\u503c\u4e3a8\uff09->10\u6bd49\u5927\uff0c10\u8fdb \u6700\u7ec8 \u5355\u8c03\u961f\u5217\u4e3a{ 8\uff0c9, 10} ;"),(0,r.kt)("p",null,"i=7->{ 8\uff0c9, 10}\uff08\u8868\u793ai=6,\u65f6\uff0c\u5728\u5176\u8303\u56f4\u5185\u6700\u5c0f\u7684\u503c\u4e3a8\uff09-> 3\u6bd4\u5355\u8c03\u961f\u5217\u4e3a{ 8\uff0c9, 10} \u7684\u4efb\u610f\u503c\u90fd\u5c0f\uff0c\u6545\u5168out\uff0c\u6700\u7ec8\u96c6\u5408\u4e3a { 3 }\uff1b"),(0,r.kt)("p",null,"\u5355\u8c03\u961f\u5217\u7684\u6838\u5fc3\uff08\u6211\u8ba4\u4e3a\u7684\u54c8\uff09\uff1a\u5f97\u5230\u5f53\u524d\u7684\u67d0\u4e2a\u8303\u56f4\u5185\u7684\u6700\u5c0f\u503c\u6216\u6700\u5927\u503c,\u9898\u76ee\u662f\u6709\u9650\u5236\u7684\uff0c\u89c4\u5b9a\u5728\u67d0\u4e2a\u8303\u56f4\u5185\u627e\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n#define max_n 300000\n\nint arr[max_n + 5];\nint q[max_n + 5], head, tail;\n\nint main() {\n    int n, k;\n    cin >> n  >> k;\n    for (int i = 0; i < n; ++i) {\n        cin >> arr[i];\n    }\n    head = tail = 0;\n    for (int i = 0; i < n; ++i) {\n        while (tail - head != 0 && arr[i] < arr[q[tail - 1]]) tail--;\n        q[tail++] = i;\n        if (i + 1 < k) continue;\n        if (i - q[head] == k) head++;\n        i + 1 == k || cout << " ";\n        cout << arr[q[head]];\n    }\n    cout << endl;\n    head = tail = 0;\n    for (int i = 0; i < n; ++i) {\n        while (tail - head != 0 && arr[i] >= arr[q[tail - 1]]) tail--;\n        q[tail++] = i;\n        if (i + 1 < k) continue;\n        if (i - q[head] == k) head++;\n        i + 1 == k || cout << " ";\n        cout << arr[q[head]];\n    }\n    cout << endl;\n    return 0;\n}\n\n')),(0,r.kt)("h4",{id:"\u6700\u5927\u5b50\u5e8f\u5217"},"\u6700\u5927\u5b50\u5e8f\u5217"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n#define max_n 300000\n\nlong long  s[max_n + 5]= {0};\nint q[max_n + 5], head, tail;\n\nint main() {\n    int n, m;\n    long long ans;\n    cin >> n >> m;\n    for (int i = 1; i <= n; ++i) cin >> s[i], s[i] += s[i - 1];\n    head = tail = 0;\n    q[tail++] = 0;\n    ans = s[1];\n    for (int i = 1; i <= n; ++i)  {\n        if (i - q[head] > m) head++;\n        ans = max(ans, s[i] - s[q[head]]);\n        while (tail - head && s[i] < s[q[tail - 1]]) tail--;\n        q[tail++] = i;\n    }\n    cout << ans << endl;\n    return 0;\n}\n\n")),(0,r.kt)("h2",{id:"\u4e09\u3001\u5355\u8c03\u6808"},"\u4e09\u3001\u5355\u8c03\u6808"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u5355\u8c03\u6808\u4fdd\u7559\u4e86\u5355\u8c03\u961f\u5217\u7684\u300e\u5165\u961f\u300f\u64cd\u4f5c"),(0,r.kt)("li",{parentName:"ol"},"\u5355\u8c03\u6808\u4f9d\u7136\u662f\u7ef4\u62a4\u4e86\u4e00\u79cd\u5355\u8c03\u6027"),(0,r.kt)("li",{parentName:"ol"},"\u95ee\u9898\u6027\u8d28\uff1a\u6700\u8fd1\uff08\u5927\u4e8e/\u5c0f\u4e8e\uff09\u5173\u7cfb"),(0,r.kt)("li",{parentName:"ol"},"\u5165\u6808\u4e4b\u524d\uff0c\u7b26\u5408\u5355\u8c03\u6027\u7684\u6808\u9876\u5143\u7d20\uff0c\u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\u6700\u8fd1\uff08\u5927\u4e8e/\u5c0f\u4e8e\uff09\u5173\u7cfb"),(0,r.kt)("li",{parentName:"ol"},"\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(1)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord"},"1"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"))))))),(0,r.kt)("h4",{id:"\u5355\u8c03\u6808"},"\u5355\u8c03\u6808"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u5b9a\u4e49\uff1a\u5355\u8c03\u6808\uff0c\u6808\u5e95\u5230\u6808\u9876\uff0c\u6309\u7167\u5355\u8c03\u9012\u589e\u6216\u8005\u5355\u8c03\u9012\u51cf\u7684\u987a\u5e8f\u3002")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u5e94\u7528\u573a\u666f"),(0,r.kt)("p",{parentName:"li"},"\u9762\u5bf9\u4e00\u4e2a\u5e8f\u5217\uff0c\u7ecf\u5e38\u53ef\u4ee5\u88ab\u7528\u6765\u5e94\u7528\u6c42\uff1a"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u5de6\u8fb9\u8ddd\u79bb\u5b83\u6700\u8fd1\u4e14\u6bd4\u5b83\u5927/\u5c0f\u7684\u6570\u5b57\u548c\u53f3\u8fb9\u8ddd\u79bb\u5b83\u6700\u8fd1\u7684\u4e14\u6bd4\u4ed6\u5927/\u5c0f\u7684\u6570\u5b57")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u5f53\u524d\u5143\u7d20\u7684\u5de6\u8fb9\u6700\u5927/\u6700\u5c0f\u7684\u5143\u7d20\u3002"),(0,r.kt)("p",{parentName:"li"},"\u6bd4\u5982\u5355\u8c03\u51cf\u589e\u6808\u3002\u5bf9\u4e8e\u67d0\u4e2a\u5143\u7d20\uff0c\u5b83\u4e0b\u9762\u7684\u6570\u5c31\u662f\u4ed6\u5de6\u8fb9\u8ddd\u79bb\u6700\u8fd1\u7684\u6bd4\u4ed6\u5927\u7684\u6570\u5b57\uff0c\u8ba9\u5b83\u5f39\u51fa\u5c31\u662f\u5b83\u53f3\u8fb9\u8ddd\u79bb\u6700\u8fd1\u7684\u6bd4\u5927\u7684\u6570\u5b57\u3002\u4e14",(0,r.kt)("strong",{parentName:"p"},"\u5728\u6bcf\u6b21\u5f39\u51fa\u65f6\u5f00\u59cb\u8ba1\u7b97\u6709\u5173\u9898\u76ee\u8981\u6c42\u7684"),"\u3002")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u672b\u5c3e\u6ce8\u610f",(0,r.kt)("br",{parentName:"p"}),"\n","\u5728\u904d\u5386\u6240\u6709\u5143\u7d20\u7ed3\u675f\u7684\u65f6\u5019\uff0c\u5982\u679c\u6808\u4e2d\u8fd8\u6709\u5143\u7d20\uff0c\u8981\u4f9d\u6b21\u5f39\u51fa\u7ed3\u7b97\u3002"),(0,r.kt)("p",{parentName:"li"},"\u6bd4\u5982\uff0c\u5b58\u5728\u6570\u7ec4 ",(0,r.kt)("inlineCode",{parentName:"p"},"[3,5,4,7,1]"),"\uff0c\u4fdd\u6301\u6808\u662f\u5355\u72ec\u9012\u51cf\u3002 "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"1\uff09\u9996\u5148\u5c063\u5165\u6808\uff0c\u6b64\u65f6\u6808\u662f\u7a7a\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u5165\u6808\n1) \u5f53\u5c065\u5165\u6808\u65f6\uff0c5\u6bd43\u5927\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u8ba1\u7b973\u7684\u53f3\u4fa7\u8ddd\u79bb\u6700\u8fd1\u7684\u6bd4\u4ed6\u5927\u7684\u5143\u7d20\uff0c\u8fd9\u4e2a\u5143\u7d20\u5c31\u662f5.\u56e0\u4e3a3\u5de6\u4fa7\u6ca1\u6709\u90a3\u4e48\u5143\u7d20\uff0c\u90a3\u4e48\u5c31\u662fNULL\u3002\u5c063\u5f39\u51fa\u540e\uff0c\u518d\u5c065\u5165\u6808\n2) 4\u6bd45\u5c0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u5165\u6808\uff0c\n4\uff097\u5927\u4e8e4\uff0c\u56e0\u6b64\u6b64\u65f6\u8981\u8ba1\u7b974\u7684\u5de6\u53f3\u4e24\u4fa7\u8ddd\u79bb\u6700\u8fd1\u6bd4\u4ed6\u5927\u7684\u5143\u7d20\u3002\u5de6\u4fa7\u662f5\uff0c\u53f3\u4fa7\u662f\u8ba9\u4ed6\u5f39\u51fa\u7684\u5143\u7d207\n1) \u540c\u7406\uff0c\u4e5f\u8981\u5f39\u51fa5\uff0c\u5de6\u4fa7\u662fnull\uff0c\u53f3\u4fa7\u662f7\n6\uff09\u5165\u68087\n7\uff09\u5165\u68081\n8\uff09\u6b64\u65f6\u5e8f\u5217\u5df2\u7ecf\u904d\u5386\u7ed3\u675f\uff0c\u8981\u5f39\u51fa1\uff0c\u8ba91\u5f39\u51fa\u7684\u56e0\u4e3a\u904d\u5386\u7ed3\u675f\uff0c\u53f3\u4fa7\u662fnull.\u5de6\u4fa77\n9\uff09\u8ba97\u5f39\u51fa\u7684\u662fnull\uff0c\u5de6\u4fa7\u4e5f\u662fnull\n\n\u987a\u4fbf\u4e5f\u77e5\u9053\u4e86\uff0c\u5de6\u53f3\u4e24\u4fa7\u90fd\u662fnull\u7684\u5143\u7d20\u5c31\u662f\u6700\u5927\u503c\u3002\n")),(0,r.kt)("p",{parentName:"li"},"\u5982\u679c\u9898\u76ee\u6709\u9650\u5b9a\u6761\u4ef6\uff0c\u6bd4\u5982\u4e0d\u4f1a\u51fa\u73b0",(0,r.kt)("inlineCode",{parentName:"p"},"INT_MAX"),"\uff0c\u90a3\u4e48\u4e5f\u662f\u53ef\u4ee5\u5728\u539f\u6570\u7ec4\u540e\u9762 ",(0,r.kt)("inlineCode",{parentName:"p"},"nums.push_back(INT_MAX)")," \uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u518d\u5355\u72ec\u8ba8\u8bba\u5e8f\u5217\u904d\u53ca\u7ed3\u675f\u65f6\u5019\u7684\u95ee\u9898\u4e86\u3002"))))),(0,r.kt)("h4",{id:"hzoj-261-\u6570\u636e\u7ed3\u6784"},"HZOJ-261-\u6570\u636e\u7ed3\u6784"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u5173\u952e\u5c31\u662f\u65b0\u9020\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u7ed3\u6784\u5b9a\u4e49 + \u7ed3\u6784\u64cd\u4f5c"),(0,r.kt)("li",{parentName:"ol"},"\u6a21\u62df\u5149\u6807\u7684\u529f\u80fd\uff0c\u5de6\u79fb\u52a8\u3001\u53f3\u79fb\u52a8\u3001\u63d2\u5165\u3001\u5220\u9664\uff0c\u7528\u5bf9\u9876\u6808\u6a21\u62df"),(0,r.kt)("li",{parentName:"ol"},"\u5b9e\u73b0\u5bf9\u9876\u6808\uff0c\u7528\u6570\u7ec4\u6a21\u62df\u3001\u7528\u94fe\u8868\u6a21\u62df"),(0,r.kt)("li",{parentName:"ol"},"\u9898\u76ee\u4e2d\u7684 BUG\uff1aQuery K \u4e2d\uff0cK \u53ef\u80fd\u5927\u4e8e\u5f53\u524d\u4f4d\u7f6e")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <cinttypes>\nusing namespace std;\n\nclass NewStruct {\npublic :\n    NewStruct() {\n        sum[0] = 0;\n        ans[0] = INT64_MIN;\n    }\n    void insert(long long x) {\n        s1.push(x);\n        int ind = s1.size();\n        long long val = x + sum[ind - 1];\n        long long val1 = max(ans[ind - 1], val);\n        sum[ind] = val;\n        ans[ind] = val1;\n        return ;\n    }\n    void del() {\n        if (s1.empty()) return ;\n        s1.pop();\n        return ;\n    }\n    void move_left() {\n        if (s1.empty()) return ;\n        s2.push(s1.top());\n        del();\n        return ;\n    }\n    void move_right() {\n        if (s2.empty()) return ;\n        insert(s2.top());\n        s2.pop();\n        return ;\n    }\n    long long query(long long k) {\n        return ans[k];\n    }\nprivate:\n    stack<long long> s1, s2;\n    long long sum[1005];\n    long long ans[1005];\n};\n\nint main() {\n    long long n;\n    cin >> n;\n    string op;\n    int val;\n    NewStruct s;\n    for (int i = 0; i < n; i++) {\n        cin >> op;\n        switch (op[0]) {\n            case 'I': cin >> val; s.insert(val); break;\n            case 'D': s.del(); break;\n            case 'L': s.move_left(); break;\n            case 'R': s.move_right(); break;\n            case 'Q': {\n                cin >> val; \n                cout << s.query(val) << endl;\n            } break;\n        }\n    }\n    return 0;\n}\n")),(0,r.kt)("h4",{id:"hzoj-262-\u5361\u7279\u5170\u6570"},"hzoj-262 \u5361\u7279\u5170\u6570"),(0,r.kt)("p",null,"f(n)\u8868\u793a\u8fdb\u6808\u987a\u5e8f\u4e3a1,2,...,N\u65f6\u53ef\u80fd\u7684\u51fa\u6808\u65b9\u6848\u6570\uff0c\u6839\u636e\u4ee5\u524d\u7684\u7ecf\u9a8c\uff0c\u6211\u4eec\u9700\u8981\u628a\u5b83\u5212\u5206\u6210\u8303\u56f4\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\u3002\n\u8003\u8651\u201c1\u201d\u201c1\u201d\u8fd9\u4e2a\u6570\u6392\u5728\u6700\u7ec8\u5e8f\u5217\u7684\u4f4d\u7f6e\uff0c\u53ef\u77e5\u53ea\u8981\u201c1\u201d\u201c1\u201d\u7684\u4f4d\u7f6e\u4e0d\u540c\uff0c\u5e8f\u5217\u5c31\u4e0d\u540c\u3002\u5982\u679c\u201c1\u201d\u201c1\u201d\u8fd9\u4e2a\u6570\u6392\u5728\u7b2c",(0,r.kt)("em",{parentName:"p"},"\ud835\udc58"),"k\u4e2a\uff0c\u90a3\u4e48\u6574\u4e2a\u5e8f\u5217\u8fdb\u51fa\u6808\u7684\u8fc7\u7a0b\u5373\u4e3a\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\u201c1\u201d",(0,r.kt)("strong",{parentName:"p"},"\u5165\u6808"),"\u3002")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},'\u201c2,3,...,k"\u8fd9',(0,r.kt)("em",{parentName:"p"},"\ud835\udc58"),"\u22121k\u22121\u4e2a\u6570\u6309\u67d0\u79cd\u987a\u5e8f",(0,r.kt)("strong",{parentName:"p"},"\u8fdb\u51fa\u6808"),"\u3002")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\u201c1\u201d",(0,r.kt)("strong",{parentName:"p"},"\u51fa\u6808"),"\u3002")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\u201ck+1,k+2,...,N\u201d\u8fd9",(0,r.kt)("em",{parentName:"p"},"\ud835\udc41"),"\u2212",(0,r.kt)("em",{parentName:"p"},"\ud835\udc58"),"N\u2212k\u4e2a\u6570\u6309\u67d0\u79cd\u987a\u5e8f",(0,r.kt)("strong",{parentName:"p"},"\u8fdb\u51fa\u6808"),"\u3002"),(0,r.kt)("p",{parentName:"li"},"\u7531\u4e8e k  \u6700\u540e\u51fa\u6808\uff0c\u5219\u5728 k \u5165\u6808\u4e4b\u524d\u6240\u6709\u6bd4\u4ed6\u5c0f\u7684\u90fd\u51fa\u6808\u4e86\uff0c\u8fd9\u91cc\u7684\u60c5\u51b5\u4e3a F\uff08k-1\uff09\uff0c\u6240\u6709\u6bd4 k \u5927\u7684\u5143\u7d20\u90fd\u5728 k \u4e4b\u524d\u51fa\u6808\uff0c\u4e3a F\uff08n-k\uff09\u79cd\u60c5\u51b5"))),(0,r.kt)("p",null,"\u4e8e\u662f\u8fd9\u6837\u5c31\u628a\u539f\u95ee\u9898\u5212\u5206\u6210\u4e86\u8303\u56f4\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u5f97\u5230\u516c\u5f0f\uff1a"),(0,r.kt)("p",null,(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("msubsup",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"msubsup"},"\u2211"),(0,r.kt)("mrow",{parentName:"msubsup"},(0,r.kt)("mi",{parentName:"mrow"},"i"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mn",{parentName:"mrow"},"1")),(0,r.kt)("mi",{parentName:"msubsup"},"N")),(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"k"),(0,r.kt)("mtext",{parentName:"mrow"},"\u2212"),(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mtext",{parentName:"mrow"},"\u2217"),(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"N"),(0,r.kt)("mtext",{parentName:"mrow"},"\u2212"),(0,r.kt)("mi",{parentName:"mrow"},"k"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"f(n)=\u2211_{i=1}^Nf(k\u22121)\u2217f(N\u2212k)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1.2809409999999999em",verticalAlign:"-0.29971000000000003em"}}),(0,r.kt)("span",{parentName:"span",className:"mop"},(0,r.kt)("span",{parentName:"span",className:"mop op-symbol small-op",style:{position:"relative",top:"-0.0000050000000000050004em"}},"\u2211"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.981231em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.40029em",marginLeft:"0em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i"),(0,r.kt)("span",{parentName:"span",className:"mrel mtight"},"="),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"1")))),(0,r.kt)("span",{parentName:"span",style:{top:"-3.2029em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.10903em"}},"N")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.29971000000000003em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"k"),(0,r.kt)("span",{parentName:"span",className:"mord"},"\u2212"),(0,r.kt)("span",{parentName:"span",className:"mord"},"1"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mord"},"\u2217"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,r.kt)("span",{parentName:"span",className:"mord"},"\u2212"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"k"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,r.kt)("p",null,"\u5f53\u7136\uff0c\u8fb9\u754c\u6761\u4ef6\u4e3a\uff1a",(0,r.kt)("em",{parentName:"p"},"\ud835\udc53"),"(0)=1,",(0,r.kt)("em",{parentName:"p"},"\ud835\udc53"),"(1)=1f(0)=1,f(1)=1"),(0,r.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a",(0,r.kt)("em",{parentName:"p"},"\ud835\udc42"),"(",(0,r.kt)("em",{parentName:"p"},"\ud835\udc5b"),"2)O(n2)\u3002"),(0,r.kt)("h4",{id:"hzoj-263-\u706b\u8f66\u8fdb\u6808"},"HZOJ-263-\u706b\u8f66\u8fdb\u6808"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u5f53\u524d\u8fdb\u6808\u7684\u6700\u5927\u6570\u5b57\u662f x\uff0c\u5e8f\u5217\u4e2d\u5f53\u524d\u5f85\u51fa\u6808\u7684\u6570\u5b57\u662f y"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"y"),(0,r.kt)("mo",{parentName:"mrow"},"<"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mi",{parentName:"mrow"},"x")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"y <= x")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7335400000000001em",verticalAlign:"-0.19444em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"<")),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.36687em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"))))),"\uff0c\u8bf4\u660e y \u4e00\u5b9a\u662f\u6808\u9876\u5143\u7d20"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"y"),(0,r.kt)("mo",{parentName:"mrow"},">"),(0,r.kt)("mi",{parentName:"mrow"},"x")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"y > x")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7335400000000001em",verticalAlign:"-0.19444em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},">"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"))))),"\uff0c\u5c06 ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow"},"+"),(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mi",{parentName:"mrow"},"y"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"]")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"[x + 1, y]")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mopen"},"["),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"1"),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,r.kt)("span",{parentName:"span",className:"mclose"},"]")))))," \u5165\u6808\uff0c\u6b64\u65f6\u6808\u9876\u5143\u7d20\u4e00\u5b9a\u662f y")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int a[30], s[30], top;\n\nbool is_valid(int *a, int n) {\n    int j = 0;\n    top = -1;\n    for (int i = 0; i < n; i++) {\n        while (j < a[i]) { s[++top] = (++j); }\n        if (top == -1 || s[top] - a[i]) return false;\n        --top;\n    }\n    return true;\n}\n\nint main() {\n    int n, ans = 20;\n    cin >> n; \n    for (int i = 0; i < n; i++) a[i] = i + 1;\n    do {\n        if (!is_valid(a, n)) continue;\n        for (int i = 0; i < n; i++) {\n            cout << a[i];\n        }\n        cout << endl;\n        --ans;\n    } while (ans && next_permutation(a, a + n));\n    return 0;\n}\n")),(0,r.kt)("h4",{id:"hzoj-68-\u670b\u53cb\u961f\u5217"},"hzoj-68. \u670b\u53cb\u961f\u5217"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image-20210308140505286",src:t(4297).Z})),(0,r.kt)("p",null,"Code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cstring>\n#include <string>\n#include <vector>\n#include <set>\n#include <queue>\n#include <map>\nusing namespace std;\n#define MAX_N 200000\n\nmap<int, int> q_ind;\nqueue<int> main_q;\nqueue<int> q[MAX_N + 5];\n\nint main() {\n    int n;\n    cin >> n;\n    for (int i = 1, m; i <= n; i++) {\n        cin >> m;\n        for (int j = 1, a; j <= m; j++) {\n            cin >> a;\n            q_ind[a] = i;\n        }\n    }\n    string op;\n    while (cin >> op) {\n        if (op == "STOP") break;\n        if (op == "ENQUEUE") {\n            int x;\n            cin >> x;\n            q[q_ind[x]].push(x);\n            if (q[q_ind[x]].size() == 1) {\n                main_q.push(q_ind[x]);\n            }\n        } else {\n            cout << q[main_q.front()].front() << endl;\n            q[main_q.front()].pop();\n            if (q[main_q.front()].empty()) main_q.pop();\n        }\n    }\n    return 0;\n}\n\n')),(0,r.kt)("h4",{id:"hzoj-264-\u6700\u5927\u77e9\u5f62\u9762\u79ef"},"HZOJ-264-\u6700\u5927\u77e9\u5f62\u9762\u79ef"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u5206\u6790\u6700\u4f18\u89e3\u7684\u6027\u8d28\uff0c\u662f\u89e3\u51b3\u95ee\u9898\u7684\u7b2c\u4e00\u6b65"),(0,r.kt)("li",{parentName:"ol"},"\u6700\u5927\u77e9\u5f62\u7684\u6027\u8d28\uff1a\u4e00\u5b9a\u662f\u4ee5\u5176\u6240\u5728\u533a\u57df\u4e2d\u6700\u77ee\u7684\u6728\u677f\u4e3a\u9ad8\u5ea6\u7684"),(0,r.kt)("li",{parentName:"ol"},"\u4ee5\u6bcf\u4e00\u5757\u6728\u677f\u505a\u4e3a\u77e9\u5f62\u9ad8\u5ea6\uff0c\u6c42\u80fd\u5f97\u5230\u7684\u6700\u5927\u77e9\u5f62\u9762\u79ef\uff0c\u6700\u540e\u5728\u6240\u6709\u9762\u79ef\u4e2d\uff0c\u53d6\u4e00\u4e2a\u6700\u5927\u503c"),(0,r.kt)("li",{parentName:"ol"},"\u9700\u8981\u6c42\u89e3\uff1a\u6bcf\u4e00\u5757\u6728\u677f\u6700\u8fd1\u7684\u9ad8\u5ea6\u5c0f\u4e8e\u5f53\u524d\u6728\u677f\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u9700\u8981\u7528\u5355\u8c03\u6808")),(0,r.kt)("h4",{id:"lc-221-\u6700\u5927\u6b63\u65b9\u5f62-dp\u5355\u8c03\u6808"},"LC-221-\u6700\u5927\u6b63\u65b9\u5f62-dp,\u5355\u8c03\u6808"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    int maximalSquare(vector<vector<char>>& matrix) {\n        if (matrix.size() == 0 || matrix[0].size() == 0) {\n            return 0;\n        }\n        int maxSide = 0;\n        int rows = matrix.size(), columns = matrix[0].size();\n        vector<vector<int>> dp(rows, vector<int>(columns));\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < columns; j++) {\n                if (matrix[i][j] == '1') {\n                    if (i == 0 || j == 0) {\n                        dp[i][j] = 1;\n                    } else {\n                        dp[i][j] = min(min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1;\n                    }\n                    maxSide = max(maxSide, dp[i][j]);\n                }\n            }\n        }\n        int maxSquare = maxSide * maxSide;\n        return maxSquare;\n    }\n};\n\n\nint maximalSquare(char** matrix, int matrixRowSize, int matrixColSizes) {\n    int n = matrixRowSize, m = matrixColSizes;\n    if (n == 0) return 0;\n    int **cnt = (int **)malloc(sizeof(int *) * n);\n    int *q = (int *)malloc(sizeof(int) * m);\n    int head, tail, l;\n    for (int i = 0; i < n; i++) cnt[i] = (int *)malloc(sizeof(int) * m);\n    for (int i = 0; i < m; i++) cnt[0][i] = (matrix[0][i] == '1');\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            cnt[i][j] = (matrix[i][j] == '1' ? cnt[i - 1][j] + 1 : 0);\n        }\n    }\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n        head = tail = 0;\n        l = 0;\n        for (int j = 0; j < m; j++) {\n            while (tail - head > 0 && cnt[i][q[tail - 1]] > cnt[i][j]) --tail;\n            q[tail++] = j;       \n            while (j - l >= 0 && j - l + 1 > cnt[i][q[head]]) {\n                ++l;\n                if (q[head] < l) ++head;\n            }\n            ans = fmax(ans, (j - l + 1) * (j - l + 1));    \n        }\n    }\n    for (int i = 0; i < n; i++) free(cnt[i]);\n    free(cnt);\n    free(q);\n    return ans;\n}\n")),(0,r.kt)("h4",{id:"lc-42-\u63a5\u96e8\u6c34-\u5355\u8c03\u6808"},"LC-42-\u63a5\u96e8\u6c34-\u5355\u8c03\u6808"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"img",src:t(1065).Z})),(0,r.kt)("p",null,"\u5355\u8c03\u9012\u51cf\u6808"),(0,r.kt)("p",null,"\u5f53\u540e\u9762\u7684\u67f1\u5b50\u9ad8\u5ea6\u6bd4\u524d\u9762\u7684\u4f4e\u65f6\uff0c\u662f\u65e0\u6cd5\u63a5\u96e8\u6c34\u7684,\u5f53\u627e\u5230\u4e00\u6839\u6bd4\u524d\u9762\u9ad8\u7684\u67f1\u5b50\uff0c\u5c31\u53ef\u4ee5\u8ba1\u7b97\u63a5\u5230\u7684\u96e8\u6c34,\u6240\u4ee5\u4f7f\u7528\u5355\u8c03\u9012\u51cf\u6808,\u5bf9\u66f4\u4f4e\u7684\u67f1\u5b50\u5165\u6808"),(0,r.kt)("p",null,"\u66f4\u4f4e\u7684\u67f1\u5b50\u4ee5\u4e3a\u8fd9\u540e\u9762\u5982\u679c\u80fd\u627e\u5230\u9ad8\u67f1\u5b50\uff0c\u8fd9\u91cc\u5c31\u80fd\u63a5\u5230\u96e8\u6c34\uff0c\u6240\u4ee5\u5165\u6808\u628a\u5b83\u4fdd\u5b58\u8d77\u6765\n\u5e73\u5730\u76f8\u5f53\u4e8e\u9ad8\u5ea6 0 \u7684\u67f1\u5b50\uff0c\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u5f71\u54cd\n\u5f53\u51fa\u73b0\u9ad8\u4e8e\u6808\u9876\u7684\u67f1\u5b50\u65f6"),(0,r.kt)("ol",{start:41},(0,r.kt)("li",{parentName:"ol"},"\u8bf4\u660e\u53ef\u4ee5\u5bf9\u524d\u9762\u7684\u67f1\u5b50\u7ed3\u7b97\u4e86"),(0,r.kt)("li",{parentName:"ol"},"\u8ba1\u7b97\u5df2\u7ecf\u5230\u624b\u7684\u96e8\u6c34\uff0c\u7136\u540e\u51fa\u6808\u524d\u9762\u66f4\u4f4e\u7684\u67f1\u5b50")),(0,r.kt)("p",null,"\u8ba1\u7b97\u96e8\u6c34\u7684\u65f6\u5019\u9700\u8981\u6ce8\u610f\u7684\u662f"),(0,r.kt)("p",null,"\u96e8\u6c34\u533a\u57df\u7684\u53f3\u8fb9 r \u6307\u7684\u81ea\u7136\u662f\u5f53\u524d\u7d22\u5f15 i\n\u5e95\u90e8\u662f\u6808\u9876 st.top() \uff0c\u56e0\u4e3a\u9047\u5230\u4e86\u66f4\u9ad8\u7684\u53f3\u8fb9\uff0c\u6240\u4ee5\u5b83\u5373\u5c06\u51fa\u6808\uff0c\u4f7f\u7528 cur \u6765\u8bb0\u5f55\u5b83\uff0c\u5e76\u8ba9\u5b83\u51fa\u6808\n\u5de6\u8fb9 l \u5c31\u662f\u65b0\u7684\u6808\u9876 st.top()\n\u96e8\u6c34\u7684\u533a\u57df\u5168\u90e8\u786e\u5b9a\u4e86\uff0c\u6c34\u5751\u7684\u9ad8\u5ea6\u5c31\u662f\u5de6\u53f3\u4e24\u8fb9\u66f4\u4f4e\u7684\u4e00\u8fb9\u51cf\u53bb\u5e95\u90e8\uff0c\u5bbd\u5ea6\u662f\u5728\u5de6\u53f3\u4e2d\u95f4\n\u4f7f\u7528\u4e58\u6cd5\u5373\u53ef\u8ba1\u7b97\u9762\u79ef"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u5f53\u51fa\u73b0\u5f53\u524d\u6728\u677f\u9ad8\u5ea6\u5c0f\u4e8e\u6808\u9876\u7684\u6728\u677f\u9ad8\u5ea6\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8ba1\u7b97\u6808\u9876\u6728\u677f\u80fd\u5b58\u50a8\u7684\u6c34\u9762\u79ef\u4e86")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int trap(vector<int>& height) {\n        stack<int> stk;\n        int ans = 0;\n        for (int i = 0; i < height.size(); ++i) {\n            while (!stk.empty() && height[stk.top()] <= height[i]) {\n                int cur = stk.top();\n                stk.pop();\n                if (stk.empty()) break;\n                int width = i - stk.top() - 1;\n                int h = min(height[i], height[stk.top()]) - height[cur];\n                ans += width * h;\n            } \n            stk.push(i);\n        }\n        return ans;\n    }\n};\n")),(0,r.kt)("h4",{id:"lc-74-\u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u77e9\u5f62"},"LC-74-\u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u77e9\u5f62"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image-20200629203350213",src:t(71545).Z})),(0,r.kt)("p",null,"\u54e8\u5175\u7684\u6280\u5de7:\u865a\u62df\u5934\u8282\u70b9,\u63d2\u5165\u6392\u5e8f"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u904d\u5386\u5b8c\u6210\u540e\u6808\u9876\u4e00\u5b9a\u62d3\u5c55\u5230\u672b\u5c3e"),(0,r.kt)("li",{parentName:"ol"},"\u5f39\u51fa\u6808\u9876\u540e,\u6808\u4e3a\u7a7a,\u4e00\u5b9a\u53ef\u4ee5\u62d3\u5c55\u5927\u6700\u5de6\u8fb9"),(0,r.kt)("li",{parentName:"ol"},"\u6808\u4e2d\u5b58\u5728\u9ad8\u5ea6\u76f8\u7b49\u7684\u5143\u7d20,\u4e00\u79cdsolution\u662f\u5224\u65ad\u5f39\u51fa\u540e,\u5224\u65ad\u662f\u5426\u7b49;\u5b9e\u9645\u6ca1\u5fc5\u8981,\u65b0\u6808\u9876\u4f1a\u8ba1\u7b97\u6b63\u786e\u7ed3\u679c")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"}," int largestRectangleArea(vector<int>& heights) {\n        int n = heights.size();\n        int ans = 0;\n        vector<int> newHeights;\n        newHeights.push_back(0);\n        for (int i = 0; i < n; ++i) newHeights.push_back(heights[i]);\n        newHeights.push_back(0);\n        n += 2;\n        stack<int> mono_stack;\n        mono_stack.push(0);\n        for (int i = 1; i < n; ++i) {\n            while (newHeights[mono_stack.top()] > newHeights[i]) {\n                int h = newHeights[mono_stack.top()];\n                mono_stack.pop();\n                int width = i - mono_stack.top() - 1;\n                ans = max(ans, h * width);\n                \n            }\n            mono_stack.push(i);\n        }\n        return ans;\n    }\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"//\u9519\u8bef\u5728\u5bf9\u4e8e\u904d\u5386\u5b8c\u6210\u540e,\u8ba1\u7b97\u65e0\u6cd5\u5904\u7406\u7b2c2\u4e2d\u60c5\u51b5;\u6240\u4ee5\u5148\u5f39\u6808\nwhile (newHeights[mono_stack.top()] > newHeights[i]) {\n                int h = newHeights[mono_stack.top()];\n                int width = i - mono_stack.top();\n                ans = max(ans, h * width);\n                mono_stack.pop();\n            }\n\n")),(0,r.kt)("h4",{id:"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a-i"},(0,r.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/"},"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a I")),(0,r.kt)("p",null,"\u8fd9\u9053\u9898\uff0c\u76f4\u89c2\u4e0a\u6c42\u7684\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\u5176\u6bd4\u4ed6\u5927\u7684\u53f3\u8fb9\u7684\u6700\u5927\u503c\u662f\u591a\u5c11\u3002\u5355\u8c03\u6808\u7684\u89e3\u6cd5\uff0c\u5de7\u5999\u7684\u8f6c\u6362\u4e86\u601d\u8def\uff1a\u6c42\u7684\u662f\u5bf9\u4e8e\u5f53\u524d\u5143\u7d20\u5176\u5de6\u8fb9\u6700\u5c0f\u7684\u5143\u7d20\u3002\u4fdd\u6301\u6808\u7684\u5355\u8c03\u9012\u51cf\u5c5e\u6027\uff0c\u90a3\u4e48\u6bcf\u6b21\u5bf9\u4e8e\u5f53\u524d\u5143\u7d20\u800c\u8a00\uff0c\u5176\u5de6\u8fb9\u6700\u5c0f\u7684\u5143\u7d20\u5c31\u662f\u6808\u5e95\u3002"),(0,r.kt)("p",null,"\u56e0\u6b64\uff0c\u5bf9\u4e8e\u5f53\u524d\u6570\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"curr - base")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maxProfit(std::vector<int>& prices) {\n        std::stack<int> path; \n\n        int base =0;       // \u6808\u5e95\n        int maxProfit = 0; \n        for(int i=0; i < prices.size(); ++i) {   \n            // \u6808\u9876\u7684\u503c > \u5f53\u524d\u503c\uff0c\u90a3\u4e48\u53ef\u4ee5\u8ba1\u7b97\u6700\u5927\u5229\u6da6\u4e86\n            while(!path.empty() && prices[path.top()] > prices[i]) { \n\n                int top = path.top(); path.pop();  // \u6808\u9876\n                // \u6808\u4e2d\u7684\u5143\u7d20\u80af\u5b9a\u662f\u4fdd\u6301\u5355\u8c03\u9012\u589e\u7684\n                int profit = prices[top] - prices[base];\n                maxProfit = std::max(profit, maxProfit);\n            }\n            // \u5f53\u524d\u5143\u7d20 prices[i] \u6bd4\u6808\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u90fd\u5c0f\u65f6\uff0c\u5c31\u4f1a\u4f7f\u5f97\u6808\u7a7a\n            if(path.empty()) { base =i; }\n\n            path.push(i);\n        }\n\n        while(!path.empty()) { \n            int top = path.top(); \n            path.pop(); \n                \n            int profit = prices[top] - prices[base];\n            maxProfit = std::max(profit, maxProfit);\n        }\n\n        return maxProfit;\n    }\n};\n")),(0,r.kt)("h2",{id:"-2"}),(0,r.kt)("h2",{id:"\u53cc\u7aef\u961f\u5217"},"\u53cc\u7aef\u961f\u5217"),(0,r.kt)("p",null,"\u53cc\u7aef\u961f\u5217\uff0c\u7ef4\u62a4\u7740\u4e00\u4e2a\u7a97\u53e3\uff0c\u5728\u8fd9\u4e2a\u7a97\u53e3\u91cc\u4fdd\u6301\u7740\u5355\u8c03\u6027\u3002\u8d77\u59cb\u6709\u4e24\u4e2a\u6307\u9488",(0,r.kt)("inlineCode",{parentName:"p"},"L"),"\u548c",(0,r.kt)("inlineCode",{parentName:"p"},"R"),"\uff0c\u90fd\u662f\u6307\u5411\u7a97\u53e3\u9996\u6bb5\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"L")," \u548c ",(0,r.kt)("inlineCode",{parentName:"li"},"R")," \u53ea\u80fd\u5411\u53f3\u589e\u52a0\uff0c\u4e0d\u80fd\u56de\u9000"),(0,r.kt)("li",{parentName:"ul"},"\u53cc\u7aef\u961f\u5217\u4ece\u5934\u90e8\u5220\u9664\u8fc7\u671f\u5143\u7d20"),(0,r.kt)("li",{parentName:"ul"},"\u53cc\u7aef\u961f\u5217\u4ece\u5c3e\u90e8\u589e\u52a0\u65b0\u7684\u5143\u7d20")),(0,r.kt)("p",null,"\u5f53\u6c42\u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\u65f6\uff0c\u8ba9\u53cc\u7aef\u961f\u5217\u4ece\u961f\u9996\u5230\u961f\u5c3e\u6309\u4fdd\u6301\u5355\u8c03\u9012\u51cf\uff1a",(0,r.kt)("strong",{parentName:"p"},"\u53cc\u7aef\u961f\u5217\u7684\u5934\u59cb\u7ec8\u6307\u5411\u6700\u5927\u503c\uff0c\u5c3e\u90e8\u662f\u6700\u5c0f\u503c"),"\u3002\u6bcf\u6b21\u53d6\u6700\u5927\u503c\u65f6\u5c31\u76f4\u63a5\u4ece\u961f\u9996\u53d6\u51fa\u5143\u7d20\u5373\u53ef\u3002\u6b64\u5916\u5bf9\u4e8e\u6570\u7ec4\uff0c\u961f\u5217\u91cc\u5b58\u653e\u7684\u53ef\u4ee5\u662f\u5143\u7d20\u4e0b\u6807\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u961f\u5c3e\uff1a",(0,r.kt)("inlineCode",{parentName:"li"},"R")," \u6307\u5411\u65b0\u7684\u5143\u7d20\u3002\u82e5\u65b0\u5143\u7d20\u5c0f\u4e8e\u961f\u5c3e\u7684\u5143\u7d20\u5c31\u76f4\u63a5\u5165\u961f\uff1b\u82e5\u5927\u4e8e\u7b49\u4e8e\u961f\u5c3e\u7684\u5143\u7d20\uff0c\u5c31\u4e00\u76f4\u5f39\u51fa\u961f\u5c3e\u7684\u5143\u7d20\uff0c\u76f4\u5230\u5c3e\u90e8\u7684\u5143\u7d20\u5927\u4e8e\u65b0\u5143\u7d20\u6216\u8005\u961f\u5217\u662f\u7a7a\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u961f\u9996\uff1a\u5f53",(0,r.kt)("inlineCode",{parentName:"li"},"L"),"\u5411\u53f3\u79fb\uff0c\u5c31\u68c0\u6d4b\u961f\u9996\u5143\u7d20\u662f\u5426\u8fc7\u671f")),(0,r.kt)("p",null,"\u8fd9\u91cc\u7684\u7a97\u53e3\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u53ef\u4ee5\u4efb\u610f\u6269\u5145\u7f29\u51cf\u3002"),(0,r.kt)("h2",{id:"\u5e94\u7528"},"\u5e94\u7528"),(0,r.kt)("h3",{id:"\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/sliding-window-maximum/"},"\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c")),(0,r.kt)("p",null,"\u5bf9\u4e8e\u5e8f\u5217 ",(0,r.kt)("inlineCode",{parentName:"p"},"[1,3,-1,-3,5,3,6,7], k=3"),"\u3002   "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    [1, 3, -1, -3, 5, 3, 6, 7] \n    0  1   2   3  4  5  6  7\n\n    \u8bbe\u7acb\u4e00\u4e2a\u8f85\u52a9\u53cc\u7aef\u961f\u5217 dqeue \uff0c\u5f00\u59cb\u65f6\u5019\uff0cL\u3001R \u6307\u5411\u961f\u5217\u9996\u3002\n    1) R \u53f3\u79fb\u4e00\u4f4d\uff0c\u6b64\u65f6dqeue\u4e3a\u7a7a\uff0c1\u4ecedqeue\u5c3e\u90e8\u52a0\u5165\n    2\uff09R==3\u65f6\uff0c3\u6bd41\u5927\uff0c\u8981\u4fdd\u6301\u7a97\u53e3\u5185\u5143\u7d20\u5355\u8c03\u9012\u51cf\uff0c\u9700\u8981\u5c061\u4ece\u5c3e\u90e8\u5f39\u51fa\uff0c3\u52a0\u5165\u3002\n    3\uff09R==-1\uff0c-1\u6bd43\u5c0f\uff0c\u5165\u961f\u3002\n    4) \u6b64\u65f6\u7a97\u53e3\u6ed1\u8fc7\u4e86\u524d\u4e09\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u53d6\u51fa\u4e09\u4e2a\u5143\u7d20\u4e2d\u7684\u6700\u5927\u503c\uff0c\u76f4\u63a5\u4ece\u961f\u9996\u53d6\u51fa\u3002\n    5\uff09R==-3\uff0c\u6bd4-1\u5c0f\uff0c\u5165\u961f\u3002\n    6) \u6b64\u65f6\u7a97\u53e3\u6ed1\u8fc7[3,-1,-3]\uff0c\u6700\u5927\u503c\u5c31\u662f\u6b64\u65f6\u7684\u961f\u5217\u9996\u5143\u7d20\uff1a3\u3002dd\n    7\uff09R==5\uff0c\u5927\u4e8e-3\uff0c-1\uff0c\u56e0\u6b64\u9700\u8981\u5c06\u5143\u7d20\u4f9d\u6b21\u5f39\u51fa\uff0c\u518d\u5c065\u538b\u5165 \n    8\uff09\u6b64\u65f6\u7a97\u53e3\u6ed1\u8fc7[-1,-3, 5]\uff0c\u6b64\u65f6\u6700\u5927\u503c\u5c31\u662f\u961f\u5217\u9996\u5143\u7d20:5\u3002\n    9\uff09R==3\uff0c\u5c0f\u4e8e5\uff0c\u5165\u961f\u3002\n    10) \u6b64\u65f6\u7a97\u53e3\u6ed1\u8fc7[-3, 5, 3]\uff0c\u6700\u5927\u503c\u662f\u961f\u5217\u9996\u5143\u7d20\uff1a5\n    11\uff09R==6\uff0c\u4f9d\u6b21\u5c065\u548c3\u5f39\u51fa\uff0c6\u5165\u961f\n    10\uff09\u6b64\u65f6\u6ed1\u52a8\u7a97\u53e3\u6ed1\u8fc7[5,3,6]\uff0c\u6700\u5927\u503c\u5c31\u662f\u961f\u9996\uff1a6\n    11\uff09R==7\uff0c\u5f39\u51fa6\uff0c\u5165\u961f7\n    12\uff09\u6b64\u65f6\u6ed1\u52a8\u7a97\u53e3\u5212\u8fc7[3,6,7]\uff0c\u6700\u5927\u503c\u5c31\u662f\u961f\u9996\uff1a7\n")),(0,r.kt)("p",null,"\u4ece\u961f\u5217\u4e2d\u5220\u9664\u5143\u7d20\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u961f\u9996\u5143\u7d20\u8fc7\u671f\uff0c\u5373\u5f53\u961f\u9996\u5143\u7d20\u548c\u5f53\u524d\u5143\u7d20\u8ddd\u79bb\u4e4b\u5dee\u8d85\u8fc7\u7a97\u53e3\u503ck\uff0c\u961f\u9996\u5143\u7d20\u5c31\u662f\u8fc7\u671f\uff0c\u5e94\u8be5\u4ece\u961f\u9996\u5220\u9664"),(0,r.kt)("li",{parentName:"ul"},"\u65b0\u7684\u5143\u7d20\u5927\u4e8e\u7b49\u4e8e\u961f\u5c3e\u5143\u7d20\uff0c\u9700\u8981\u4e0d\u65ad\u5730\u5f39\u51fa\u961f\u5c3e\u5143\u7d20\uff0c\u76f4\u5230\u6ee1\u8db3\u961f\u5c3e\u5927\u4e8e\u65b0\u7684\u5143\u7d20\uff0c\u6216\u8005\u5f39\u5230\u7a7a ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  class Solution {\n  public:\n      std::vector<int> maxSlidingWindow(std::vector<int>& nums, int k) {\n              \n        int N = nums.size();\n        std::vector<int> windMax(N -k+1);\n        std::list<int> path;\n\n        for(int R=0; R < N; ++R) { \n\n          while(!path.empty() && nums[path.back()] <= nums[R]) { \n            path.pop_back();\n          }\n\n          path.push_back(R);\n\n          // \u65b0\u5143\u7d20\u7684\u52a0\u5165\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7a97\u53e3\u5927\u4e8e k \n          // \u4f7f\u5f97\u961f\u5217\u9996\u90e8\u5143\u7d20\u8fc7\u671f\n          if(path.front() + k == R) { \n            path.pop_front();\n          }\n\n          // \u53ea\u8981\u7a97\u53e3\u5927\u4e8e\u7b49\u4e8ek\uff0c\u5c31\u9700\u8981\u8ba1\u7b97\u4e0b\u6700\u5927\u503c\n          if(R >= k-1) { \n            windMax[R-(k-1)] = nums[path.front()];\n          }\n        }\n\n        return windMax;\n      }\n  };\n")),(0,r.kt)("h3",{id:"\u7a97\u53e3\u7684\u6700\u5927\u503c\u51cf\u53bb\u6700\u5c0f\u503c\u5c0f\u4e8e\u7b49\u4e8e-num-\u7684\u5b50\u6570\u7ec4\u4e2a\u6570"},"\u7a97\u53e3\u7684\u6700\u5927\u503c\u51cf\u53bb\u6700\u5c0f\u503c\u5c0f\u4e8e\u7b49\u4e8e ",(0,r.kt)("inlineCode",{parentName:"h3"},"num")," \u7684\u5b50\u6570\u7ec4\u4e2a\u6570"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u73b0\u8c61\uff1a  "),(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"\u5982\u679c\u4e00\u4e2a\u5b50\u6570\u7ec4\u6ee1\u8db3\u8981\u6c42\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b50\u6570\u7ec4\u7684\u4efb\u4f55\u4e00\u4e2a\u5b50\u6570\u7ec4\u4e5f\u7b26\u5408\u8981\u6c42\uff1a\u56e0\u4e3a\u8fd9\u4e2a\u5927\u7684\u5b50\u6570\u7ec4\u4e2d ",(0,r.kt)("inlineCode",{parentName:"li"},"max - min <= num")," \uff0c\u90a3\u4e48\u8fd9\u4e2a\u5927\u7684\u5b50\u6570\u7ec4\u7684\u5b50\u6570\u7ec4\u7684\u80af\u5b9a\u4e5f\u662f\u5728",(0,r.kt)("inlineCode",{parentName:"li"},"[min, max]"),"\u91cc\u9762"),(0,r.kt)("li",{parentName:"ul"},"\u5982\u679c\u4e00\u4e2a\u5b50\u6570\u7ec4\u4e0d\u6ee1\u8db3\u8981\u6c42\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b50\u6570\u7ec4\u518d\u600e\u4e48\u6269\uff0c\u4e5f\u4e0d\u8fbe\u6807\uff1a\u56e0\u4e3a\u8fd9\u4e2a\u5b50\u6570\u7ec4",(0,r.kt)("inlineCode",{parentName:"li"},"max - min > num"),"\uff0c\u90a3\u4e48\u6269\u5145\u53ea\u80fd\u8ba9 ",(0,r.kt)("inlineCode",{parentName:"li"},"max"),"\u53d8\u5927",(0,r.kt)("inlineCode",{parentName:"li"},"min"),"\u53d8\u5c0f\uff0c\u66f4\u52a0\u4e0d\u6ee1\u8db3\u3002  "))),(0,r.kt)("p",null,"\u5efa\u7acb\u4e24\u4e2a\u53cc\u7aef\u961f\u5217\uff0c\u4e00\u4e2a\u7528\u6765\u4fdd\u5b58\u6700\u5927\u503c\uff0c\u4e00\u4e2a\u7528\u6765\u4fdd\u5b58\u6700\u5c0f\u503c\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5bf9\u4e8e\u6570\u7ec4 ",(0,r.kt)("inlineCode",{parentName:"li"},"arr")," \uff0c ",(0,r.kt)("inlineCode",{parentName:"li"},"L")," \u548c ",(0,r.kt)("inlineCode",{parentName:"li"},"R")," \u5f00\u59cb\u6307\u5411\u8d77\u59cb\u4f4d\u7f6e"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"R")," \u5411\u53f3\u6269\uff0c\u6269\u5230\u7b2c\u4e00\u4e2a\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u5143\u7d20\uff0c\u90a3\u4e48 ",(0,r.kt)("inlineCode",{parentName:"li"},"[L, R)")," \u90fd\u662f\u6ee1\u8db3\u8981\u6c42\u7684\u3002 \u90a3\u4e48\u4ee5 ",(0,r.kt)("inlineCode",{parentName:"li"},"L")," \u4e3a\u5f00\u59cb\u4e14\u7b26\u5408\u8981\u6c42\u7684\u5b50\u6570\u7ec4\u5171\u6709",(0,r.kt)("inlineCode",{parentName:"li"},"R-L"),"\u4e2a\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u7136\u540e ",(0,r.kt)("inlineCode",{parentName:"li"},"L")," \u53f3\u79fb\u52a8\uff0c",(0,r.kt)("inlineCode",{parentName:"li"},"R")," \u91cd\u590d\u4e4b\u524d\u52a8\u4f5c\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int getNum(std::vector<int> arr, int num) { \n    if(arr.empty()) return 0;\n\n    std::list<int> qmin;\n    std::list<int> qmax;\n\n    int result =0;\n    // \u8ba1\u7b97\u4ee5\u6bcf\u4e2a L \u7684\u60c5\u51b5\n    for(int L  =0; L < arr.size(); ++L) { \n        // R \u6269\u5230\u4e0d\u80fd\u518d\u6269 \u505c\u6b62\n        for(int R=0; R < arr.size(); ++R) { \n            //  \u5355\u8c03\u9012\u589e\n            while(!qmin.empty() && arr[qmin.back()] >= arr[R]) { \n                qmin.pop_back();\n            }\n            qmin.push_back(R);\n\n            // \u5355\u8c03\u9012\u51cf\n            while(!qmax.empty() && arr[qmax.back()] <= arr[R]) { \n                qmax.pop_back();\n            }\n            qmax.push_back(R);\n\n            if(arr[qmax.front()] - arr[qmin.front()] > num) { \n                break;\n            }\n        }\n\n        // \u6700\u5c0f\u503c\u8fc7\u671f\u67e5\u8be2\n        if(qmin.front() == L)  qmin.pop_front();\n        // \u6700\u5927\u503c\u8fc7\u671f\u67e5\u8be2\n        if(qmax.front() == L)  qmax.pop_front();\n\n        result += R - L;\n    }\n\n    return result;\n}\n")))}k.isMDXComponent=!0},1065:function(n,a,t){"use strict";a.Z=t.p+"assets/images/9f74f1cf461b56d9c2cf016674190211319faeead9c7ff919a9bddda43131272-\u56fe\u7247-233fc87583e90857a9d6e86b3b7269c1.png"},71545:function(n,a,t){"use strict";a.Z=t.p+"assets/images/image-20200629203350213-e7e211d6975c6d14b07af174e894455b.png"},4297:function(n,a,t){"use strict";a.Z=t.p+"assets/images/image-20210308140505286-ded6edfb2f76b68c2cc8c9911150c3cd.png"}}]);