"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[5213],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return c}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=a.createContext({}),l=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(m.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},o=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),o=l(t),c=r,k=o["".concat(m,".").concat(c)]||o[c]||d[c]||i;return t?a.createElement(k,s(s({ref:n},p),{},{components:t})):a.createElement(k,s({ref:n},p))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=o;var u={};for(var m in n)hasOwnProperty.call(n,m)&&(u[m]=n[m]);u.originalType=e,u.mdxType="string"==typeof e?e:r,s[1]=u;for(var l=2;l<i;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}o.displayName="MDXCreateElement"},44357:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return m},metadata:function(){return l},toc:function(){return p},default:function(){return o}});var a=t(87462),r=t(63366),i=(t(67294),t(3905)),s=["components"],u={id:"D4.\u8fdb\u7a0b\u95f4\u901a\u4fe1",title:"D4.\u8fdb\u7a0b\u95f4\u901a\u4fe1","typora-root-url":"../"},m="IPC\uff1a\u8fdb\u7a0b\u95f4\u901a\u4fe1",l={unversionedId:"Server/D4.\u8fdb\u7a0b\u95f4\u901a\u4fe1",id:"Server/D4.\u8fdb\u7a0b\u95f4\u901a\u4fe1",isDocsHomePage:!1,title:"D4.\u8fdb\u7a0b\u95f4\u901a\u4fe1",description:"1.\u5171\u4eab\u5185\u5b58",source:"@site/docs/8.Server/D4.\u8fdb\u7a0b\u95f4\u901a\u4fe1.md",sourceDirName:"8.Server",slug:"/Server/D4.\u8fdb\u7a0b\u95f4\u901a\u4fe1",permalink:"/Server/D4.\u8fdb\u7a0b\u95f4\u901a\u4fe1",editUrl:"https://github.com/worst0/wiki_note/edit/main/docs/8.Server/D4.\u8fdb\u7a0b\u95f4\u901a\u4fe1.md",version:"current",lastUpdatedAt:1633869865,formattedLastUpdatedAt:"10/10/2021",frontMatter:{id:"D4.\u8fdb\u7a0b\u95f4\u901a\u4fe1",title:"D4.\u8fdb\u7a0b\u95f4\u901a\u4fe1","typora-root-url":"../"},sidebar:"Document\ud83d\udcbb",previous:{title:"D3.\u8fdb\u7a0b\u63a7\u5236",permalink:"/Server/D3.\u8fdb\u7a0b\u63a7\u5236"},next:{title:"E1.\u591a\u7ebf\u7a0b\u7f16\u7a0b",permalink:"/Server/E1.\u591a\u7ebf\u7a0b\u7f16\u7a0b"}},p=[{value:"1.\u5171\u4eab\u5185\u5b58",id:"1\u5171\u4eab\u5185\u5b58",children:[{value:"shm",id:"shm",children:[]},{value:"mmap",id:"mmap",children:[]},{value:"\u4e0d\u540c\u8fdb\u7a0b\u8bbf\u95ee\u5171\u4eab\u5185\u5b58",id:"\u4e0d\u540c\u8fdb\u7a0b\u8bbf\u95ee\u5171\u4eab\u5185\u5b58",children:[]},{value:"\u7a0b\u5e8f\u5f02\u5e38\u9000\u51fa\uff0c\u5171\u4eab\u5185\u5b58\u4f1a\u91ca\u653e\u5417\uff1f",id:"\u7a0b\u5e8f\u5f02\u5e38\u9000\u51fa\u5171\u4eab\u5185\u5b58\u4f1a\u91ca\u653e\u5417",children:[]},{value:"\u4e24\u8005\u7684\u533a\u522b",id:"\u4e24\u8005\u7684\u533a\u522b",children:[]}]},{value:"2.\u7ebf\u7a0b\u9501",id:"2\u7ebf\u7a0b\u9501",children:[{value:"\u5171\u4eab\u5185\u5b58\uff1a\u7d2f\u52a0",id:"\u5171\u4eab\u5185\u5b58\u7d2f\u52a0",children:[]},{value:"\u5171\u4eab\u5185\u5b58\uff1a\u5b50\u8fdb\u7a0b\u8f93\u5165\uff0c\u7236\u8fdb\u7a0b\u8f93\u51fa",id:"\u5171\u4eab\u5185\u5b58\u5b50\u8fdb\u7a0b\u8f93\u5165\u7236\u8fdb\u7a0b\u8f93\u51fa",children:[]}]},{value:"3.\u4fe1\u53f7\u901a\u77e5\u8fdb\u7a0b",id:"3\u4fe1\u53f7\u901a\u77e5\u8fdb\u7a0b",children:[{value:"\u4fe1\u53f7\u7684\u4f7f\u7528",id:"\u4fe1\u53f7\u7684\u4f7f\u7528",children:[]},{value:"\u4fe1\u53f7\u5904\u7406\u673a\u5236",id:"\u4fe1\u53f7\u5904\u7406\u673a\u5236",children:[]},{value:"\u4fe1\u53f7\u901a\u77e5\u8fdb\u7a0b\uff0c\u4e3a\u4ec0\u4e48\u901a\u8fc7\u5185\u6838\u8f6c\u53d1\uff1f",id:"\u4fe1\u53f7\u901a\u77e5\u8fdb\u7a0b\u4e3a\u4ec0\u4e48\u901a\u8fc7\u5185\u6838\u8f6c\u53d1",children:[]},{value:"\u4fe1\u53f7\u5904\u7406\u793a\u4f8b",id:"\u4fe1\u53f7\u5904\u7406\u793a\u4f8b",children:[]},{value:"\u804a\u5929\u5ba4\u7684\u5b9e\u73b0",id:"\u804a\u5929\u5ba4\u7684\u5b9e\u73b0",children:[]}]},{value:"4.\u6761\u4ef6\u53d8\u91cf",id:"4\u6761\u4ef6\u53d8\u91cf",children:[{value:"\u804a\u5929\u5ba42",id:"\u804a\u5929\u5ba42",children:[]}]},{value:"5.\u7ba1\u9053",id:"5\u7ba1\u9053",children:[{value:"my_popen\u7684\u5b9e\u73b0",id:"my_popen\u7684\u5b9e\u73b0",children:[]}]},{value:"\u7ebf\u7a0b\u6c60",id:"\u7ebf\u7a0b\u6c60",children:[{value:"\u6d4b\u8bd5\u6587\u4ef6",id:"\u6d4b\u8bd5\u6587\u4ef6",children:[]},{value:"\u5934\u6587\u4ef6",id:"\u5934\u6587\u4ef6",children:[]},{value:"\u6e90\u6587\u4ef6",id:"\u6e90\u6587\u4ef6",children:[]},{value:"\u7ebf\u7a0b\u6c60-\u589e\u5220",id:"\u7ebf\u7a0b\u6c60-\u589e\u5220",children:[]}]},{value:"6.\u6d88\u606f\u961f\u5217",id:"6\u6d88\u606f\u961f\u5217",children:[]},{value:"7.\u4fe1\u53f7\u91cfPV\u64cd\u4f5c",id:"7\u4fe1\u53f7\u91cfpv\u64cd\u4f5c",children:[{value:"POSIX\u4fe1\u53f7\u91cf",id:"posix\u4fe1\u53f7\u91cf",children:[]},{value:"SystemV\u4fe1\u53f7\u91cf\uff0c\u7528\u4e8e\u8fdb\u7a0b\u95f4\u540c\u6b65",id:"systemv\u4fe1\u53f7\u91cf\u7528\u4e8e\u8fdb\u7a0b\u95f4\u540c\u6b65",children:[]}]},{value:"\u533f\u540d\u7ba1\u9053",id:"\u533f\u540d\u7ba1\u9053",children:[{value:"\u5b58\u50a8\u6620\u5c04\u4e0emmap",id:"\u5b58\u50a8\u6620\u5c04\u4e0emmap",children:[]}]},{value:"\u8fdb\u7a0b\u548c\u7ebf\u7a0b",id:"\u8fdb\u7a0b\u548c\u7ebf\u7a0b",children:[]}],d={toc:p};function o(e){var n=e.components,u=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},d,u,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"ipc\u8fdb\u7a0b\u95f4\u901a\u4fe1"},"IPC\uff1a\u8fdb\u7a0b\u95f4\u901a\u4fe1"),(0,i.kt)("h2",{id:"1\u5171\u4eab\u5185\u5b58"},"1.\u5171\u4eab\u5185\u5b58"),(0,i.kt)("p",null,"\u5171\u4eab\u5185\u5b58\u6709\u4e24\u79cdshm\u548cmmap"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"IPC\u901a\u4fe1System V\u7248\u672c\u7684\u5171\u4eab\u5185\u5b58shm"),(0,i.kt)("li",{parentName:"ul"},"\u5b58\u50a8\u6620\u5c04I/O\uff08mmap\u51fd\u6570\uff09 ")),(0,i.kt)("h3",{id:"shm"},"shm"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u539f\u7406"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u591a\u4e2a\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u7269\u7406\u5185\u5b58\uff0c\u4e0d\u540c\u8fdb\u7a0b\u53ef\u4ee5\u5c06\u540c\u4e00\u6bb5\u5171\u4eab\u7684\u5185\u5b58\u8fde\u63a5\u5230\u81ea\u5df1\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\uff0c\u4ece\u800c\u6240\u6709\u8fdb\u7a0b\u90fd\u53ef\u4ee5\u8bbf\u95ee\u5171\u4eab\u5185\u5b58\u4e2d\u7684\u5730\u5740"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"API"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"int shmget(key_t key, size_t size, int shmflg);")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u5728\u7269\u7406\u5185\u5b58\u521b\u5efa\u4e00\u4e2a\u5171\u4eab\u5185\u5b58\uff0c\u8fd4\u56de\u5171\u4eab\u5185\u5b58\u7684\u7f16\u53f7"),(0,i.kt)("li",{parentName:"ul"},"key\u662f\u4e00\u4e2a\u975e0\u6574\u6570\uff0c\u547d\u540d\u5171\u4eab\u5185\u5b58\u6bb5\uff0c\u8fd0\u884c\u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u4e0ekey\u76f8\u5173\u7684\u5171\u4eab\u5185\u5b58\u6807\u8bc6\u7b26"),(0,i.kt)("li",{parentName:"ul"},"size\u8868\u793a\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u6307\u5b9a\u9700\u8981\u7684\u5171\u4eab\u5185\u5b58\u7684\u5bb9\u91cf"),(0,i.kt)("li",{parentName:"ul"},"shmflag\u662f\u6743\u9650\u6807\u5fd7\u4f4d\uff0c\u4e0eopen\u7684mode\u53c2\u6570\u4e00\u81f4\uff0c\u82e5key\u6807\u8bc6\u7684\u5171\u4eab\u5185\u5b58\u4e0d\u5b58\u5728\uff0c\u901a\u8fc70666|IPC_CREAT\u6765\u521b\u5efa\uff0c\u5e76\u8bbe\u7f6e\u6743\u9650"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"void *shmat(int shmid, const void shmaddr,int shmflg);")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u8fde\u63a5\u6210\u529f\u540e\u628a\u5171\u4eab\u5185\u5b58\u533a\u5bf9\u8c61\u6620\u5c04\u5230\u8c03\u7528\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u51fd\u6570\u8fd4\u56de\u5404\u4e2a\u8fdb\u7a0b\u6302\u63a5\u7684\u865a\u62df\u7684\u5730\u5740\u7a7a\u95f4"),(0,i.kt)("li",{parentName:"ul"},"shmid\u662f\u6302\u63a5\u7684\u8fdb\u7a0b\u53f7\uff0c"),(0,i.kt)("li",{parentName:"ul"},"shmaddr\u7f6e\u4e3aNULL\uff0c\u8ba9\u7cfb\u7edf\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u5730\u5740\u7a7a\u95f4\u8fdb\u884c\u6302\u63a5"),(0,i.kt)("li",{parentName:"ul"},"shmflg\u8868\u793a\u4ec0\u4e48\u65b9\u5f0f\u8fdb\u884c\u6302\u63a5\uff0c\u4e00\u822c\u90fd\u662f\u53d60."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"void *shmdt(const void* shmaddr);")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u5c06\u5171\u4eab\u5185\u5b58\u4ece\u5f53\u524d\u8fdb\u7a0b\u4e2d\u5206\u79bb\uff0c\u65ad\u5f00\u7528\u6237\u7ea7\u9875\u8868\u5230\u5171\u4eab\u5185\u5b58\u7684\u90a3\u6839\u7bad\u5934\u3002"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"int shmctl(int shmid, int cmd, struct shmid_ds* buf);")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u91ca\u653e\u7269\u7406\u5185\u5b58\u4e2d\u7684\u90a3\u5757\u5171\u4eab\u5185\u5b58"),(0,i.kt)("li",{parentName:"ul"},"cmd\u53d6IPC_RMID\u8868\u793a\u5220\u9664\u8fd9\u5757\u5171\u4eab\u5185\u5b58")))))),(0,i.kt)("h3",{id:"mmap"},"mmap"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u539f\u7406"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"mmap\u662f\u6620\u5c04\u78c1\u76d8\u4e0a\u7684\u4e00\u4e2a\u6587\u4ef6\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u5728\u81ea\u5df1\u7684\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u4e2d\u5f00\u8f9f\u4e00\u5757\u7a7a\u95f4\u5bf9\u78c1\u76d8\u4e0a\u7684\u6587\u4ef6\u8fdb\u884c\u6620\u5c04"),(0,i.kt)("li",{parentName:"ul"},"\u5185\u5b58\u6620\u5c04\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5e76\u6ca1\u6709\u5b9e\u9645\u7684\u6570\u636e\u62f7\u8d1d\uff0c\u6587\u4ef6\u6ca1\u6709\u88ab\u8f7d\u5165\u5185\u5b58"),(0,i.kt)("li",{parentName:"ul"},"mmap\u8fd4\u56de\u4e00\u4e2a\u6307\u9488ptr\uff0c\u5b83\u6307\u5411\u8fdb\u7a0b\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u5730\u5740\uff0c\u901a\u8fc7ptr\u5c31\u80fd\u591f\u64cd\u4f5c\u6587\u4ef6\u3002\u4f46\u662fptr\u6240\u6307\u5411\u7684\u662f\u4e00\u4e2a\u903b\u8f91\u5730\u5740\uff0c\u8981\u64cd\u4f5c\u5176\u4e2d\u7684\u6570\u636e\uff0c\u5fc5\u987b\u901a\u8fc7MMU\u5c06\u903b\u8f91\u5730\u5740\u8f6c\u6362\u6210\u7269\u7406\u5730\u5740\uff0c\u5efa\u7acb\u5185\u5b58\u6620\u5c04\u5e76\u6ca1\u6709\u5b9e\u9645\u62f7\u8d1d\u6570\u636e\uff0c\u8fd9\u65f6\uff0c\u5c06\u4ea7\u751f\u4e00\u4e2a\u7f3a\u9875\u4e2d\u65ad\uff0c\u4f1a\u901a\u8fc7mmap()\u5efa\u7acb\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u4ece\u786c\u76d8\u4e0a\u5c06\u6587\u4ef6\u8bfb\u53d6\u5230\u7269\u7406\u5185\u5b58\u4e2d"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u6548\u7387"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"read()\u662f\u7cfb\u7edf\u8c03\u7528\uff0c\u5176\u4e2d\u8fdb\u884c\u4e86\u6570\u636e\u62f7\u8d1d\uff0c\u5b83\u9996\u5148\u5c06\u6587\u4ef6\u5185\u5bb9\u4ece\u786c\u76d8\u62f7\u8d1d\u5230\u5185\u6838\u7a7a\u95f4\u7684\u4e00\u4e2a\u7f13\u51b2\u533a\uff0c\u7136\u540e\u518d\u5c06\u8fd9\u4e9b\u6570\u636e\u62f7\u8d1d\u5230\u7528\u6237\u7a7a\u95f4\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5b9e\u9645\u4e0a\u5b8c\u6210\u4e86\u4e24\u6b21\u6570\u636e\u62f7\u8d1d"),(0,i.kt)("li",{parentName:"ul"},"mmap()\u4e5f\u662f\u7cfb\u7edf\u8c03\u7528\uff0cmmap()\u4e2d\u6ca1\u6709\u8fdb\u884c\u6570\u636e\u62f7\u8d1d\uff0c\u771f\u6b63\u7684\u6570\u636e\u62f7\u8d1d\u662f\u5728\u7f3a\u9875\u4e2d\u65ad\u5904\u7406\u65f6\u8fdb\u884c\u7684\uff0c\u7531\u4e8emmap()\u5c06\u6587\u4ef6\u76f4\u63a5\u6620\u5c04\u5230\u7528\u6237\u7a7a\u95f4\uff0c\u6240\u4ee5\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u6839\u636e\u8fd9\u4e2a\u6620\u5c04\u5173\u7cfb\uff0c\u76f4\u63a5\u5c06\u6587\u4ef6\u4ece\u786c\u76d8\u62f7\u8d1d\u5230\u7528\u6237\u7a7a\u95f4\uff0c\u53ea\u8fdb\u884c\u4e86\u4e00\u6b21\u6570\u636e\u62f7\u8d1d"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u6620\u5c04\u6587\u4ef6"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u666e\u901a\u6587\u4ef6",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"open\u7cfb\u7edf\u8c03\u7528\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\uff0c\u7136\u540e\u8fdb\u884cmmap\u64cd\u4f5c\uff0c\u5f97\u5230\u5171\u4eab\u5185\u5b58\uff0c\u8fd9\u79cd\u65b9\u5f0f\u9002\u7528\u4e8e\u4efb\u4f55\u8fdb\u7a0b\u4e4b\u95f4\u3002 "))),(0,i.kt)("li",{parentName:"ul"},"\u533f\u540d\u6620\u5c04",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u8c03\u7528 mmap \u65f6\uff0c\u5728\u53c2\u6570 flags \u4e2d\u6307\u5b9a MAP_ANONYMOUS \u6807\u5fd7\u4f4d\uff0c\u5e76\u4e14\u5c06\u53c2\u6570 fd \u6307\u5b9a\u4e3a -1 ,\u7528\u4e8e\u7236\u5b50\u8fdb\u7a0b\u4e4b\u95f4")))))),(0,i.kt)("h3",{id:"\u4e0d\u540c\u8fdb\u7a0b\u8bbf\u95ee\u5171\u4eab\u5185\u5b58"},"\u4e0d\u540c\u8fdb\u7a0b\u8bbf\u95ee\u5171\u4eab\u5185\u5b58"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"shm",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u4e0d\u540c\u8fdb\u7a0b\u901a\u8fc7shmget->shmat\u51fd\u6570\uff0c\u5c06\u5171\u4eab\u5185\u5b58\u8fde\u63a5\u5230\u81ea\u5df1\u7684\u865a\u62df\u5185\u5b58\u5730\u5740"))),(0,i.kt)("li",{parentName:"ul"},"mmap",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u4e0d\u540c\u8fdb\u7a0b\u901a\u8fc7mmap\u51fd\u6570\u521b\u5efa\u6620\u5c04\u533a\uff0c\u5c06\u81ea\u5df1\u7684\u5185\u5b58\u865a\u62df\u5730\u5740\u6620\u5c04\u5230\u78c1\u76d8\u7684\u6587\u4ef6\u4e0a")))),(0,i.kt)("h3",{id:"\u7a0b\u5e8f\u5f02\u5e38\u9000\u51fa\u5171\u4eab\u5185\u5b58\u4f1a\u91ca\u653e\u5417"},"\u7a0b\u5e8f\u5f02\u5e38\u9000\u51fa\uff0c\u5171\u4eab\u5185\u5b58\u4f1a\u91ca\u653e\u5417\uff1f"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u4e0d\u4f1a",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Linux\u4e2d\u901a\u8fc7API\u51fd\u6570shmget\u521b\u5efa\u7684\u5171\u4eab\u5185\u5b58\u4e00\u822c\u90fd\u662f\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528shmctl\u6765\u91ca\u653e\u7684\uff0c\u4f46\u662f\u6709\u65f6\u4e3a\u4e86\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u80fd\u901a\u8fc7Ctrl + C\u7b49\u65b9\u5f0f\u53d1\u9001\u4e2d\u65ad\u4fe1\u53f7\u6765\u7ed3\u675f\u7a0b\u5e8f\uff0c\u6b64\u65f6\u7a0b\u5e8f\u7533\u8bf7\u7684\u5171\u4eab\u5185\u5b58\u5c31\u4e0d\u80fd\u5f97\u5230\u91ca\u653e\uff0c\u5f53\u7136\u5982\u679c\u7a0b\u5e8f\u6ca1\u6709\u6539\u52a8\u7684\u8bdd\uff0c\u91cd\u65b0\u8fd0\u884c\u7a0b\u5e8f\u65f6\u4ecd\u7136\u4f1a\u4f7f\u7528\u4e0a\u6b21\u7533\u8bf7\u7684\u5171\u4eab\u5185\u5b58\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u4fee\u6539\u4e86\u7a0b\u5e8f\uff0c\u7531\u4e8e\u5171\u4eab\u5185\u5b58\u7684\u5927\u5c0f\u4e0d\u4e00\u81f4\u7b49\u539f\u56e0\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u7533\u8bf7\u5171\u4eab\u5185\u5b58\u9519\u8bef\u3002"))),(0,i.kt)("li",{parentName:"ul"},"\u5982\u4f55\u91ca\u653e",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u5982\u679c\u603b\u662f\u901a\u8fc7Crtl+C\u6765\u7ed3\u675f\u7684\u8bdd\uff0c\u53ef\u4ee5\u505a\u4e00\u4e2a\u4fe1\u53f7\u5904\u7406\u5668\uff0c\u5f53\u63a5\u6536\u5230\u8fd9\u4e2a\u4fe1\u53f7\u7684\u65f6\u5019\uff0c\u5148\u91ca\u653e\u5171\u4eab\u5185\u5b58\uff0c\u7136\u540e\u9000\u51fa\u7a0b\u5e8f\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u4e0d\u7ba1\u4f60\u4ee5\u4ec0\u4e48\u65b9\u5f0f\u7ed3\u675f\u7a0b\u5e8f\uff0c\u5982\u679c\u5171\u4eab\u5185\u5b58\u8fd8\u662f\u5f97\u4e0d\u5230\u91ca\u653e\uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7linux\u547d\u4ee4ipcrm shm shmid\u6765\u91ca\u653e\uff0c\u5728\u4f7f\u7528\u8be5\u547d\u4ee4\u4e4b\u524d\u53ef\u4ee5\u901a\u8fc7ipcs -m\u547d\u4ee4\u6765\u67e5\u770b\u5171\u4eab\u5185\u5b58\u3002 ")))),(0,i.kt)("h3",{id:"\u4e24\u8005\u7684\u533a\u522b"},"\u4e24\u8005\u7684\u533a\u522b"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u4f5c\u7528",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"mmap\u7cfb\u7edf\u8c03\u7528\u5e76\u4e0d\u5b8c\u5168\u662f\u4e3a\u4e86\u5171\u4eab\u5185\u5b58\u6765\u8bbe\u8ba1\u7684\uff0c\u5b83\u672c\u8eab\u63d0\u4f9b\u4e86\u4e0d\u540c\u4e8e\u4e00\u822c\u5bf9\u666e\u901a\u6587\u4ef6\u7684\u8bbf\u95ee\u7684\u65b9\u5f0f\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u50cf\u8bfb\u5199\u5185\u5b58\u4e00\u6837\u5bf9\u666e\u901a\u6587\u4ef6\u8fdb\u884c\u64cd\u4f5c"),(0,i.kt)("li",{parentName:"ul"},"IPC\u7684\u5171\u4eab\u5185\u5b58shm\u662f\u7eaf\u7cb9\u4e3a\u4e86\u5171\u4eab\u3002"))),(0,i.kt)("li",{parentName:"ul"},"\u6620\u5c04\u4f4d\u7f6e",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"mmap\u662f\u5728\u78c1\u76d8\u4e0a\u5efa\u7acb\u4e00\u4e2a\u6587\u4ef6\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u4e2d\u5f00\u8f9f\u51fa\u4e00\u5757\u7a7a\u95f4\u5bf9\u78c1\u76d8\u4e0a\u7684\u6587\u4ef6\u8fdb\u884c\u6620\u5c04\u3002"),(0,i.kt)("li",{parentName:"ul"},"shm\u6bcf\u4e2a\u8fdb\u7a0b\u6620\u5c04\u5230\u540c\u4e00\u5757\u7269\u7406\u5185\u5b58\uff0cshm\u4fdd\u5b58\u5728\u7269\u7406\u5185\u5b58\uff0c\u8fd9\u6837\u8bfb\u5199\u7684\u901f\u5ea6\u8981\u6bd4\u78c1\u76d8\u8981\u5feb\uff0c\u4f46\u662f\u5b58\u50a8\u91cf\u4e0d\u662f\u7279\u522b\u5927"))),(0,i.kt)("li",{parentName:"ul"},"\u5185\u5bb9\u4e22\u5931",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u8fdb\u7a0b\u6302\u4e86\u91cd\u542f\u4e0d\u4e22\u5931\u5185\u5bb9\uff0c\u4e8c\u8005\u90fd\u53ef\u4ee5\u505a\u5230 "),(0,i.kt)("li",{parentName:"ul"},"\u673a\u5668\u6302\u4e86\u91cd\u542f\uff0cmmap\u628a\u6587\u4ef6\u5b58\u5728\u78c1\u76d8\u4e0a\uff0c\u53ef\u4ee5\u4e0d\u4e22\u5931\u5185\u5bb9\uff08\u6587\u4ef6\u5185\u4fdd\u5b58\u4e86OS\u540c\u6b65\u8fc7\u7684\u6620\u50cf\uff09\uff0c\u800c shmget \u4f1a\u4e22\u5931 ")))),(0,i.kt)("h4",{id:"synopsis"},"synopsis"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"       key_t ftok(const char *pathname, int proj_id);\n        //\u9879\u76ee\u81ea\u5b9a\u4e49\u7684\u7ea6\u5b9aid\n       int shmget(key_t key, size_t size, int shmflg);\n        //\u9a8c\u8bc1\u5171\u4eab\u5185\u5b58\u6bb5\u662f\u5426\u5b58\u5728,\u83b7\u53d6\u5185\u5b58\u6bb5\uff0c\u8fd4\u56deshmid\n       void *shmat(int shmid, const void *shmaddr, int shmflg);\n        //\u6839\u636eshmid\u6355\u83b7\u5185\u5b58\u6bb5\n       int shmdt(const void *shmaddr);\n\n")),(0,i.kt)("h4",{id:"example"},"example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'struct Num {\n    int now, sum;\n    pthread_mutex_t mutex;\n};\n\nstruct Num *share_memory;\n\n    key_t key = ftok(".", 2009);\n    //0666\u6240\u6709\u4eba\u53ef\u8bfb\u53ef\u5199\n    if ((shmid =shmget(key, sizeof(struct Num), IPC_CREAT | 0666)) < 0) {\n        perror("shmget()");\n        exit(1);\n    }\n\n    if ((share_memory = (struct Num *)shmat(shmid, NULL, 0)) == NULL) {\n        perror("shmat()");\n        exit(1);\n    }\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "head.h"\n\nstruct Num {\n    int now, sum;\n    pthread_mutex_t mutex;\n};\n\nstruct Num *share_memory;\nvoid do_add(int max, int x) {\n    while(1) {\n        //\u5148\u5224\u65ad,\u52a0\u89e3\u9501\n        //lock\n        pthread_mutex_lock(&share_memory->mutex);\n        DBG(GREEN"<Debug>"NONE " : <%d> now = %d, sum = %d\\n", x, share_memory->now, share_memory->sum);\n\n        if (share_memory->now > max) {\n            //unlock\n            pthread_mutex_unlock(&share_memory->mutex);\n            break;\n        }\n        share_memory->sum += share_memory->now;\n        share_memory->now++;\n\n        //unlock\n        pthread_mutex_unlock(&share_memory->mutex);\n    }\n}\n\n\nint main(int argc, char **argv) {\n    if (argc != 3) {\n        fprintf(stderr, "Usage : %s max ints\\n", argv[0]);\n    }\n    int max = atoi(argv[1]);\n    int ins = atoi(argv[2]);\n    pid_t pid;\n    int shmid;\n    key_t key = ftok(".", 2009);\n    if ((shmid =shmget(key, sizeof(struct Num), IPC_CREAT | 0666)) < 0) {\n        perror("shmget()");\n        exit(1);\n    }\n\n    if ((share_memory = (struct Num *)shmat(shmid, NULL, 0)) == NULL) {\n        perror("shmat()");\n        exit(1);\n    }\n    \n    memset(share_memory, 0, sizeof(struct Num));\n    //\u9501\u5c5e\u6027\n    pthread_mutexattr_t attr;\n    pthread_mutexattr_init(&attr);\n    \n    //\u5bf9\u9501\u5c5e\u6027\u66f4\u6539,\u8ba9\u7ebf\u7a0b\u9501\u53ef\u4ee5\u5728\u8fdb\u7a0b\u95f4\u5171\u4eab\n    pthread_mutexattr_setpshared(&attr, PTHREAD_PROCESS_SHARED);\n\n    //\u521d\u59cb\u5316\u9501\n    pthread_mutex_init(&share_memory->mutex, &attr);\n    \n    int x = 0;\n    for (int i = 0; i < ins; ++i) {\n        if (pid = fork() < 0) {\n            perror("fork()");\n            exit(1);\n        }\n        x = i;\n        if (pid == 0) break;\n    }\n    if (pid == 0) {\n        do_add(max, x);\n        exit(0);\n    }\n    \n    while (ins--) {\n        wait(NULL);\n    }\n\n    return 0;\n}\n\n')),(0,i.kt)("h2",{id:"2\u7ebf\u7a0b\u9501"},"2.\u7ebf\u7a0b\u9501"),(0,i.kt)("h4",{id:"synopsis-1"},"synopsis"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"\n   int pthread_mutexattr_setpshared(pthread_mutexattr_t *attr,\n                                        int pshared);\n            pthread_mutex_init();\n             pthread_mutex_lock();\n             pthread_mutex_unlock();\n")),(0,i.kt)("h4",{id:"example-1"},"example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"struct Num {\n    int now, sum;\n    pthread_mutex_t mutex;\n};\n\nstruct Num *share_memory;\n        \n\n//lock\n        pthread_mutex_lock(&share_memory->mutex);\n\n        //unlock\n        pthread_mutex_unlock(&share_memory->mutex);\n\n\n//\u9501\u5c5e\u6027\n    pthread_mutexattr_t attr;\n    pthread_mutexattr_init(&attr);\n    \n    //\u5bf9\u9501\u5c5e\u6027\u66f4\u6539,\u8ba9\u7ebf\u7a0b\u9501\u53ef\u4ee5\u5728\u8fdb\u7a0b\u95f4\u5171\u4eab\n    pthread_mutexattr_setpshared(&attr,     PTHREAD_PROCESS_SHARED);\n\n    //\u521d\u59cb\u5316\u9501\n    pthread_mutex_init(&share_memory->mutex, &attr);\n\n")),(0,i.kt)("h3",{id:"\u5171\u4eab\u5185\u5b58\u7d2f\u52a0"},"\u5171\u4eab\u5185\u5b58\uff1a\u7d2f\u52a0"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include "head.h"\n\nstruct Num {\n    int now, sum;\n    pthread_mutex_t mutex;\n};\n\nstruct Num *share_memory;\n\n\nvoid do_add(int max, int x) {\n    while(1) {\n        //\u5148\u5224\u65ad,\u52a0\u89e3\u9501\n        //lock\n        pthread_mutex_lock(&share_memory->mutex);\n        DBG(GREEN"<Debug>"NONE " : <%d> now = %d, sum = %d\\n", x, share_memory->now, share_memory->sum);\n\n        if (share_memory->now > max) {\n            //unlock\n            pthread_mutex_unlock(&share_memory->mutex);\n            break;\n        }\n        share_memory->sum += share_memory->now;\n        share_memory->now++;\n\n        //unlock\n        pthread_mutex_unlock(&share_memory->mutex);\n    }\n}\n\n\nint main(int argc, char **argv) {\n    if (argc != 3) {\n        fprintf(stderr, "Usage : %s max ints\\n", argv[0]);\n    }\n    int max = atoi(argv[1]);\n    int ins = atoi(argv[2]);\n    pid_t pid;\n    int shmid;\n    key_t key = ftok(".", 2009);\n    if ((shmid =shmget(key, sizeof(struct Num), IPC_CREAT | 0666)) < 0) {\n        perror("shmget()");\n        exit(1);\n    }\n\n    if ((share_memory = (struct Num *)shmat(shmid, NULL, 0)) == NULL) {\n        perror("shmat()");\n        exit(1);\n    }\n    \n    memset(share_memory, 0, sizeof(struct Num));\n    //\u9501\u5c5e\u6027\n    pthread_mutexattr_t attr;\n    pthread_mutexattr_init(&attr);\n    \n    //\u5bf9\u9501\u5c5e\u6027\u66f4\u6539,\u8ba9\u7ebf\u7a0b\u9501\u53ef\u4ee5\u5728\u8fdb\u7a0b\u95f4\u5171\u4eab\n    pthread_mutexattr_setpshared(&attr, PTHREAD_PROCESS_SHARED);\n\n    //\u521d\u59cb\u5316\u9501\n    pthread_mutex_init(&share_memory->mutex, &attr);\n    \n    int x = 0;\n    for (int i = 0; i < ins; ++i) {\n        if (pid = fork() < 0) {\n            perror("fork()");\n            exit(1);\n        }\n        x = i;\n        if (pid == 0) break;\n    }\n    \n    if (pid == 0) {\n        \n        do_add(max, x);\n        exit(0);\n    }\n    \n    while (ins--) {\n        wait(NULL);\n    }\n\n    return 0;\n}\n\n')),(0,i.kt)("h3",{id:"\u5171\u4eab\u5185\u5b58\u5b50\u8fdb\u7a0b\u8f93\u5165\u7236\u8fdb\u7a0b\u8f93\u51fa"},"\u5171\u4eab\u5185\u5b58\uff1a\u5b50\u8fdb\u7a0b\u8f93\u5165\uff0c\u7236\u8fdb\u7a0b\u8f93\u51fa"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include "head.h"\n\nstruct Num {\n    int now, sum;\n    pthread_mutex_t mutex;\n};\n\nstruct Num *share_memory;\n\n\nvoid do_add(int max, int x) {\n    while(1) {\n        //\u5148\u5224\u65ad,\u52a0\u89e3\u9501\n        //lock\n        pthread_mutex_lock(&share_memory->mutex);\n        DBG(GREEN"<Debug>"NONE " : <%d> now = %d, sum = %d\\n", x, share_memory->now, share_memory->sum);\n\n        if (share_memory->now > max) {\n            //unlock\n            pthread_mutex_unlock(&share_memory->mutex);\n            break;\n        }\n        share_memory->sum += share_memory->now;\n        share_memory->now++;\n\n        //unlock\n        pthread_mutex_unlock(&share_memory->mutex);\n    }\n}\n\n\nint main(int argc, char **argv) {\n    if (argc != 3) {\n        fprintf(stderr, "Usage : %s max ints\\n", argv[0]);\n    }\n    int max = atoi(argv[1]);\n    int ins = atoi(argv[2]);\n    pid_t pid;\n    int shmid;\n    key_t key = ftok(".", 2009);\n    if ((shmid =shmget(key, sizeof(struct Num), IPC_CREAT | 0666)) < 0) {\n        perror("shmget()");\n        exit(1);\n    }\n\n    if ((share_memory = (struct Num *)shmat(shmid, NULL, 0)) == NULL) {\n        perror("shmat()");\n        exit(1);\n    }\n    \n    memset(share_memory, 0, sizeof(struct Num));\n    //\u9501\u5c5e\u6027\n    pthread_mutexattr_t attr;\n    pthread_mutexattr_init(&attr);\n    \n    //\u5bf9\u9501\u5c5e\u6027\u66f4\u6539,\u8ba9\u7ebf\u7a0b\u9501\u53ef\u4ee5\u5728\u8fdb\u7a0b\u95f4\u5171\u4eab\n    pthread_mutexattr_setpshared(&attr, PTHREAD_PROCESS_SHARED);\n\n    //\u521d\u59cb\u5316\u9501\n    pthread_mutex_init(&share_memory->mutex, &attr);\n    \n    int x = 0;\n    for (int i = 0; i < ins; ++i) {\n        if (pid = fork() < 0) {\n            perror("fork()");\n            exit(1);\n        }\n        x = i;\n        if (pid == 0) break;\n    }\n    \n    if (pid == 0) {\n        \n        do_add(max, x);\n        exit(0);\n    }\n    \n    while (ins--) {\n        wait(NULL);\n    }\n\n    return 0;\n}\n\n')),(0,i.kt)("h2",{id:"3\u4fe1\u53f7\u901a\u77e5\u8fdb\u7a0b"},"3.",(0,i.kt)("a",{parentName:"h2",href:"http://www.360doc.com/content/16/0804/10/30953065_580685165.shtml"},"\u4fe1\u53f7\u901a\u77e5\u8fdb\u7a0b")),(0,i.kt)("h3",{id:"\u4fe1\u53f7\u7684\u4f7f\u7528"},"\u4fe1\u53f7\u7684\u4f7f\u7528"),(0,i.kt)("p",null,"\u7528kill\u51fd\u6570\u53d1\u9001\u4fe1\u53f7\uff0c\u5728\u63a5\u6536\u8fdb\u7a0b\u91cc\uff0c\u901a\u8fc7signal\u6216\u8005signalaction\u51fd\u6570\u8c03\u7528sighandler\uff0c\u6765\u542f\u52a8\u5bf9\u5e94\u7684\u51fd\u6570\u5904\u7406\u4fe1\u53f7\u6d88\u606f\u3002"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u53d1\u9001\u4fe1\u53f7",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"raise\uff0c\u5411\u672c\u8eab\u53d1\u9001\u4fe1\u53f7"),(0,i.kt)("li",{parentName:"ul"},"kill\uff0c\u5411\u6307\u5b9a\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"pid > 0 \uff1a\u5411\u8fdb\u7a0b\u53f7\u4e3apid\u7684\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7"),(0,i.kt)("li",{parentName:"ul"},"pid = 0 \uff1a\u5411\u5f53\u524d\u8fdb\u7a0b\u6240\u5728\u7684\u8fdb\u7a0b\u7ec4\u53d1\u9001\u4fe1\u53f7"),(0,i.kt)("li",{parentName:"ul"},"pid = -1 \uff1a\u5411\u6240\u6709\u8fdb\u7a0b(\u9664PID=1\u5916)\u53d1\u9001\u4fe1\u53f7(\u6743\u9650\u8303\u56f4\u5185)"),(0,i.kt)("li",{parentName:"ul"},"pid < -1 \uff1a\u5411\u8fdb\u7a0b\u7ec4\u53f7\u4e3a-pid\u7684\u6240\u6709\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7 "))))),(0,i.kt)("li",{parentName:"ul"},"\u81ea\u5b9a\u4e49\u4fe1\u53f7\u52a8\u4f5c/\u6ce8\u518c\u6355\u6349\u51fd\u6570",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"signal",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"typedef void (*sighandler_t)(int);")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sighandler_t signal(int signum, sighandler_t handler);")," "),(0,i.kt)("li",{parentName:"ul"},"signal\u91cc\u9762\u9700\u8981\u8bbe\u7f6e\u6355\u6349\u7684\u4fe1\u53f7signum\u3001\u81ea\u5b9a\u4e49\u56de\u8c03\u51fd\u6570handler"))),(0,i.kt)("li",{parentName:"ul"},"sigaction",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u540c\u6837\u9700\u8981\u8bbe\u7f6e\u6355\u6349\u4fe1\u53f7\u548c\u56de\u8c03\u5904\u7406\u51fd\u6570 ")))))),(0,i.kt)("h3",{id:"\u4fe1\u53f7\u5904\u7406\u673a\u5236"},"\u4fe1\u53f7\u5904\u7406\u673a\u5236"),(0,i.kt)("p",null,"\u6bcf\u4e2a\u8fdb\u7a0b\u4e4b\u4e2d\uff0c\u90fd\u6709\u5b58\u7740\u4e00\u4e2a\u8868\uff0c\u91cc\u9762\u5b58\u7740\u6bcf\u79cd\u4fe1\u53f7\u6240\u4ee3\u8868\u7684\u542b\u4e49\uff0c\u5185\u6838\u901a\u8fc7\u8bbe\u7f6e\u8868\u9879\u4e2d\u6bcf\u4e00\u4e2a\u4f4d\u6765"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u4fe1\u53f7\u7684\u63a5\u6536"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u63a5\u6536\u4fe1\u53f7\u7684\u4efb\u52a1\u662f\u7531\u5185\u6838\u4ee3\u7406\u7684\uff0c\u5f53\u5185\u6838\u63a5\u6536\u5230\u4fe1\u53f7\u540e\uff0c\u4f1a\u5c06\u5176\u653e\u5230\u5bf9\u5e94\u8fdb\u7a0b\u7684\u4fe1\u53f7\u961f\u5217\u4e2d\uff0c\u540c\u65f6\u5411\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a\u4e2d\u65ad\uff0c\u4f7f\u5176\u9677\u5165\u5185\u6838\u6001\u3002\u6ce8\u610f\uff0c\u6b64\u65f6\u4fe1\u53f7\u8fd8\u53ea\u662f\u5728\u961f\u5217\u4e2d\uff0c\u5bf9\u8fdb\u7a0b\u6765\u8bf4\u6682\u65f6\u662f\u4e0d\u77e5\u9053\u6709\u4fe1\u53f7\u5230\u6765\u7684\u3002"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u4fe1\u53f7\u7684\u68c0\u6d4b"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u8fdb\u7a0b\u9677\u5165\u5185\u6838\u6001\u540e\uff0c\u6709\u4e24\u79cd\u573a\u666f\u4f1a\u5bf9\u4fe1\u53f7\u8fdb\u884c\u68c0\u6d4b\uff1a",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u8fdb\u7a0b\u4ece\u5185\u6838\u6001\u8fd4\u56de\u5230\u7528\u6237\u6001\u524d\u8fdb\u884c\u4fe1\u53f7\u68c0\u6d4b"),(0,i.kt)("li",{parentName:"ul"},"\u8fdb\u7a0b\u5728\u5185\u6838\u6001\u4e2d\uff0c\u4ece\u7761\u7720\u72b6\u6001\u88ab\u5524\u9192\u7684\u65f6\u5019\u8fdb\u884c\u4fe1\u53f7\u68c0\u6d4b"))),(0,i.kt)("li",{parentName:"ul"},"\u5f53\u53d1\u73b0\u6709\u65b0\u4fe1\u53f7\u65f6\uff0c\u4fbf\u4f1a\u8fdb\u5165\u4e0b\u4e00\u6b65\uff0c\u4fe1\u53f7\u7684\u5904\u7406\u3002"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u4fe1\u53f7\u7684\u5904\u7406"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"( ",(0,i.kt)("strong",{parentName:"li"},"\u5185\u6838")," )\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u662f\u8fd0\u884c\u5728\u7528\u6237\u6001\u7684\uff0c\u8c03\u7528\u5904\u7406\u51fd\u6570\u524d\uff0c\u5185\u6838\u4f1a\u5c06\u5f53\u524d\u5185\u6838\u6808\u7684\u5185\u5bb9\u5907\u4efd\u62f7\u8d1d\u5230\u7528\u6237\u6808\u4e0a\uff0c\u5e76\u4e14\u4fee\u6539\u6307\u4ee4\u5bc4\u5b58\u5668\uff08eip\uff09\u5c06\u5176\u6307\u5411\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002"),(0,i.kt)("li",{parentName:"ul"},"( ",(0,i.kt)("strong",{parentName:"li"},"\u7528\u6237")," )\u63a5\u4e0b\u6765\u8fdb\u7a0b\u8fd4\u56de\u5230\u7528\u6237\u6001\u4e2d\uff0c\u6267\u884c\u76f8\u5e94\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002"),(0,i.kt)("li",{parentName:"ul"},"( ",(0,i.kt)("strong",{parentName:"li"},"\u5185\u6838")," )\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\uff0c\u8fd8\u9700\u8981\u8fd4\u56de\u5185\u6838\u6001\uff0c\u68c0\u67e5\u662f\u5426\u8fd8\u6709\u5176\u5b83\u4fe1\u53f7\u672a\u5904\u7406\u3002"),(0,i.kt)("li",{parentName:"ul"},"( ",(0,i.kt)("strong",{parentName:"li"},"\u7528\u6237")," )\u5982\u679c\u6240\u6709\u4fe1\u53f7\u90fd\u5904\u7406\u5b8c\u6210\uff0c\u5c31\u4f1a\u5c06\u5185\u6838\u6808\u6062\u590d\uff08\u4ece\u7528\u6237\u6808\u7684\u5907\u4efd\u62f7\u8d1d\u56de\u6765\uff09\uff0c\u540c\u65f6\u6062\u590d\u6307\u4ee4\u5bc4\u5b58\u5668\uff08eip\uff09\u5c06\u5176\u6307\u5411\u4e2d\u65ad\u524d\u7684\u8fd0\u884c\u4f4d\u7f6e\uff0c\u6700\u540e\u56de\u5230\u7528\u6237\u6001\u7ee7\u7eed\u6267\u884c\u8fdb\u7a0b\u3002")))),(0,i.kt)("p",null,"\u81f3\u6b64\uff0c\u4e00\u4e2a\u5b8c\u6574\u7684\u4fe1\u53f7\u5904\u7406\u6d41\u7a0b\u4fbf\u7ed3\u675f\u4e86\uff0c\u5982\u679c\u540c\u65f6\u6709\u591a\u4e2a\u4fe1\u53f7\u5230\u8fbe\uff0c\u4e0a\u9762\u7684\u5904\u7406\u6d41\u7a0b\u4f1a\u5728\u7b2c2\u6b65\u548c\u7b2c3\u6b65\u9aa4\u95f4\u91cd\u590d\u8fdb\u884c\u3002"),(0,i.kt)("h3",{id:"\u4fe1\u53f7\u901a\u77e5\u8fdb\u7a0b\u4e3a\u4ec0\u4e48\u901a\u8fc7\u5185\u6838\u8f6c\u53d1"},"\u4fe1\u53f7\u901a\u77e5\u8fdb\u7a0b\uff0c\u4e3a\u4ec0\u4e48\u901a\u8fc7\u5185\u6838\u8f6c\u53d1\uff1f"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u4e4b\u6240\u4ee5\u8981\u901a\u8fc7\u5185\u6838\u6765\u8f6c\u53d1\uff0c\u8fd9\u6837\u505a\u7684\u76ee\u7684\u5e94\u8be5\u4e5f\u662f\u4e3a\u4e86\u5bf9\u8fdb\u7a0b\u7684\u7ba1\u7406\u548c\u5b89\u5168\u56e0\u7d20\u8003\u8651\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u56e0\u4e3a\u5728\u8fd9\u4e9b\u4fe1\u53f7\u5f53\u4e2d\uff0cSIGSTOP\u548cSIGKILL\u8fd9\u4e24\u4e2a\u4fe1\u53f7\u662f\u53ef\u4ee5\u5c06\u63a5\u6536\u6b64\u4fe1\u53f7\u7684\u8fdb\u7a0b\u505c\u6389\u7684\uff0c\u800c\u8fd9\u7c7b\u4fe1\u53f7\uff0c\u80af\u5b9a\u662f\u9700\u8981\u6709\u6743\u9650\u624d\u53ef\u4ee5\u53d1\u51fa\u7684\uff0c\u4e0d\u80fd\u591f\u968f\u4fbf\u54ea\u4e2a\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u968f\u4fbf\u505c\u6389\u522b\u7684\u8fdb\u7a0b\u3002")),(0,i.kt)("h3",{id:"\u4fe1\u53f7\u5904\u7406\u793a\u4f8b"},"\u4fe1\u53f7\u5904\u7406\u793a\u4f8b"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A\uff0cB\u4e24\u4e2a\u8fdb\u7a0b\uff0cA\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7\u7ed9B\u8fdb\u7a0b\uff0c\u4fe1\u53f7\u5e76\u4e0d\u662f\u76f4\u63a5\u4ece\u8fdb\u7a0bA\u53d1\u9001\u7ed9\u8fdb\u7a0bB\uff0c\u800c\u662f\u8981\u901a\u8fc7\u5185\u6838\u6765\u8fdb\u884c\u8f6c\u53d1\u3002"),(0,i.kt)("li",{parentName:"ul"},"A\u8fdb\u7a0b\u53d1\u9001\u7684\u4fe1\u53f7\u6d88\u606f\uff0c\u7531\u5185\u6838\u5bf9B\u8fdb\u7a0b\u76f8\u5e94\u7684\u8868\u9879\u8fdb\u884c\u8bbe\u7f6e\u3002",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u5185\u6838\u63a5\u53d7\u5230\u8fd9\u4e2a\u4fe1\u53f7\u6d88\u606f\u540e\uff0c\u4f1a\u5148\u68c0\u67e5A\u8fdb\u7a0b\u662f\u5426\u6709\u6743\u9650\u5bf9B\u8fdb\u7a0b\u7684\u4fe1\u53f7\u8868\u5bf9\u5e94\u7684\u9879\u8fdb\u884c\u8bbe\u7f6e",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u5982\u679c\u53ef\u4ee5\uff0c\u5c31\u4f1a\u5bf9B\u8fdb\u7a0b\u7684\u4fe1\u53f7\u8868\u8fdb\u884c\u8bbe\u7f6e"),(0,i.kt)("li",{parentName:"ul"},"\u5982\u679c\u4e0d\u53ef\u4ee5\uff0c\u5c31\u5ffd\u7565"),(0,i.kt)("li",{parentName:"ul"},"\u4fe1\u53f7\u5904\u7406\u6709\u4e2a\u7279\u70b9\uff0c\u5c31\u662f\u6ca1\u6709\u6392\u961f\u7684\u673a\u5236\uff0c\u4e5f\u5c31\u662f\u8bf4\u67d0\u4e2a\u4fe1\u53f7\u88ab\u8bbe\u7f6e\u4e4b\u540e\uff0c\u5982\u679cB\u8fdb\u7a0b\u8fd8\u6ca1\u6709\u6765\u53ca\u8fdb\u884c\u54cd\u5e94\uff0c\u90a3\u4e48\u5982\u679c\u540e\u7eed\u7b2c\u4e8c\u4e2a\u540c\u6837\u7684\u4fe1\u53f7\u6d88\u606f\u8fc7\u6765\uff0c\u5c31\u4f1a\u88ab\u963b\u585e\u6389\uff0c\u4e5f\u5c31\u662f\u4e22\u5f03\u3002"))),(0,i.kt)("li",{parentName:"ul"},"\u5185\u6838\u5bf9B\u8fdb\u7a0b\u4fe1\u53f7\u8bbe\u7f6e\u5b8c\u6210\u540e\uff0c\u5c31\u4f1a\u53d1\u9001\u4e2d\u65ad\u8bf7\u6c42\u7ed9B\u8fdb\u7a0b\uff0c\u8fd9\u6837B\u8fdb\u7a0b\u5c31\u8fdb\u5165\u5230\u5185\u6838\u6001"),(0,i.kt)("li",{parentName:"ul"},"\u8fdb\u7a0bB\u6839\u636e\u90a3\u4e2a\u4fe1\u53f7\u8868\uff0c\u67e5\u627e\u5bf9\u5e94\u7684\u6b64\u4fe1\u53f7\u7684\u5904\u7406\u51fd\u6570\uff0c\u4fdd\u62a4\u73b0\u573a\uff0c\u8df3\u56de\u5230\u7528\u6237\u6001\u6267\u884c\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u5904\u7406\u5b8c\u6210\u540e\uff0c\u518d\u6b21\u8fd4\u56de\u5230\u5185\u6838\u6001\uff0c\u518d\u6b21\u4fdd\u62a4\u73b0\u573a\uff0c\u7136\u540e\u518d\u6b21\u8fd4\u56de\u7528\u6237\u6001\uff0c\u4ece\u4e2d\u65ad\u4f4d\u7f6e\u5f00\u59cb\u7ee7\u7eed\u6267\u884c\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u4fdd\u62a4\u73b0\u573a\u662f\u5728\u7528\u6237\u6001\u548c\u5185\u6838\u6001\u4e4b\u95f4\u8df3\u8f6c\u7684\u65f6\u5019\uff0c\u5bf9\u5806\u6808\u73b0\u573a\u7684\u538b\u6808\u4fdd\u5b58\u3002")))),(0,i.kt)("h4",{id:"synopsis-2"},"synopsis"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"        //\u63a5\u6536\u4fe1\u53f7       \n\n        sighandler_t signal(int signum, sighandler_t handler);\n        //handler \uff1atypedef void (*sighandler_t)(int);\n        //\u4f8b\u5982void *func(int signum)\u7c7b\u578b\uff0c\u8868\u660e\u662f\u4fe1\u53f7\u5904\u7406\u51fd\u6570\n\n        //pause()\u4f1a\u4ee4\u76ee\u524d\u7684\u8fdb\u7a0b\u6682\u505c(\u8fdb\u5165\u7761\u7720\u72b6\u6001), \u76f4\u5230\u88ab\u4fe1\u53f7(signal)\u6240\u4e2d\u65ad\u3002\n         pause();\n\n\n        //\u53d1\u4fe1\u53f7\n        int kill(pid_t pid, int sig);\n        \n")),(0,i.kt)("h4",{id:"example-2"},"example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'   if (pid == 0) {\n       while (1) {\n            DBG(GREEN"<Debug>"NONE " : locked in child\\n");\n            scanf("%[^\\n]s", share_memory->str);\n            getchar(); \n            printf(YELLOW"<child>"NONE " : %s\\n ", share_memory->str);\n            kill(getppid(), SIGUSR1);\n\n       }\n   }  else {\n       signal(SIGUSR1, (void *)do_print);\n       wait(NULL);\n   }\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include "head.h"\nstruct Data {\n    char str[1000];\n    pthread_mutex_t mutex;\n};\n\nstruct Data *share_memory;\n\nvoid *do_print(int signum) {\n    printf(RED"<Parent>"NONE " : %s\\n ", share_memory->str);\n    memset(share_memory->str, 0, sizeof(share_memory->str));\n    return NULL;\n}\n\nint main(int argc, char **argv) {\n    pid_t pid;\n    int shmid;\n    key_t key = ftok(".", 209);\n    if ((shmid =shmget(key, sizeof(struct Data), IPC_CREAT | 0666)) < 0) {\n        perror("shmget()");\n        exit(1);\n    }\n\n    if ((share_memory = (struct Data *)shmat(shmid, NULL, 0)) == NULL) {\n        perror("shmat()");\n        exit(1);\n    }\n\n    memset(share_memory->str, 0, sizeof(share_memory->str));\n    if ((pid = fork()) < 0) {\n        perror("fork()");\n        exit(1);\n    }\n\n   if (pid == 0) {\n       while (1) {\n            DBG(GREEN"<Debug>"NONE " : locked in child\\n");\n            scanf("%[^\\n]s", share_memory->str);\n            getchar(); \n            printf(YELLOW"<child>"NONE " : %s\\n ", share_memory->str);\n            kill(getppid(), SIGUSR1);\n\n       }\n   }  else {\n       signal(SIGUSR1, (void *)do_print);\n       wait(NULL);\n   }  \n    return 0;\n}\n')),(0,i.kt)("h3",{id:"\u804a\u5929\u5ba4\u7684\u5b9e\u73b0"},"\u804a\u5929\u5ba4\u7684\u5b9e\u73b0"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"// File Name: chat.h\n\n#ifndef _CHAT_H\n#define _CHAT_H\n\nstruct Message {\n    char name[20];\n    char msg[1024];\n    pid_t pid;\n    pthread_mutex_t mutex;\n};\n\n#endif\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'//file Name: 1.server.c\n\n#include "head.h"\n#include "chat.h"\n\nstruct Message *share_memory = NULL;\n\nvoid *print(int signum) {\n    pthread_mutex_lock(&share_memory->mutex);\n    printf(RED"<%s>"NONE " : %s\\n", share_memory->name, share_memory->msg);\n    memset(share_memory->name, 0, sizeof(share_memory->name));\n    memset(share_memory->msg, 0, sizeof(share_memory->msg));\n    pthread_mutex_unlock(&share_memory->mutex);\n}\n\nint main() {\n    int shmid;\n    key_t key = ftok(".", 2011);\n\n    if ((shmid = shmget(key, sizeof(struct Message), IPC_CREAT | 0666)) < 0) {\n        perror("shmget()");\n        exit(1);\n    }\n\n    if ((share_memory = (struct Message *)shmat(shmid, NULL, 0)) == NULL) {\n        perror("shmat()");\n        exit(1);\n    }\n\n    memset(share_memory, 0, sizeof(struct Message));\n    pthread_mutexattr_t attr;\n    pthread_mutexattr_init(&attr);\n    pthread_mutexattr_setpshared(&attr, PTHREAD_PROCESS_SHARED);\n    pthread_mutex_init(&share_memory->mutex, &attr);\n    \n    share_memory->pid = getpid();\n    while (1) {\n        signal(SIGUSR2, (void *)print);\n        //pause()\u4f1a\u4ee4\u76ee\u524d\u7684\u8fdb\u7a0b\u6682\u505c(\u8fdb\u5165\u7761\u7720\u72b6\u6001), \u76f4\u5230\u88ab\u4fe1\u53f7(signal)\u6240\u4e2d\u65ad\u3002\n        pause();\n    }\n    return 0;\n}\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'//file Name: 2.client.c\n\n#include "head.h"\n#include "chat.h"\n\nstruct Message *share_memory = NULL;\n\nint main(int argc, char **argv) {\n    struct Message tmp;\n    int opt;\n    //"n:" \u4ee3\u8868\u6709\u53c2\n    //optarg\u662fgetopt\u7684\u4e09\u4e2a\u5168\u5c40\u53d8\u91cf\u4e4b\u4e00,\u4ee3\u8868\u7d27\u8ddf\u53c2\u6570\n    while ((opt = getopt(argc, argv, "n:")) != -1) {\n        switch (opt) {\n            case \'n\' :\n                strcpy(tmp.name, optarg);\n                break;\n            default :\n                fprintf(stderr, "Usage : %s -n name!\\n", argv[0]);\n                exit(1);\n                break;\n        }\n    }\n    \n    if (argc < 3) {\n        fprintf(stderr, "Usage : %s -n name!\\n", argv[0]);\n        exit(1);\n    }\n\n    int shmid;\n    key_t key = ftok(".", 2011);\n    if ((shmid = shmget(key, sizeof(struct Message), IPC_CREAT | 0666)) < 0) {\n        perror("shmget()");\n        exit(1);\n    }\n\n    if ((share_memory = shmat(shmid, NULL, 0)) == NULL) {\n        perror("shmat()");\n        exit(1);\n    }\n    \n    //\u810f\u6570\u636e,pid <= 0\u4e00\u5b9a\u6ca1\u8d77\u6765\n    if (share_memory->pid <= 0) {\n        fprintf(stderr, "Please run server first!\\n");    \n        exit(1);\n    }\n    \n    while(1) {\n        scanf("%[^\\n]s", tmp.msg);\n        getchar();\n        if (!strlen(tmp.msg)) continue;\n        while (1) {\n            //\u9690\u6027bug msg\u4e3a\u7a7a,\u591a\u4e2aclient\u7aef\u540c\u65f6\u4e0a\u9501\n            if (!strlen(share_memory->msg)) {\n                //\u6301\u6709\u9501\u53ef\u80fd\u963b\u585e\n                pthread_mutex_lock(&share_memory->mutex);\n                break;\n            }\n        }\n        strcpy(share_memory->name, tmp.name);\n        strcpy(share_memory->msg, tmp.msg);\n        pthread_mutex_unlock(&share_memory->mutex);\n        kill(share_memory->pid, SIGUSR2);\n        memset(tmp.msg, 0, sizeof(tmp.msg));\n    }\n\n}\n\n\n')),(0,i.kt)("h2",{id:"4\u6761\u4ef6\u53d8\u91cf"},"4.\u6761\u4ef6\u53d8\u91cf"),(0,i.kt)("h4",{id:"synopsis-3"},"synopsis"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"extern int pthread_cond_init (pthread_cond_t *__restrict __cond,\n                  const pthread_condattr_t *__restrict __cond_attr)\n     __THROW __nonnull ((1));\n\n/* Destroy condition variable COND.  */\nextern int pthread_cond_destroy (pthread_cond_t *__cond)\n     __THROW __nonnull ((1));\n\n/* Wake up one thread waiting for condition variable COND.  */\nextern int pthread_cond_signal (pthread_cond_t *__cond)\n     __THROWNL __nonnull ((1));\n\n\n/* Wait for condition variable COND to be signaled or broadcast.\n   MUTEX is assumed to be locked before.\n\n   This function is a cancellation point and therefore not marked with\n   __THROW.  */\nextern int pthread_cond_wait (pthread_cond_t *__restrict __cond,\n                  pthread_mutex_t *__restrict __mutex)\n     __nonnull ((1, 2))\n")),(0,i.kt)("h4",{id:"example-3"},"example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"    //\u521d\u59cb\u5316\u6761\u4ef6\u53d8\u91cf\n    pthread_condattr_t cond_attr;\n    pthread_condattr_init(&cond_attr);\n    pthread_condattr_setpshared(&cond_attr, PTHREAD_PROCESS_SHARED);\n    pthread_cond_init(&share_memory->cond, &cond_attr);\n    \n    //\u7b49\u5f85\u4fe1\u53f7\n    pthread_cond_wait(&share_memory->cond, &share_memory->mutex);\n\n    //\u53d1\u9001\u4fe1\u53f7\n    pthread_cond_signal(&share_memory->cond);\n\n\npthread_cond_wait\u5fc5\u987b\u653e\u5728pthread_mutex_lock\u548cpthread_mutex_unlock\u4e4b\u95f4\uff0c\n    \u56e0\u4e3a\u4ed6\u8981\u6839\u636e\u5171\u4eab\u53d8\u91cf\u7684\u72b6\u6001\u6765\u51b3\u5b9a\u662f\u5426\u8981\u7b49\u5f85\uff0c\u800c\u4e3a\u4e86\u4e0d\u6c38\u8fdc\u7b49\u5f85\u4e0b\u53bb\u6240\u4ee5\u5fc5\u987b\u8981\u5728lock/unlock\u961f\u4e2d\n\u5171\u4eab\u53d8\u91cf\u7684\u72b6\u6001\u6539\u53d8\u5fc5\u987b\u9075\u5b88lock/unlock\u7684\u89c4\u5219\npthread_cond_signal\u5373\u53ef\u4ee5\u653e\u5728pthread_mutex_lock\u548cpthread_mutex_unlock\u4e4b\u95f4\uff0c\u4e5f\u53ef\u4ee5\u653e\u5728pthread_mutex_lock\u548cpthread_mutex_unlock\u4e4b\u540e\uff0c\u4f46\u662f\u5404\u6709\u4f18\u7f3a\u70b9\u3002\n")),(0,i.kt)("h3",{id:"\u804a\u5929\u5ba42"},"\u804a\u5929\u5ba42"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include "head.h"\n#include "chat.h"\n\nstruct Message *share_memory = NULL;\n\nvoid *print(int signum) {\n    pthread_mutex_lock(&share_memory->mutex);\n    printf(RED"<%s>"NONE " : %s\\n", share_memory->name, share_memory->msg);\n    memset(share_memory->name, 0, sizeof(share_memory->name));\n    memset(share_memory->msg, 0, sizeof(share_memory->msg));\n    pthread_mutex_unlock(&share_memory->mutex);\n}\n\nint main() {\n    int shmid;\n    key_t key = ftok(".", 2011);\n\n    if ((shmid = shmget(key, sizeof(struct Message), IPC_CREAT | 0666)) < 0) {\n        perror("shmget()");\n        exit(1);\n    }\n\n    if ((share_memory = (struct Message *)shmat(shmid, NULL, 0)) == NULL) {\n        perror("shmat()");\n        exit(1);\n    }\n\n    memset(share_memory, 0, sizeof(struct Message));\n    pthread_mutexattr_t attr;\n    pthread_mutexattr_init(&attr);\n    pthread_mutexattr_setpshared(&attr, PTHREAD_PROCESS_SHARED);\n    pthread_mutex_init(&share_memory->mutex, &attr);\n    \n    pthread_condattr_t cond_attr;\n    pthread_condattr_init(&cond_attr);\n    pthread_condattr_setpshared(&cond_attr, PTHREAD_PROCESS_SHARED);\n    pthread_cond_init(&share_memory->cond, &cond_attr);\n\n    //share_memory->pid = getpid();\n    while (1) {\n        //signal(SIGUSR2, (void *)print);\n        //pause()\u4f1a\u4ee4\u76ee\u524d\u7684\u8fdb\u7a0b\u6682\u505c(\u8fdb\u5165\u7761\u7720\u72b6\u6001), \u76f4\u5230\u88ab\u4fe1\u53f7(signal)\u6240\u4e2d\u65ad\u3002\n       // pause();\n        pthread_mutex_lock(&share_memory->mutex);\n        DBG(GREEN"<Debug>"NONE " : wait before\\n");\n        pthread_cond_wait(&share_memory->cond, &share_memory->mutex);\n        DBG(GREEN"<Debug>"NONE " : wait after\\n");\n        printf(RED"<%s>"NONE " : %s\\n", share_memory->name, share_memory->msg);\n        memset(share_memory->name, 0, sizeof(share_memory->name));\n        memset(share_memory->msg, 0, sizeof(share_memory->msg));\n        pthread_mutex_unlock(&share_memory->mutex);\n    }\n    return 0;\n}\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include "head.h"\n#include "chat.h"\n\nstruct Message *share_memory = NULL;\n\nint main(int argc, char **argv) {\n    struct Message tmp;\n    int opt;\n    //"n:" \u4ee3\u8868\u6709\u53c2\n    //optarg\u662fgetopt\u7684\u4e09\u4e2a\u5168\u5c40\u53d8\u91cf\u4e4b\u4e00,\u4ee3\u8868\u7d27\u8ddf\u53c2\u6570\n    while ((opt = getopt(argc, argv, "n:")) != -1) {\n        switch (opt) {\n            case \'n\' :\n                strcpy(tmp.name, optarg);\n                break;\n            default :\n                fprintf(stderr, "Usage : %s -n name!\\n", argv[0]);\n                exit(1);\n                break;\n        }\n    }\n    \n    if (argc < 3) {\n        fprintf(stderr, "Usage : %s -n name!\\n", argv[0]);\n        exit(1);\n    }\n\n    int shmid;\n    key_t key = ftok(".", 2011);\n    if ((shmid = shmget(key, sizeof(struct Message), IPC_CREAT | 0666)) < 0) {\n        perror("shmget()");\n        exit(1);\n    }\n\n    if ((share_memory = shmat(shmid, NULL, 0)) == NULL) {\n        perror("shmat()");\n        exit(1);\n    }\n    \n    while(1) {\n        scanf("%[^\\n]s", tmp.msg);\n        getchar();\n        if (!strlen(tmp.msg)) continue;\n        while (1) {\n            //\u9690\u6027bug msg\u4e3a\u7a7a,\u591a\u4e2aclient\u7aef\u540c\u65f6\u4e0a\u9501\n            if (!strlen(share_memory->msg)) {\n                pthread_mutex_lock(&share_memory->mutex);\n                break;\n            }\n        }\n        strcpy(share_memory->name, tmp.name);\n        strcpy(share_memory->msg, tmp.msg);\n        pthread_mutex_unlock(&share_memory->mutex);\n        //kill(share_memory->pid, SIGUSR2);\n        pthread_cond_signal(&share_memory->cond);\n        DBG(GREEN"<Debug>"NONE" : AFTER signal\\n");\n        memset(tmp.msg, 0, sizeof(tmp.msg));\n    }\n\n}\n\n\n')),(0,i.kt)("h2",{id:"5\u7ba1\u9053"},"5.\u7ba1\u9053"),(0,i.kt)("h4",{id:"synopsis-4"},"synopsis"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"int pipe(int pipefd[2]);\nFILE *popen(const char *command, const char *type);\n  int pclose(FILE *stream);\npipefd[0] refers to the read end of the pipe.  \n pipefd[1] refers to the write end of the pipe.\n")),(0,i.kt)("h4",{id:"example-4"},"example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'            int pipefd[2];\n            if (cpid == 0) {    /* Child reads from pipe */\n               close(pipefd[1]);          /* Close unused write end */\n\n               while (read(pipefd[0], &buf, 1) > 0)\n                   write(STDOUT_FILENO, &buf, 1);\n\n               write(STDOUT_FILENO, "\\n", 1);\n               close(pipefd[0]);\n               _exit(EXIT_SUCCESS);\n\n           } else {            /* Parent writes argv[1] to pipe */\n               close(pipefd[0]);          /* Close unused read end */\n               write(pipefd[1], argv[1], strlen(argv[1]));\n               close(pipefd[1]);          /* Reader will see EOF */\n               wait(NULL);                /* Wait for child */\n               exit(EXIT_SUCCESS);\n           }\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'pid_t pid;\n    int pipefd[2];\n    char buffer[1024];\n    if ((pid = fork()) < 0) {\n        perror("fork()");\n        exit(1);\n    }\n    \n    if (pid == 0) {\n        close(pipefd[0]);\n        while (1) {\n            memset(buffer, 0, sizeof(buffer));\n            scanf("%s", buffer);\n            write(pipefd[1], buffer, strlen(buffer));\n        }\n    } else {\n        close(pipefd[1]);\n        while (1) {\n            read(pipefd[0], buffer, sizeof(buffer));\n            printf("%s\\n", buffer);\n            memset(buffer, 0, sizeof(buffer));\n        }\n    }\n    \n\n\n    FILE *fp;\n    char buff[1024] = {0};\n    //\u62a5\u9519512 \u548c 2\u7684\u5173\u7cfb \n    if ((fp = popen("ls /etc", "r")) == NULL) {\n        perror("m_open()");\n        exit(1);\n    }\n\n    while (fgets(buff, sizeof(buff), fp) != NULL) {\n        printf("%s", buff);\n        bzero(buff, sizeof(buff));\n    } \n    \n    int status = pclose(fp);\n\n')),(0,i.kt)("h3",{id:"my_popen\u7684\u5b9e\u73b0"},"my_popen\u7684\u5b9e\u73b0"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"#include \"head.h\"\nstatic pid_t *childpid = NULL;\nstatic int max;\n\nFILE *m_popen(const char *cmd, const char *type) {\n    int pfd[2];\n    FILE *fp;\n    pid_t pid;\n    if ((type[0] != 'r' || type[0] != 'w') && type[1] != '\\0') {\n        errno = EINVAL;\n        return NULL;\n    }\n    if (childpid == NULL) {\n        max = sysconf(_SC_OPEN_MAX);\n        if ((childpid = (pid_t *)calloc(max, sizeof(pid_t))) == NULL)\n            return NULL;\n    }\n\n    if (pipe(pfd) < 0) {\n        return NULL;\n    }\n\n    if ((pid = fork()) < 0) {\n        return NULL;\n    }\n\n    if (pid == 0) {\n        if (type[0] == 'r'){\n            close(pfd[0]);\n            if (pfd[1] != STDOUT_FILENO) {\n                dup2(pfd[1], STDOUT_FILENO);\n                close(pfd[1]);\n            }\n        } else {\n            close(pfd[1]);\n            if (pfd[0] != STDIN_FILENO) {\n                dup2(pfd[0], STDIN_FILENO);\n                close(pfd[0]);\n            }\n        }\n        for (int i = 0; i < max; i++) {\n            if (childpid[i] > 0)\n                close(i);\n        }\n\n        execl(\"/bin/sh\", \"sh\", \"-c\", cmd, NULL);\n        exit(0);\n    }\n\n    if (type[0] == 'r') {\n        close(pfd[1]);\n        if ((fp = fdopen(pfd[0], type)) == NULL)\n            return NULL;\n    } else {\n        close(pfd[0]);\n        if ((fp = fdopen(pfd[1], type)) == NULL)\n            return NULL;\n    }\n    childpid[fileno(fp)] = pid;\n    return fp;\n}\n\nint m_pclose(FILE *fp) {\n    int status, fd, pid;\n    if (childpid == NULL) {\n        errno = EINVAL;\n        return -1;\n    }\n    fd = fileno(fp);\n    pid = childpid[fd];\n    if (pid == 0) {\n        errno = EINVAL;\n        return -1;\n    }\n    childpid[fd] = 0;\n    close(fd);\n    waitpid(pid, &status, 0);\n    return status;\n}\n")),(0,i.kt)("h2",{id:"\u7ebf\u7a0b\u6c60"},"\u7ebf\u7a0b\u6c60"),(0,i.kt)("h3",{id:"\u6d4b\u8bd5\u6587\u4ef6"},"\u6d4b\u8bd5\u6587\u4ef6"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include "head.h"\n#include "thread_pool.h"\n\n#define SIZE 5 \n#define THREADNUM 5 \n#define BUFFSIZE 512\n\nint main() {\n    pthread_t tid[THREADNUM];\n    struct task_queue taskQueue;\n    taskQueue = *task_queue_init(&taskQueue, SIZE);\n    DBG(GREEN"<Debug>"NONE " :head = %d. tail = %d, cnt = %d, size = %d\\n", taskQueue.head, taskQueue.tail ,taskQueue.cnt, taskQueue.size);\n    \n    for (int i = 0; i < THREADNUM; ++i) {\n         int id =  pthread_create(&tid[i], NULL, thread_run, (void *)&taskQueue);\n        //DBG(GREEN"<Debug>"NONE " : Created = %d\\n", id);\n    }\n        DBG(GREEN"<Debug>"NONE " : Created success\\n");\n\n    while (1) {\n        FILE *fp = fopen("./thread_pool.c", "r");\n        if (fp == NULL) {\n            perror("fopen()");\n            exit(1);\n        }\n\n        char buff[BUFFSIZE] = {0};\n        \n        while (fgets(buff, BUFFSIZE, fp) != NULL) {\n            task_queue_push(&taskQueue, buff);\n            memset(buff, 0, sizeof(buff));\n            usleep(1);\n        }\n        \n        fclose(fp);\n        //break;\n        /*\n        scanf("%[^\\n]s", buff);\n        getchar();\n        DBG(GREEN"<stdin>"NONE "before : %s\\n", buff);\n        task_queue_push(&taskQueue, buff);\n        DBG(GREEN"<stdin>"NONE "after : %s\\n", buff);\n        */\n    }\n    //task_queue_clear(&taskQueue);\n    for (int i = 0; i < THREADNUM; ++i) {\n        pthread_join(tid[i], NULL);\n    }\n    return 0;\n}\n\n')),(0,i.kt)("h3",{id:"\u5934\u6587\u4ef6"},"\u5934\u6587\u4ef6"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#ifndef _THREAD_POOL_H\n#define _THREAD_POOL_H\n\n#include "head.h"\n\nstruct task_queue {\n    int head;\n    int tail;\n    int size;\n    int cnt;\n    char **data;\n    pthread_mutex_t mutex;\n    pthread_cond_t cond;\n};\n\nstruct task_queue * task_queue_init(struct task_queue *taskQueue, int size);\n\nint task_queue_push(struct task_queue *taskQueue, char *str);\nchar *task_queue_pop(struct task_queue *taskQueue);\nvoid task_queue_clear(struct task_queue *taskQueue);\nvoid *thread_run(void *arg);\n\n#endif\n\n')),(0,i.kt)("h3",{id:"\u6e90\u6587\u4ef6"},"\u6e90\u6587\u4ef6"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include "thread_pool.h" \n#include "head.h"\n\nstruct task_queue * task_queue_init(struct task_queue *taskQueue, int size) {\n    taskQueue = (struct task_queue *)malloc(sizeof(struct task_queue));\n    taskQueue->data = (char **)calloc( size, sizeof(char *));\n    taskQueue->head = taskQueue->tail = 0;\n    taskQueue->cnt = 0;\n    taskQueue->size = size;\n    DBG(BLUE"<init>"NONE "head = %d, tail = %d, cnt = %d, size = %d\\n", taskQueue->head, taskQueue->tail ,taskQueue->cnt, taskQueue->size);\n\n    if (pthread_mutex_init(&(taskQueue->mutex), NULL) != 0) {\n        printf("mutex init error");\n        return NULL;\n    }\n    if (pthread_cond_init(&(taskQueue->cond), NULL) != 0) {\n        printf("cond init error");\n        return NULL;\n    }\n    return taskQueue;\n}\n\nint task_queue_push(struct task_queue *taskQueue, char *str) {\n    pthread_mutex_lock(&taskQueue->mutex);\n    if (taskQueue == NULL)  {\n        DBG(BLUE"<PUSH>"NONE " NULL");\n        pthread_mutex_unlock(&taskQueue->mutex);\n        return -1;\n    }\n    if (taskQueue->cnt > taskQueue->size) {\n        DBG(BLUE"<PUSH Full>"NONE " cnt = %d, size = %d\\n", taskQueue->cnt, taskQueue->size);\n        pthread_mutex_unlock(&taskQueue->mutex);\n        return 0;\n    } \n    //DBG(BLUE"<PUSH>"NONE " %s\\n", str);\n    (taskQueue->data)[taskQueue->tail] = strdup(str);\n    taskQueue->tail++;\n    DBG(BLUE"<PUSH>"NONE "%s\\n", taskQueue->data[taskQueue->tail - 1]);\n    if (taskQueue->tail == taskQueue->size) taskQueue->tail -= taskQueue->size;\n    taskQueue->cnt += 1;\n\n    //pthread_cond_broadcast(&(taskQueue->cond));\n    pthread_mutex_unlock(&taskQueue->mutex);\n    pthread_cond_signal(&(taskQueue->cond));\n    return 1;\n}\n\nchar *task_queue_pop(struct task_queue *taskQueue) {\n    //pthread_mutex_lock(&taskQueue->mutex);\n    if (taskQueue == NULL || taskQueue->cnt == 0) {\n        pthread_mutex_unlock(&taskQueue->mutex);\n        return NULL;\n    }\n    int idx = taskQueue->head++;\n    DBG(BLUE"<POP>"NONE "%s\\n", taskQueue->data[taskQueue->head - 1]);\n    if (taskQueue->head == taskQueue->size) taskQueue->head -= taskQueue->size;\n    taskQueue->cnt -= 1;\n    //pthread_cond_broadcast(&(taskQueue->cond);\n    //pthread_mutex_unlock(&taskQueue->mutex);\n    return taskQueue->data[idx];\n}\n\nvoid task_queue_clear(struct task_queue *taskQueue) {\n    \n    if (taskQueue == NULL) return ;\n    free(taskQueue->data);\n    free(taskQueue);\n    return ;\n}\n\nvoid *thread_run(void *arg) {\n    printf("thread_run ready\\n");\n    pthread_detach(pthread_self());\n    struct task_queue *taskQueue = (struct task_queue *)arg;\n    while (1) {\n        pthread_mutex_lock(&taskQueue->mutex);\n        if (taskQueue->cnt == 0)  {\n            DBG(YELLOW"thread <%ld> "NONE" waiting\\n", pthread_self());\n            pthread_cond_wait(&(taskQueue->cond), &(taskQueue->mutex));\n            //pause();\n        }\n        //DBG(BLUE"<run>"NONE"thread_run_lock\\n");\n        char *str = task_queue_pop(taskQueue);\n        printf(RED"<%ld>"NONE"%s\\n", pthread_self(), str);\n        if (str != NULL) free(str);\n        pthread_mutex_unlock(&taskQueue->mutex);\n        //sleep(1);\n    }\n}\n\n')),(0,i.kt)("h3",{id:"\u7ebf\u7a0b\u6c60-\u589e\u5220"},"\u7ebf\u7a0b\u6c60-\u589e\u5220"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'struct task_queue * task_queue_init(struct task_queue *taskQueue, int size) {\n    taskQueue = (struct task_queue *)malloc(sizeof(struct task_queue));\n    taskQueue->data = (char **)calloc(size, sizeof(void *));\n    taskQueue->head = taskQueue->tail = 0;\n    taskQueue->cnt = 0;\n    taskQueue->size = size;\n    DBG(BLUE"<init>"NONE "head = %d, tail = %d, cnt = %d, size = %d\\n", taskQueue->head, taskQueue->tail ,taskQueue->cnt, taskQueue->size);\n\n    if (pthread_mutex_init(&(taskQueue->mutex), NULL) != 0) {\n        printf("mutex init error");\n        return NULL;\n    }\n    if (pthread_cond_init(&(taskQueue->cond), NULL) != 0) {\n        printf("cond init error");\n        return NULL;\n    }\n    return taskQueue;\n}\n\nint task_queue_push(struct task_queue *taskQueue, char *str) {\n    pthread_mutex_lock(&taskQueue->mutex);\n    if (taskQueue == NULL)  {\n        DBG(BLUE"<PUSH>"NONE " : NULL");\n        pthread_mutex_unlock(&taskQueue->mutex);\n        return -1;\n    }\n    if (taskQueue->cnt >= taskQueue->size) {\n        DBG(BLUE"<PUSH Full>"NONE " : cnt = %d, size = %d\\n", taskQueue->cnt, taskQueue->size);\n        pthread_mutex_unlock(&taskQueue->mutex);\n        return 0;\n    } \n    //DBG(BLUE"<PUSH>"NONE " %s\\n", str);\n    taskQueue->data[taskQueue->tail] = str;\n    taskQueue->tail++;\n    DBG(BLUE"<PUSH>"NONE " : %s\\n", taskQueue->data[taskQueue->tail - 1]);\n    if (taskQueue->tail == taskQueue->size) taskQueue->tail = 0;\n    taskQueue->cnt += 1;\n\n    pthread_cond_signal(&(taskQueue->cond));\n    pthread_mutex_unlock(&taskQueue->mutex);\n    return 1;\n}\n\nchar *task_queue_pop(struct task_queue *taskQueue) {\n    pthread_mutex_lock(&taskQueue->mutex);\n    if (taskQueue == NULL) {\n        pthread_mutex_unlock(&taskQueue->mutex);\n        return NULL;\n    }\n\n    DBG(BLUE"<POP>"NONE "in pop!");\n    //\u60ca\u7fa4\u6548\u5e94 while \u800c\u975e if\n    while (taskQueue->cnt == 0) {\n        DBG(YELLOW"thread <%ld> "NONE" waiting\\n", pthread_self());\n        pthread_cond_wait(&taskQueue->cond, &taskQueue->mutex);\n    }\n    char *str = taskQueue->data[taskQueue->head++];\n    taskQueue->cnt -= 1;\n    DBG(BLUE"<POP>"NONE "%s cnt = %d\\n", str, taskQueue->cnt);\n    if (taskQueue->head == taskQueue->size) taskQueue->head = 0;\n    //pthread_cond_broadcast(&(taskQueue->cond);\n    pthread_mutex_unlock(&taskQueue->mutex);\n    return str;\n}\n\nvoid task_queue_clear(struct task_queue *taskQueue) {\n    \n    if (taskQueue == NULL) return ;\n    free(taskQueue->data);\n    free(taskQueue);\n    return ;\n}\n\nvoid *thread_run(void *arg) {\n    printf("thread_run ready\\n");\n    pthread_detach(pthread_self());\n    struct task_queue *taskQueue = (struct task_queue *)arg;\n    while (1) {\n        //DBG(BLUE"<run>"NONE"thread_run_lock\\n");\n        char *str = task_queue_pop(taskQueue);\n        printf(RED"<%ld>"NONE"%s\\n", pthread_self(), str);\n        //sleep(1);\n    }\n}\n')),(0,i.kt)("h2",{id:"6\u6d88\u606f\u961f\u5217"},"6.\u6d88\u606f\u961f\u5217"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"\u975e\u4eb2\u7f18\u901a\u8fc7key_t ftok(path, id);"),(0,i.kt)("li",{parentName:"ol"},"\u516c\u5171\u5934\u6587\u4ef6key"),(0,i.kt)("li",{parentName:"ol"},"\u4eb2\u7f18\u8fdb\u7a0b")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n#include <unistd.h>\n#include <errno.h>\n#include <sys/types.h>\n#include <sys/ipc.h>\n#include <sys/msg.h>\n\nstruct msgbuf {\n    long mtype;\n    char mtext[80];\n};\n\nstatic void\nusage(char *prog_name, char *msg)\n{\n    if (msg != NULL)\n    fputs(msg, stderr);\n\n    fprintf(stderr, "Usage: %s [options]\\n", prog_name);\n    fprintf(stderr, "Options are:\\n");\n    fprintf(stderr, "-s        send message using msgsnd()\\n");\n    fprintf(stderr, "-r        read message using msgrcv()\\n");\n    fprintf(stderr, "-t        message type (default is 1)\\n");\n    fprintf(stderr, "-k        message queue key (default is 1234)\\n");\n    exit(EXIT_FAILURE);\n}\n\nstatic void\nsend_msg(int qid, int msgtype)\n{\n    struct msgbuf msg;\n    time_t t;\n\n    msg.mtype = msgtype;\n\n    time(&t);\n    snprintf(msg.mtext, sizeof(msg.mtext), "a message at %s",\n             ctime(&t));\n\n    if (msgsnd(qid, (void *) &msg, sizeof(msg.mtext),\n               IPC_NOWAIT) == -1) {\n                   perror("msgsnd error");\n                   exit(EXIT_FAILURE);\n               }\n    printf("sent: %s\\n", msg.mtext);\n}\n\nstatic void\nget_msg(int qid, int msgtype)\n{\n    struct msgbuf msg;\n\n    if (msgrcv(qid, (void *) &msg, sizeof(msg.mtext), msgtype,\n               MSG_NOERROR | IPC_NOWAIT) == -1) {\n                   if (errno != ENOMSG) {\n                       perror("msgrcv");\n                       exit(EXIT_FAILURE);\n                   }\n                   printf("No message available for msgrcv()\\n");\n               } else\n    printf("message received: %s\\n", msg.mtext);\n}\n\nint\nmain(int argc, char *argv[])\n{\n    int qid, opt;\n    int mode = 0;               /* 1 = send, 2 = receive */\n    int msgtype = 1;\n    int msgkey = 1234;\n\n    while ((opt = getopt(argc, argv, "srt:k:")) != -1) {\n        switch (opt) {\n            case \'s\':\n            mode = 1;\n            break;\n            case \'r\':\n            mode = 2;\n            break;\n            case \'t\':\n            msgtype = atoi(optarg);\n            if (msgtype <= 0)\n            usage(argv[0], "-t option must be greater than 0\\n");\n            break;\n            case \'k\':\n            msgkey = atoi(optarg);\n            break;\n            default:\n            usage(argv[0], "Unrecognized option\\n");\n        }\n    }\n\n    if (mode == 0)\n    usage(argv[0], "must use either -s or -r option\\n");\n\n    qid = msgget(msgkey, IPC_CREAT | 0666);\n\n    if (qid == -1) {\n        perror("msgget");\n        exit(EXIT_FAILURE);\n    }\n\n    if (mode == 2)\n    get_msg(qid, msgtype);\n    else\n    send_msg(qid, msgtype);\n\n    exit(EXIT_SUCCESS);\n}\n\n')),(0,i.kt)("h2",{id:"7\u4fe1\u53f7\u91cfpv\u64cd\u4f5c"},"7.\u4fe1\u53f7\u91cfPV\u64cd\u4f5c"),(0,i.kt)("p",null,"\u4fe1\u53f7\u91cf\u5e7f\u6cdb\u7528\u4e8e\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u95f4\u7684\u540c\u6b65\u548c\u4e92\u65a5\uff0c\u4fe1\u53f7\u91cf\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u8ba1\u6570\u5668\uff0c\u5b83\u88ab\u7528\u6765\u63a7\u5236\u5bf9\u516c\u5171\u8d44\u6e90\u7684\u8bbf\u95ee\uff0c\u5206\u4e3a\u4e24\u79cdPOSIX\u4fe1\u53f7\u91cf\u548cSystemV\u4fe1\u53f7\u91cf"),(0,i.kt)("h3",{id:"posix\u4fe1\u53f7\u91cf"},"POSIX\u4fe1\u53f7\u91cf"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u6709\u540d\u4fe1\u53f7\u91cf\uff0c\u7528\u4e8e\u8fdb\u7a0b\u95f4\u540c\u6b65"),(0,i.kt)("li",{parentName:"ul"},"\u65e0\u540d\u4fe1\u53f7\u91cf\uff0c\u7528\u4e8e\u7ebf\u7a0b\u95f4\u540c\u6b65",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"posix\u4fe1\u53f7\u91cf\u4e00\u822c\u662f\u5355\u4e2a\u8ba1\u91cf\u4fe1\u53f7\uff0c\u5168\u7a0b\u64cd\u4f5c\u4e00\u4e2a\u4fe1\u53f7\u91cf ")))),(0,i.kt)("h3",{id:"systemv\u4fe1\u53f7\u91cf\u7528\u4e8e\u8fdb\u7a0b\u95f4\u540c\u6b65"},"SystemV\u4fe1\u53f7\u91cf\uff0c\u7528\u4e8e\u8fdb\u7a0b\u95f4\u540c\u6b65"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u8fdb\u7a0b\u4e2d\u4f7f\u7528\u5171\u4eab\u5185\u5b58\u5b9e\u73b0\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff0c\u4f46\u4ed6\u5e76\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u9700\u8981\u901a\u8fc7\u4fe1\u53f7\u91cf\u8fdb\u884c\u540c\u6b65")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u4e00\u822c\u8bf4\u7684systemV\u4fe1\u53f7\u91cf\u662f\u8ba1\u91cf\u4fe1\u53f7\u96c6\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u4fe1\u53f7\u91cf\u8fdb\u884c\u540c\u6b65")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"API"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int semget(key_t key, int nsems, int semflag);")," ")))),(0,i.kt)("h2",{id:""}),(0,i.kt)("p",null,"POSIX \u4fe1\u53f7\u91cf\u4e0eSYSTEM V\u4fe1\u53f7\u91cf\u7684\u6bd4\u8f83\n\u5bf9POSIX\u6765\u8bf4\uff0c\u4fe1\u53f7\u91cf\u662f\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u5e38\u7528\u4e8e\u7ebf\u7a0b\u95f4\u540c\u6b65\u3002\n\u800cSYSTEM V\u4fe1\u53f7\u91cf\u5219\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u4fe1\u53f7\u91cf\u7684\u96c6\u5408\uff0c\u5b83\u5bf9\u5e94\u7684\u662f\u4e00\u4e2a\u4fe1\u53f7\u91cf\u7ed3\u6784\u4f53\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u662f\u4e3aSYSTEM V IPC\u670d\u52a1\u7684\uff0c\u4fe1\u53f7\u91cf\u53ea\u4e0d\u8fc7\u662f\u5b83\u7684\u4e00\u90e8\u5206\u3002\u5e38\u7528\u4e8e\u8fdb\u7a0b\u95f4\u540c\u6b65\u3002"),(0,i.kt)("p",null,"POSIX\u4fe1\u53f7\u91cf\u7684\u5f15\u7528\u5934\u6587\u4ef6\u662f",(0,i.kt)("inlineCode",{parentName:"p"},"<semaphore.h>"),"\uff0c\u800cSYSTEM V\u4fe1\u53f7\u91cf\u7684\u5f15\u7528\u5934\u6587\u4ef6\u662f",(0,i.kt)("inlineCode",{parentName:"p"},"<sys/sem.h>")),(0,i.kt)("p",null,"\u4ece\u4f7f\u7528\u7684\u89d2\u5ea6\uff0cSystem V\u4fe1\u53f7\u91cf\u662f\u590d\u6742\u7684\uff0c\u800cPosix\u4fe1\u53f7\u91cf\u662f\u7b80\u5355\u3002\u6bd4\u5982\uff0cPOSIX\u4fe1\u53f7\u91cf\u7684\u521b\u5efa\u548c\u521d\u59cb\u5316\u6216PV\u64cd\u4f5c\u5c31\u5f88\u975e\u5e38\u65b9\u4fbf\u3002"),(0,i.kt)("p",null,"\u539f\u5b50:\u4e0d\u53ef\u518d\u5206"),(0,i.kt)("p",null,"\u94f6\u884c\u5bb6\u7b97\u6cd5"),(0,i.kt)("p",null,"\u8bfb\u5199\u8005\u95ee\u9898"),(0,i.kt)("p",null,"\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u95ee\u9898"),(0,i.kt)("p",null,"PV\u64cd\u4f5c\u81ea\u5e26\u9501"),(0,i.kt)("h4",{id:"\u7ba1\u9053\u4e0e\u5171\u4eab\u5185\u5b58\u7684\u533a\u522b"},"\u7ba1\u9053\u4e0e\u5171\u4eab\u5185\u5b58\u7684\u533a\u522b"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u7ba1\u9053\u9700\u8981\u5728\u5185\u6838\u548c\u7528\u6237\u7a7a\u95f4\u8fdb\u884c\u56db\u6b21\u7684\u6570\u636e\u62f7\u8d1d\uff1a\u7531\u7528\u6237\u7a7a\u95f4\u7684buf\u4e2d\u5c06\u6570\u636e\u62f7\u8d1d\u5230\u5185\u6838\u4e2d -> \u5185\u6838\u5c06\u6570\u636e\u62f7\u8d1d\u5230\u5185\u5b58\u4e2d -> \u5185\u5b58\u5230\u5185\u6838 -> \u5185\u6838\u5230\u7528\u6237\u7a7a\u95f4\u7684buf\u3002\u800c\u5171\u4eab\u5185\u5b58\u5219\u53ea\u62f7\u8d1d\u4e24\u6b21\u6570\u636e\uff1a\u7528\u6237\u7a7a\u95f4\u5230\u5185\u5b58 -> \u5185\u5b58\u5230\u7528\u6237\u7a7a\u95f4\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u7ba1\u9053\u7528\u5faa\u73af\u961f\u5217\u5b9e\u73b0\uff0c\u8fde\u7eed\u4f20\u9001\u6570\u636e\u53ef\u4ee5\u4e0d\u9650\u5927\u5c0f\u3002\u5171\u4eab\u5185\u5b58\u6bcf\u6b21\u4f20\u9012\u6570\u636e\u5927\u5c0f\u662f\u56fa\u5b9a\u7684\uff1b"),(0,i.kt)("li",{parentName:"ul"},"\u5171\u4eab\u5185\u5b58\u53ef\u4ee5\u968f\u673a\u8bbf\u95ee\u88ab\u6620\u5c04\u6587\u4ef6\u7684\u4efb\u610f\u4f4d\u7f6e\uff0c\u7ba1\u9053\u53ea\u80fd\u987a\u5e8f\u8bfb\u5199\uff1b\n\u7ba1\u9053\u53ef\u4ee5\u72ec\u7acb\u5b8c\u6210\u6570\u636e\u7684\u4f20\u9012\u548c\u901a\u77e5\u673a\u5236\uff0c\u5171\u4eab\u5185\u5b58\u9700\u8981\u501f\u52a9\u5176\u4ed6\u901a\u8baf\u65b9\u5f0f\u8fdb\u884c\u6d88\u606f\u4f20\u9012\u3002")),(0,i.kt)("p",null,"\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e24\u8005\u4e4b\u95f4\u6700\u5927\u7684\u533a\u522b\u5c31\u662f\uff1a \u5171\u4eab\u5185\u5b58\u533a\u662f\u6700\u5feb\u7684\u53ef\u7528IPC\u5f62\u5f0f\uff0c\u4e00\u65e6\u8fd9\u6837\u7684\u5185\u5b58\u533a\u6620\u5c04\u5230\u5171\u4eab\u5b83\u7684\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u95f4\u6570\u636e\u7684\u4f20\u9012\uff0c\u5c31\u4e0d\u518d\u901a\u8fc7\u6267\u884c\u4efb\u4f55\u8fdb\u5165\u5185\u6838\u7684\u7cfb\u7edf\u8c03\u7528\u6765\u4f20\u9012\u5f7c\u6b64\u7684\u6570\u636e\uff0c\u8282\u7701\u4e86\u65f6\u95f4\u3002"),(0,i.kt)("h2",{id:"\u533f\u540d\u7ba1\u9053"},"\u533f\u540d\u7ba1\u9053"),(0,i.kt)("p",null,"\u533f\u540d\u7ba1\u9053\u662f\u5728\u5177\u6709\u516c\u5171\u7956\u5148\u7684\u8fdb\u7a0b\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u4e00\u79cd\u65b9\u5f0f\u3002"),(0,i.kt)("p",null,"\u524d\u9762\u5728\u4ecb\u7ecd\u8fdb\u7a0b\u7684\u521b\u5efa\u65f6\u8bb2\u5230\uff0c\u7531\u7236\u8fdb\u7a0b\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\u5c06\u4f1a\u8d4b\u503c\u7236\u8fdb\u7a0b\u5305\u62ec\u6587\u4ef6\u5728\u5185\u7684\u4e00\u4e9b\u8d44\u6e90\u3002\u5982\u679c\u7236\u8fdb\u7a0b\u521b\u5efa\u5b50\u8fdb\u7a0b\u4e4b\u524d\u521b\u5efa\u4e86\u4e00\u4e2a\u6587\u4ef6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6587\u4ef6\u7684\u63cf\u8ff0\u7b26\u5c31\u4f1a\u88ab\u7236\u8fdb\u7a0b\u5728\u968f\u540e\u6240\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\u6240\u5171\u4eab\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7236\u3001\u5b50\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u6587\u4ef6\u8fdb\u884c\u901a\u4fe1\u3002\u5982\u679c\u901a\u4fe1\u7684\u53cc\u65b9\u4e00\u65b9\u53ea\u80fd\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff0c\u800c\u53e6\u4e00\u65b9\u53ea\u80fd\u8fdb\u884c\u5199\u64cd\u4f5c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6587\u4ef6\u5c31\u662f\u4e00\u4e2a\u53ea\u80fd\u5355\u65b9\u5411\u4f20\u9001\u6d88\u606f\u7684\u7ba1\u9053\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:t(83144).Z})),(0,i.kt)("p",null,"\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u51fd\u6570pipe()\u521b\u5efa\u4e00\u4e2a\u7ba1\u9053\u3002\u51fd\u6570pipe()\u7684\u539f\u578b\u5982\u4e0b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"int pipe(int fildes[2]);\n\u4e0e\u8be5\u51fd\u6570pipe()\u76f8\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528sys_pipe()\u7684\u539f\u578b\u5982\u4e0b\uff1a\n\nasmlinkage int sys_pipe(unsigned long __user * fildes);\n")),(0,i.kt)("p",null,"\u4ece\u672c\u8d28\u4e0a\u6765\u8bf4\uff0cpipe()\u51fd\u6570\u7684\u529f\u80fd\u5c31\u662f\u521b\u5efa\u4e00\u4e2a\u5185\u5b58\u6587\u4ef6\uff0c\u4f46\u4e0e\u521b\u5efa\u666e\u901a\u6587\u4ef6\u7684\u51fd\u6570\u4e0d\u540c\uff0c\u51fd\u6570pipe()\u5c06\u5728\u53c2\u6570fildes\u4e2d\u4e3a\u8fdb\u7a0b\u8fd4\u56de\u8fd9\u4e2a\u6587\u4ef6\u7684\u4e24\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26fildes","[0]","\u548cfildes","[1]","\u3002\u5176\u4e2d\uff0cfildes","[0]","\u662f\u4e00\u4e2a\u5177\u6709\u201c\u53ea\u8bfb\u201d\u5c5e\u6027\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0cfildes","[1]","\u662f\u4e00\u4e2a\u5177\u6709\u201c\u53ea\u5199\u201d\u5c5e\u6027\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5373\u8fdb\u7a0b\u901a\u8fc7fildes","[0]","\u53ea\u80fd\u8fdb\u884c\u6587\u4ef6\u7684\u8bfb\u64cd\u4f5c\uff0c\u800c\u901a\u8fc7fildes","[1]","\u53ea\u80fd\u8fdb\u884c\u6587\u4ef6\u7684\u5199\u64cd\u4f5c\u3002"),(0,i.kt)("p",null,"\u8fd9\u6837\uff0c\u5c31\u4f7f\u5f97\u8fd9\u4e2a\u6587\u4ef6\u50cf\u4e00\u6bb5\u53ea\u80fd\u5355\u5411\u6d41\u901a\u7684\u7ba1\u9053\u4e00\u6837\uff0c\u4e00\u5934\u4e13\u95e8\u7528\u6765\u8f93\u5165\u6570\u636e\uff0c\u53e6\u4e00\u5934\u4e13\u95e8\u7528\u6765\u8f93\u51fa\u6570\u636e\uff0c\u6240\u4ee5\u79f0\u4e3a\u7ba1\u9053\u3002\u7531\u4e8e\u8fd9\u79cd\u6587\u4ef6\u6ca1\u6709\u6587\u4ef6\u540d\uff0c\u4e0d\u80fd\u88ab\u975e\u4eb2\u8fdb\u7a0b\u6240\u6253\u5f00\uff0c\u53ea\u80fd\u7528\u4e8e\u4eb2\u5c5e\u8fdb\u7a0b\u95f4\u7684\u901a\u4fe1\uff0c\u6240\u4ee5\u8fd9\u79cd\u6ca1\u6709\u540d\u79f0\u7684\u6587\u4ef6\u5f62\u6210\u7684\u901a\u4fe1\u7ba1\u9053\u53eb\u505a\u201c\u533f\u540d\u7ba1\u9053\u201d\u3002"),(0,i.kt)("p",null,"\u663e\u7136\uff0c\u5982\u679c\u7236\u8fdb\u7a0b\u521b\u5efa\u7684\u8fd9\u79cd\u6587\u4ef6\u53ea\u662f\u7528\u6765\u901a\u4fe1\uff0c\u90a3\u4e48\u5b83\u611f\u5174\u8da3\u7684\u53ea\u662f\u8be5\u6587\u4ef6\u6240\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u6240\u4ee5\u4e5f\u5c31\u6ca1\u6709\u5fc5\u8981\u521b\u5efa\u4e00\u4e2a\u6b63\u5f0f\u6587\u4ef6\uff0c\u53ea\u9700\u521b\u5efa\u4e00\u4e2a\u53ea\u5b58\u5728\u4e8e\u5185\u5b58\u7684\u4e34\u65f6\u6587\u4ef6\u3002\u4ece\u8fd9\u4e00\u70b9\u6765\u770b\uff0c\u533f\u540d\u7ba1\u9053\u4e0e\u5171\u4eab\u5185\u5b58\u5177\u6709\u5171\u540c\u70b9\uff0c\u53ea\u4e0d\u8fc7\u533f\u540d\u7ba1\u9053\u65f6\u5355\u5411\u901a\u4fe1\uff0c\u800c\u4e14\u8fd9\u4e2a\u901a\u4fe1\u53ea\u80fd\u5728\u4eb2\u5c5e\u8fdb\u7a0b\u95f4\u8fdb\u884c\u3002"),(0,i.kt)("p",null,"\u4e3a\u652f\u6301\u533f\u540d\u7ba1\u9053\uff0c\u5185\u6838\u521d\u59cb\u5316\u65f6\u7531\u5185\u6838\u51fd\u6570kernel_mount()\u5b89\u88c5\u4e86\u4e00\u79cd\u7279\u6b8a\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u5728\u8be5\u7cfb\u7edf\u4e2d\u6240\u521b\u5efa\u7684\u90fd\u662f\u4e34\u65f6\u6587\u4ef6\u3002"),(0,i.kt)("p",null,"\u7ba1\u9053\u5b9e\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a\u88ab\u5f53\u505a\u6587\u4ef6\u6765\u7ba1\u7406\u7684\u5185\u5b58\u7f13\u51b2\u533a"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:t(2805).Z})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:t(17763).Z})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u5728\u786e\u5b9a\u7ba1\u9053\u7684\u4f20\u8f93\u65b9\u5411\u4e4b\u540e\uff0c\u5728\u7236\u8fdb\u7a0b\u4e2d\u5173\u95ed\uff08close()\uff09\u6587\u4ef6\u63cf\u8ff0\u7b26fildes","[0]","\uff0c\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5173\u95ed\uff08close()\uff09\u6587\u4ef6\u63cf\u8ff0\u7b26fildes","[1]","\uff0c\u4e8e\u662f\u7ba1\u9053\u7684\u8fde\u63a5\u60c5\u51b5\u5c31\u53d8\u6210\u5982\u4e0b\u60c5\u51b5\u7684\u5355\u5411\u4f20\u8f93\u7ba1\u9053\uff1a")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:t(71237).Z})),(0,i.kt)("p",null,"\u533f\u540d\u7ba1\u9053\u5177\u6709\u5982\u4e0b\u7279\u70b9\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u7531\u4e8e\u8fd9\u79cd\u7ba1\u9053\u6ca1\u6709\u5176\u4ed6\u540c\u6b65\u63aa\u65bd\uff0c\u6240\u4ee5\u4e3a\u4e86\u4e0d\u4ea7\u751f\u6df7\u4e71\uff0c\u5b83\u53ea\u80fd\u662f\u534a\u53cc\u5de5\u7684\uff0c\u5373\u6570\u636e\u53ea\u80fd\u5411\u4e00\u4e2a\u65b9\u5411\u6d41\u52a8\u3002\u5982\u679c\u9700\u8981\u53cc\u65b9\u4e92\u76f8\u4f20\u9012\u6570\u636e\uff0c\u5219\u9700\u8981\u5efa\u7acb\u4e24\u4e2a\u7ba1\u9053\uff1b"),(0,i.kt)("li",{parentName:"ul"},"\u53ea\u80fd\u5728\u7236\u5b50\u8fdb\u7a0b\u6216\u5144\u5f1f\u8fdb\u7a0b\u8fd9\u4e9b\u5177\u6709\u4eb2\u7f18\u5173\u7cfb\u7684\u8fdb\u7a0b\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\uff1b\n\u533f\u540d\u7ba1\u9053\u5bf9\u4e8e\u7ba1\u9053\u4e24\u7aef\u7684\u8fdb\u7a0b\u800c\u8a00\uff0c\u5c31\u662f\u4e00\u4e2a\u53ea\u5b58\u5728\u4e8e\u5185\u5b58\u7684\u7279\u6b8a\u6587\u4ef6\uff1b"),(0,i.kt)("li",{parentName:"ul"},"\u4e00\u4e2a\u8fdb\u7a0b\u5411\u7ba1\u9053\u4e2d\u5199\u7684\u5185\u5bb9\u88ab\u7ba1\u9053\u53e6\u4e00\u7aef\u7684\u8fdb\u7a0b\u8bfb\u53d6\u3002\u5199\u5165\u7684\u5185\u5bb9\u6bcf\u6b21\u90fd\u6dfb\u52a0\u5728\u7ba1\u9053\u7f13\u51b2\u533a\u7684\u672b\u5c3e\uff0c\u5e76\u4e14\u6bcf\u6b21\u90fd\u662f\u4ece\u7f13\u51b2\u533a\u7684\u5934\u90e8\u8bfb\u53d6\u6570\u636e\u3002")),(0,i.kt)("p",null,"\u533f\u540d\u7ba1\u9053\u7684\u5c40\u9650\u6027\u4e3b\u8981\u6709\u4e24\u70b9\uff1a",(0,i.kt)("strong",{parentName:"p"},"\u4e00\u662f\u7531\u4e8e\u7ba1\u9053\u5efa\u7acb\u5728\u5185\u5b58\u4e2d\uff0c\u6240\u4ee5\u5b83\u7684\u5bb9\u91cf\u4e0d\u53ef\u80fd\u5f88\u5927\uff1b\u4e8c\u662f\u7ba1\u9053\u6240\u4f20\u9001\u7684\u662f\u65e0\u683c\u5f0f\u5b57\u8282\u6d41\uff0c\u8fd9\u5c31\u8981\u6c42\u4f7f\u7528\u7ba1\u9053\u7684\u53cc\u65b9\u5b9e\u73b0\u5fc5\u987b\u5bf9\u4f20\u8f93\u7684\u6570\u636e\u683c\u5f0f\u8fdb\u884c\u7ea6\u5b9a\u3002")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u547d\u540d\u7ba1\u9053\u662f\u5728\u5b9e\u9645\u6587\u4ef6\u7cfb\u7edf\u4e0a\u5b9e\u73b0\u7684\u4e00\u79cd\u901a\u4fe1\u673a\u5236\u3002\u7531\u4e8e\u5b83\u662f\u4e00\u4e2a\u4e0e\u8fdb\u7a0b\u6ca1\u6709\u201c\u8840\u7f18\u5173\u7cfb\u201d\u7684\u3001\u771f\u6b63\u4e14\u72ec\u7acb\u7684\u6587\u4ef6\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u5728\u4efb\u610f\u8fdb\u7a0b\u4e4b\u95f4\u5b9e\u73b0\u901a\u4fe1\u3002\u7531\u4e8e\u547d\u540d\u7ba1\u9053\u4e0d\u652f\u6301\u8bf8\u5982lseek()\u7b49\u6587\u4ef6\u5b9a\u4f4d\u64cd\u4f5c\uff0c\u4e25\u683c\u9075\u5b88\u5148\u8fdb\u5148\u51fa\u7684\u539f\u5219\u8fdb\u884c\u4f20\u8f93\u6570\u636e\uff0c\u5373\u5bf9\u7ba1\u9053\u7684\u8bfb\u603b\u662f\u4ece\u5f00\u59cb\u5904\u8fd4\u56de\u6570\u636e\uff0c\u5bf9\u5b83\u7684\u5199\u603b\u662f\u628a\u6570\u636e\u6dfb\u52a0\u5230\u672b\u5c3e\uff0c\u6240\u4ee5\u8fd9\u79cd\u7ba1\u9053\u4e5f\u53eb\u505aFIFO\u6587\u4ef6")),(0,i.kt)("h3",{id:"\u5b58\u50a8\u6620\u5c04\u4e0emmap"},"\u5b58\u50a8\u6620\u5c04\u4e0emmap"),(0,i.kt)("p",null,"epoll\u6a21\u578b\u5e95\u5c42\u662fmmap\u548c\u7ea2\u9ed1\u6811"),(0,i.kt)("p",null,"mmap\u51cf\u5c11\u4ece\u5185\u6838\u6001\u5230\u7528\u6237\u6001\u7684\u62f7\u8d1d"),(0,i.kt)("p",null,"\u9875\u662f\u5185\u5b58\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image-20210323082353719",src:t(9736).Z})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <sys/mman.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\n#define handle_error(msg) \\\n    do { perror(msg); exit(EXIT_FAILURE); } while (0)\n\nint\nmain(int argc, char *argv[])\n{\n    char *addr; //\u88ab\u6620\u5c04\u533a\u7684\u6307\u9488\n    int fd;\n    struct stat sb;  //\u8bb0\u5f55\u6587\u4ef6\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\n    off_t offset, pa_offset; //\n    size_t length; //\u8bfb\u53d6\u957f\u5ea6\n    ssize_t s;\n\n    if (argc < 3 || argc > 4) {\n        fprintf(stderr, "%s file offset [length]\\n", argv[0]);\n        exit(EXIT_FAILURE);\n    }\n\n    fd = open(argv[1], O_RDONLY);\n    if (fd == -1)\n        handle_error("open");\n\n    if (fstat(fd, &sb) == -1)           /* To obtain file size */\n        handle_error("fstat");\n\n    offset = atoi(argv[2]);\n \n    //mmap\uff08\uff09\u7684\u504f\u79fb\u91cf\u5fc5\u987b\u9875\u9762\u5bf9\u9f50\n    pa_offset = offset & ~(sysconf(_SC_PAGE_SIZE) - 1);\n        /* offset for mmap() must be page aligned */\n//\u6700\u63a5\u8fd1PAGE_SIZE\u7684\u500d\u6570\n    if (offset >= sb.st_size) {\n        fprintf(stderr, "offset is past end of file\\n");\n        exit(EXIT_FAILURE);\n    }\n\n    if (argc == 4) {\n        length = atoi(argv[3]);\n        if (offset + length > sb.st_size)\n            length = sb.st_size - offset;\n                /* Can\'t display bytes past end of file */\n\n    } else {    /* No length arg ==> display to end of file */\n        length = sb.st_size - offset;\n    }\n //start\uff1a\u6620\u5c04\u533a\u7684\u5f00\u59cb\u5730\u5740\uff0c\u8bbe\u7f6e\u4e3a0\u65f6\u8868\u793a\u7531\u7cfb\u7edf\u51b3\u5b9a\u6620\u5c04\u533a\u7684\u8d77\u59cb\u5730\u5740\u3002\n    //length\uff1a\u6620\u5c04\u533a\u7684\u957f\u5ea6\u3002//\u957f\u5ea6\u5355\u4f4d\u662f \u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff0c\u4e0d\u8db3\u4e00\u5185\u5b58\u9875\u6309\u4e00\u5185\u5b58\u9875\u5904\u7406\n    //prot\uff1a\u671f\u671b\u7684\u5185\u5b58\u4fdd\u62a4\u6807\u5fd7:PROT_READ //\u9875\u5185\u5bb9\u53ef\u4ee5\u88ab\u8bfb\u53d6\n    //MAP_PRIVATE //\u5efa\u7acb\u4e00\u4e2a\u5199\u5165\u65f6\u62f7\u8d1d\u7684\u79c1\u6709\u6620\u5c04\u3002\u5185\u5b58\u533a\u57df\u7684\u5199\u5165\u4e0d\u4f1a\u5f71\u54cd\u5230\u539f\u6587\u4ef6\u3002\u8fd9\u4e2a\u6807\u5fd7\u548c\u4ee5\u4e0a\u6807\u5fd7\u662f\u4e92\u65a5\n    //off_toffset\uff1a\u88ab\u6620\u5c04\u5bf9\u8c61\u5185\u5bb9\u7684\u8d77\u70b9\uff0c\u504f\u79fb\u91cf\u5fc5\u987b\u662f\u9875\u9762\u5927\u5c0f\u7684\u500d\u6570\n   \n    addr = mmap(NULL, length + offset - pa_offset, PROT_READ,\n                MAP_PRIVATE, fd, pa_offset);\n    if (addr == MAP_FAILED)\n        handle_error("mmap");\n\n    s = write(STDOUT_FILENO, addr + offset - pa_offset, length);\n    if (s != length) {\n        if (s == -1)\n            handle_error("write");\n\n        fprintf(stderr, "partial write");\n        exit(EXIT_FAILURE);\n    }\n    //\u8be5\u8c03\u7528\u5728\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u4e2d\u89e3\u9664\u4e00\u4e2a\u6620\u5c04\u5173\u7cfb,\u5199\u56de\n    munmap(addr, length + offset - pa_offset);\n    close(fd);\n\n    exit(EXIT_SUCCESS);\n}\n\n')),(0,i.kt)("h2",{id:"\u8fdb\u7a0b\u548c\u7ebf\u7a0b"},"\u8fdb\u7a0b\u548c\u7ebf\u7a0b"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"ulimit -a                                                                         [0]\n-t: cpu time (seconds)              unlimited\n-f: file size (blocks)              unlimited\n-d: data seg size (kbytes)          unlimited\n-s: stack size (kbytes)             8192\n-c: core file size (blocks)         0\n-m: resident set size (kbytes)      unlimited\n-u: processes                       31153\n-n: file descriptors                1024\n-l: locked-in-memory size (kbytes)  16384\n-v: address space (kbytes)          unlimited\n-x: file locks                      unlimited\n-i: pending signals                 31153\n-q: bytes in POSIX msg queues       819200\n-e: max nice                        0\n-r: max rt priority                 0\n-N 15:                              unlimited\n\n")),(0,i.kt)("p",null,"\u8fdb\u7a0b\u6709\u5f88\u591a\u7c7b\u4f3c\u7684\u5730\u65b9\uff0c\u4eba\u4eec\u4e60\u60ef\u4e0a\u628a\u7ebf\u7a0b\u79f0\u4e3a\u8f7b\u91cf\u7ea7\u8fdb\u7a0b\uff0c\u8fd9\u4e2a\u6240\u8c13\u7684\u8f7b\u91cf\u7ea7\u662f\u6307\u7ebf\u7a0b\u5e76\u4e0d\u62e5\u6709\u81ea\u5df1\u7684\u7cfb\u7edf\u8d44\u6e90\uff0c\u7ebf\u7a0b\u4f9d\u9644\u4e8e\u521b\u5efa\u81ea\u5df1\u7684\u8fdb\u7a0b\u3002"),(0,i.kt)("p",null,"\u6211\u4eec\u53ef\u4ee5\u4ecel\u4e24\u4e2a\u4e2a\u65b9\u9762\u6765\u7406\u89e3\u7ebf\u7a0b\u7684\u8f7b\u91cf\u7ea7"),(0,i.kt)("p",null,"\\1. \u8c03\u5ea6"),(0,i.kt)("p",null,"\u7531\u4e8e\u8fdb\u7a0b\u4e4b\u95f4\u7684\u7ebf\u7a0b\u5171\u4eab\u540c\u4e00\u4e2a\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\uff0c\u56e0\u6b64\u5728\u8fdb\u7a0b\u7684\u7ebf\u7a0b\u4e4b\u95f4\u505a\u8fdb\u7a0b\u5207\u6362\uff0c\u5e76\u4e0d\u4f1a\u5f15\u8d77\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u7684\u5207\u6362\uff0c\u4ece\u800c\u907f\u514d\u4e86\u6602\u8d35\u7684\u8fdb\u7a0b\u5207\u6362\u3002\u5f53\u7136\u4e0d\u540c\u8fdb\u7a0b\u7ec4\u4e4b\u95f4\u662f\u9700\u8981\u8fdb\u7a0b\u5207\u6362\u7684"),(0,i.kt)("p",null,"\\2. \u62e5\u6709\u8d44\u6e90"),(0,i.kt)("p",null,"\u8fdb\u7a0b\u662f\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u62e5\u6709\u8d44\u6e90\u7684\u72ec\u7acb\u5355\u4f4d\uff0c\u5728\u521b\u5efa\u548c\u64a4\u9500\u8fdb\u7a0b\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u90fd\u4f1a\u4e3a\u8fdb\u7a0b\u5206\u914d\u548c\u56de\u6536\u8d44\u6e90\uff0c\u8d44\u6e90\u5305\u62ec\u5730\u5740\u7a7a\u95f4\uff0c\u6587\u4ef6\uff0cIO\uff0c\u9875\u8868\u7b49\u3002\u4f46\u662f\u7531\u4e8e\u7ebf\u7a0b\u662f\u4f9d\u9644\u4e0e\u521b\u5efa\u8fdb\u7a0b\u7684\uff0c\u7ebf\u7a0b\u7684\u4ee3\u7801\u6bb5\uff0c\u6570\u636e\u6bb5\uff0c\u6253\u5f00\u6587\u4ef6\uff0cIO\u8d44\u6e90\uff0c\u5730\u5740\u7a7a\u95f4\uff0c\u9875\u8868\u7b49\u90fd\u662f\u548c\u8fdb\u7a0b\u7684\u6240\u6709\u7ebf\u7a0b\u5171\u4eab\u7684\u3002"),(0,i.kt)("p",null,"\u4ece\u4e0a\u9762\u6211\u4eec\u770b\u51fa\u7ebf\u7a0b\u5e76\u6ca1\u6709\u72ec\u7acb\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u96b6\u5c5e\u540c\u4e00\u8fdb\u7a0b\u7684\u6240\u6709\u7ebf\u7a0b\u6808\uff0c\u90fd\u5728\u6240\u5c5e\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\uff0c\u4ed6\u4eec\u7684\u6808\u5730\u5740\u4e0d\u540c\uff0c\u4f46\u662f\u5982\u679c\u64cd\u4f5c\u6808\u65f6\u53d1\u751f\u8d8a\u754c\uff0c\u662f\u6709\u53ef\u80fd\u7834\u574f\u5176\u4ed6\u7ebf\u7a0b\u7684\u6808\u7a7a\u95f4\u7684\u3002"),(0,i.kt)("p",null,"\u800c\u8fdb\u7a0b\u5b9e\u9645\u4e0a\u53ef\u4ee5\u770b\u4f5c\u662f\u4e3b\u7ebf\u7a0b\uff0c\u5b83\u7684\u6808\u548c\u5176\u5b83\u7ebf\u7a0b\u6808\u6ca1\u6709\u533a\u522b\u3002"),(0,i.kt)("p",null,"\u5355\u7ebf\u7a0b\u53ea\u6709\u4e00\u4e2a\u6808\uff0c\u591a\u7ebf\u7a0b\u5219\u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u5206\u914d\u4e00\u4e2a\u6808\uff0c\u5e76\u4e14\u8fd9\u4e9b\u6808\u7684\u5730\u5740\u4e0d\u540c\uff0c\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u6cd5\u9a8c\u8bc1\u8fd9\u4e2a\u7ed3\u8bba"),(0,i.kt)("p",null,"\\1. pslist\u8f93\u51fa\u7cfb\u7edf\u8fdb\u7a0b\u4ee5\u53ca\u4ed6\u4eec\u7684\u7ebf\u7a0b\uff0c\u5728\u6211\u7684\u673a\u5668\u4e0a\u5f97\u5230\u5982\u4e0b\u7ed3\u679c"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"1889 gnome-session 1918 1926 1940 1969 1957 2282 2283 1971 1972 1973 1975 1998 2003 2010 2669 2691 2710 2776 2871\n")),(0,i.kt)("p",null,"1889\u662f\u4e3b\u7ebf\u7a0b\uff0c\u540e\u9762\u662f\u8fd9\u4e2a\u8fdb\u7a0b\u521b\u5efa\u7684\u7ebf\u7a0b"),(0,i.kt)("p",null,"\\2. \u5bf9\u6bcf\u4e00\u4e2a\u7ebf\u7a0bID\u6267\u884c\uff0ccat /proc/threadID/maps"),(0,i.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\u6ca1\u4e2a\u7ebf\u7a0b\u7684stack\u5730\u5740\u8303\u56f4\u5404\u4e0d\u76f8\u540c\uff0c\u8fd9\u4e5f\u4ece\u4fa7\u9762\u9a8c\u8bc1\u4e86\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u6808\u5730\u5740\u5728\u540c\u4e00\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u7684\u4e0d\u540c\u5730\u5740\u8303\u56f4\u5185\u3002"),(0,i.kt)("p",null,"\u4e00\u822c\u610f\u4e49\u4e0a\uff0c\u7ebf\u7a0b\u662f\u6267\u884c\u7684\u5355\u4f4d\uff0c\u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u7684\u5355\u4f4d\uff0c\u4e24\u8005\u7684\u672c\u8d28\u533a\u522b\u5728\u4e8e\u6b64"))}o.isMDXComponent=!0},83144:function(e,n,t){n.Z=t.p+"assets/images/20180810212327500-2d3dbe7a415732087099b820122a0a3d.bin"},2805:function(e,n,t){n.Z=t.p+"assets/images/20180810220951114-9b20e2656b985c1971f3e088b4b18efc.bin"},17763:function(e,n,t){n.Z=t.p+"assets/images/20180810221346372-729bf1f1c8546dee77e38a9f99d3a5a1.bin"},71237:function(e,n,t){n.Z=t.p+"assets/images/2018081022321045-7b5c035d65c4e1faed5be2b4edf3c6fa.bin"},9736:function(e,n,t){n.Z=t.p+"assets/images/image-20210323082353719-2c2a8235d39566e71b75cb9ecfdbc794.png"}}]);