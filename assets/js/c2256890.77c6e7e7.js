"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[5688],{3905:function(n,e,t){t.d(e,{Zo:function(){return f},kt:function(){return m}});var r=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var u=r.createContext({}),l=function(n){var e=r.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},f=function(n){var e=l(n.components);return r.createElement(u.Provider,{value:e},n.children)},s={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,o=n.originalType,u=n.parentName,f=a(n,["components","mdxType","originalType","parentName"]),p=l(t),m=i,d=p["".concat(u,".").concat(m)]||p[m]||s[m]||o;return t?r.createElement(d,c(c({ref:e},f),{},{components:t})):r.createElement(d,c({ref:e},f))}));function m(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=t.length,c=new Array(o);c[0]=p;var a={};for(var u in e)hasOwnProperty.call(e,u)&&(a[u]=e[u]);a.originalType=n,a.mdxType="string"==typeof n?n:i,c[1]=a;for(var l=2;l<o;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},15181:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return a},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return f},default:function(){return p}});var r=t(87462),i=t(63366),o=(t(67294),t(3905)),c=["components"],a={id:"B97.func\u5b9e\u73b0",title:"B97.func\u5b9e\u73b0","typora-root-url":"../"},u=void 0,l={unversionedId:"Algorithm/B97.func\u5b9e\u73b0",id:"Algorithm/B97.func\u5b9e\u73b0",isDocsHomePage:!1,title:"B97.func\u5b9e\u73b0",description:"LC-8.\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi)",source:"@site/docs/2.Algorithm/B97.func\u5b9e\u73b0.md",sourceDirName:"2.Algorithm",slug:"/Algorithm/B97.func\u5b9e\u73b0",permalink:"/Algorithm/B97.func\u5b9e\u73b0",editUrl:"https://github.com/worst0/wiki_note/edit/main/docs/2.Algorithm/B97.func\u5b9e\u73b0.md",version:"current",frontMatter:{id:"B97.func\u5b9e\u73b0",title:"B97.func\u5b9e\u73b0","typora-root-url":"../"},sidebar:"Document\ud83d\udcbb",previous:{title:"B9.\u6570\u5b66",permalink:"/Algorithm/B9.\u6570\u5b66"},next:{title:"B98.\u5b57\u7b26\u4e32",permalink:"/Algorithm/B98.\u5b57\u7b26\u4e32"}},f=[],s={toc:f};function p(n){var e=n.components,t=(0,i.Z)(n,c);return(0,o.kt)("wrapper",(0,r.Z)({},s,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"lc-8\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570-atoi"},(0,o.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/string-to-integer-atoi/description/"},"LC-8.\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int myAtoi(string s) {\n        int flag = 1;\n        int ind = 0;\n        const int MAX = 0x7fffffff;\n        const int MIN = 0x80000000;\n        while (s[ind] && s[ind] == ' ') ind++;\n        if (!s[ind]) return 0;\n        if (s[ind] == '+') ind++;\n        else if (s[ind] == '-') flag = -1, ind++;\n        long long ans = 0;\n        while (s[ind]) {\n            if (s[ind] < '0' || s[ind] > '9') break;\n            ans = ans * 10 + s[ind] - '0';\n            if (flag == 1 && ans >= MAX) {\n                return MAX;\n            }\n            if (flag == -1 && flag * ans <= MIN) {\n                return MIN;\n            }\n            ind++;\n        }\n        return (int)(ans * flag);\n\n    }\n};\n")))}p.isMDXComponent=!0}}]);