(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[2653],{3905:function(n,e,t){"use strict";t.d(e,{Zo:function(){return f},kt:function(){return u}});var r=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var a=r.createContext({}),l=function(n){var e=r.useContext(a),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},f=function(n){var e=l(n.components);return r.createElement(a.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,o=n.originalType,a=n.parentName,f=c(n,["components","mdxType","originalType","parentName"]),d=l(t),u=i,v=d["".concat(a,".").concat(u)]||d[u]||p[u]||o;return t?r.createElement(v,s(s({ref:e},f),{},{components:t})):r.createElement(v,s({ref:e},f))}));function u(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=t.length,s=new Array(o);s[0]=d;var c={};for(var a in e)hasOwnProperty.call(e,a)&&(c[a]=e[a]);c.originalType=n,c.mdxType="string"==typeof n?n:i,s[1]=c;for(var l=2;l<o;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},87077:function(n,e,t){"use strict";t.r(e),t.d(e,{frontMatter:function(){return c},metadata:function(){return a},toc:function(){return l},default:function(){return p}});var r=t(22122),i=t(19756),o=(t(67294),t(3905)),s=["components"],c={id:"C9.\u5b9e\u73b0",title:"C9.\u5b9e\u73b0","typora-root-url":"../"},a={unversionedId:"Server/C9.\u5b9e\u73b0",id:"Server/C9.\u5b9e\u73b0",isDocsHomePage:!1,title:"C9.\u5b9e\u73b0",description:"epoll+thread",source:"@site/docs/8.Server/C9.\u5b9e\u73b0.md",sourceDirName:"8.Server",slug:"/Server/C9.\u5b9e\u73b0",permalink:"/Server/C9.\u5b9e\u73b0",editUrl:"https://github.com/worst0/wiki_note/edit/main/docs/8.Server/C9.\u5b9e\u73b0.md",version:"current",frontMatter:{id:"C9.\u5b9e\u73b0",title:"C9.\u5b9e\u73b0","typora-root-url":"../"},sidebar:"Document\ud83d\udcbb",previous:{title:"\u7f51\u7edc\u7f16\u7a0b",permalink:"/Server/C8.socket"},next:{title:"D1.\u591a\u8fdb\u7a0b\u7f16\u7a0b",permalink:"/Server/D1.\u591a\u8fdb\u7a0b\u7f16\u7a0b"}},l=[{value:"chat\u5b9e\u73b0",id:"chat\u5b9e\u73b0",children:[{value:"\u6c34\u5e73\u8fb9\u7f18\u89e6\u53d1",id:"\u6c34\u5e73\u8fb9\u7f18\u89e6\u53d1",children:[]},{value:"\u5bf9\u4e0eevents \u76d1\u89c6\u4e8b\u4ef6",id:"\u5bf9\u4e0eevents-\u76d1\u89c6\u4e8b\u4ef6",children:[]}]},{value:"\u6587\u4ef6\u4f20\u8f93",id:"\u6587\u4ef6\u4f20\u8f93",children:[]}],f={toc:l};function p(n){var e=n.components,t=(0,i.Z)(n,s);return(0,o.kt)("wrapper",(0,r.Z)({},f,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"epollthread"},"epoll+thread"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'#include "head.h"\n#define MAX 10\n#define MAXUSER 1024\n\nint main(int argc, char **argv) {\n    if (argc != 2) {\n        fprintf(stderr, "Usage : %s port!\\n", argv[0]);\n        exit(1);\n    }\n    int server_listen, sockfd, port, epollfd;\n    ssize_t nrecv;\n    // 0 \u6709\u95ee\u9898,fd\u81ea\u52a8\u5206\u914d\u662f\u5c3d\u53ef\u80fd\u5c0f\u7684\n    int fd[MAXUSER] = {0};\n    port = atoi(argv[1]);\n    if ((server_listen = socket_create(port)) < 0) {\n        perror("socket_create()");\n        exit(1);\n    }\n\n    //epoll\u5b9e\u4f8b\uff0c ->\u53cd\u5e94\u5806\n    if ((epollfd = epoll_create(1)) < 0) {\n        perror("epoll_create()");\n        exit(1);\n    }\n\n    struct epoll_event ev, events[MAX];\n\n    ev.data.fd = server_listen;\n    ev.events = EPOLLIN;\n\n    if (epoll_ctl(epollfd, EPOLL_CTL_ADD, server_listen, &ev) < 0) {\n        perror("epoll_ctl()");\n        exit(1);\n    }\n\n    while (1) {\n        int nfds = epoll_wait(epollfd, events, MAX, -1);\n        if (nfds < 0) {\n            perror("epoll_wait");\n            exit(1);\n        }\n        for (int i = 0; i < nfds; ++i) {\n            if (events[i].data.fd == server_listen  && (events[i].events & EPOLLIN)) {\n                if ((sockfd = accept(server_listen, NULL, NULL)) < 0) {\n                    perror("accept()");\n                    exit(1);\n                }\n                fd[sockfd] = sockfd;\n                ev.events = EPOLLIN | EPOLLRDHUP;\n                ev.data.fd = sockfd;\n                if (epoll_ctl(epollfd, EPOLL_CTL_ADD, sockfd, &ev) < 0) {\n                    perror("epoll_ctl()");\n                    exit(1);\n                }\n            } else {\n                if (events[i].events & EPOLLRDHUP) {\n                    if (epoll_ctl(epollfd, EPOLL_CTL_DEL, events[i].data.fd, NULL) < 0) {\n                        perror("epoll_ctl()");\n                        exit(1);\n                    }\n                    printf(GREEN"<data.fd>"NONE" = %d is logout", events[i].data.fd);\n                    close(events[i].data.fd);\n                } \n                if (events[i].events & EPOLLIN) {\n                    char buff[512] = {0};\n                    nrecv = recv(events[i].data.fd, buff, sizeof(buff), 0);\n                    // nrecv == 0 socket\u65ad\u5f00, man-RETURNVALUE\n                    if (nrecv < 0) {\n                        perror("recv()");\n                        exit(1);\n                    } else if (nrecv == 0) {\n                        printf(RED"<fd = %d>"NONE" is logout\\n", events[i].data.fd);\n                        if (epoll_ctl(epollfd, EPOLL_CTL_DEL, events[i].data.fd, NULL) < 0) {\n                            perror("epoll_ctl()");\n                            exit(1);\n                        }\n                        close(events[i].data.fd);\n                    } else {\n                        printf("recv : fd = %d, %s\\n", events[i].data.fd,buff);\n                    }\n                } \n                // TCP \u5bf9\u7aef\u5173\u95ed\uff0c\u5982\u4f55\u611f\u77e5\n            }\n        }\n    }\n\n    close(server_listen);\n    return 0;\n}\n\n')),(0,o.kt)("h2",{id:"chat\u5b9e\u73b0"},"chat\u5b9e\u73b0"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'int make_non_block(int fd) {\n    int flag; \n    if ((flag = fcntl(fd, F_GETFL)) < 0) {\n        return -1;\n    }\n    //flag |= O_NONBLOCK;\n    fcntl(fd, F_SETFL, flag|O_NONBLOCK);\n    return 0;\n}\n\nint make_block(int fd) {\n    int flag; \n    if ((flag = fcntl(fd, F_GETFL)) < 0) {\n        return -1;\n    }\n    fcntl(fd, F_SETFL, flag&~O_NONBLOCK);\n    return 0;\n}\n\nint socket_create(int port) {\n    int sockfd;\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        return -1;\n    }\n    int val = 1;\n    // SO_REUSEADDR \u5141\u8bb8\u5728bind ()\u8fc7\u7a0b\u4e2d\u672c\u5730\u5730\u5740\u53ef\u91cd\u590d\u4f7f\u7528\n    if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &val, sizeof(int)) < 0) {\n        return -1;\n    }\n\n    struct sockaddr_in server;\n    server.sin_family = AF_INET;\n    server.sin_port = htons(port);\n    server.sin_addr.s_addr = inet_addr("0.0.0.0");\n\n    if (bind(sockfd, (struct sockaddr *)&server, sizeof(server)) < 0) {\n        return -1;\n    }\n\n    if (listen(sockfd, 10) < 0) {\n        return -1;\n    }\n\n    return sockfd;\n}\n\nint socket_connect(char *ip, int port) {\n    int sockfd;\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        return -1;\n    }\n    //if (setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, &tv, optlen) < 0){\n    struct sockaddr_in server;\n    server.sin_family = AF_INET;\n    server.sin_port = htons(port);\n    //server.sin_addr.s_addr = inet_addr("0.0.0.0");\n    server.sin_addr.s_addr = inet_addr(ip);\n\n    if ((connect(sockfd, (struct sockaddr *)&server, sizeof(server))) < 0) {\n        return -1;\n    }\n    \n    return sockfd;\n}\n\n')),(0,o.kt)("h4",{id:"server\u7aef"},"server\u7aef"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'#include "head.h"\n\nvoid *do_chat(void *arg) {\n    int fd;\n    fd = *(int *)arg;\n    while (1) {\n        ssize_t nrecv;\n        char buff[512];\n        if ((nrecv = recv(fd, buff, sizeof(buff), 0)) <= 0) {\n            close(fd);\n            return NULL;\n        }\n        printf("Recv : %s\\n", buff);\n        send(fd, buff, strlen(buff), 0);\n    }\n}\n\nint main(int argc, char **argv) {\n    if (argc != 2) {\n        fprintf(stderr, "Usage : %s port!\\n", argv[0]);\n        exit(1);\n    }\n    \n    int listener, port;\n    port = atoi(argv[1]); \n    if ((listener = socket_create(port)) < 0) {\n        perror("socket_create()");\n        exit(1);\n    }\n\n    while (1) {\n        int newfd;\n        pthread_t tid;\n        if ((newfd = accept(listener, NULL, NULL)) < 0) {\n            perror("accept()");\n            exit(1);\n        }\n        pthread_create(&tid, NULL, do_chat, (void *)&newfd);\n    }\n\n    return 0;\n}\n\n')),(0,o.kt)("h4",{id:"client\u7aef"},"client\u7aef"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'#include "head.h"\n\n\nint main(int argc, char **argv) {\n    if (argc != 3){\n        fprintf(stderr, "Usage : %s port!\\n", argv[0]);\n        exit(1);\n    }\n    \n    int sockfd, port;\n    char ip[20] = {0};\n    strcpy(ip, argv[1]);\n    port = atoi(argv[2]);\n\n    if ((sockfd = socket_connect(ip, port)) < 0) {\n        perror("socket_connect()");\n        exit(1);\n    }\n\n    while (1) {\n        char buff[512] = {0};\n        scanf("%[^\\n]s", buff);\n        getchar();\n        send(sockfd, buff, strlen(buff), 0);\n        recv(sockfd, buff, strlen(buff), 0);\n        printf("Server : %s\\n", buff);\n    }\n\n    return 0;\n}\n\n')),(0,o.kt)("h3",{id:"\u6c34\u5e73\u8fb9\u7f18\u89e6\u53d1"},"\u6c34\u5e73\u8fb9\u7f18\u89e6\u53d1"),(0,o.kt)("p",null,"Level Triggered (LT) \u6c34\u5e73\u89e6\u53d1\n.socket\u63a5\u6536\u7f13\u51b2\u533a\u4e0d\u4e3a\u7a7a \u6709\u6570\u636e\u53ef\u8bfb \u8bfb\u4e8b\u4ef6\u4e00\u76f4\u89e6\u53d1\n.socket\u53d1\u9001\u7f13\u51b2\u533a\u4e0d\u6ee1 \u53ef\u4ee5\u7ee7\u7eed\u5199\u5165\u6570\u636e \u5199\u4e8b\u4ef6\u4e00\u76f4\u89e6\u53d1\n\u7b26\u5408\u601d\u7ef4\u4e60\u60ef\uff0cepoll_wait\u8fd4\u56de\u7684\u4e8b\u4ef6\u5c31\u662fsocket\u7684\u72b6\u6001"),(0,o.kt)("p",null,"Edge Triggered (ET) \u8fb9\u6cbf\u89e6\u53d1\n.socket\u7684\u63a5\u6536\u7f13\u51b2\u533a\u72b6\u6001\u53d8\u5316\u65f6\u89e6\u53d1\u8bfb\u4e8b\u4ef6\uff0c\u5373\u7a7a\u7684\u63a5\u6536\u7f13\u51b2\u533a\u521a\u63a5\u6536\u5230\u6570\u636e\u65f6\u89e6\u53d1\u8bfb\u4e8b\u4ef6\n.socket\u7684\u53d1\u9001\u7f13\u51b2\u533a\u72b6\u6001\u53d8\u5316\u65f6\u89e6\u53d1\u5199\u4e8b\u4ef6\uff0c\u5373\u6ee1\u7684\u7f13\u51b2\u533a\u521a\u7a7a\u51fa\u7a7a\u95f4\u65f6\u89e6\u53d1\u8bfb\u4e8b\u4ef6\n\u4ec5\u5728\u72b6\u6001\u53d8\u5316\u65f6\u89e6\u53d1\u4e8b\u4ef6"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u6bcf\u4e2aTCP socket\u5728\u5185\u6838\u4e2d\u90fd\u6709\u4e00\u4e2a\u53d1\u9001\u7f13\u51b2\u533a\u548c\u4e00\u4e2a\u63a5\u6536\u7f13\u51b2\u533a"),"\uff0c"),(0,o.kt)("p",null,"\u6536\u7f13\u51b2\u533a\u628a\u6570\u636e\u7f13\u5b58\u5165\u5185\u6838\uff0c\u5e94\u7528\u8fdb\u7a0b\u4e00\u76f4\u6ca1\u6709\u8c03\u7528read\u8fdb\u884c\u8bfb\u53d6\u7684\u8bdd\uff0c\u6b64\u6570\u636e\u4f1a\u4e00\u76f4\u7f13\u5b58\u5728\u76f8\u5e94 socket\u7684\u63a5\u6536\u7f13\u51b2\u533a\u5185\u3002\u518d\u5570\u55e6\u4e00\u70b9\uff0c\u4e0d\u7ba1\u8fdb\u7a0b\u662f\u5426\u8bfb\u53d6socket\uff0c\u5bf9\u7aef\u53d1\u6765\u7684\u6570\u636e\u90fd\u4f1a\u7ecf\u7531\u5185\u6838\u63a5\u6536\u5e76\u4e14\u7f13\u5b58\u5230socket\u7684\u5185\u6838\u63a5\u6536\u7f13\u51b2\u533a\u4e4b"),(0,o.kt)("h3",{id:"\u5bf9\u4e0eevents-\u76d1\u89c6\u4e8b\u4ef6"},"\u5bf9\u4e0eevents \u76d1\u89c6\u4e8b\u4ef6"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"1\u3001listen fd\uff0c\u6709\u65b0\u8fde\u63a5\u8bf7\u6c42\uff0c\u5bf9\u7aef\u53d1\u9001\u666e\u901a\u6570\u636e \u89e6\u53d1EPOLLIN\u3002\n2\u3001\u5e26\u5916\u6570\u636e\uff0c\u53ea\u89e6\u53d1EPOLLPRI\u3002\n3\u3001\u5bf9\u7aef\u6b63\u5e38\u5173\u95ed\uff08\u7a0b\u5e8f\u91ccclose()\uff0cshell\u4e0bkill\u6216ctr+c\uff09\uff0c\u89e6\u53d1EPOLLIN\u548cEPOLLRDHUP\uff0c\u4f46\u662f\u4e0d\u89e6\u53d1EPOLLERR \u548cEPOLLHUP\u3002\n\u518dman epoll_ctl\u770b\u4e0b\u540e\u4e24\u4e2a\u4e8b\u4ef6\u7684\u8bf4\u660e\uff0c\u8fd9\u4e24\u4e2a\u5e94\u8be5\u662f\u672c\u7aef\uff08server\u7aef\uff09\u51fa\u9519\u624d\u89e6\u53d1\u7684\u3002\n5\u3001\u5bf9\u7aef\u5f02\u5e38\u65ad\u5f00\u8fde\u63a5\uff08\u53ea\u6d4b\u4e86\u62d4\u7f51\u7ebf\uff09\uff0c\u6ca1\u89e6\u53d1\u4efb\u4f55\u4e8b\u4ef6\u3002\n\n\u9644man\uff1a\n\nEPOLLIN       \u8fde\u63a5\u5230\u8fbe\uff1b\u6709\u6570\u636e\u6765\u4e34\uff1b\nThe associated file is available for read(2) operations.\nEPOLLOUT      \u6709\u6570\u636e\u8981\u5199\nThe associated file is available for write(2) operations.\nEPOLLRDHUP    \u8fd9\u4e2a\u597d\u50cf\u6709\u4e9b\u7cfb\u7edf\u68c0\u6d4b\u4e0d\u5230\uff0c\u53ef\u4ee5\u4f7f\u7528EPOLLIN\uff0cread\u8fd4\u56de0\uff0c\u5220\u9664\u6389\u4e8b\u4ef6\uff0c\u5173\u95edclose(fd);\n\u5982\u679c\u6709EPOLLRDHUP\uff0c\u68c0\u6d4b\u5b83\u5c31\u53ef\u4ee5\u76f4\u5230\u662f\u5bf9\u65b9\u5173\u95ed\uff1b\u5426\u5219\u5c31\u7528\u4e0a\u9762\u65b9\u6cd5\u3002\nStream socket peer closed connection, or shut down writing half\nof connection. (This flag is especially useful for writing sim-\nple code to detect peer shutdown when using Edge Triggered moni-\ntoring.)\nEPOLLPRI      \u5916\u5e26\u6570\u636e\nThere is urgent data available for read(2) operations.\n\n             \nEPOLLERR      \u53ea\u6709\u91c7\u53d6\u52a8\u4f5c\u65f6\uff0c\u624d\u80fd\u77e5\u9053\u662f\u5426\u5bf9\u65b9\u5f02\u5e38\u3002\u5373\u5bf9\u65b9\u7a81\u7136\u65ad\u6389\uff0c\u662f\u4e0d\u53ef\u80fd\n\u6709\u6b64\u4e8b\u4ef6\u53d1\u751f\u7684\u3002\u53ea\u6709\u81ea\u5df1\u91c7\u53d6\u52a8\u4f5c\uff08\u5f53\u7136\u81ea\u5df1\u6b64\u523b\u4e5f\u4e0d\u77e5\u9053\uff09\uff0cread\uff0cwrite\u65f6\uff0c\u51faEPOLLERR\u9519\uff0c\u8bf4\u660e\u5bf9\u65b9\u5df2\u7ecf\u5f02\u5e38\u65ad\u5f00\u3002\n\nEPOLLERR \u662f\u670d\u52a1\u5668\u8fd9\u8fb9\u51fa\u9519\uff08\u81ea\u5df1\u51fa\u9519\u5f53\u7136\u80fd\u68c0\u6d4b\u5230\uff0c\u5bf9\u65b9\u51fa\u9519\u4f60\u548b\u80fd\u77e5\u9053\u554a\uff09\n\n\n\u5173\u4e8e EPOLLERR\uff1a\nsocket\u80fd\u68c0\u6d4b\u5230\u5bf9\u65b9\u51fa\u9519\u5417\uff1f\u76ee\u524d\u4e3a\u6b62\uff0c\u597d\u50cf\u6211\u8fd8\u4e0d\u77e5\u9053\u5982\u4f55\u68c0\u6d4b\u3002\n\u4f46\u662f\uff0c\u5728\u7ed9\u5df2\u7ecf\u5173\u95ed\u7684socket\u5199\u65f6\uff0c\u4f1a\u53d1\u751fEPOLLERR\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u5728\u91c7\u53d6\u884c\u52a8\uff08\u6bd4\u5982\n\u8bfb\u4e00\u4e2a\u5df2\u7ecf\u5173\u95ed\u7684socket\uff0c\u6216\u8005\u5199\u4e00\u4e2a\u5df2\u7ecf\u5173\u95ed\u7684socket\uff09\u65f6\u5019\uff0c\u624d\u77e5\u9053\u5bf9\u65b9\u662f\u5426\u5173\u95ed\u4e86\u3002\n\u8fd9\u4e2a\u65f6\u5019\uff0c\u5982\u679c\u5bf9\u65b9\u5f02\u5e38\u5173\u95ed\u4e86\uff0c\u5219\u4f1a\u51fa\u73b0EPOLLERR\uff0c\u51fa\u73b0Error\u628a\u5bf9\u65b9DEL\u6389\uff0cclose\u5c31\u53ef\u4ee5\n\u4e86\u3002\n\n3.\u5404\u7c7b\u4e8b\u4ef6\n\n1\uff09\u76d1\u542c\u7684fd\uff0c\u6b64fd\u7684\u8bbe\u7f6e\u7b49\u5f85\u4e8b\u4ef6\uff1a\nEPOLLIN \uff1b\u6216\u8005EPOLLET |EPOLLIN\n  \u7531\u4e8e\u6b64socket\u53ea\u76d1\u542c\u6709\u65e0\u8fde\u63a5\uff0c\u8c08\u4e0d\u4e0a\u5199\u548c\u5176\u4ed6\u64cd\u4f5c\u3002\n\u6545\u53ea\u6709\u8fd9\u4e24\u7c7b\u3002\uff08\u9ed8\u8ba4\u662fLT\u6a21\u5f0f\uff0c\u5373EPOLLLT |EPOLLIN\uff09\u3002\n\n  \u8bf4\u660e\uff1a\u5982\u679c\u5728\u8fd9\u4e2asocket\u4e0a\u4e5f\u8bbe\u7f6eEPOLLOUT\u7b49\uff0c\u4e5f\u4e0d\u4f1a\u51fa\u9519\uff0c\n\u53ea\u662f\u8fd9\u4e2asocket\u4e0d\u4f1a\u6536\u5230\u8fd9\u6837\u7684\u6d88\u606f\u3002\n\n2\uff09\u5ba2\u6237\u7aef\u6b63\u5e38\u5173\u95ed\nclient \u7aefclose()\u8054\u63a5\n\nserver \u4f1a\u62a5\u67d0\u4e2asockfd\u53ef\u8bfb\uff0c\u5373epollin\u6765\u4e34\u3002\n\u7136\u540erecv\u4e00\u4e0b \uff0c \u5982\u679c\u8fd4\u56de0\u518d\u6389\u7528epoll_ctl \u4e2d\u7684EPOLL_CTL_DEL , \u540c\u65f6close(sockfd)\u3002\n\n\u6709\u4e9b\u7cfb\u7edf\u4f1a\u6536\u5230\u4e00\u4e2aEPOLLRDHUP\uff0c\u5f53\u7136\u68c0\u6d4b\u8fd9\u4e2a\u662f\u6700\u597d\u4e0d\u8fc7\u4e86\u3002\u53ea\u53ef\u60dc\u662f\u6709\u4e9b\u7cfb\u7edf\uff0c\n\u4e0a\u9762\u7684\u65b9\u6cd5\u6700\u4fdd\u9669\uff1b\u5982\u679c\u80fd\u52a0\u4e0a\u5bf9EPOLLRDHUP\u7684\u5904\u7406\u90a3\u5c31\u662f\u4e07\u80fd\u7684\u4e86\u3002\n\n3\uff09\u5ba2\u6237\u7aef\u5f02\u5e38\u5173\u95ed\uff1a\n\n\u5ba2\u6237\u7aef\u5f02\u5e38\u5173\u95ed\uff0c\u5e76\u4e0d\u4f1a\u901a\u77e5\u670d\u52a1\u5668\uff08\u5982\u679c\u4f1a\u901a\u77e5\uff0c\u4ee5\u524d\u7684socket\u5f53\u7136\u4f1a\u6709\u4e0e\u6b64\u76f8\u5173\n\u7684api\uff09\u3002\u6b63\u5e38\u5173\u95ed\u65f6read\u52300\u540e\uff0c\u5f02\u5e38\u65ad\u5f00\u65f6\u68c0\u6d4b\u4e0d\u5230\u7684\u3002\u670d\u52a1\u5668\u518d\u7ed9\u4e00\u4e2a\u5df2\u7ecf\u5173\u95ed\n\u7684socket\u5199\u6570\u636e\u65f6\uff0c\u4f1a\u51fa\u9519\uff0c\u8fd9\u65f6\u5019\uff0c\u670d\u52a1\u5668\u624d\u660e\u767d\u5bf9\u65b9\u53ef\u80fd\u5df2\u7ecf\u5f02\u5e38\u65ad\u5f00\u4e86\uff08\u8bfb\u4e5f\n\u53ef\u4ee5\uff09\u3002\n\nEpoll\u4e2d\u5c31\u662f\u5411\u5df2\u7ecf\u65ad\u5f00\u7684socket\u5199\u6216\u8005\u8bfb\uff0c\u4f1a\u53d1\u751fEPollErr\uff0c\u5373\u8868\u660e\u5df2\u7ecf\u65ad\u5f00\u3002\n\n4\uff09EpollIn\uff1a\n\n5\uff09\u76d1\u542c\u7684skocket\u53ea\u9700\u8981EpollIn\u5c31\u8db3\u591f\u4e86\uff0cEpollErr\u548cEpollHup\u4f1a\u81ea\u52a8\u52a0\u4e0a\u3002\n\u76d1\u542c\u7684socket\u53c8\u4e0d\u4f1a\u5199\uff0c\u4e00\u4e2aEpollIn\u8db3\u77e3\u3002\n\n4. \u8865\u5145 EpollErr\n\n\u5f53\u5ba2\u6237\u7aef\u7684\u673a\u5668\u5728\u53d1\u9001\u201c\u8bf7\u6c42\u201d\u524d\uff0c\u5c31\u5d29\u6e83\u4e86\uff08\u6216\u8005\u7f51\u7edc\u65ad\u6389\u4e86\uff09\uff0c\u5219\u670d\u52a1\u5668\u4e00\u7aef\u662f\u65e0\u4ece\u77e5\u6653\u7684\u3002\n\n\u6309\u7167\u4f60\u73b0\u5728\u7684\u8fd9\u4e2a\u201c\u8bf7\u6c42\u54cd\u5e94\u65b9\u5f0f\u201d\uff0c\u65e0\u8bba\u662f\u5426\u4f7f\u7528epoll\uff0c\u90fd\u5fc5\u987b\u8981\u505a\u8d85\u65f6\u68c0\u67e5\u3002\n\n\u56e0\u6b64\uff0c\u8fd9\u4e2a\u95ee\u9898\u4e0eepoll\u65e0\u5173\u3002EpollErr\u8fd9\u79cd\u9519\u8bef\u5fc5\u987b\u662f\u6709\u52a8\u4f5c\u624d\u80fd\u68c0\u6d4b\u51fa\u6765\u3002\n\u670d\u52a1\u5668\u4e0d\u53ef\u80fd\u7ecf\u5e38\u7684\u5411\u5ba2\u6237\u7aef\u5199\u4e00\u4e2a\u4e1c\u897f\uff0c\u4f9d\u7167\u6709\u6ca1\u6709EpollErr\u6765\u5224\u65ad\u5ba2\u6237\u7aef\u662f\u4e0d\u662f\u6b7b\u4e86\u3002\n\n\u56e0\u6b64\uff0c\u670d\u52a1\u5668\u4e2d\u7684\u8d85\u65f6\u68c0\u67e5\u662f\u5f88\u91cd\u8981\u7684\u3002\u8fd9\u4e5f\u662f\u4ee5\u524d\u670d\u52a1\u5668\u4e2d\u4f5c\u6b7b\u540e\u786e\u8ba4\u7684\u539f\u56e0\u3002\n\u65b0\u7684\u4ee3\u7801\u91cc\u4e5f\u662f\u65f6\u95f4\u5faa\u73af\uff0c\u65f6\u95f4\u5faa\u73af....\n\n\uff01\uff01\uff01\u670d\u52a1\u5668 \u4e2d\u7684\u8d85\u65f6\u68c0\u67e5\uff01\uff01\uff01\u5f88\u91cd\u8981\n")),(0,o.kt)("h2",{id:"\u6587\u4ef6\u4f20\u8f93"},"\u6587\u4ef6\u4f20\u8f93"),(0,o.kt)("p",null,"sshfs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"}," sudo sshfs -o nonempty,allow_other,exec yanzhiwei@aliyun:/ /mnt/tecmint\n")),(0,o.kt)("p",null,"netstat"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"netstat -alntu\n#t -- tcp\n#u -- udp\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "head.h"\nvoid send_file(const char *filename,FILE *fp,int sockfd) {\n    FILE *fp = NULL;\n    size_t nread;\n    struct FileMsg filemsg;\n    char *p = NULL;\n    if ((fp = fopen(filename, "rb")) == NULL) {\n        perror("fopen");\n        return ;\n    }\n    fseek(fp, 0L, SEEK_END);\n    filmsg.size = ftell(fp);\n    strcpy(filmsg.name, (p = strrchr(filename, \'/\') ? p + 1 : filename));\n    fseek(fp, 0L, SEEK_SET);\n    while ((nread = fread(filemsg.buff, 1, sizeof(filemsg.buff)))) {\n        send(sockfd, (void*)&filemsg, sizeof(filemsg), 0);\n        memset(filemsg.buff, 0, sizeof(filemsg.buff));\n    }\n    return ;\n}\n\nvoid recv_file(int sockfd) {\n        ssize_t recv_size = 0, total_size = 0;\n        struct FileMsg packet_t, packet;\n        int packet_size = sizeof(struct FileMsg);\n        int first  = 1, offset = 0;\n        while ((recv_size = recv(sockfd, &packet, sizeof(packet), 0)) > 0) {\n            if (first) {\n                fp = fopen(msg.filename, "wb");\n            }\n            first = 0;\n            if (offset + recv_size == packet_size) {\n                fwrite(packet.buff, sizeof(packet.buff), 1, fp);\n                printf(GREEN"\u6574\u5305"NONE":packet_size");\n                offset = 0;\n            } else if (offset + recv_size < packet_size) {\n                offset += recv_size; \n                memcpy();\n            }\n        }\n}\n\n\nint main(int argc, char **argv) {\n    if (argc != 2) {\n        fprintf(stderr, "Usage : %s port!\\n", argv[0]);\n        exit(1);\n    }\n    int listener, port, fd;\n    pid_t pid;\n    port = atoi(argv[1]); \n    if ((listener = socket_create(port)) < 0) {\n        perror("socket_create()");\n        exit(1);\n    }\n    whlie (1) {\n        if ((fd = accept(listener, NULL, NULL)) < 0) {\n            perror("accept");\n            exit(1);\n        } \n        if ((pid = fork()) < 0) {\n            perror("fork()");\n            exit(1);\n        }\n        if (pid == 0) {\n            close(listener);\n            recv_file(fd);\n            exit(0);\n        } else {\n            close(fd);\n        }\n    }\n\n    return 0;\n}\n\n')))}p.isMDXComponent=!0}}]);