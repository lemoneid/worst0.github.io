"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[5430],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},_={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),d=a,m=u["".concat(l,".").concat(d)]||u[d]||_[d]||o;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},91822:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var r=t(87462),a=t(63366),o=(t(67294),t(3905)),i=["components"],s={id:"C1.STL",title:"C1.STL","typora-root-url":"../"},l="STL",c={unversionedId:"Programming_Language/C1.STL",id:"Programming_Language/C1.STL",isDocsHomePage:!1,title:"C1.STL",description:"Standard Template Library \u6807\u51c6\u6a21\u677f\u5e93",source:"@site/docs/4.Programming_Language/C1.STL.md",sourceDirName:"4.Programming_Language",slug:"/Programming_Language/C1.STL",permalink:"/Programming_Language/C1.STL",editUrl:"https://github.com/worst0/wiki_note/edit/main/docs/4.Programming_Language/C1.STL.md",version:"current",lastUpdatedAt:1633869865,formattedLastUpdatedAt:"10/10/2021",frontMatter:{id:"C1.STL",title:"C1.STL","typora-root-url":"../"},sidebar:"Document\ud83d\udcbb",previous:{title:"B6.C++-question",permalink:"/Programming_Language/B6.C++-question"},next:{title:"C2.STL-question",permalink:"/Programming_Language/C2.STL-question"}},p=[{value:"C++",id:"c",children:[]},{value:"1. \u5bb9\u5668   containers",id:"1-\u5bb9\u5668---containers",children:[]},{value:"2. \u8fed\u4ee3\u5668 iterators",id:"2-\u8fed\u4ee3\u5668-iterators",children:[]},{value:"3. \u7b97\u6cd5   algorithms",id:"3-\u7b97\u6cd5---algorithms",children:[{value:"sort\u51fd\u6570",id:"sort\u51fd\u6570",children:[]}]},{value:"4. \u51fd\u6570\u5668 functional",id:"4-\u51fd\u6570\u5668-functional",children:[]},{value:"\u5404\u79cd\u5bb9\u5668\u5bf9\u6bd4",id:"\u5404\u79cd\u5bb9\u5668\u5bf9\u6bd4",children:[]},{value:"1.1 \u5e8f\u5217\u5bb9\u5668",id:"11-\u5e8f\u5217\u5bb9\u5668",children:[{value:"vector",id:"vector",children:[]},{value:"dequeue",id:"dequeue",children:[]},{value:"\u53cc\u5411\u94fe\u8868list",id:"\u53cc\u5411\u94fe\u8868list",children:[]},{value:"array",id:"array",children:[]},{value:"string",id:"string",children:[]}]},{value:"1.2 \u6709\u5e8f\u5173\u8054\u5bb9\u5668\uff08\u7ea2\u9ed1\u4e8c\u53c9\u6811\uff09",id:"12-\u6709\u5e8f\u5173\u8054\u5bb9\u5668\u7ea2\u9ed1\u4e8c\u53c9\u6811",children:[]},{value:"1.3  \u65e0\u5e8f\u5173\u8054\u5bb9\u5668\uff08\u54c8\u5e0c\uff09",id:"13--\u65e0\u5e8f\u5173\u8054\u5bb9\u5668\u54c8\u5e0c",children:[]},{value:"\u7ed3\u679c\u5206\u6790",id:"\u7ed3\u679c\u5206\u6790",children:[]},{value:"pair\u7c7b\u578b",id:"pair\u7c7b\u578b",children:[{value:"priority_queue",id:"priority_queue",children:[]},{value:"<code>string</code> \u7c7b",id:"string-\u7c7b",children:[]}]},{value:"\u8fd0\u7b97\u7b26\u91cd\u8f7d",id:"\u8fd0\u7b97\u7b26\u91cd\u8f7d",children:[]},{value:"\u5b9a\u4e49\u4e00\u4e2abitset",id:"\u5b9a\u4e49\u4e00\u4e2abitset",children:[]},{value:"\u7b97\u6cd5",id:"\u7b97\u6cd5",children:[{value:"\u8d28\u53d8\u7b97\u6cd5\u548c\u975e\u8d28\u53d8\u7b97\u6cd5",id:"\u8d28\u53d8\u7b97\u6cd5\u548c\u975e\u8d28\u53d8\u7b97\u6cd5",children:[]}]}],_={toc:p};function u(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},_,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"stl"},"STL"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"}," Standard Template Library \u6807\u51c6\u6a21\u677f\u5e93")),(0,o.kt)("h2",{id:"c"},"C++"),(0,o.kt)("h2",{id:"1-\u5bb9\u5668---containers"},"1. \u5bb9\u5668   containers"),(0,o.kt)("h2",{id:"2-\u8fed\u4ee3\u5668-iterators"},"2. \u8fed\u4ee3\u5668 iterators"),(0,o.kt)("h2",{id:"3-\u7b97\u6cd5---algorithms"},"3. \u7b97\u6cd5   algorithms"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"\uff08 1 \uff09\u7b80\u5355\u67e5\u627e\u7b97\u6cd5\n\uff08 1 \uff09 find(beg, end, val)\n// \u8fd4\u56de\u8fed\u4ee3\u5668\uff0c\u82e5\u627e\u5230\u6307\u5411\u6307\u5b9a\u5143\u7d20\u8fed\u4ee3\u5668\n\uff08 2 \uff09 find_if(beg, end, unaryPred) // \u8fd4\u56de\u7b2c\u4e00\u4e2a\u6ee1\u8db3 unaryPred \u7684\u5143\u7d20 \u5426\u5219\u5c3e\u540e\u8fed\u4ee3\u5668\n\uff08 3 \uff09 count(beg, end, val)\n// \u8fd4\u56de\u4e00\u5171\u6709\u591a\u5c11\u4e2a\n\uff08 4 \uff09 count_if(beg, end, val)\n// \u6ee1\u8db3\u6761\u4ef6\u7684\u4e00\u5171\u6709\u591a\u5c11\u4e2a\n\uff08 5 \uff09 search(beg1, end1, beg2, end2)\n// \u5b50\u5e8f\u5217 2 \u5728\u5e8f\u5217 1 \u4e2d\u6240\u5904\u7684\u4f4d\u7f6e\n\uff08 6 \uff09 find_first_of(beg1, end1, beg2, end2) // \u8fd4\u56de\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u4efb\u610f\u5143\u7d20\u5728\u7b2c\u4e00\u4e2a\u8303\u56f4\u5185\u51fa\u73b0\u7684\u4f4d\u7f6e\n\uff08 7 \uff09 find(beg1, end1, beg2, end2)\n// \u548c search \u76f8\u53cd\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u51fa\u73b0\u7684\u5b50\u5e8f\u5217\u7684\u4f4d\u7f6e\n\uff08 2 \uff09\u5176\u4ed6\u53ea\u8bfb\u7b97\u6cd5\n\uff08 1 \uff09 for_each(beg, end, unaryOp)\n\uff08 2 \uff09 equal(beg1, end1, beg2)\n\uff08 3 \uff09\u4e8c\u5206\u641c\u7d22\u7b97\u6cd5\n\uff08 1 \uff09 lower_bound(beg, end, val)\n\uff08 2 \uff09 upper_bound(beg, end, val)\n\uff08 3 \uff09 equal_range(beg, end, val)\n// \u5bf9\u6bcf\u4e2a\u5143\u7d20\u4f7f\u7528\u53ef\u8c03\u7528\u5bf9\u8c61\n// \u5982\u679c\u8f93\u5165\u5e8f\u5217\u6bcf\u4e2a\u5143\u7d20\u90fd\u548c beg2 \u5f00\u59cb\u7684\u5e8f\u5217\u76f8\u7b49\uff0c\u5219\u8fd4\u56de true\n// \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8e val \u7684\u8fed\u4ee3\u5668\n// \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5927\u4e8e val \u7684\u8fed\u4ee3\u5668\n// \u8fd4\u56de\u4ee5\u4e0a\u4e00\u4e2a pair \u5305\u542b\u4ee5\u4e0a\u4e24\u4e2a\u51fd\u6570\u8fd4\u56de\u53c2\u6570\n\uff08 4 \uff09\u5199\u5bb9\u5668\u7b97\u6cd5\n\uff08 1 \uff09\u6682\u4e0d\u603b\u7ed3\uff1b\n\uff08 5 \uff09\u5212\u5206\u7b97\u6cd5\n\uff08 1 \uff09 is_partitioned(beg, end, unaryPrey) // \u82e5\u6ee1\u8db3\u8c13\u8bcd\u7684\u5728\u524d\uff0c\u4e0d\u6ee1\u8db3\u5728\u540e\uff0c\u5219\u8fd4\u56de true, \u7a7a\u4e5f\u662f true\n\uff08 2 \uff09 partitioned_copy(beg, end, dest1, dest2, unaryPred)\n// \u5c06\u6ee1\u8db3\u8c13\u8bcd\u7684\u5143\u7d20\u653e\u5728 dest1 \u4e2d\uff0c\u5c06\u4e0d\u6ee1\u8db3\u62f7\u8d1d\u5728 dest2 \u4e2d\uff0c\u8fd4\u56de\u4e00\u4e2a pair\n//,first \u6307\u5411 dest1 \u7684\u672b\u5c3e\uff0c second \u6307\u5411 dest2 \u7684\u672b\u5c3e\uff08 6 \uff09\u6392\u5e8f\u7b97\u6cd5\n\uff08 1 \uff09 sort(beg, end)\n\uff08 2 \uff09 stable_sort(beg, end, comp)\n\uff08 3 \uff09 is_sorted(beg, end)\n\uff08 4 \uff09 is_sorted_until(beg, end)\n\uff08 5 \uff09 remove(beg, end, val)\n\uff08 6 \uff09 remove_if(beg, end, unaryPred)\n\uff08 7 \uff09 unique(beg, end, val)\n\uff08 8 \uff09 reverse(beg, end)\n// \u7ed9\u5bb9\u5668\u6392\u5e8f\n// \u7a33\u5b9a\u6392\u5e8f\n// \u8fd4\u56de bool \uff0c\u8868\u793a\u662f\u5426\u6709\u5e8f\n// \u8fd4\u56de\u6700\u957f\u6709\u5e8f\u5b50\u5e8f\u5217\u7684\u5c3e\u540e\u8fed\u4ee3\u5668\n// \u5220\u9664\u5143\u7d20 val \uff0c\u8fd4\u56de\u6307\u5411\u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\n// \u5220\u9664\u6ee1\u8db3\u8c13\u8bcd\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u6307\u5411\u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\n// \u91cd\u6392\u5143\u7d20\uff0c\u5bf9\u4e8e\u91cd\u590d\u5143\u7d20\u91cd\u65b0\u6392\u5728\u6700\u5927\u4e0d\u91cd\u590d\u5b50\u5e8f\u5217\u7684\u5c3e\u540e\u8fed\u4ee3\u5668\uff0c\u4e00\u822c sort \u4e4b\u540e\n// \u4f7f\u7528\u8be5\u5143\u7d20\u5c06\u91cd\u590d\u5143\u7d20\u653e\u5728\u6700\u5927\u4e0d\u91cd\u590d\u5b50\u5e8f\u5217\u7684\u540e\u9762\uff0c\u7136\u540e\u53ef\u4ee5\u4f7f\u7528 erase \u5220\u9664\n// \u7ffb\u8f6c\u5e8f\u5217\n\uff08 7 \uff09\u6700\u5927\u6700\u5c0f\u503c\u7b97\u6cd5\n\uff08 1 \uff09 min(val1, val2)\n\uff08 2 \uff09 max(val1, val2)\n\uff08 3 \uff09 min_element(beg, end)\n\uff08 4 \uff09 max_element(beg, end)\n\uff08 5 \uff09 minmax_element(beg, end) // \u8fd4\u56de\u6307\u5411\u6700\u5c0f\u503c\u7684\u8fed\u4ee3\u5668\n// \u8fd4\u56de\u6307\u5411\u6700\u5927\u503c\u7684\u8fed\u4ee3\u5668\n// \u8fd4\u56de pair \u6307\u5411\uff08 min, max \uff09\u7684\u4e24\u4e2a\u8fed\u4ee3\u5668\n\uff08 8 \uff09\u6570\u503c\u7b97\u6cd5\n\uff08 1 \uff09 accumulate(beg, end, init) // \u6c42\u5bb9\u5668\u548c\uff0c init \u8bbe\u5b9a\u4e3a\u521d\u503c\uff0c\u8fd4\u56de\u548c\n")),(0,o.kt)("h3",{id:"sort\u51fd\u6570"},"sort\u51fd\u6570"),(0,o.kt)("p",null,"\u91cd\u70b9\u5982\u4f55\u5982\u4f55\u5904\u7406\u591a\u7ef4\u6570\u7ec4\uff1b"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u901a\u8fc7\u6307\u9488\u6570\u7ec4\uff0c\u7136\u540e\u52a8\u6001\u5206\u914d\u7a7a\u95f4"),(0,o.kt)("li",{parentName:"ul"},"\u901a\u8fc7",(0,o.kt)("inlineCode",{parentName:"li"},"struct"),"\u7ed3\u6784\u4f53\uff0c\u964d\u7ef4\u5ea6\u5230\u4e00\u7ef4")),(0,o.kt)("h2",{id:"4-\u51fd\u6570\u5668-functional"},"4. \u51fd\u6570\u5668 functional"),(0,o.kt)("h1",{id:"\u5bb9\u5668"},"\u5bb9\u5668"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"  \u5bb9\u5668\uff08container\uff09\uff0c\u76f8\u540c\u7c7b\u578b\u5bf9\u8c61\u7684\u96c6\u5408")),(0,o.kt)("h2",{id:"\u5404\u79cd\u5bb9\u5668\u5bf9\u6bd4"},"\u5404\u79cd\u5bb9\u5668\u5bf9\u6bd4"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"center"},"\u5bb9\u5668"),(0,o.kt)("th",{parentName:"tr",align:"center"},"\u5e95\u5c42\u6570\u636e\u7ed3\u6784"),(0,o.kt)("th",{parentName:"tr",align:"center"},"\u65f6\u95f4\u590d\u6742\u5ea6"),(0,o.kt)("th",{parentName:"tr",align:"center"},"\u6709\u65e0\u5e8f"),(0,o.kt)("th",{parentName:"tr",align:"center"},"\u53ef\u4e0d\u53ef\u91cd\u590d"),(0,o.kt)("th",{parentName:"tr",align:"center"},"\u5176\u4ed6"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"array"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u6570\u7ec4"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u968f\u673a\u8bfb\u6539 O(1)"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u65e0\u5e8f"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u53ef\u91cd\u590d"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u652f\u6301\u5feb\u901f\u968f\u673a\u8bbf\u95ee")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"vector"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u6570\u7ec4"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u968f\u673a\u8bfb\u6539\u3001\u5c3e\u90e8\u63d2\u5165\u3001\u5c3e\u90e8\u5220\u9664 O(1)\u3001\u5934\u90e8\u63d2\u5165\u3001\u5934\u90e8\u5220\u9664 O(n)"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u65e0\u5e8f"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u53ef\u91cd\u590d"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u652f\u6301\u5feb\u901f\u968f\u673a\u8bbf\u95ee")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"list"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u53cc\u5411\u94fe\u8868"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u63d2\u5165\u3001\u5220\u9664 O(1)\u3001\u968f\u673a\u8bfb\u6539 O(n)"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u65e0\u5e8f"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u53ef\u91cd\u590d"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u652f\u6301\u5feb\u901f\u589e\u5220")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"deque"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u53cc\u7aef\u961f\u5217"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u5934\u5c3e\u63d2\u5165\u3001\u5934\u5c3e\u5220\u9664 O(1)"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u65e0\u5e8f"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u53ef\u91cd\u590d"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u4e00\u4e2a\u4e2d\u592e\u63a7\u5236\u5668 + \u591a\u4e2a\u7f13\u51b2\u533a\uff0c\u652f\u6301\u9996\u5c3e\u5feb\u901f\u589e\u5220\uff0c\u652f\u6301\u968f\u673a\u8bbf\u95ee")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"stack"),(0,o.kt)("td",{parentName:"tr",align:"center"},"deque / list"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u9876\u90e8\u63d2\u5165\u3001\u9876\u90e8\u5220\u9664 O(1)"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u65e0\u5e8f"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u53ef\u91cd\u590d"),(0,o.kt)("td",{parentName:"tr",align:"center"},"deque \u6216 list \u5c01\u95ed\u5934\u7aef\u5f00\u53e3\uff0c\u4e0d\u7528 vector \u7684\u539f\u56e0\u5e94\u8be5\u662f\u5bb9\u91cf\u5927\u5c0f\u6709\u9650\u5236\uff0c\u6269\u5bb9\u8017\u65f6")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"queue"),(0,o.kt)("td",{parentName:"tr",align:"center"},"deque / list"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u5c3e\u90e8\u63d2\u5165\u3001\u5934\u90e8\u5220\u9664 O(1)"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u65e0\u5e8f"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u53ef\u91cd\u590d"),(0,o.kt)("td",{parentName:"tr",align:"center"},"deque \u6216 list \u5c01\u95ed\u5934\u7aef\u5f00\u53e3\uff0c\u4e0d\u7528 vector \u7684\u539f\u56e0\u5e94\u8be5\u662f\u5bb9\u91cf\u5927\u5c0f\u6709\u9650\u5236\uff0c\u6269\u5bb9\u8017\u65f6")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"priority_queue"),(0,o.kt)("td",{parentName:"tr",align:"center"},"vector + max - heap"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u63d2\u5165\u3001\u5220\u9664 O(log2n)"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u6709\u5e8f"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u53ef\u91cd\u590d"),(0,o.kt)("td",{parentName:"tr",align:"center"},"vector\u5bb9\u5668 + heap\u5904\u7406\u89c4\u5219")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"set"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u7ea2\u9ed1\u6811"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u627e O(log2n)"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u6709\u5e8f"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u4e0d\u53ef\u91cd\u590d"),(0,o.kt)("td",{parentName:"tr",align:"center"})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"multiset"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u7ea2\u9ed1\u6811"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u627e O(log2n)"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u6709\u5e8f"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u53ef\u91cd\u590d"),(0,o.kt)("td",{parentName:"tr",align:"center"})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"map"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u7ea2\u9ed1\u6811"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u627e O(log2n)"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u6709\u5e8f"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u4e0d\u53ef\u91cd\u590d"),(0,o.kt)("td",{parentName:"tr",align:"center"})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"multimap"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u7ea2\u9ed1\u6811"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u627e O(log2n)"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u6709\u5e8f"),(0,o.kt)("td",{parentName:"tr",align:"center"},"\u53ef\u91cd\u590d"),(0,o.kt)("td",{parentName:"tr",align:"center"})))),(0,o.kt)("h2",{id:"11-\u5e8f\u5217\u5bb9\u5668"},"1.1 \u5e8f\u5217\u5bb9\u5668"),(0,o.kt)("p",null,"  \u53ea\u6709\u987a\u5e8f\u5bb9\u5668\u7684\u6784\u9020\u51fd\u6570\u624d\u63a5\u53d7\u5927\u5c0f\u53c2\u6570\uff0c\u5173\u8054\u5bb9\u5668\u5e76\u4e0d\u652f\u6301\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"  vector \xa0 \u53ef\u53d8\u5927\u5c0f\u6570\u7ec4\u3002\u652f\u6301\u5feb\u901f\u968f\u673a\u8bbf\u95ee\u3002\u5728\u5c3e\u90e8\u4e4b\u5916\u7684\u4f4d\u7f6e\u63d2\u5165\u6216\u5220\u9664\u5143\u7d20\u53ef\u80fd\u5f88\u6162\u3002\n           vector<int> vi(10, -1); // 10\u4e2a-1\n\n  deque    \u53cc\u7aef\u961f\u5217\u3002\u652f\u6301\u5feb\u901f\u5feb\u901f\u8bbf\u95ee\u3002\u5728\u5934\u5c3e\u4f4d\u7f6e\u63d2\u5165/\u5220\u9664\u901f\u5ea6\u5f88\u5feb\u3002\n           deque<double> deqd(10); // 10\u4e2a\u5143\u7d20 0\n\n  list     \u53cc\u5411\u94fe\u8868\u3002\u53ea\u652f\u6301\u53cc\u5411\u987a\u5e8f\u8bbf\u95ee\u3002\u5728list\u4e2d\u4efb\u4f55\u4f4d\u7f6e\u8fdb\u884c\u63d2\u5165/\u5220\u9664\u64cd\u4f5c\u901f\u5ea6\u90fd\u5f88\u5feb\u3002\n           list<int> li(5,1); // 5\u4e2a1\n\n  forward_list \u5355\u5411\u94fe\u8868\u3002\u53ea\u652f\u6301\u5355\u5411\u987a\u5e8f\u8bbf\u95ee\u3002\u5728\u94fe\u8868\u4efb\u4f55\u4f4d\u7f6e\u8fdb\u884c\u63d2\u5165/\u5220\u9664\u64cd\u4f5c\u901f\u5ea6\u90fd\u5f88\u5feb\u3002 \n           forward_list<string> fls(10); // 10\u4e2a\u5143\u7d20 0\n\n  array    \u56fa\u5b9a\u5927\u5c0f\u6570\u7ec4\u3002\u652f\u6301\u5feb\u901f\u968f\u673a\u8bbf\u95ee\uff0c\u4e0d\u80fd\u6dfb\u52a0\u6216\u5220\u9664\u5143\u7d20\u3002\n           array<int, 42> ia;  // 42\u4e2aint\u7684\u6570\u7ec4, \u652f\u6301\u62f7\u8d1d\u6784\u9020\n           array<int, 42> ia2 = ia; //\u800c\u5185\u7f6e\u6570\u7ec4\u4e0d\u652f\u6301\u62f7\u8d1d\u6784\u9020.\n           std::array\u4e5f\u63d0\u4f9b\u4e86 at() \u51fd\u6570\u3002\n\n  string   \u4e0evector\u76f8\u4f3c\u7684\u5bb9\u5668\uff0c\u4f46\u4e13\u95e8\u7528\u4e8e\u4fdd\u5b58\u5b57\u7b26\u3002\u968f\u673a\u8bbf\u95ee\u5feb\uff0c\u5728\u5c3e\u90e8\u63d2\u5165/\u5220\u9664\u90fd\u5f88\u5feb\u3002\n")),(0,o.kt)("h3",{id:"vector"},"vector"),(0,o.kt)("p",null,"  vector\u5bb9\u5668\u4e2d\u5b58\u50a8\u7684\u5143\u7d20\u5728\u5185\u5b58\u4e2d\u662f\u8fde\u7eed\u5b58\u50a8\u7684\u3002"),(0,o.kt)("p",null,"  \u5b58\u653e\u5728\u65e7\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u88ab\u590d\u5236\u5230\u65b0\u7684\u5bb9\u5668\u4e2d\uff0c\u63a5\u7740\u63d2\u5165\u65b0\u7684\u5143\u7d20\uff0c\u6700\u540e\u64a4\u9500\u65e7\u7684\u5b58\u50a8\u7a7a\u95f4\u3002\n\u5f53push_back\u68c0\u6d4b\u5230\u7a7a\u95f4\u4e0d\u8db3\u65f6\uff0c\u5c06\u81ea\u52a8\u4ee5 2\u500d \u7684\u65b9\u5f0f\u6269\u5c55\u7a7a\u95f4\u3002"),(0,o.kt)("p",null,"  \u4e3a\u4e86\u4f7fvector\u5bb9\u5668\u5b9e\u73b0\u5feb\u901f\u7684\u5185\u5b58\u5206\u914d\uff0c  \u5176\u5b9e\u9645\u5206\u914d\u7684\u5bb9\u91cf\u8981\u6bd4\u5f53\u524d\u6240\u9700\u7684\u7a7a\u95f4\u591a\u4e00\u4e9b"),(0,o.kt)("p",null,"  \u5bf9\u4e8e\u5927\u91cf\u6570\u636e\u6765\u8bf4\uff0c\u53ef\u4ee5\u4f7f\u7528 vector::reserve \u65b9\u6cd5\u6765\u6539\u5584\u3002"),(0,o.kt)("h4",{id:"resize\u548creserve"},"resize\u548creserve"),(0,o.kt)("p",null,"capacity\uff1a\u6307\u5bb9\u5668\u5728\u5206\u914d\u65b0\u7684\u5b58\u50a8\u7a7a\u95f4\u4e4b\u524d\u80fd\u5b58\u50a8\u7684\u5143\u7d20\u603b\u6570\u3002\nsize\uff1a\u6307\u5f53\u524d\u5bb9\u5668\u6240\u5b58\u50a8\u7684\u5143\u7d20\u4e2a\u6570\nreserve\u8868\u793a\u5bb9\u5668\u9884\u7559\u7a7a\u95f4\uff0c\u4f46\u5e76\u4e0d\u662f\u771f\u6b63\u7684\u521b\u5efa\u5bf9\u8c61\uff0c\u9700\u8981\u901a\u8fc7insert\uff08\uff09\u6216push_back\uff08\uff09\u7b49\u521b\u5efa\u5bf9\u8c61\u3002\nresize\u65e2\u5206\u914d\u4e86\u7a7a\u95f4\uff0c\u4e5f\u521b\u5efa\u4e86\u5bf9\u8c61\u3002\nreserve\u53ea\u4fee\u6539capacity\u5927\u5c0f\uff0c\u4e0d\u4fee\u6539size\u5927\u5c0f\uff0cresize\u65e2\u4fee\u6539capacity\u5927\u5c0f\uff0c\u4e5f\u4fee\u6539size\u5927\u5c0f\u3002"),(0,o.kt)("p",null,"\u8ddf\u6570\u7ec4\u4e0d\u540c\uff0cvector\u5b9a\u4e49\u7684\u6570\u7ec4\u5bf9\u8c61\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u4f1a\u88ab\u81ea\u52a8\u521d\u59cb\u5316\uff1a\u5bf9\u4e8e\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u6240\u6709\u5143\u7d20\u4f1a\u88ab\u4ee5 0 \u521d\u59cb\u5316\uff0c\u800c\u5bf9\u4e8e\u5bf9\u8c61\uff0c\u5219\u4f1a\u8c03\u7528\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u3002 \u6240\u4ee5\u5982\u679c\u6211\u4eec\u60f3\u8981\u7528\u5bf9\u8c61\u5efa\u7acbvector\u7684\u8bdd\uff0c\u5c31\u5fc5\u987b\u786e\u4fdd\u4f5c\u4e3a\u6570\u7ec4\u5143\u7d20\u7684\u7c7b\u5177\u6709\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u3002"),(0,o.kt)("p",null,"\u6b64\u5916\uff0c\u521d\u59cb\u503c\u4e5f\u53ef\u4ee5\u81ea\u5df1\u6307\u5b9a\uff0c\u4f46\u662f\u5fc5\u987b\u4e3a\u6240\u6709\u5143\u7d20\u6307\u5b9a\u5b8c\u5168\u76f8\u540c\u7684\u521d\u59cb\u503c\uff1a "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"1.\u521d\u59cb\u5316\u4e8c\u7ef4vector\uff0c\u4e3ar*c\u7684vector\uff0c\u6240\u6709\u503c\u4e3a0.\n\nvector<vector<int> > newOne(r, vector<int>(c, 0));\n\n2.\u7528resize()\u6765\u63a7\u5236\u5927\u5c0f\nvector<vector<int> > res;\nres.resize(r);//r\u884c\nfor (int k = 0; k < r; ++k){\n\xa0 \xa0 res[k].resize(c);//\u6bcf\u884c\u4e3ac\u5217\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"vector<\u7c7b\u578b>\u6570\u7ec4\u5bf9\u8c61\u540d(\u6570\u7ec4\u957f\u5ea6,\u5143\u7d20\u521d\u503c); \nvector<int> v(10,1);//\u5efa\u7acb\u4e00\u4e2a\u670910\u4e2a\u5143\u7d20\u7684vector\u6574\u578b\u5bf9\u8c61v\uff0c\u521d\u503c\u5168\u8bbe\u7f6e\u4e3a1\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"/*\n1. \u5728\u5411\u91cf\u5c3e\u90e8\u589e\u5220\u5143\u7d20 - \u5e73\u644a\uff08amortized\uff09\u5e38\u6570 O(1)}} \n2. \u5728\u5411\u91cf\u5934\u90e8 \u6216\u8005 \u4e2d\u95f4\u63d2\u5165\u5143\u7d20 \u589e\u5220\u5143\u7d20 - \u81f3 vector \u5c3e\u90e8\u7684\u7ebf\u6027\u8ddd\u79bb O(n)}}\n3. \u5728\u5411\u91cf\u4e2d\u67e5\u627e\u4e00\u4e2a\u5143\u7d20\u7279\u522b\u6162 O(n)\n4. \u968f\u673a\u8bbf\u95ee - \u5e38\u6570 O(1) \n\n|||  ........... -----\x3e\n\u5934            \u5c3e\n*/\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'template < class T, class Alloc = allocator<T> > class vector;  \nvector<vector<int>> vvi;//\u76f8\u5f53\u4e8e\u4e8c\u7ef4\u6570\u7ec4\n  STL\u4e2d\u7684vector\u5bb9\u5668\u5c31\u662f\u52a8\u6001\u5927\u5c0f\u6570\u7ec4\u3002\n  vector<int> v;\n  v.push_back(k); \u5728\u540e\u9762\u63d2\u5165 k \u8fd9\u4e2a\u5143\u7d20\n  v.size()  \u8fd4\u56de\u5bb9\u5668\u4e2d\u5b9e\u9645\u5143\u7d20\u7684\u4e2a\u6570\n  v.resize(n)   \u8c03\u6574\u5bb9\u5668\u7684\u5927\u5c0f\uff0c\u4f7f\u5176\u5305\u542bn\u4e2a\u5143\u7d20\u3002\n        //\u5982\u679cn\u5c0f\u4e8e\u5f53\u524d\u7684\u5bb9\u5668size\uff0c\u5185\u5bb9\u5c06\u88ab\u7f29\u5c0f\u5230\u524dn\u4e2a\u5143\u7d20\uff0c\u5c06\u5176\u5220\u9664\uff08\u5e76\u9500\u6bc1\u5b83\u4eec\uff09\u3002\n        //\u5982\u679cn\u5927\u4e8e\u5f53\u524d\u5bb9\u5668size\uff0c\u5219\u901a\u8fc7\u5728\u672b\u5c3e\u63d2\u5165\u5c3d\u53ef\u80fd\u591a\u7684\u5143\u7d20\u4ee5\u8fbe\u5230\u5927\u5c0fn\u6765\u6269\u5c55\u5185\u5bb9\u3002\u5982\u679c\u6307\u5b9a\u4e86val\uff0c\u5219\u65b0\u5143\u7d20\u5c06\u521d\u59cb\u5316\u4e3aval\u7684\u526f\u672c\uff0c\u5426\u5219\u5c06\u8fdb\u884c\u503c\u521d\u59cb\u5316\u3002\n        //\u5982\u679cn\u4e5f\u5927\u4e8e\u5f53\u524d\u7684\u5bb9\u5668\u7684capacity\uff08\u5bb9\u91cf\uff09\uff0c\u5206\u914d\u7684\u5b58\u50a8\u7a7a\u95f4\u5c06\u81ea\u52a8\u91cd\u65b0\u5206\u914d\u3002\n        //\u6ce8\u610f\u8fd9\u4e2a\u51fd\u6570\u901a\u8fc7\u63d2\u5165\u6216\u8005\u5220\u9664\u5143\u7d20\u7684\u5185\u5bb9\u6765\u6539\u53d8\u5bb9\u5668\u7684\u5b9e\u9645\u5185\u5bb9\u3002\n\n  v.capacity() \u8fd4\u56de\u5f53\u524d\u4e3avector\u5206\u914d\u7684\u5b58\u50a8\u7a7a\u95f4\u7684\u5927\u5c0f\uff0c\u989d\u5916\u7684\u7a7a\u95f4\u5141\u8bb8\u9002\u5e94\u589e\u957f\n  v.reserve(n)   \u8bf7\u6c42vector\u5bb9\u91cf\u81f3\u5c11\u8db3\u4ee5\u5305\u542bn\u4e2a\u5143\u7d20\u3002\n      //\u5982\u679cn\u5927\u4e8e\u5f53\u524dvector\u5bb9\u91cf\uff0c\u5219\u8be5\u51fd\u6570\u4f7f\u5bb9\u5668\u91cd\u65b0\u5206\u914d\u5176\u5b58\u50a8\u5bb9\u91cf\uff0c\u4ece\u800c\u5c06\u5176\u5bb9\u91cf\u589e\u52a0\u5230n\uff08\u6216\u66f4\u5927\uff09\u3002\n      //\u5728\u6240\u6709\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u51fd\u6570\u8c03\u7528\u4e0d\u4f1a\u5bfc\u81f4\u91cd\u65b0\u5206\u914d\uff0c\u5e76\u4e14vector\u5bb9\u91cf\u4e0d\u53d7\u5f71\u54cd\u3002\n  v.shrink_to_fit(); //\u8981\u6c42\u5bb9\u5668\u51cf\u5c0f\u5176capacity(\u5bb9\u91cf)\u4ee5\u9002\u5e94\u5176\u5c3a\u5bf8\u3002\n  v.at(index)   \u8fd4\u56de\u7d22\u5f15\u4f4d\u7f6e\u7684\u5143\u7d20,\u4f1a\u68c0\u67e5\u7ed9\u5b9a\u7684\u7d22\u5f15\u503c\u662f\u5426\u8d8a\u754c\uff0c\u5982\u679c\u8d8a\u754c\u5219\u8fd4\u56de\u4e00\u4e2a\u5f02\u5e38\u3002\n  v.begin() \u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 vector<T>::iterator \n  v.end()   \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u540e\u9762\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\n  v.front() \u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20\n  v.back()  \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n  v.empty() \u8fd4\u56de1\u4e3a\u7a7a\uff0c0\u4e3a\u975e\u7a7a\n  v.swap()  \u4ea4\u6362\u4e24\u5bb9\u5668\n      vec2.swap(vec); // \u4e24\u5411\u91cf\u4ea4\u6362\u5143\u7d20\uff0cvec2.size() == 0, vec = {5, 2, 0}\n  rbegin()  \u8fd4\u56de\u9006\u5411\u5bb9\u5668\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\n  rend()    \u8fd4\u56de\u9006\u5411\u5bb9\u5668\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u540e\u9762\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\n  clear()   \u6e05\u9664\u5bb9\u5668\u4e2d\u6240\u6709\u5143\u7d20\n  max_size()    \u8fd4\u56de\u6700\u5927\u6570\u636e\u91cf\n  insert()  \u63d2\u5165\n        vec.insert(vec.begin()+i,a); //\u5728\u7b2ci+1\u4e2a\u5143\u7d20\u524d\u9762\u63d2\u5165a;\n  v.erase() \u64e6\u9664\u5143\u7d20\n        vec.erase(vec.begin()+2);   //\u5220\u9664\u7b2c3\u4e2a\u5143\u7d20               |\n        vec.erase(vec.begin()+i,vec.end()+j); //\u5220\u9664\u533a\u95f4[i,j-1];\u533a\u95f4\u4ece0\u5f00\u59cb\n\n\n\n// \u8bbf\u95ee\u6570\u636e \u968f\u673a\u8bbf\u95ee\n    cout << vec[2] << endl;    // 0, []\u8bbf\u95ee\uff0c\u65e0\u8303\u56f4\u68c0\u67e5\n    cout << vec.at(1) << endl; // 2, .at()\u8bbf\u95ee\uff0c\u4f1a\u8fdb\u884c\u8303\u56f4\u68c0\u67e5\uff0c\u8bbf\u95ee\u901f\u5ea6\u7a0d\u6162\uff0c\u4f46\u662f\u5b89\u5168\n    \n// \u901a\u8fc7 \u7d22\u5f15 \u904d\u5386\u5143\u7d20\n    for(int i = 0; i < vec.size(); ++i){\n        cout << vec[i] << " "; //\u786e\u5b9a\u7d22\u5f15\u4e0d\u4f1a\u8d85\u8303\u56f4\uff0c\u5c31\u7528\u7d22\u5f15\u8bbf\u95ee  vec.at(i)\n    }\n    cout << endl;\n    \n// \u901a\u8fc7\u8fed\u4ee3\u5668 \u904d\u5386\u5143\u7d20\n    for(vector<int>::iterator iter = vec.begin(); iter != vec.end(); ++iter){\n        cout << *iter << " "; // \u5bf9\u8fed\u4ee3\u5668\u8fdb\u884c\u89e3\u5f15\u7528\u5f97\u5230\n    }\n    cout << endl;\n    \n//\u8303\u56f4for c++ 11 \u904d\u5386\u5143\u7d20\n//    for(item:vec){\n//      cout << item << " ";\n//    }\n//    cout << endl;\n\n// \u6307\u9488\u8bbf\u95ee\n    int* p = &vec[0];\n    for(int i = 0; i < vec.size(); ++i){\n        cout << p[i]<< " ";\n    }\n\n  push_back()\u4f7f\u7528 vector::insert \u65b9\u6cd5\u5b9e\u73b0\uff0c\u5728\u5bb9\u5668\u5c3e\u90e8insert\u6765\u5b9e\u73b0\u7684\u3002\n  void push_back(_Elem _Ch)  \n  {   // insert element at end  \n   insert(end(), _Ch);  // \u7b97\u6cd5\n  } \n  pop_back() \u4f7f\u7528vector::earse\uff0c\u64e6\u9664\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u5143\u7d20\u6765\u5b9e\u73b0\u7684\u3002\n  \u5220\u9664\u5bb9\u5668\u5c3e\u90e8\u5143\u7d20\uff0c\u540c\u65f6c.size()\u4f1a\u51cf\u5c11\u3002\n  void pop_back()  \n  {   // erase element at end  \n   erase(this->_Mysize - 1);    // throws if _Mysize == 0  \n  } \n  \n  v.shrink_to_fit();\n  //  \u4e3a\u4e86\u4e0d\u8ba9vector\u6d6a\u8d39\u592a\u591a\u7684\u5185\u5b58\uff0c\u6211\u4eec\u5728\u6700\u540e\u8c03\u7528\u4e86shrink_to_fit\u3002\n  // \u8be5\u51fd\u6570\u4f1a\u4e3a\u5143\u7d20\u5206\u914d\u8db3\u591f\u7684\u7a7a\u95f4\uff0c\u5c06\u5269\u4f59\u7684\u5143\u7d20\u79fb\u5230\u8be5\u7a7a\u95f4\u5185\uff0c\u5e76\u4e14\u5220\u9664\u4e4b\u524d\u90a3\u4e2a\u6bd4\u8f83\u5927\u7684\u5185\u5b58\u7a7a\u95f4\u3002\n  // \u4f1a\u5c06\u591a\u4f59\u7684\u7a7a\u95f4\u5f52\u8fd8\u7ed9\u7cfb\u7edf\n')),(0,o.kt)("h4",{id:"vector-\u4f18\u70b9"},"vector \u4f18\u70b9\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"\u968f\u673a\u5b58\u53d6\uff0c\u5373 vi[i] \u64cd\u4f5c \u548c vi.at(i)\u3002\n\nat() \u51fd\u6570\u56e0\u4e3a\u68c0\u67e5\u8d8a\u754c\u8981\u82b1\u8d39\u4e00\u4e9b\u65f6\u95f4\uff0c\u6240\u4ee5at\u51fd\u6570\u4f1a\u8ba9\u7a0b\u5e8f\u6162\u4e00\u4e9b\u3002\n\u5f53\u9700\u8981\u975e\u5e38\u5feb\u7684\u7d22\u5f15\u6210\u5458\u65f6\uff0c\u5e76\u80fd\u4fdd\u8bc1\u7d22\u5f15\u4e0d\u8d8a\u754c\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528[]\u5feb\u901f\u8bbf\u95eevector\u5b9e\u4f8b\u3002\n\n\u52a8\u6001\u64cd\u4f5c, \u5c3e\u90e8\u63d2\u5165 vi.push_back() \u4e0e \u5c3e\u90e8\u63d2\u5220\u9664 vi.pop_back()\n\u81ea\u52a8\u8c03\u6574\u5185\u5b58\uff0c\u8282\u7701\u7a7a\u95f4\n    \ntry{} catch(){} \u6355\u83b7 vector\u8bbf\u95ee\u8d8a\u754c \u5f02\u5e38\ntry{\n   temp = v.at(k);\n}\ncatch(std::out_of_range &e){\n   std::cout << e.what() << std::endl;\n}\n\n")),(0,o.kt)("h4",{id:"vector\u7f3a\u70b9"},"vector\u7f3a\u70b9\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"  \u5b9e\u73b0\u63d2\u5165\u4e0e\u5220\u9664\u64cd\u4f5c\u6548\u7387\u4f4e\n  \u53ea\u80fd\u5728\u5c3e\u90e8\u63d2\u5165\u4e0e\u5220\u9664\uff0c\u5728\u5934\u90e8\u63d2\u5165\u4e0e\u5220\u9664\u6d88\u8017\u65f6\u95f4\u89c4\u6a21\u4e0e\u5bb9\u5668\u5927\u5c0f\u6210\u6b63\u6bd4,\u5b83\u4f1a\u5c06\u540e\u9762\u7684\u5143\u7d20\u4f9d\u6b21\u524d\u79fb\u3002\n  \u5f53\u52a8\u6001\u6dfb\u52a0\u7684\u6570\u636e\u8d85\u8fc7\u9ed8\u8ba4\u5185\u5b58\u5927\u5c0f\u65f6\uff0c\u8981\u8fdb\u884c\u6574\u4f53\u7684\u91cd\u65b0\u5206\u914d\uff0c\u62f7\u8d1d\u4e0e\u91ca\u653e\u3002\n")),(0,o.kt)("h3",{id:""}),(0,o.kt)("p",null,"3\u3001\u7b97\u6cd5\u9700\u8981\u5934\u6587\u4ef6",(0,o.kt)("inlineCode",{parentName:"p"},"#include<algorithm>")),(0,o.kt)("p",null,"(1) \u4f7f\u7528reverse\u5c06\u5143\u7d20\u7ffb\u8f6c\uff1areverse(vec.begin(),vec.end());\u5c06\u5143\u7d20\u7ffb\u8f6c\uff0c\u5373\u9006\u5e8f\u6392\u5217\uff01(\u5728vector\u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u4e2d\u9700\u8981\u4e24\u4e2a\u8fed\u4ee3\u5668\uff0c\u4e00\u822c\u540e\u4e00\u4e2a\u90fd\u4e0d\u5305\u542b)"),(0,o.kt)("p",null,"(2)\u4f7f\u7528sort\u6392\u5e8f\uff1asort(vec.begin(),vec.end());(\u9ed8\u8ba4\u662f\u6309\u5347\u5e8f\u6392\u5217,\u5373\u4ece\u5c0f\u5230\u5927)."),(0,o.kt)("p",null,"\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199\u6392\u5e8f\u6bd4\u8f83\u51fd\u6570\u6309\u7167\u964d\u5e8f\u6bd4\u8f83\uff0c\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-C++"},"\u5b9a\u4e49\u6392\u5e8f\u6bd4\u8f83\u51fd\u6570\uff1a\n\nbool Comp(const int &a,const int &b)\n{\n    return a>b;\n}\n\u8c03\u7528\u65f6:sort(vec.begin(),vec.end(),Comp)\uff0c\u8fd9\u6837\u5c31\u964d\u5e8f\u6392\u5e8f\u3002 \n\n")),(0,o.kt)("h3",{id:"dequeue"},"dequeue"),(0,o.kt)("p",null," double-end queue\uff0c\u8fde\u7eed\u5b58\u50a8\u7ed3\u6784"),(0,o.kt)("p",null,"  deque\u8fde\u7eed\u5b58\u50a8\u7ed3\u6784\uff0c\u5373\u5176\u6bcf\u4e2a\u5143\u7d20\u5728\u5185\u5b58\u4e0a\u4e5f\u662f\u8fde\u7eed\u7684\uff0c\u7c7b\u4f3c\u4e8evector\uff0c\n\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0cdeque\u63d0\u4f9b\u4e86\u4e24\u7ea7\u6570\u7ec4\u7ed3\u6784\uff0c \u7b2c\u4e00\u7ea7\u5b8c\u5168\u7c7b\u4f3c\u4e8evector\uff0c\u4ee3\u8868\u5b9e\u9645\u5bb9\u5668\uff1b  \u53e6\u4e00\u7ea7\u7ef4\u62a4\u5bb9\u5668\u7684\u9996\u4f4d\u5730\u5740\u3002\n\u8fd9\u6837\uff0cdeque\u9664\u4e86\u5177\u6709vector\u7684\u6240\u6709\u529f\u80fd\u5916\uff0c\u8fd8\u652f\u6301\u9ad8\u6548\u7684\u9996/\u5c3e\u7aef\u63d2\u5165/\u5220\u9664\u64cd\u4f5c\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'/*\n1. \u5728\u961f\u5217 \u5934\u90e8\u548c\u5c3e\u90e8\u63d2\u5165\u5143\u7d20\uff0c\u7279\u522b\u5feb O(1)\n2. \u5728\u961f\u5217\u4e2d\u95f4\u63d2\u5165\u5143\u7d20\uff0c\u7279\u522b\u6162 O(n)\n3. \u5728\u961f\u5217\u4e2d\u67e5\u627e\u5143\u7d20\uff0c\u7279\u522b\u6162 O(n)\n<-----|..................|-----\x3e\n     \u961f\u9996               \u961f\u5c3e \n*/\n#include<deque>\n#include<algorithm>\nclass deque {\n    // \u5728\u961f\u5934\u63d2\u5165\u5143\u7d20 n\n    void push_front(int n);\n    // \u5728\u961f\u5c3e\u63d2\u5165\u5143\u7d20 n\n    void push_back(int n);\n    // \u5728\u961f\u5934\u5220\u9664\u5143\u7d20\n    void pop_front();\n    // \u5728\u961f\u5c3e\u5220\u9664\u5143\u7d20\n    void pop_back();\n    // \u8fd4\u56de\u961f\u5934\u5143\u7d20\n    int front();\n    // \u8fd4\u56de\u961f\u5c3e\u5143\u7d20\n    int back();\n}\n// \u5176\u4ed6\u63a5\u53e3\u548c vector \u7684\u7c7b\u4f3c\ncout << deq[1] ; // 5\ncout << deq.at(2) ;// 2\ndeque<int>::iterator iter = deq.begin() + 3;\ncout << *iter ; // 0\n// size() empty()  clear() swap()\n  deque<int>::iterator iter;\n  for (iter = a.begin(); iter < a.end(); ++iter)\n  {\n    // \u8ba1\u7b97\u6570\u7ec4\u4e0b\u6807\uff0cdistance\u5305\u542b\u5728algorithm\u4e2d #include<algorithm>\n    int index = distance(a.begin(), iter);\n    cout << "a[" << index << "] = " << *iter << endl;\n  }\n')),(0,o.kt)("h4",{id:"deque-\u4f18\u70b9"},"deque \u4f18\u70b9\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"  1\uff09\u968f\u673a\u8bbf\u95ee\uff0c\u5373[]\u64cd\u4f5c\u548cdeque.at()\n  2) \u5728\u5185\u90e8\u65b9\u4fbf\u7684\u8fdb\u884c\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\n  3\uff09\u53ef\u5728\u53cc\u7aef\u8fdb\u884cpop\uff0cpush\n")),(0,o.kt)("h4",{id:"deque-\u7f3a\u70b9"},"deque \u7f3a\u70b9\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"  \u5360\u7528\u5185\u5b58\u591a\u3002\n")),(0,o.kt)("h3",{id:"-1"}),(0,o.kt)("h3",{id:"\u53cc\u5411\u94fe\u8868list"},"\u53cc\u5411\u94fe\u8868list"),(0,o.kt)("p",null,"  list\u53cc\u5411\u94fe\u8868\uff0c\u975e\u8fde\u7eed\u5b58\u50a8\u7ed3\u6784\uff0c\u5177\u6709\u53cc\u94fe\u8868\u7ed3\u6784"),(0,o.kt)("p",null,"  \u975e\u8fde\u7eed\u5b58\u50a8\u7ed3\u6784\uff0c\u5177\u6709\u53cc\u94fe\u8868\u7ed3\u6784\uff0c\u6bcf\u4e2a\u5143\u7d20\u7ef4\u62a4\u4e00\u5bf9\u524d\u5411\u548c\u540e\u5411\u6307\u9488\uff0c\u56e0\u6b64\u652f\u6301\u524d\u5411/\u540e\u5411\u904d\u5386\u3002   "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"/*\n1. \u5728\u94fe\u8868\u4e2d\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165/\u5220\u9664 \u5143\u7d20 \u7279\u522b\u5feb O(1)\n2. \u5728\u94fe\u8868\u4e2d\u67e5\u627e\u5143\u7d20 \u7279\u522b\u6162\uff0c O(n)\uff0c \u5b9e\u9645\u4e0a\u56e0\u4e3a\u5185\u5b58\u4e0d\u8fde\u7eed\uff0c\u6d6a\u8d39\u8bbf\u5b58case\uff0c\u6bd4vector\u6162\u4e86\u5f88\u591a\n3. \u65e0\u968f\u673a\u8bbf\u95ee [] \u4ee5\u53ca .at()\n4. splice() \u5b9e\u73b0list\u62fc\u63a5\u7684\u529f\u80fd\u3002\u5c06\u6e90list\u7684\u5185\u5bb9\u90e8\u5206\u6216\u5168\u90e8\u5143\u7d20\u5220\u9664\uff0c\u62fc\u63d2\u5165\u5230\u76ee\u7684list\u3002 O(1)\n*/\n#include<list>\n#include<algorithm> // std::find\n#include<iostream>\nusing namespace std;\nint main(){\n  list<char> lit;   \n  //-----------\u94fe\u8868\u53ef\u4ee5\u4ece\u4e24\u7aef\u63d2\u5165------------------- \xa0 \xa0 \xa0 \xa0\n  lit.push_back('b');  \n  lit.push_front('d');\n  //-----------\u94fe\u8868\u6253\u5370------------------- \n  list<char>::iterator it;    \n  for(it=lit.begin();it!=lit.end();it++)  \n  {  \n    cout<<*it<<\"  \";  \n  }  \n  cout<<endl;  \n  //-----------\u94fe\u8868\u53ef\u4ee5\u4ece\u4e24\u7aef\u5220\u9664-------------------   \n  lit.pop_back();    \n  lit.pop_front();  \n  //-------------\u5220\u9664\u6240\u6709\u7684a---------------------------------  \n  //lit.remove('a');  //\u5220\u9664\u6240\u6709\u7684a;  \n  //-----------\u5c06list\u91cc\u7684\u6570\u636e\u5012\u5e8f\u6392\u5217---------------  \n  lit.reverse();  \n  //-------------\u79fb\u9664\u8fde\u7eed\u4e14\u76f8\u540c\u7684a\uff0c\u53ea\u5269\u4e0b\u4e00\u4e2a;--------------------------------  \n  lit.unique();  //\u79fb\u9664\u8fde\u7eed\u4e14\u76f8\u540c\u7684a\uff0c\u53ea\u5269\u4e0b\u4e00\u4e2a;  \n  list<char> lit1; \n  list<char>::iterator it1; \n  //-------------\u5c06\u4e00\u4e2a\u94fe\u8868\u63d2\u5165\u5230\u53e6\u4e00\u4e2a\u94fe\u8868---------------------------------  \n  it1=find(lit.begin(),lit.end(),'f');  //\u5148\u7684\u627e\u5230\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u5728\u8be5\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u63d2\u5165\uff1b  \n  lit.splice(it1,lit1); //\u5c06\u7b2c\u4e8c\u4e2a\u94felit1\u8868\u63d2\u5165\u5230\u7b2c\u4e00\u4e2a\u94fe\u8868lit\u4e2d\uff1b\u5408\u5e76\u540e\u7684\u94fe\u8868\u5c31\u6ca1\u4e86\uff0c\u56e0\u4e3a\u4f20\u7684\u662f&\n  // \u6253\u5370\u51fd\u6570\n  void printList(const list<int>& a)\n  {\n  // \u6ce8\u610f\u5f62\u53c2\u4e2d\u662fconst list\uff0c\u6240\u4ee5\u4e0b\u9762\u4e5f\u9700\u8981\u7528const_iterator\n  // \u5426\u5219distance\u65e0\u6cd5\u4f7f\u7528\n  list<int>::const_iterator iter;\n  for (iter = a.begin(); iter != a.end(); ++iter)\n  {// \u8ba1\u7b97\u6570\u7ec4\u4e0b\u6807\uff0cdistance\u5305\u542b\u5728algorithm\u4e2d #include<algorithm>\n    size_t index = distance(a.begin(), iter);\n    cout << \"a[\" << index << \"] = \" << *iter << endl;\n  }\n  cout << endl;\n  }\n\n  list<int> a;\n  // push_front\u3001push_back\u63d2\u5165\u6570\u636e\n  a.push_front(4);\n  a.push_front(3);\n  a.push_front(2);\n  a.push_front(1);\n  a.push_back(50);\n  printList(a);\n\n  // insert\u63d2\u5165\u6570\u636e\n  list<int>::iterator iter;\n  iter = a.begin();\n  a.insert(iter, 0);\n  a.insert(++iter, 10);\n  a.insert(++iter, 4, 20); // \u63d2\u51654\u4e2a20\n  printList(a);\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'  // sort\u6392\u5e8f\n  cout << "sort\u6392\u5e8f" << endl;\n  a.sort();\n  printList(a);\n\n  // reverse\u9006\u5e8f\n  cout << "reverse\u9006\u5e8f" << endl;\n  a.reverse();\n  printList(a);\n\n  // erase\u5220\u9664\u6307\u5b9a\u5143\u7d20\n  cout << "erase\u5220\u9664\u6307\u5b9a\u5143\u7d20" << endl;\n  a.erase(iter);\n  printList(a);\n\n  // erase\u5220\u9664\u6307\u5b9a\u533a\u95f4\u7684\u5143\u7d20\n  cout << "erase\u5220\u9664\u6307\u5b9a\u533a\u95f4\u5143\u7d20" << endl;\n  a.erase(++a.begin(), --a.end());\n  printList(a);\n')),(0,o.kt)("h4",{id:"list-\u4f18\u70b9"},"list \u4f18\u70b9\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"  1\uff09\u4e0d\u4f7f\u7528\u8fde\u7eed\u5185\u5b58\u5b8c\u6210\u52a8\u6001\u64cd\u4f5c\u3002\n  2\uff09\u5728\u5185\u90e8\u65b9\u4fbf\u7684\u8fdb\u884c\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c \u52a8\u6001\u64cd\u4f5c\uff0c\u63d2\u5165\u4e0e\u5220\u9664\u6548\u7387\u9ad8\n  3\uff09\u53ef\u5728\u4e24\u7aef\u8fdb\u884cpush\u3001pop \n")),(0,o.kt)("h4",{id:"list\u7f3a\u70b9"},"list\u7f3a\u70b9\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"  1) \u4e0d\u80fd\u8fdb\u884c\u5185\u90e8\u7684\u968f\u673a\u8bbf\u95ee\uff0c\u5373\u4e0d\u652f\u6301[ ]\u64cd\u4f5c\u7b26\u548cvector.at()\n  2) \u4e0d\u80fd\u8fdb\u884c\u5185\u90e8\u7684\u968f\u673a\u8bbf\u95ee\uff0c\u5373\u4e0d\u652f\u6301[ ]\u64cd\u4f5c\u7b26\u548cvector.at()\n")),(0,o.kt)("h3",{id:"array"},"array"),(0,o.kt)("p",null,"array\u662f\u56fa\u5b9a\u5927\u5c0f\u7684\u987a\u5e8f\u5bb9\u5668\uff0c\u5b83\u4eec\u4fdd\u5b58\u4e86\u4e00\u4e2a\u4ee5\u4e25\u683c\u7684\u7ebf\u6027\u987a\u5e8f\u6392\u5217\u7684\u7279\u5b9a\u6570\u91cf\u7684\u5143\u7d20\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'template < class T, size_t N > class array;\n      iterator begin() noexcept; //\u8fd4\u56de\u6307\u5411\u6570\u7ec4\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002\n\n      reverse_iterator rbegin\uff08\uff09noexcept; //\u8fd4\u56de\u6307\u5411\u6570\u7ec4\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668\u3002\n\nconst_iterator cbegin\uff08\uff09const noexcept; //\u8fd4\u56de\u6307\u5411\u6570\u7ec4\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5e38\u91cf\u8fed\u4ee3\u5668\uff08const_iterator\uff09\uff1b\u8fd9\u4e2a\u8fed\u4ee3\u5668\u53ef\u4ee5\u589e\u52a0\u548c\u51cf\u5c11\uff0c\u4f46\u662f\u4e0d\u80fd\u7528\u6765\u4fee\u6539\u5b83\u6307\u5411\u7684\u5185\u5bb9\u3002\n\nconstexpr size_type size\uff08\uff09noexcept; //\u8fd4\u56de\u6570\u7ec4\u5bb9\u5668\u4e2d\u5143\u7d20\u7684\u6570\u91cf\u3002\n\nconstexpr size_type max_size() noexcept; //\u8fd4\u56de\u6570\u7ec4\u5bb9\u5668\u53ef\u5bb9\u7eb3\u7684\u6700\u5927\u5143\u7d20\u6570\u3002\u6570\u7ec4\u5bf9\u8c61\u7684max_size\u4e0e\u5176size\u4e00\u6837\uff0c\u59cb\u7ec8\u7b49\u4e8e\u7528\u4e8e\u5b9e\u4f8b\u5316\u6570\u7ec4\u6a21\u677f\u7c7b\u7684\u7b2c\u4e8c\u4e2a\u6a21\u677f\u53c2\u6570\u3002\n\n      value_type* data() noexcept; //\u8fd4\u56de\u6307\u5411\u6570\u7ec4\u5bf9\u8c61\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u9488\u3002\n//\u7531\u4e8e\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5b58\u50a8\u5728\u8fde\u7eed\u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c\u6240\u4ee5\u68c0\u7d22\u5230\u7684\u6307\u9488\u53ef\u4ee5\u504f\u79fb\u4ee5\u8bbf\u95ee\u6570\u7ec4\u4e2d\u7684\u4efb\u4f55\u5143\u7d20\u3002\nint main ()\n{\n  const char* cstr = "Test string";\n  std::array<char,12> charray;\n  std::memcpy (charray.data(),cstr,12);\n  std::cout << charray.data() << \'\\n\';\n  return 0;\n}\nvoid fill (const value_type& val); //\u7528val\u586b\u5145\u6570\u7ec4\u6240\u6709\u5143\u7d20\uff0c\u5c06val\u8bbe\u7f6e\u4e3a\u6570\u7ec4\u5bf9\u8c61\u4e2d\u6240\u6709\u5143\u7d20\u7684\u503c\u3002\n\nstd::get<0>(myarray)\uff1b//\u4f20\u5165\u4e00\u4e2a\u6570\u7ec4\u5bb9\u5668\uff0c\u8fd4\u56de\u6307\u5b9a\u4f4d\u7f6e\u5143\u7d20\u7684\u5f15\u7528\u3002\n  myelement = std::get<2>(myarray);\n  std::get<2>(myarray) = std::get<0>(myarray);\n  std::get<0>(myarray) = myelement;\n\n\nrelational operators (array) //\u4f9d\u6b64\u6bd4\u8f83\u6570\u7ec4\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u5173\u7cfb\u3002\n  if (a==b) std::cout << "a and b are equal\\n";\n  if (b!=c) std::cout << "b and c are not equal\\n";\n  if (b<c) std::cout << "b is less than c\\n";\n  if (c>b) std::cout << "c is greater than b\\n";\n  if (a<=b) std::cout << "a is less than or equal to b\\n";\n  if (a>=b) std::cout << "a is greater than or equal to b\\n";\n')),(0,o.kt)("h3",{id:"string"},"string"),(0,o.kt)("h4",{id:"\u7c7b\u6210\u5458\u51fd\u6570"},"\u7c7b\u6210\u5458\u51fd\u6570"),(0,o.kt)("p",null,"\u5728\u5b9a\u4e49 string \u7c7b\u5bf9\u8c61\u65f6\uff0cstring \u7c7b\u81ea\u8eab\u53ef\u4ee5\u7ba1\u7406\u5185\u5b58\uff0c\u7a0b\u5e8f\u5458\u4e0d\u5fc5\u5173\u6ce8\u5185\u5b58\u7684\u5206\u914d\u7ec6\u8282\u3002"),(0,o.kt)("p",null,"string \u7c7b\u63d0\u4f9b\u7684\u5404\u79cd\u64cd\u4f5c\u51fd\u6570\u5927\u81f4\u5206\u4e3a\u516b\u7c7b\uff1a\u6784\u9020\u5668\u548c\u6790\u6784\u5668\u3001\u5927\u5c0f\u548c\u5bb9\u91cf\u3001\u5143\u7d20\u5b58\u53d6\u3001\u5b57 \u7b26\u4e32\u6bd4\u8f83\u3001\u5b57\u7b26\u4e32\u4fee\u6539\u3001\u5b57\u7b26\u4e32\u63a5\u5408\u3001I/O \u64cd\u4f5c\u4ee5\u53ca\u641c\u7d22\u548c\u67e5\u627e\u3002"),(0,o.kt)("p",null,"\u4e0b\u8868\u5217\u51fa\u4e86 string \u7c7b\u7684\u6240\u6709\u6210\u5458\u51fd\u6570\u53ca\u5b83\u4eec\u7684\u529f\u80fd\u3002"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"\u51fd\u6570\u540d\u79f0"),(0,o.kt)("th",{parentName:"tr",align:null},"\u529f\u80fd"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"\u6784\u9020\u51fd\u6570"),(0,o.kt)("td",{parentName:"tr",align:null},"\u4ea7\u751f\u6216\u590d\u5236\u5b57\u7b26\u4e32")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"\u6790\u6784\u51fd\u6570"),(0,o.kt)("td",{parentName:"tr",align:null},"\u9500\u6bc1\u5b57\u7b26\u4e32")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"=\uff0cassign"),(0,o.kt)("td",{parentName:"tr",align:null},"\u8d4b\u4ee5\u65b0\u503c")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Swap"),(0,o.kt)("td",{parentName:"tr",align:null},"\u4ea4\u6362\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5185\u5bb9")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"+ =\uff0cappend( )\uff0cpush_back()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u6dfb\u52a0\u5b57\u7b26")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"insert ()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u63d2\u5165\u5b57\u7b26")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"erase()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u5220\u9664\u5b57\u7b26")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"clear ()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u79fb\u9664\u5168\u90e8\u5b57\u7b26")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"resize ()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u6539\u53d8\u5b57\u7b26\u6570\u91cf")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"replace()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u66ff\u6362\u5b57\u7b26")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"+"),(0,o.kt)("td",{parentName:"tr",align:null},"\u4e32\u8054\u5b57\u7b26\u4e32")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"==\uff0c\uff01 =\uff0c<\uff0c<=\uff0c>\uff0c>=\uff0ccompare()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u6bd4\u8f83\u5b57\u7b26\u4e32\u5185\u5bb9")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"size()\uff0clength()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u5b57\u7b26\u6570\u91cf")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"max_size ()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u5b57\u7b26\u7684\u6700\u5927\u53ef\u80fd\u4e2a\u6570")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"empty ()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"capacity ()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u91cd\u65b0\u5206\u914d\u4e4b\u524d\u7684\u5b57\u7b26\u5bb9\u91cf")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"reserve()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u4fdd\u7559\u5185\u5b58\u4ee5\u5b58\u50a8\u4e00\u5b9a\u6570\u91cf\u7684\u5b57\u7b26")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[],at()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u5b58\u53d6\u5355\u4e00\u5b57\u7b26")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},">>\uff0cgetline()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u4ece stream \u4e2d\u8bfb\u53d6\u67d0\u503c")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"<<"),(0,o.kt)("td",{parentName:"tr",align:null},"\u5c06\u503c\u5199\u5165 stream")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"copy()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u5c06\u5185\u5bb9\u590d\u5236\u4e3a\u4e00\u4e2a C - string")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"c_str()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u5c06\u5185\u5bb9\u4ee5 C - string \u5f62\u5f0f\u8fd4\u56de")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"data()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u5c06\u5185\u5bb9\u4ee5\u5b57\u7b26\u6570\u7ec4\u5f62\u5f0f\u8fd4\u56de")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"substr()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u5b50\u5b57\u7b26\u4e32")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"find()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u641c\u5bfb\u67d0\u5b50\u5b57\u7b26\u4e32\u6216\u5b57\u7b26")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"begin( )\uff0cend()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u63d0\u4f9b\u6b63\u5411\u8fed\u4ee3\u5668\u652f\u6301")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"rbegin()\uff0crend()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u63d0\u4f9b\u9006\u5411\u8fed\u4ee3\u5668\u652f\u6301")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"get_allocator()"),(0,o.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u914d\u7f6e\u5668")))),(0,o.kt)("p",null,"string strs //\u751f\u6210\u7a7a\u5b57\u7b26\u4e32\nstring s(str) //\u751f\u6210\u5b57\u7b26\u4e32str\u7684\u590d\u5236\u54c1\nstring s(str, stridx) //\u5c06\u5b57\u7b26\u4e32str\u4e2d\u59cb\u4e8estridx\u7684\u90e8\u5206\u4f5c\u4e3a\u6784\u9020\u51fd\u6570\u7684\u521d\u503c\nstring s(str, strbegin, strlen) //\u5c06\u5b57\u7b26\u4e32str\u4e2d\u59cb\u4e8estrbegin\u3001\u957f\u5ea6\u4e3astrlen\u7684\u90e8\u5206\u4f5c\u4e3a\u5b57\u7b26\u4e32\u521d\u503c\nstring s(cstr) //\u4ee5C_string\u7c7b\u578bcstr\u4f5c\u4e3a\u5b57\u7b26\u4e32s\u7684\u521d\u503c\nstring s(cstr,char_len)  //\u4ee5C_string\u7c7b\u578bcstr\u7684\u524dchar_len\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u5b57\u7b26\u4e32s\u7684\u521d\u503c\nstrings(num, c) //\u751f\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5305\u542bnum\u4e2ac\u5b57\u7b26\nstrings(strs, beg, end)  //\u4ee5\u533a\u95f4","[beg, end]","\u5185\u7684\u5b57\u7b26\u4f5c\u4e3a\u5b57\u7b26\u4e32s\u7684\u521d\u503c"),(0,o.kt)("h2",{id:"12-\u6709\u5e8f\u5173\u8054\u5bb9\u5668\u7ea2\u9ed1\u4e8c\u53c9\u6811"},"1.2 \u6709\u5e8f\u5173\u8054\u5bb9\u5668\uff08\u7ea2\u9ed1\u4e8c\u53c9\u6811\uff09"),(0,o.kt)("p",null,"\u6309\u5173\u952e\u5b57\u4fdd\u5b58\u548c\u8bbf\u95ee  map (key-value\u952e\u503c\u5bf9\uff0c\u7c7b\u4f3c\u5b57\u5178\u7684\u6982\u5ff5) set(\u53ea\u5305\u542b\u4e00\u4e2a\u5173\u952e\u5b57(\u5173\u952e\u5b57\u5373\u503c)) "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"set, multiset \u5355\u503c\u6811\u96c6\u5408  multi \u5173\u952e\u5b57\u53ef\u4ee5\u91cd\u590d\u51fa\u73b0\nmap, multimap \u914d\u5bf9\u53cc\u503c\u6811\u96c6\u5408\n\n  map      \u5173\u8054\u6570\u7ec4\uff1a\u4fdd\u5b58\u5173\u952e\u5b57-\u503c\u5bf9\n  set      \u5173\u952e\u5b57\u5373\u503c,\u53ea\u4fdd\u5b58\u5173\u952e\u5b57\u7684\u5bb9\u5668\n  multimap \u5173\u952e\u5b57\u53ef\u91cd\u590d\u51fa\u73b0\u7684 map\n  multiset \u5173\u952e\u5b57\u53ef\u91cd\u590d\u51fa\u73b0\u7684 set \n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'  //map\u521d\u59cb\u5316\u4e3a\u7a7a\n  map<string, size_t> word_count;//string \u5230 size_t \u7684\u7a7amap\n  //set\u7684\u5217\u8868\u521d\u59cb\u5316\n  set<string> exclude = {"The", "But", "And", "Or", "An", "A",\n                         "the", "but", "and", "or", "an", "a"};//\u9700\u8981\u5254\u9664\u7684\u5355\u8bcd\n  //map\u7684\u5217\u8868\u521d\u59cb\u5316 \u4e09\u4e2a\u5143\u7d20 \u5c06\u59d3 \u6620\u5c04\u4e3a \u540d\u5b57\n  map<string, string> authers = {{"Jyly", "Jeam"}\uff0c\n                                 {"Aust", "Amy"},\n                                 {"Dickens", "Charles"} };\n  // multimap multisetde\u521d\u59cb\u5316,\u4e00\u4e2a\u5355\u8bcd\u5bf9\u5e94\u591a\u4e2a\u76f8\u4e92\u5173\u8054\u7684\u8bcd\u4e49,\u5c31\u662f\u8bf4 \u5173\u952e\u5b57\u53ef\u4ee5\u91cd\u590d\u51fa\u73b0\n  vector<int> ivec;\n  for(vector<int>::size_type i = 0; i != 10; ++i){\n        ivec.push_back(i);\n        ivec.push_back(i);// \u6bcf\u4e2a\u6570\u91cd\u590d\u4fdd\u5b58\u4e00\u6b21\n  }\n  // iset\u5305\u542b\u6765\u81eaivec\u7684\u4e0d\u91cd\u590d\u7684\u5143\u7d20 \u542b\u670910\u4e2a\u5143\u7d20\n  set<int> iset(ivec.cbegin(), ivec.cend());\n  // multiset \u5305\u542bivec\u7684\u6240\u670920\u4e2a\u5143\u7d20\n  multiset<int> miset(ivec.cbegin(), ivec.cend());\n')),(0,o.kt)("h2",{id:"13--\u65e0\u5e8f\u5173\u8054\u5bb9\u5668\u54c8\u5e0c"},"1.3  \u65e0\u5e8f\u5173\u8054\u5bb9\u5668\uff08\u54c8\u5e0c\uff09"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"unordered set/multiset  \u5355\u503c\u6876\u96c6\u5408\nunordered map/multimap  \u914d\u5bf9\u53cc\u503c\u6876\u96c6\u5408 \n//\u54c8\u5e0c\u51fd\u6570\u5b9e\u73b0\n  unordered_map \u54c8\u5e0c\u51fd\u6570\u7ec4\u7ec7\u7684map\n  unordered_set \u54c8\u5e0c\u51fd\u6570\u7ec4\u7ec7\u7684set\n  unordered_multimap \u54c8\u5e0c\u51fd\u6570\u7ec4\u7ec7\u7684multimap, \u5173\u952e\u5b57\u53ef\u4ee5\u91cd\u590d\u51fa\u73b0\n  unordered_multiset \u54c8\u5e0c\u51fd\u6570\u7ec4\u7ec7\u7684multiset\uff0c \u5173\u952e\u5b57\u53ef\u4ee5\u91cd\u590d\u51fa\u73b0\n\n// \u57fa\u4e8ehash table\uff08\u54c8\u5e0c\u8868\uff09\n  hash_map\n  hash_set\n  hash_multimap\n  hash_multiset\n")),(0,o.kt)("h4",{id:"\u65e0\u5e8f\u5bb9\u5668\u7684\u5b58\u50a8\u65b9\u5f0f"},"\u65e0\u5e8f\u5bb9\u5668\u7684\u5b58\u50a8\u65b9\u5f0f"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u7ba1\u7406\u6876")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u65e0\u5e8f\u5bb9\u5668\u5728\u5b58\u50a8\u7ec4\u7ec7\u4e0a\u4e3a\u4e00\u7ec4\u6876(bucket)\uff0c\u6bcf\u4e2a\u6876\u4fdd\u5b58\u96f6\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\uff0c\u4f7f\u7528\u4e00\u4e2ahash function(\u54c8\u5e0c\u51fd\u6570)\u5c06\u5143\u7d20\u6620\u5c04\u5230\u6876\uff0c")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u4e3a\u4e86\u8bbf\u95ee\u5143\u7d20\uff0c\u5bb9\u5668\u9996\u5148\u8ba1\u7b97\u5143\u7d20\u7684\u54c8\u5e0c\u503c\uff0c\u5b83\u6307\u51fa\u5e94\u8be5\u641c\u7d22\u54ea\u4e2a\u6876\uff0c\u5bb9\u5668\u5c06\u5177\u6709\u56fa\u5b9a\u54c8\u5e0c\u503c\u7684\u6240\u6709\u5143\u7d20\u90fd\u4fdd\u5b58\u5728\u76f8\u5e94\u7684\u6876\u4e2d\u3002")),(0,o.kt)("p",null,"\u5bf9\u4e8e\u5b58\u50a8\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u65e0\u5e8f\u5bb9\u5668\uff0c \u9700\u8981\u81ea\u5df1\u5b9a\u4e49\u300c\u54c8\u5e0c\u51fd\u6570\u300d\u548c\u300c\u6bd4\u8f83\u51fd\u6570\u300d(==) \u6765\u5b9e\u73b0\u5b58\u50a8"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"  //\u54c8\u5e0c\u51fd\u6570\n  size_t hasher(const Sales_data &sd){\n        return hash<string>()(sd.isbn());//h\u54c8\u5e0c\u7c7b\u578b\n  }\n  //\u6bd4\u8f83\u51fd\u6570\n  bool eqOp(const Sales_data &lhs, const Sales_data &rhs){\n    return \xa0 lhs.isbn() == rhs.isbn();// \u6bd4\u8f83\u51fd\u6570\xa0\n  }\n  // \u5b9a\u4e49\u7279\u5b9a\u7c7b\u7684 unordered_multiset\n  using = sd_unordered_multiset = unordered_multiset<Sales_data, decltype(hasher)*, decltype(eqOp)*>// \u4e24\u4e2a\u51fd\u6570\u6307\u9488\n")),(0,o.kt)("h2",{id:"\u7ed3\u679c\u5206\u6790"},"\u7ed3\u679c\u5206\u6790"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"  \u8fd0\u884c\u6548\u7387\u65b9\u9762\uff1aunordered_map\u6700\u9ad8\uff0chash_map\u5176\u6b21\uff0c\u800cmap\u6548\u7387\u6700\u4f4e\n  \u5360\u7528\u5185\u5b58\u65b9\u9762\uff1ahash_map\u5185\u5b58\u5360\u7528\u6700\u4f4e\uff0cunordered_map\u5176\u6b21\uff0c\u800cmap\u5360\u7528\u6700\u9ad8\n")),(0,o.kt)("h2",{id:"pair\u7c7b\u578b"},"pair\u7c7b\u578b"),(0,o.kt)("p",null,"\u7528\u6765\u751f\u6210 \u7279\u70b9\u7c7b\u578b\u7684\u6a21\u677f\nfirst \u548c second \u6765\u8bbf\u95ee",(0,o.kt)("br",{parentName:"p"}),"\n","map\u7684\u5143\u7d20\u662f pair\u7c7b\u578b",(0,o.kt)("br",{parentName:"p"}),"\n","make_pair(v1, v2)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'  pair<string, string> anon;//\n  pair<string, size_t> word_count;//\n  pair<string, vector<int>> line;//\u4fdd\u5b58 string \u548c vector<int> \n  pair<string, string> author{"James", "Joyce"};//\u5217\u8868\u521d\u59cb\u5316\n  // pair\u7c7b\u578b\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u51fd\u6570\n  pair<string, int> process(vector<string> &v){\n        if(!v.empty())//back()  \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n              return {v.back(), v.back().size()};//\u5217\u8868\u521d\u59cb\u5316\n              // return pair<string, int>(v.back(), v.back().size());\n              // return make_pair(v.back(), v.back().size()):\n        else \n              return pair<string, int>();//\u9690\u5f0f\u6784\u9020\u8fd4\u56de\u503c\n        }\n')),(0,o.kt)("h3",{id:"priority_queue"},"priority_queue"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <queue>  // std::priority_queue\n// \u672c\u6587\u91cc\u7684\u6240\u6709\u4f18\u5148\u961f\u5217\u90fd\u4f1a\u52a0\u4e0a\u547d\u540d\u7a7a\u95f4\n// \u5982\u679c\u4e0d\u60f3\u52a0\u547d\u540d\u7a7a\u95f4\uff0c\u9700\u8981\u4f7f\u7528\uff1ausing std::priority_queue;\n// \u4e0d\u63a8\u8350\u76f4\u63a5\u4f7f\u7528 using namespace std;\nstd::priority_queue<T, Container, Compare> q;\n/*\n * T: \u50a8\u5b58\u7684\u5143\u7d20\u7c7b\u578b\n * Container:\n * \u50a8\u5b58\u7684\u5bb9\u5668\u7c7b\u578b\uff0c\u4e14\u8981\u6c42\u6ee1\u8db3\u987a\u5e8f\u5bb9\u5668\u7684\u8981\u6c42\u3001\u5177\u6709\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\u7684\u8981\u6c42 \u4e14\u652f\u6301\n * front() / push_back() / pop_back() \u4e09\u4e2a\u51fd\u6570\uff0c \u6807\u51c6\u5bb9\u5668\u4e2d std::vector /\n * std::deque \u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42\u3002 Compare: \u9ed8\u8ba4\u4e3a\u4e25\u683c\u7684\u5f31\u5e8f\u6bd4\u8f83\u7c7b\u578b\n * priority_queue \u662f\u6309\u7167\u5143\u7d20\u4f18\u5148\u7ea7\u5927\u7684\u5728\u5806\u9876\uff0c\u6839\u636e operator <\n * \u7684\u5b9a\u4e49\uff0c\u9ed8\u8ba4\u662f\u5927\u6839\u5806\uff0c \u6211\u4eec\u53ef\u4ee5\u5229\u7528\n * greater<T>\uff08\u82e5\u652f\u6301\uff09\uff0c\u6216\u8005\u81ea\u5b9a\u4e49\u7c7b\u7684\u5c0f\u4e8e\u53f7\u91cd\u8f7d\u5b9e\u73b0\u6392\u5e8f\u3002\n * \u6ce8\u610f\uff1a\u53ea\u652f\u6301\u5c0f\u4e8e\u53f7\u91cd\u8f7d\u800c\u4e0d\u652f\u6301\u5176\u4ed6\u6bd4\u8f83\u7b26\u53f7\u7684\u91cd\u8f7d\u3002\n */\n// \u6784\u9020\u65b9\u5f0f \uff1a\nstd::priority_queue<int> q1;\nstd::priority_queue<int, vector<int>> q2;\n// C++11 \u524d\uff0c\u8bf7\u4f7f\u7528 vector<int> >\uff0c\u7a7a\u683c\u4e0d\u53ef\u7701\u7565\nstd::priority_queue<int, deque<int>, greater<int>> q3;\n// \u6ce8\u610f\uff1a\u4e0d\u53ef\u8df3\u8fc7\u5bb9\u5668\u53c2\u6570\u76f4\u63a5\u4f20\u5165\u6bd4\u8f83\u7c7b\n")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"top()")," : \u8bbf\u95ee\u6808\u9876\u5143\u7d20 \u5e38\u6570\u590d\u6742\u5ea6"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"empty()")," : \u68c0\u67e5\u5e95\u5c42\u7684\u5bb9\u5668\u662f\u5426\u4e3a\u7a7a \u5e38\u6570\u590d\u6742\u5ea6"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"size()")," : \u8fd4\u56de\u5e95\u5c42\u5bb9\u5668\u7684\u5143\u7d20\u6570\u91cf \u5e38\u6570\u590d\u6742\u5ea6"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"push()")," : \u63d2\u5165\u5143\u7d20\uff0c\u5e76\u5bf9\u5e95\u5c42\u5bb9\u5668\u6392\u5e8f \u6700\u574f \u5747\u644a "),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"pop()")," : \u5220\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20 \u6700\u574f ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"struct cmp1\n{\n     bool operator ()(int x, int y)\n    {\n        return x > y;//\u5c0f\u7684\u4f18\u5148\u7ea7\u9ad8\n    }\n};\nstruct cmp2\n{\n    bool operator ()(const int x, const int y)\n    {\n        return tmp[x] > tmp[y]; \n        //tmp[]\u5c0f\u7684\u4f18\u5148\u7ea7\u9ad8\uff0c\u7531\u4e8e\u53ef\u4ee5\u5728\u961f\u5916\u6539\u53d8\u961f\u5185\u7684\u503c\uff0c\n        //\u6240\u4ee5\u4f7f\u7528\u6b64\u65b9\u6cd5\u8fbe\u4e0d\u5230\u771f\u6b63\u7684\u4f18\u5148\uff0c\u5efa\u8bae\u7528\u7ed3\u6784\u4f53\u7c7b\u578b\u3002\n    }\n};\nstruct node\n{\n    int x, y;\n    friend bool operator < (node a, node b)\n    {\n        return a.x > b.x;//\u7ed3\u6784\u4f53\u4e2d\uff0cx\u5c0f\u7684\u4f18\u5148\u7ea7\u9ad8\n    }\n};\n \npriority_queue<int>q1;\npriority_queue<int, vector<int>, cmp1>q2;cpp\npriority_queue<int, vector<int>, cmp2>q3;\npriority_queue<node>q4;\n\n")),(0,o.kt)("h3",{id:"string-\u7c7b"},(0,o.kt)("inlineCode",{parentName:"h3"},"string")," \u7c7b"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"string")," \u7c7b\uff0c\u8bfb\u5230\u7a7a\u683c\u5c31\u505c\u3002\u7406\u8bba\u4e0a\u7b49\u4e8echar\u6570\u7ec4"),(0,o.kt)("p",null,"\u4f18\u70b9\uff1a\u81ea\u52a8\u5904\u7406string\u7684\u5927\u5c0f\uff0ceg\uff1a\u5927\u6570\u7684\u5947\u5076\u6027"),(0,o.kt)("p",null,"\u7528\u6cd5:  + - =   str.size()"),(0,o.kt)("p",null,"string\u7c7bI/O"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"char charr[20];cin.getline( charr, 20);   //// \u8bfb\u5165\u4e00\u884c, \u53d7\u9650\u4e8e\u521d\u59cb\u5316\u65f6\u7684\u7a7a\u95f4\uff0c\u63a5\u53d7\u7a7a\u683cgetline( cin, string );   // \u8bfb\u5165\u4e00\u884c\uff0c\u63a5\u53d7\u7a7a\u683c\n")),(0,o.kt)("h2",{id:"\u8fd0\u7b97\u7b26\u91cd\u8f7d"},"\u8fd0\u7b97\u7b26\u91cd\u8f7d"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://blog.csdn.net/liitdar/article/details/80654324"},"https://blog.csdn.net/liitdar/article/details/80654324")),(0,o.kt)("h2",{id:"\u5b9a\u4e49\u4e00\u4e2abitset"},"\u5b9a\u4e49\u4e00\u4e2abitset"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c++"},'// constructing bitsets\n#include <iostream>       //std::cout\n#include <string>         // std::string\n#include <bitset>         // std::bitset\nint main (){  \n    std::bitset<16> foo;  \n    std::bitset<16> bar (0xfa2);  \n    std::bitset<16> baz (std::string("0101111001"));  \n    std::cout << "foo: " << foo << \'\\n\';  \n    std::cout << "bar: " << bar << \'\\n\';  \n    std::cout << "baz: " << baz << \'\\n\';  \n    return 0;\n}\n')),(0,o.kt)("p",null,"\u8f93\u51fa\u7ed3\u679c\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"foo: 0000000000000000bar: 0000111110100010\n")),(0,o.kt)("p",null,"bitset\u6709\u4e00\u4e2a\u7279\u6027\uff1a\u6574\u6570\u7c7b\u578b\u548c\u5e03\u5c14\u6570\u7ec4\u90fd\u80fd\u8f6c\u5316\u6210bitset\u3002"),(0,o.kt)("p",null,"bitset\u7684\u5927\u5c0f\u5728\u7f16\u8bd1\u65f6\u5c31\u9700\u8981\u786e\u5b9a\u3002\u5982\u679c\u4f60\u60f3\u8981\u4e0d\u786e\u5b9a\u957f\u5ea6\u7684bitset\uff0c\u8bf7\u4f7f\u7528\uff08\u5947\u8469\u7684\uff09",(0,o.kt)("inlineCode",{parentName:"p"},"vector<bool>"),"\u3002"),(0,o.kt)("h4",{id:"bitset\u7684\u76f8\u5173\u51fd\u6570"},"bitset\u7684\u76f8\u5173\u51fd\u6570"),(0,o.kt)("p",null,"\u5bf9\u4e8e\u4e00\u4e2a\u53eb\u505afoo\u7684bitset\uff1a\n",(0,o.kt)("inlineCode",{parentName:"p"},"foo.size()")," \u8fd4\u56de\u5927\u5c0f\uff08\u4f4d\u6570\uff09\n",(0,o.kt)("inlineCode",{parentName:"p"},"foo.count()")," \u8fd4\u56de1\u7684\u4e2a\u6570\n",(0,o.kt)("inlineCode",{parentName:"p"},"foo.any()")," \u8fd4\u56de\u662f\u5426\u67091\n",(0,o.kt)("inlineCode",{parentName:"p"},"foo.none()")," \u8fd4\u56de\u662f\u5426\u6ca1\u67091\n",(0,o.kt)("inlineCode",{parentName:"p"},"foo.set()")," \u5168\u90fd\u53d8\u62101"),(0,o.kt)("h4",{id:"bitset\u7684\u8fd0\u7b97"},"bitset\u7684\u8fd0\u7b97"),(0,o.kt)("p",null,"bitset\u7684\u8fd0\u7b97\u5c31\u50cf\u4e00\u4e2a\u666e\u901a\u7684\u6574\u6570\u4e00\u6837\uff0c\u53ef\u4ee5\u8fdb\u884c\u4e0e(&)\u3001\u6216(|)\u3001\u5f02\u6216(^)\u3001\u5de6\u79fb(",(0,o.kt)("inlineCode",{parentName:"p"},"<<"),")\u3001\u53f3\u79fb(",(0,o.kt)("inlineCode",{parentName:"p"},">>"),")\u7b49\u64cd\u4f5c\u3002"),(0,o.kt)("h2",{id:"\u7b97\u6cd5"},"\u7b97\u6cd5"),(0,o.kt)("h3",{id:"\u8d28\u53d8\u7b97\u6cd5\u548c\u975e\u8d28\u53d8\u7b97\u6cd5"},"\u8d28\u53d8\u7b97\u6cd5\u548c\u975e\u8d28\u53d8\u7b97\u6cd5"),(0,o.kt)("p",null,"\u6240\u8c13\u201c\u8d28\u53d8\u7b97\u6cd5\u201d\u662f\u6307\u4f5c\u7528\u5728\u7531\u8fed\u4ee3\u5668","[first,last]","\u6240\u6807\u793a\u51fa\u6765\u7684\u533a\u95f4\uff0c\u8fd0\u7b97\u8fc7\u7a0b\u4e2d\u4f1a\u66f4\u6539\u533a\u95f4\u5185\u7684\u5143\u7d20\u5185\u5bb9\uff1a\u6bd4\u5982\u62f7\u8d1d(copy)\u3001\u4e92\u6362(swap)\u3001\u66ff\u6362(replace)\u3001\u586b\u5199(fill)\u3001\u5220\u9664(remove)\u3001\u6392\u5217\u7ec4\u5408(permutation)\u3001\u5206\u5272(partition)\u3002\u968f\u673a\u91cd\u6392(randomshuffling)\u3001\u6392\u5e8f(sort)\u7b49\u7b97\u6cd5\uff0c\u90fd\u5c5e\u4e8e\u8fd9\u4e00\u7c7b\u3002"),(0,o.kt)("p",null,"\u975e\u8d28\u53d8\u7b97\u6cd5\u662f\u6307\u5728\u8fd0\u7b97\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u66f4\u6539\u533a\u95f4\u5185\u7684\u5143\u7d20\u5185\u5bb9\u3002\u6bd4\u5982\u67e5\u627e(find)\uff0c\u5339\u914d(search)\u3001\u8ba1\u6570\uff08count\uff09\u3001\u904d\u5386(for_each)\u3001\u6bd4\u8f83(equal_mismatch)\u3001\u5bfb\u627e\u6781\u503c(max,min)\u7b49\u7b97\u6cd5\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'\n\nSTL\u6e90\u7801\u5256\u6790\n\u76ee\u5f55\n\u4e00.\u7b80\u4ecb    1\n1.GNU\u6e90\u4ee3\u7801\u5f00\u653e\u7cbe\u795e    1\n2.STL\u7248\u672c 1\n3.SGI STL\u5934\u6587\u4ef6\u5206\u5e03  2\n4.STL\u516d\u5927\u90e8\u4ef6   2\n\u4e8c.\u7a7a\u95f4\u5206\u914d\u5668 3\n1.\u7a7a\u95f4\u5206\u914d\u5668\u7684\u6807\u51c6\u63a5\u53e3    3\n2.SGI\u6807\u51c6\u7684\u7a7a\u95f4\u5206\u914d\u5668std::allocator 4\n3.SGI\u7279\u6b8a\u7684\u7a7a\u95f4\u5206\u914d\u5668std::alloc 4\n3.1 \u5bf9\u8c61\u6784\u9020\u4e0e\u6790\u6784 4\n3.2 \u5185\u5b58\u5206\u914d\u4e0e\u91ca\u653e 4\n3.3 \u5185\u5b58\u57fa\u672c\u5904\u7406\u5de5\u5177    10\n\u4e09.\u8fed\u4ee3\u5668\u4e0etraits\u7f16\u7a0b\u6280\u6cd5    10\n1.\u8fed\u4ee3\u5668\u76f8\u5e94\u7c7b\u578b   10\n2.traits\u7f16\u7a0b\u6280\u6cd5    11\n2.1 \u8fed\u4ee3\u5668\u7c7b\u578b   12\n3.std::iterator\u7684\u4fdd\u8bc1  13\n4.SGI STL\u7684__type_traits 13\n\u56db.\u987a\u5e8f\u5bb9\u5668  14\n1.vector    14\n1.1 \u8fed\u4ee3\u5668 14\n1.2 \u5206\u914d\u5668 14\n1.3 vector\u64cd\u4f5c\u7684\u5b9e\u73b0 14\n2.list  15\n2.1 \u8282\u70b9  15\n2.2 \u8fed\u4ee3\u5668 15\n2.3 list\u7684\u6570\u636e\u7ed3\u6784   16\n2.4 \u5206\u914d\u5668 17\n2.5 list\u64cd\u4f5c\u7684\u5b9e\u73b0   17\n3.deque 17\n3.1 \u8fed\u4ee3\u5668 18\n3.3 deque\u7684\u6570\u636e\u7ed3\u6784  18\n3.4 \u5206\u914d\u5668 19\n3.5 deque\u64cd\u4f5c\u7684\u5b9e\u73b0  19\n4.stack 20\n5.queue 21\n6.heap  22\n7.priority_queue    22\n8.slist 23\n8.1 slist\u7684\u8282\u70b9    23\n8.2 slist\u7684\u8fed\u4ee3\u5668   24\n\u4e94.\u5173\u8054\u5bb9\u5668  25\n1.RB-tree   26\n1.1 RB-tree\u7684\u8282\u70b9  26\n1.2 RB-tree\u7684\u8fed\u4ee3\u5668 26\n1.3 RB-tree\u64cd\u4f5c\u7684\u5b9e\u73b0    28\n2.set   29\n3.map   30\n4.multiset  31\n5.multimap  31\n6.hashtable 31\n6.1 hashtable\u7684\u8fed\u4ee3\u5668   31\n6.2 hashtable\u7684\u5b9e\u73b0    32\n6.3 hashtable\u64cd\u4f5c\u7684\u5b9e\u73b0  34\n6.4 hash functions  34\n7.hash_set  35\n8.hash_map  35\n9.hash_multiset 35\n10.hash_multimap    35\n\u516d.\u7b97\u6cd5    36\n1.\u533a\u95f4\u62f7\u8d1d  36\n1.1 copy    36\n1.2 copy_backward   37\n2.set\u76f8\u5173\u7b97\u6cd5   37\n2.1 set_union   37\n2.2 set_intersection    37\n2.3 set_difference  37\n2.4 set_symmetric_difference    37\n3.\u6392\u5e8fsort    38\n4.\u5176\u5b83\u7b97\u6cd5  38\n\u4e03.\u4eff\u51fd\u6570   41\n1.\u4eff\u51fd\u6570\u7684\u76f8\u5e94\u7c7b\u578b  42\n1.1 unary_function  42\n1.2 binary_function 42\n2.\u7b97\u672f\u7c7b\u4eff\u51fd\u6570    42\n3.\u5173\u7cfb\u8fd0\u7b97\u7c7b\u4eff\u51fd\u6570  43\n4.\u903b\u8f91\u8fd0\u7b97\u7c7b\u4eff\u51fd\u6570  44\n5.\u8bc1\u540c\uff0c\u9009\u62e9\u4e0e\u6295\u5c04  44\n\u516b.\u9002\u914d\u5668   45\n1.\u5bb9\u5668\u9002\u914d\u5668 45\n2.\u8fed\u4ee3\u5668\u9002\u914d\u5668    46\n2.1 insert iterators    46\n2.2 reverse iterators   48\n2.3 iostream iterators  51\n3.\u51fd\u6570\u9002\u914d\u5668 52\n3.1 not1\u548cnot2   53\n3.2 bind1st\u548cbind2st 54\n3.3 compose1\u548ccompose2   55\n3.4 \u7528\u4e8e\u51fd\u6570\u6307\u9488\u7684ptr_fun  56\n3.5 \u7528\u4e8e\u6210\u5458\u51fd\u6570\u6307\u9488\u7684mem_fun\u548cmem_fun_ref    57\n\n\u4e00.\u7b80\u4ecb\n1.GNU\u6e90\u4ee3\u7801\u5f00\u653e\u7cbe\u795e\n\u5168\u4e16\u754c\u6240\u6709\u7684STL\u5b9e\u73b0\u7248\u672c\uff0c\u90fd\u6e90\u4e8eAlexander Stepanov\u548cMeng Lee\u5b8c\u6210\u7684\u539f\u59cb\u7248\u672c\uff0c\u8fd9\u4efd\u539f\u59cb\u7248\u672c\u6709Hewlett-Packard Compant(\u60e0\u666e\u516c\u53f8)\u62e5\u6709\u3002\u6bcf\u4e00\u4e2a\u5934\u6587\u4ef6\u90fd\u6709\u4e00\u4efd\u58f0\u660e\uff0c\u5141\u8bb8\u4efb\u4f55\u4eba\u4efb\u610f\u8fd0\u7528\u3001\u62f7\u8d1d\u3001\u4fee\u6539\u3001\u4f20\u64ad\u3001\u8d29\u5356\u8fd9\u4e9b\u4ee3\u7801\uff0c\u65e0\u9700\u4ed8\u8d39\uff0c\u552f\u4e00\u7684\u6761\u4ef6\u662f\u5fc5\u987b\u5c06\u58f0\u660e\u7f6e\u4e8e\u4f7f\u7528\u8005\u65b0\u5f00\u53d1\u7684\u6587\u4ef6\u5185\n\u8fd9\u4efd\u5f00\u653e\u6e90\u4ee3\u7801\u7684\u7cbe\u795e\uff0c\u4e00\u822c\u7edf\u79f0\u4e3aopen source\nGNU(\u97f3\u8bd1\u4e3a\u201c\u9769\u5974\u201d)\uff0c\u4ee3\u7801GUN is Not Unix\u3002\u5f53\u65f6Unix\u662f\u8ba1\u7b97\u673a\u754c\u4e3b\u6d41\u64cd\u4f5c\u7cfb\u7edf\uff0c\u7531AT&T Bell\u5b9e\u9a8c\u5ba4\u7684Ken Thompson\u548cDennis Ritchie\u521b\u9020\u3002\u539f\u672c\u53ea\u662f\u5b66\u672f\u4e0a\u7684\u4e00\u4e2a\u7ec3\u4e60\u4ea7\u54c1\uff0cAT&T\u5c06\u5b83\u5206\u4eab\u7ed9\u8bb8\u591a\u7814\u7a76\u4eba\u5458\u3002\u4f46\u662f\u5f53\u6240\u6709\u7814\u7a76\u4e0e\u5206\u4eab\u4f7f\u8fd9\u4e2a\u4ea7\u54c1\u8d8a\u6765\u8d8a\u7f8e\u597d\u65f6\uff0cAT&T\u5f00\u59cb\u601d\u8003\u662f\u5426\u5e94\u8be5\u8ffd\u52a0\u6295\u8d44\uff0c\u4ece\u4e2d\u83b7\u5229\u3002\u4e8e\u662f\u5f00\u59cb\u8981\u6c42\u5927\u5b66\u6821\u56ed\u5185\u7684\u76f8\u5173\u7814\u7a76\u4eba\u5458\u7b7e\u7ea6\uff0c\u8981\u6c42\u4ed6\u4eec\u4e0d\u5f97\u516c\u5f00\u6216\u900f\u9732UNIX\u6e90\u4ee3\u7801\uff0c\u5e76\u8d5e\u52a9Berkeley\u5927\u5b66\u7ee7\u7eed\u5f3a\u5316UNIX\uff0c\u5bfc\u81f4\u540e\u6765\u53d1\u5c55\u51faBSD(Berkeley Software Distribution)\u7248\u672c\uff0c\u4ee5\u53ca\u66f4\u540e\u6765\u7684FreeBSD\u3001OpenBSD\u3001NetBSD\u2026\uff0cStallman\u5c06AT&T\u7684\u8fd9\u79cd\u884c\u4e3a\u89c6\u4e3a\u601d\u60f3\u7981\u9522\uff0c\u4ee5\u53ca\u4e00\u79cd\u4f1f\u5927\u4f20\u7edf\u7684\u6ca6\u4e27\uff0c\u4e8e\u662f\u8fdb\u884c\u4e86\u4ed6\u7684\u53cd\u5974\u5f79\u8ba1\u5212\uff0c\u79f0\u4e4b\u4e3aGNU:GUN is Not Unix\uff0cGNU\u8ba1\u5212\u4e2d\uff0c\u65e9\u671f\u6700\u8457\u540d\u7684\u8f6f\u4ef6\u5305\u62ecEmacs\u548cGCC\uff0c\u665a\u671f\u6700\u8457\u540d\u7684\u662fLinux\u64cd\u4f5c\u7cfb\u7edf\nGNU\u4ee5\u6240\u8c13\u7684GPL(General Public License\uff0c\u5e7f\u6cdb\u5f00\u653e\u6388\u6743)\u6765\u4fdd\u62a4(\u6216\u8bf4\u63a7\u5236)\u5176\u6210\u5458\uff1a\u4f7f\u7528\u8005\u53ef\u4ee5\u81ea\u7531\u9605\u8bfb\u4e0e\u4fee\u6539GPL\u8f6f\u4ef6\u7684\u6e90\u7801\uff0c\u4f46\u5982\u679c\u4f7f\u7528\u8005\u8981\u4f20\u64ad\u501f\u52a9GPL\u8f6f\u4ef6\u800c\u5b8c\u6210\u7684\u8f6f\u4ef6\uff0c\u5fc5\u987b\u4e5f\u540c\u610fGPL\u89c4\u8303\u3002\u8fd9\u79cd\u7cbe\u795e\u4e3b\u8981\u662f\u5f3a\u8feb\u4eba\u4eec\u5206\u4eab\u5e76\u56de\u9988\u4ed6\u4eec\u5bf9GPL\u8f6f\u4ef6\u7684\u6539\u5584\u3002\u5f97\u4e4b\u4e8e\u4eba\uff0c\u820d\u4e8e\u4eba\nCygnus\u662f\u4e00\u5bb6\u5546\u4e1a\u516c\u53f8\uff0c\u5305\u88c5\u5e76\u51fa\u552e\u81ea\u7531\u8f6f\u4ef6\u57fa\u91d1\u4f1a\u6240\u6784\u9020\u7684\u8f6f\u4ef6\u5de5\u5177\uff0c\u5e76\u8d29\u5356\u5404\u79cd\u670d\u52a1\u3002\u4ed6\u4eec\u534f\u52a9\u82af\u7247\u5382\u5546\u8c03\u6574GCC\uff0c\u5728GPL\u7684\u7cbe\u795e\u548c\u89c4\u8303\u4e0b\u5c06GCC\u6e90\u4ee3\u7801\u7684\u4fee\u6b63\u516c\u5e03\u4e8e\u4e16\uff1b\u4ed6\u4eec\u63d0\u4f9bGCC\u8fd0\u4f5c\u4fe1\u606f\uff0c\u63d0\u5347\u5176\u8fd0\u884c\u6548\u7387\uff0c\u5e76\u56e0\u6b64\u6210\u4e3aGCC\u6280\u672f\u9886\u57df\u7684\u6700\u4f73\u54a8\u8be2\u5bf9\u8c61\u3002Cygnus\u516c\u53f8\u4e4b\u4e8eGCC\uff0c\u5730\u4f4d\u5c31\u50cfRed Hat\u516c\u53f8\u4e4b\u4e8eLinux\n2.STL\u7248\u672c\n    \u2022 HP\u5b9e\u73b0\u7248\u672c(HP STL)\n        \u25e6 \u6240\u6709STL\u5b9e\u73b0\u7248\u672c\u7684\u59cb\u7956\n        \u25e6 \u8fd0\u884c\u4efb\u4f55\u4eba\u514d\u8d39\u4f7f\u7528\u3001\u62f7\u8d1d\u3001\u4fee\u6539\u3001\u4f20\u64ad\u3001\u8d29\u5356\u8fd9\u4efd\u8f6f\u4ef6\u53ca\u5176\u8bf4\u660e\u6587\u4ef6\n        \u25e6 \u552f\u4e00\u9700\u8981\u9075\u5b88\u7684\u662f\uff1a\u5fc5\u987b\u5728\u6240\u6709\u6587\u4ef6\u4e2d\u52a0\u4e0aHP\u7684\u7248\u672c\u58f0\u660e\u548c\u8fd0\u7528\u6743\u9650\u58f0\u660e\n        \u25e6 \u8fd9\u79cd\u6388\u6743\u4e0d\u5c5e\u4e8eGNU GPL\u8303\u7574\uff0c\u4f46\u5c5e\u4e8eopen source\u8303\u7574\n    \u2022 P.J. Plauger\u5b9e\u73b0\u7248\u672c(PJ STL)\n        \u25e6 \u7ee7\u627f\u81eaHP\u7248\u672c\uff0c\u6240\u6709\u6bcf\u4e00\u4e2a\u5934\u6587\u4ef6\u90fd\u6709HP\u7684\u7248\u672c\u8bf4\u660e\n        \u25e6 \u6b64\u5916\u8fd8\u52a0\u4e0aP.J. Plauger\u7684\u4e2a\u4eba\u7248\u6743\u58f0\u660e\n        \u25e6 \u4e0d\u5c5e\u4e8eGNU GPL\u8303\u7574\uff0c\u4e5f\u4e0d\u5c5e\u4e8eopen source\u8303\u7574\n        \u25e6 \u88abVisual C++\u91c7\u7528\n        \u25e6 \u7b26\u53f7\u547d\u540d\u4e0d\u8bb2\u7a76\u3001\u53ef\u8bfb\u6027\u8f83\u4f4e\n    \u2022 Rouge Wave\u5b9e\u73b0\u7248\u672c(RW STL)\n        \u25e6 \u7ee7\u627f\u81eaHP\u7248\u672c\uff0c\u6240\u4ee5\u6bcf\u4e00\u4e2a\u5934\u6587\u4ef6\u90fd\u6709HP\u7684\u7248\u672c\u8bf4\u660e\n        \u25e6 \u6b64\u5916\u8fd8\u52a0\u4e0aRouge Wave\u7684\u516c\u53f8\u7248\u6743\u58f0\u660e\n        \u25e6 \u4e0d\u5c5e\u4e8eGNU GPL\u8303\u7574\uff0c\u4e5f\u4e0d\u5c5e\u4e8eopen source\u8303\u7574\n        \u25e6 \u88abC++Builder\u91c7\u7528\uff08C++Builder\u5bf9C++\u8bed\u8a00\u7279\u6027\u652f\u6301\u4e0d\u9519\uff0c\u8fde\u5e26\u7ed9\u4e88\u4e86RW\u7248\u672c\u6b63\u9762\u7684\u5f71\u54cd\uff09\n        \u25e6 \u53ef\u8bfb\u6027\u4e0d\u9519\n    \u2022 STLport\u5b9e\u73b0\u7248\u672c\n        \u25e6 \u4ee5SGI STL\u4e3a\u84dd\u672c\u7684\u9ad8\u5ea6\u53ef\u79fb\u690d\u6027\u5b9e\u73b0\u7248\u672c\n    \u2022 SGI STL\u5b9e\u73b0\u7248\u672c\n        \u25e6 \u7ee7\u627f\u81eaHP\u7248\u672c\uff0c\u6240\u4ee5\u6bcf\u4e00\u4e2a\u5934\u6587\u4ef6\u90fd\u6709HP\u7684\u7248\u672c\u8bf4\u660e\n        \u25e6 \u6b64\u5916\u8fd8\u52a0\u4e0aSGI\u7684\u516c\u53f8\u7248\u6743\u58f0\u660e\n        \u25e6 \u4e0d\u5c5e\u4e8eGNU GPL\u8303\u7574\uff0c\u4f46\u5c5e\u4e8eopen source\u8303\u7574\n        \u25e6 \u88abGCC\u91c7\u7528\uff08GCC\u5bf9C++\u8bed\u8a00\u7279\u6027\u652f\u6301\u5f88\u597d\uff0c\u8fde\u5e26\u7ed9\u4e88\u4e86SGI STL\u6b63\u9762\u5f71\u54cd\uff09\n        \u25e6 \u53ef\u8bfb\u6027\u5f88\u9ad8\n        \u25e6 \u4e3a\u4e86\u5177\u6709\u9ad8\u5ea6\u79fb\u690d\u6027\uff0c\u8003\u8651\u4e86\u4e0d\u540c\u7f16\u8bd1\u5668\u7684\u4e0d\u540c\u7f16\u8bd1\u80fd\u529b\n3.SGI STL\u5934\u6587\u4ef6\u5206\u5e03\n    1. C++\u6807\u51c6\u89c4\u8303\u4e0b\u7684C\u5934\u6587\u4ef6\uff1acstdio\uff0ccsyflib\uff0ccstring\uff0c\u2026\n    2. C++\u6807\u51c6\u7a0b\u5e8f\u5e93\u4e2d\u4e0d\u5c5e\u4e8eSTL\u8303\u7574\u8005\uff1astream\uff0cstring\uff0c\u2026\n    3. STL\u6807\u51c6\u5934\u6587\u4ef6(\u65e0\u6269\u5c55\u540d)\uff1avector\uff0cdeque\uff0clist\uff0cmap\uff0c\u2026\n    4. C++\u6807\u51c6\u5b9a\u6848\u524d\uff0cHP\u6240\u89c4\u8303\u7684STL\u5934\u6587\u4ef6\uff1avector.h\uff0cdeque.h\uff0clist.h\uff0c\u2026\n    5. SGI STL\u5185\u90e8\u6587\u4ef6(STL\u771f\u6b63\u5b9e\u73b0\u4e0e\u6b64)\uff1astl_vector.h\uff0cstl_deque.h\uff0cstl_algo.h\uff0c\u2026\n\u4e0d\u540c\u7684\u7f16\u8bd1\u5668\u5bf9C++\u8bed\u8a00\u7684\u652f\u6301\u7a0b\u5ea6\u4e0d\u5c3d\u76f8\u540c\u3002\u4f5c\u4e3a\u4e00\u4e2a\u5e0c\u671b\u5177\u5907\u5e7f\u6cdb\u79fb\u690d\u80fd\u529b\u7684\u7a0b\u5e8f\u5e93\uff0cSGI STL\u51c6\u5907\u4e86\u4e00\u4e2a\u73af\u5883\u7ec4\u6001\u6587\u4ef6<stl_config.h>\uff0c\u5176\u4e2d\u5b9a\u4e49\u4e86\u8bb8\u591a\u5e38\u91cf\uff0c\u6807\u793a\u67d0\u4e9b\u7ec4\u6001\u7684\u6210\u7acb\u4e0e\u5426\uff0c\u6240\u6709STL\u5934\u6587\u4ef6\u90fd\u4f1a\u76f4\u63a5\u6216\u95f4\u63a5\u5305\u542b\u8fd9\u4e2a\u7ec4\u6001\u6587\u4ef6\uff0c\u5e76\u4ee5\u6761\u4ef6\u5f0f\u5199\u6cd5\uff0c\u8ba9\u9884\u5904\u7406\u5668\u6839\u636e\u5404\u4e2a\u5e38\u91cf\u51b3\u5b9a\u53d6\u820d\u54ea\u4e00\u6bb5\u7a0b\u5e8f\u4ee3\u7801\uff0c\u4f8b\u5982\uff1a\n\n\u7ec4\u6001\u6d4b\u8bd5\u7a0b\u5e8f\uff1a\n    \u2022 \u7f16\u8bd1\u5668\u5bf9\u7ec4\u6001\u7684\u652f\u6301\n    \u2022 \u7ec4\u60013\uff1a__STL_STATIC_TEMPLATE_MEMBER_BUG\n    \u2022 \u7ec4\u60015\uff1a__STL_CLASS_PARTIAL_SPECIALIZATION\n    \u2022 \u7ec4\u60016\uff1a__STL_FUNCTION_TMPL_PARTIAL_ORDER\n    \u2022 \u7ec4\u60017\uff1a__STL_EXPLICIT_FUNCTION_TMPL_ARGS\uff08\u6574\u4e2aSGI STL\u5185\u90fd\u6ca1\u6709\u7528\u5230\u8fd9\u4e00\u5e38\u91cf\u5b9a\u4e49\uff09\n    \u2022 \u7ec4\u60018\uff1a__STL_MEMBER_TEMPLATES\n    \u2022 \u7ec4\u600110\uff1a__STL_LIMITED_DEFAULT_TEMPLATES\n    \u2022 \u7ec4\u600111\uff1a__STL_NON_TYPE_TMPL_PARAM_BUG\n    \u2022 \u7ec4\u6001\uff1a__STL_EXPLICIT_FUNCTION_TMPL_ARGS\uff08bound friend templates\uff09\n    \u2022 \u7ec4\u6001\uff1a__STL_TEMPLATE_NULL\uff08class template explicit specialization\uff09\n4.STL\u516d\u5927\u90e8\u4ef6\n\n\u6700\u91cd\u8981\u76842\u4e2a\u662f\u5bb9\u5668\u4e0e\u7b97\u6cd5\n    \u2022 \u5bb9\u5668(container)\n    \u2022 \u5206\u914d\u5668(Allocator)\n    \u2022 \u7b97\u6cd5(Algorithms)\n    \u2022 \u8fed\u4ee3\u5668(Iterrators)\n    \u2022 \u9002\u914d\u5668(Adaptors)\n    \u2022 \u4eff\u51fd\u6570(Functors)\n\n\u4e8c.\u7a7a\u95f4\u5206\u914d\u5668\n\u5728\u8fd0\u7528\u5c42\u9762\uff0c\u4e0d\u9700\u8981\u5173\u6ce8\u7a7a\u95f4\u5206\u914d\u5668\u3002\u4f46\u662f\u5728\u5bb9\u5668\u80cc\u540e\uff0c\u7a7a\u95f4\u5206\u914d\u5668\u8d1f\u8d23\u5bb9\u5668\u4e2d\u5143\u7d20\u7a7a\u95f4\u7684\u5206\u914d\n\u4e0d\u79f0\u4f5c\u201d\u5185\u5b58\u5206\u914d\u5668\u201c\uff0c\u662f\u56e0\u4e3a\u5206\u914d\u7684\u7a7a\u95f4\u4e0d\u4e00\u5b9a\u662f\u5185\u5b58\uff0c\u53ef\u4ee5\u662f\u78c1\u76d8\u6216\u5176\u5b83\u8f85\u52a9\u5b58\u50a8\u4ecb\u8d28\u3002\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u83b7\u53d6\u78c1\u76d8\u7a7a\u95f4\u7684allocator\u3002\u4e0d\u8fc7\u8fd9\u91cc\u4ecb\u7ecd\u7684\u7a7a\u95f4\u5206\u914d\u5668\u83b7\u53d6\u7684\u7a7a\u95f4\u662f\u5185\u5b58\n1.\u7a7a\u95f4\u5206\u914d\u5668\u7684\u6807\u51c6\u63a5\u53e3\n\u901a\u5e38\uff0cC++\u5185\u5b58\u5206\u914d\u548c\u91ca\u653e\u7684\u64cd\u4f5c\u5982\u4e0b\uff1a\nclass Foo {...};\nFoo *pf = new Foo;\ndelete pf;\n    \u2022 new\u5185\u542b2\u9636\u6bb5\u64cd\u4f5c\uff1a\n        \u25e6 \u8c03\u7528::operator new\u5206\u914d\u5185\u5b58\n        \u25e6 \u8c03\u7528\u6784\u9020\u51fd\u6570\u6784\u9020\u5bf9\u8c61\n    \u2022 delete\u4e5f\u542b2\u9636\u6bb5\u64cd\u4f5c\uff1a\n        \u25e6 \u8c03\u7528\u6790\u6784\u51fd\u6570\u6790\u6784\u5bf9\u8c61\n        \u25e6 \u8c03\u7528::operator delete\u91ca\u653e\u5185\u5b58\nSTL allocator\u5c06new\u548cdelete\u76842\u9636\u6bb5\u64cd\u4f5c\u8fdb\u884c\u4e86\u5206\u79bb\uff1a\n    \u2022 \u5185\u5b58\u5206\u914d\uff1a\u7531alloc::allocate()\u8d1f\u8d23\n    \u2022 \u5185\u5b58\u91ca\u653e\uff1a\u7531alloc::deallocate()\u8d1f\u8d23\n    \u2022 \u5bf9\u8c61\u6784\u9020\uff1a\u7531alloc::construct()\u8d1f\u8d23\n    \u2022 \u5bf9\u8c61\u6790\u6784\uff1a\u7531alloc::destroy\u8d1f\u8d23\n\u6839\u636eSTL\u7684\u89c4\u8303\uff0c\u4ee5\u4e0b\u662fallocator\u7684\u5fc5\u8981\u63a5\u53e3\uff1a\nallocator::value_type\nallocator::pointer\nallocator::const_pointer\nallocator::reference\nallocator::const_reference\nallocator::size_type\nallocator::difference_type\n\n//\u4e00\u4e2a\u5d4c\u5957\u7684class template\uff0cclass rebind<U> \u62e5\u6709\u552f\u4e00\u6210\u5458other,\u662f\u4e00\u4e2atypedef\uff0c\u4ee3\u8868allocator<U> \nallocator::rebind\n\n//\u6784\u9020\u51fd\u6570\nallocator::allocator()\n//\u62f7\u8d1d\u6784\u9020\u51fd\u6570\nallocator::allocator(const allocator&)  \ntemplate <class U> allocator::allocator(const allocator<U>&)\n//\u6790\u6784\u51fd\u6570\nallocator::~allocator\n\n//\u8fd4\u56de\u67d0\u4e2a\u5bf9\u8c61\u7684\u5730\u5740\uff0c\u7b49\u540c\u4e8e&x\npointer allocator::address(reference x) const   \nconst_pointer allocator::address(const_reference x) const\n\n//\u5206\u914d\u7a7a\u95f4\uff0c\u8db3\u4ee5\u5bb9\u7eb3n\u4e2a\u5143\u7d20\npointer allocator::allocate(size_type n,const void* = 0)\n//\u5f52\u8fd8\u4e4b\u524d\u5206\u914d\u7684\u7a7a\u95f4\nvoid allocator::deallocate(pointer p,size_type n)\n//\u53ef\u5206\u914d\u7684\u6700\u5927\u7a7a\u95f4\nsize_type allocator::max_size() const\n\n//\u901a\u8fc7x\uff0c\u5728p\u6307\u5411\u7684\u5730\u5740\u6784\u9020\u4e00\u4e2a\u5bf9\u8c61\u3002\u76f8\u5f53\u4e8enew((void*)p) T(x)\nvoid allocator::construct(pointer p,const T& x)\n//\u6790\u6784\u5730\u5740p\u7684\u5bf9\u8c61\nvoid allocator::destroy(pointer p)\n    \u2022 \u53ea\u80fd\u6709\u9650\u5ea6\u642d\u914dPJ STL\uff0c\u56e0\u4e3aPJ STL\u672a\u5b8c\u5168\u9075\u5faaSTL\u89c4\u683c\uff0c\u5176\u6240\u4f9b\u5e94\u7684\u8bb8\u591a\u5bb9\u5668\u90fd\u9700\u8981\u4e00\u4e2a\u975e\u6807\u51c6\u7684\u7a7a\u95f4\u5206\u914d\u5668\u63a5\u53e3\n    \u2022 \u53ea\u80fd\u6709\u9650\u5ea6\u5730\u642d\u914dRW STL\uff0c\u56e0\u4e3aRW STL\u5728\u5f88\u591a\u5bb9\u5668\u8eab\u4e0a\u8fd0\u7528\u4e86\u7f13\u51b2\u533a\uff0c\u60c5\u51b5\u590d\u6742\u5f88\u591a\n    \u2022 \u5b8c\u5168\u65e0\u6cd5\u5e94\u7528\u4e8eSGI STL\uff0c\u56e0\u4e3aSGI STL\u5728\u8fd9\u4e2a\u9879\u76ee\u4e0a\u6839\u672c\u5c31\u8131\u79bb\u4e86STL\u6807\u51c6\u89c4\u683c\uff0c\u4f7f\u7528\u4e00\u4e2a\u4e13\u5c5e\u7684\u3001\u62e5\u6709\u6b21\u5c42\u914d\u7f6e\u80fd\u529b\u7684\u3001\u6548\u7387\u4f18\u8d8a\u7684\u7279\u6b8a\u5206\u914d\u5668\u3002\u4f46\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5bf9\u5176\u8fdb\u884c\u4e86\u5c01\u88c5\u7684\u540d\u4e3asimple_alloc\u7684\u5206\u914d\u5668\uff0c\u7b26\u5408\u90e8\u5206\u6807\u51c6\n2.SGI\u6807\u51c6\u7684\u7a7a\u95f4\u5206\u914d\u5668std::allocator\n\u867d\u7136SGI\u4e5f\u5b9a\u4e49\u6709\u4e00\u4e2a\u7b26\u5408\u201d\u90e8\u5206\u201c\u6807\u51c6\u3001\u540d\u4e3aallocator\u7684\u5206\u914d\u5668\uff0c\u4f46SGI\u81ea\u5df1\u4ece\u672a\u7528\u8fc7\u5b83\uff0c\u4e5f\u4e0d\u5efa\u8bae\u6211\u4eec\u4f7f\u7528\u3002\u4e3b\u8981\u539f\u56e0\u662f\u6548\u7387\u4e0d\u4f73\uff0c\u53ea\u628aC++\u7684::operator new\u548c::operator delete\u505a\u4e00\u5c42\u8584\u8584\u7684\u5305\u88c5\u800c\u5df2\n3.SGI\u7279\u6b8a\u7684\u7a7a\u95f4\u5206\u914d\u5668std::alloc\nSTL\u6807\u51c6\u89c4\u5b9a\u5206\u914d\u5668\u5b9a\u4e49\u4e8e<memory>\u4e2d\uff0cSGI<memory>\u5185\u542b\u4e24\u4e2a\u6587\u4ef6\uff0c\u8d1f\u8d23\u5206\u79bb\u76842\u9636\u6bb5\u64cd\u4f5c\n\n\u771f\u6b63\u5728SGI STL\u4e2d\u5927\u663e\u8eab\u624b\u7684\u5206\u914d\u5668\uff08\u5373SGI\u7279\u6b8a\u7684\u7a7a\u95f4\u5206\u914d\u5668std::alloc\uff09\u6216\u4e3a\u7b2c\u4e00\u7ea7\u5206\u914d\u5668\uff0c\u6216\u4e3a\u7b2c\u4e8c\u7ea7\u5206\u914d\u5668\n3.1 \u5bf9\u8c61\u6784\u9020\u4e0e\u6790\u6784\n<stl_construct.h>\n\nSTL\u89c4\u5b9a\u5206\u914d\u5668\u5fc5\u987b\u62e5\u6709\u540d\u4e3aconstruct()\u548cdestroy()\u7684\u4e24\u4e2a\u6210\u5458\u51fd\u6570\uff0c\u7136\u800cSGI\u7279\u6b8a\u7684\u7a7a\u95f4\u5206\u914d\u5668std::alloc\u5e76\u672a\u9075\u5b88\u8fd9\u4e00\u89c4\u5219\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u8fd9\u90e8\u5206\u5c5e\u4e8eSTL allocator\uff0c\u4f46\u4e0d\u5c5e\u4e8estd::alloc\u3002\u6362\u53e5\u8bdd\u8bf4\uff0cSGI\u7279\u6b8a\u7684\u7a7a\u95f4\u5206\u914d\u5668std::alloc\u4e0d\u5305\u542b\u201d3.1 \u5bf9\u8c61\u6784\u9020\u4e0e\u6790\u6784\u201c\uff0c\u53ea\u5305\u542b\u201d3.2 \u5185\u5b58\u5206\u914d\u4e0e\u91ca\u653e\u201c\n3.2 \u5185\u5b58\u5206\u914d\u4e0e\u91ca\u653e\nSGI\u5bf9\u5185\u5b58\u5206\u914d\u4e0e\u91ca\u653e\u7684\u8bbe\u8ba1\u54f2\u5b66\u5982\u4e0b\uff1a\n    \u2022 \u5411system heap\u7533\u8bf7\u7a7a\u95f4\n    \u2022 \u8003\u8651\u591a\u7ebf\u7a0b\u72b6\u6001\n    \u2022 \u8003\u8651\u5185\u5b58\u4e0d\u8db3\u65f6\u7684\u5e94\u53d8\u63aa\u65bd\n    \u2022 \u8003\u8651\u8fc7\u591a\u201c\u5c0f\u578b\u533a\u5757\u201d\u53ef\u80fd\u9020\u6210\u7684\u5185\u5b58\u788e\u7247\u95ee\u9898\uff08SGI\u8bbe\u8ba1\u4e86\u53cc\u5c42\u7ea7\u5206\u914d\u5668\uff09\nC++\u7684\u5185\u5b58\u5206\u914d\u57fa\u672c\u64cd\u4f5c\u662f::operator new(),\u5185\u5b58\u91ca\u653e\u57fa\u672c\u64cd\u4f5c\u662f::operator delete()\u3002\u8fd9\u4e24\u4e2a\u5168\u5c40\u51fd\u6570\u76f8\u5f53\u4e8eC\u7684malloc()\u548cfree()\u51fd\u6570\u3002SGI\u6b63\u662f\u4ee5malloc\u548cfree()\u5b8c\u6210\u5185\u5b58\u7684\u5206\u914d\u4e0e\u91ca\u653e\n1\uff09\u4e24\u7ea7\u5206\u914d\u5668\n\u8003\u8651\u5230\u5c0f\u578b\u533a\u5757\u6240\u53ef\u80fd\u9020\u6210\u7684\u5185\u5b58\u788e\u7247\u95ee\u9898\uff0cSGI\u8bbe\u8ba1\u4e86\u53cc\u5c42\u7ea7\u5206\u914d\u5668\uff1a\n\n    \u2022 \u7b2c\u4e00\u7ea7\u5206\u914d\u5668\n        \u25e6 \u76f4\u63a5\u4f7f\u7528malloc()\u548cfree()\n    \u2022 \u7b2c\u4e8c\u7ea7\u5206\u914d\u5668\n        \u25e6 \u5f53\u5206\u914d\u533a\u5757\u8d85\u8fc7128bytes\u65f6\uff0c\u89c6\u4e3a\u201c\u8db3\u591f\u5927\u201d\uff0c\u8c03\u7528\u7b2c\u4e00\u7ea7\u5206\u914d\u5668\n        \u25e6 \u5f53\u5206\u914d\u533a\u5757\u5c0f\u4e8e128bytes\u65f6\uff0c\u89c6\u4e3a\u201c\u8fc7\u5c0f\u201d\uff0c\u4e3a\u4e86\u964d\u4f4e\u989d\u5916\u8d1f\u62c5\uff0c\u91c7\u7528\u590d\u6742\u7684memory pool\u6574\u7406\u65b9\u5f0f\uff0c\u4e0d\u518d\u6c42\u52a9\u4e8e\u7b2c\u4e00\u7ea7\u5206\u914d\u5668\n\u65e0\u8bbaalloc\u88ab\u5b9a\u4e49\u4e3a\u7b2c\u4e00\u7ea7\u6216\u7b2c\u4e8c\u7ea7\u5206\u914d\u5668\uff0cSGI\u8fd8\u4e3a\u5b83\u518d\u5305\u88c5\u4e00\u4e2a\u63a5\u53e3\uff0c\u4f7f\u5206\u914d\u5668\u7684\u63a5\u53e3\u80fd\u591f\u7b26\u5408STL\u89c4\u683c\uff1a\ntemplate<class T, class Alloc>\nclass simple_alloc {\n\npublic:\n    static T *allocate(size_t n)\n                { return 0 == n? 0 : (T*) Alloc::allocate(n * sizeof (T)); }\n    static T *allocate(void)\n                { return (T*) Alloc::allocate(sizeof (T)); }\n    static void deallocate(T *p, size_t n)\n                { if (0 != n) Alloc::deallocate(p, n * sizeof (T)); }\n    static void deallocate(T *p)\n                { Alloc::deallocate(p, sizeof (T)); }\n};\n\u5185\u90e84\u4e2a\u51fd\u6570\u90fd\u662f\u8f6c\u8c03\u7528\u5206\u914d\u5668\u7684\u6210\u5458\u51fd\u6570\u3002\u8fd9\u4e2a\u63a5\u53e3\u4f7f\u5206\u914d\u5668\u7684\u5206\u914d\u5355\u4f4d\u4ecebytes\u8f6c\u4e3a\u4e2a\u522b\u5143\u7d20\u7684\u5927\u5c0f\n\n\u4e0a\u56fe\u4e2dAlloc=alloc\u4e2d\u7684\u7f3a\u7701alloc\u53ef\u4ee5\u662f\u7b2c\u4e00\u7ea7\u5206\u914d\u5668\uff0c\u4e5f\u53ef\u4ee5\u662f\u7b2c\u4e8c\u7ea7\u5206\u914d\u5668\u3002SGI STL\u5df2\u7ecf\u628a\u5b83\u8bbe\u4e3a\u7b2c\u4e8c\u7ea7\u5206\u914d\u5668\n\u4e24\u7ea7\u5206\u914d\u5668\u90fd\u5b9a\u4e49\u5728\u5934\u6587\u4ef6<stl_alloc.h>\u4e2d\n2\uff09\u7b2c\u4e00\u7ea7\u5206\u914d\u5668__malloc_alloc_template\n//\u4e00\u822c\u800c\u8a00\u662f\u7ebf\u7a0b\u5b89\u5168\uff0c\u5e76\u4e14\u5bf9\u4e8e\u7a7a\u95f4\u7684\u8fd0\u7528\u6bd4\u8f83\u9ad8\u6548\n//\u65e0\u201ctemplate\u578b\u522b\u53c2\u6570\u201d\uff0c\u81f3\u4e8e\u201d\u975e\u578b\u522b\u53c2\u6570\u201cinst\uff0c\u5219\u5b8c\u5168\u6ca1\u6d3e\u4e0a\u7528\u573a\ntemplate <int inst>\nclass __malloc_alloc_template {\n\nprivate:\n//oom\uff1aout of memory \uff0c\u7528\u6765\u5904\u7406\u5185\u5b58\u4e0d\u8db3\u7684\u60c5\u51b5\nstatic void *oom_malloc(size_t);\n\nstatic void *oom_realloc(void *, size_t);\n\n#ifndef __STL_STATIC_TEMPLATE_MEMBER_BUG\n    static void (* __malloc_alloc_oom_handler)();\n#endif\n\npublic:\n\nstatic void * allocate(size_t n)\n{\n    void *result = malloc(n);//\u7b2c\u4e00\u7ea7\u5206\u914d\u5668\u76f4\u63a5\u4f7f\u7528malloc()\n    //\u4ee5\u4e0b\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42\u65f6\uff0c\u6539\u7528oom_malloc()\n    if (0 == result) result = oom_malloc(n);\n    return result;\n}\n\nstatic void deallocate(void *p, size_t /* n */)\n{\n    free(p);//\u7b2c\u4e00\u7ea7\u5206\u914d\u5668\u76f4\u63a5\u4f7f\u7528free()\n}\n\nstatic void * reallocate(void *p, size_t /* old_sz */, size_t new_sz)\n{\n    void * result = realloc(p, new_sz);//\u7b2c\u4e00\u7ea7\u5206\u914d\u5668\u76f4\u63a5\u4f7f\u7528realloc()\n    //\u4ee5\u4e0b\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42\u65f6\uff0c\u6539\u7528oom_realloc()\n    if (0 == result) result = oom_realloc(p, new_sz);\n    return result;\n}\n\n//\u4ee5\u4e0b\u4eff\u771fC++\u7684set_new_handler()\u3002\u53ef\u4ee5\u901a\u8fc7\u5b83\u6307\u5b9a\u81ea\u5df1\u7684\n//out-of-memory handler\n//\u4e0d\u80fd\u76f4\u63a5\u8fd0\u7528C++ new-handler\u673a\u5236\uff0c\u56e0\u4e3a\u5b83\u5e76\u975e\u4f7f\u7528::operator new\u6765\u5206\u914d\u5185\u5b58\nstatic void (* set_malloc_handler(void (*f)()))()\n{\n    void (* old)() = __malloc_alloc_oom_handler;\n    __malloc_alloc_oom_handler = f;\n    return(old);\n}\n\n};\n\n// malloc_alloc out-of-memory handling\n\n#ifndef __STL_STATIC_TEMPLATE_MEMBER_BUG\n//\u521d\u503c\u4e3a0\uff0c\u6709\u5f85\u5ba2\u6237\u8bbe\u5b9a\ntemplate <int inst>\nvoid (* __malloc_alloc_template<inst>::__malloc_alloc_oom_handler)() = 0;\n#endif\n\ntemplate <int inst>\nvoid * __malloc_alloc_template<inst>::oom_malloc(size_t n)\n{\n    void (* my_malloc_handler)();\n    void *result;\n\n    for (;;) {//\u4e0d\u65ad\u5c1d\u8bd5\u91ca\u653e\u3001\u5206\u914d\u3001\u518d\u91ca\u653e\u3001\u518d\u5206\u914d...\n        my_malloc_handler = __malloc_alloc_oom_handler;\n        if (0 == my_malloc_handler) { __THROW_BAD_ALLOC; }\n        (*my_malloc_handler)(); //\u8c03\u7528\u5904\u7406\u4f8b\u7a0b\uff0c\u4f01\u56fe\u91ca\u653e\u5185\u5b58\n        result = malloc(n);     //\u518d\u6b21\u5c1d\u8bd5\u5206\u914d\u5185\u5b58\n        if (result) return(result);\n    }\n}\n\ntemplate <int inst>\nvoid * __malloc_alloc_template<inst>::oom_realloc(void *p, size_t n)\n{\n    void (* my_malloc_handler)();\n    void *result;\n\n    for (;;) {//\u4e0d\u65ad\u5c1d\u8bd5\u91ca\u653e\u3001\u5206\u914d\u3001\u518d\u91ca\u653e\u3001\u518d\u5206\u914d...\n        my_malloc_handler = __malloc_alloc_oom_handler;\n        if (0 == my_malloc_handler) { __THROW_BAD_ALLOC; }\n        (*my_malloc_handler)(); //\u8c03\u7528\u5904\u7406\u4f8b\u7a0b\uff0c\u4f01\u56fe\u91ca\u653e\u5185\u5b58\n        result = realloc(p, n); //\u518d\u6b21\u5c1d\u8bd5\u5206\u914d\u5185\u5b58\n        if (result) return(result);\n    }\n}\n    \u2022 \u4ee5malloc()\u3001free()\u3001realloc()\u7b49C\u51fd\u6570\u6267\u884c\u5b9e\u9645\u7684\u5185\u5b58\u5206\u914d\u3001\u91ca\u653e\u3001\u91cd\u5206\u914d\u64cd\u4f5c\n    \u2022 \u5b9e\u73b0\u51fa\u7c7b\u4f3cC++ new-handler\u7684\u673a\u5236\uff08C++ new-handler\u673a\u5236\u662f\uff0c\u53ef\u4ee5\u8981\u6c42\u7cfb\u7edf\u5728\u5185\u5b58\u5206\u914d\u9700\u6c42\u65e0\u6cd5\u88ab\u6ee1\u8db3\u65f6\uff0c\u8c03\u7528\u4e00\u4e2a\u4f60\u6240\u6307\u5b9a\u7684\u51fd\u6570\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u65e6::operator new\u65e0\u6cd5\u5b8c\u6210\u4efb\u52a1\uff0c\u5728\u4e22\u51fastd::bad_alloc\u5f02\u5e38\u72b6\u6001\u4e4b\u524d\uff0c\u4f1a\u5148\u8c03\u7528\u7531\u5ba2\u6237\u6307\u5b9a\u7684\u5904\u7406\u4f8b\u7a0b\uff0c\u8be5\u5904\u7406\u4f8b\u7a0b\u901a\u5e38\u5373\u88ab\u79f0\u4e3anew-handler\uff09\uff0c\u4e0d\u80fd\u76f4\u63a5\u8fd0\u7528C++ new-handler\u673a\u5236\uff0c\u56e0\u4e3a\u5b83\u5e76\u975e\u4f7f\u7528::operator new\u6765\u5206\u914d\u5185\u5b58\uff08operator new\u7684\u5b9e\u73b0\uff09\n3\uff09\u7b2c\u4e8c\u7ea7\u5206\u914d\u5668__default_alloc_template\n\u7b2c\u4e8c\u7ea7\u5206\u914d\u5668\u591a\u4e86\u4e00\u4e9b\u673a\u5236\uff0c\u907f\u514d\u592a\u591a\u5c0f\u989d\u533a\u5757\u9020\u6210\u5185\u5b58\u7684\u788e\u7247\uff0c\u5c0f\u989d\u533a\u5757\u5b58\u5728\u4e0b\u5217\u95ee\u9898\uff1a\n    \u2022 \u4ea7\u751f\u5185\u5b58\u788e\u7247\n    \u2022 \u989d\u5916\u8d1f\u62c5\u3002\u989d\u5916\u8d1f\u62c5\u662f\u4e00\u4e9b\u533a\u5757\u4fe1\u606f\uff0c\u7528\u4ee5\u7ba1\u7406\u5185\u5b58\u3002\u533a\u5757\u8d8a\u5c0f\uff0c\u989d\u5916\u8d1f\u62c5\u6240\u5360\u7684\u6bd4\u4f8b\u5c31\u8d8a\u5927\uff0c\u8d8a\u663e\u6d6a\u8d39\n\n    \u2022 \u5f53\u533a\u5757\u5927\u4e8e128bytes\u65f6\uff0c\u89c6\u4e3a\u5927\u533a\u5757\n        \u25e6 \u8f6c\u4ea4\u7b2c\u4e00\u7ea7\u5206\u914d\u5668\u5904\u7406\n    \u2022 \u5f53\u533a\u5757\u5c0f\u4e8e128bytes\u65f6\uff0c\u89c6\u4e3a\u5c0f\u989d\u533a\u5757\n        \u25e6 \u4ee5\u5185\u5b58\u6c60\u7ba1\u7406(\u4e5f\u79f0\u4e3a\u6b21\u5c42\u5206\u914d)\uff1a\u6bcf\u6b21\u5206\u914d\u4e00\u5927\u5757\u5185\u5b58\uff0c\u5e76\u7ef4\u62a4\u5bf9\u5e94\u7684\u81ea\u7531\u94fe\u8868(free-list)\uff0c\u4e0b\u6b21\u82e5\u8f7d\u6709\u76f8\u540c\u5927\u5c0f\u7684\u5185\u5b58\u9700\u6c42\uff0c\u5c31\u76f4\u63a5\u4ecefree-list\u4e2d\u62e8\u51fa\u3002\u5982\u679c\u5ba2\u6237\u91ca\u653e\u5c0f\u989d\u533a\u5757\uff0c\u5c31\u7531\u5206\u914d\u5668\u56de\u6536\u5230free-list\u4e2d\u3002\u7ef4\u62a4\u670916\u4e2afree-list\uff0c\u5404\u81ea\u7ba1\u7406\u5927\u5c0f\u5206\u522b\u4e3a8\uff0c16\uff0c24\uff0c32\uff0c40\uff0c48\uff0c56\uff0c64\uff0c72\uff0c80\uff0c88\uff0c96\uff0c104\uff0c112\uff0c120\uff0c128bytes\u7684\u5c0f\u989d\u533a\u5757\n        \u25e6 SGI\u7b2c\u4e8c\u7ea7\u5206\u914d\u5668\u4f1a\u4e3b\u52a8\u5c06\u4efb\u4f55\u5c0f\u989d\u533a\u5757\u7684\u5185\u5b58\u9700\u6c42\u91cf\u4e0a\u8c03\u81f38\u7684\u500d\u6570\nfree-list\u4f7f\u7528\u5982\u4e0b\u7ed3\u6784\u8868\u793a\uff1a\n//\u4f7f\u7528union\u89e3\u51b3free-list\u5e26\u6765\u7684\u989d\u5916\u8d1f\u62c5\uff1a\u7ef4\u62a4\u94fe\u8868\u6240\u5fc5\u987b\u7684\u6307\u9488\u800c\u9020\u6210\u5185\u5b58\u7684\u53e6\u4e00\u79cd\u6d6a\u8d39\nunion obj{\n    union obj * free_list_link; //\u7cfb\u7edf\u89c6\u89d2\n    char client_data[1];        //\u7528\u6237\u89c6\u89d2\n}\n\u4e0b\u56fe\u662ffree-list\u7684\u5b9e\u73b0\u6280\u5de7\uff1a\n\n\u7b2c\u4e8c\u7ea7\u5206\u914d\u5668__default_alloc_template\u4e5f\u5b9a\u4e49\u5728\u5934\u6587\u4ef6<stl_alloc.h>\u4e2d\uff0c\u4ee5\u4e0b\u4e3a\u90e8\u5206\u5b9e\u73b0\uff1a\n#ifdef __SUNPRO_CC\n// breaks if we make these template class members:\n  enum {__ALIGN = 8};                           //\u5c0f\u578b\u533a\u5757\u7684\u4e0a\u8c03\u8fb9\u754c\n  enum {__MAX_BYTES = 128};                     //\u5c0f\u578b\u533a\u5757\u7684\u4e0a\u9650\n  enum {__NFREELISTS = __MAX_BYTES/__ALIGN};    //free-list\u7684\u4e2a\u6570\n#endif\n\n//\u7b2c\u4e8c\u7ea7\u5206\u914d\u5668\u7684\u5b9a\u4e49\n//\u65e0\u201dtemplate\u578b\u522b\u53c2\u6570\u201c\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u7528\u4e8e\u591a\u7ebf\u7a0b\u73af\u5883\uff0c\u7b2c\u4e8c\u53c2\u6570\u5b8c\u5168\u6ca1\u6d3e\u4e0a\u7528\u573a\ntemplate <bool threads, int inst>\nclass __default_alloc_template {\n\nprivate:\n    //\u5c06bytes\u4e0a\u8c03\u81f38\u7684\u500d\u6570\n    static size_t ROUND_UP(size_t bytes) {\n        return (((bytes) + __ALIGN-1) & ~(__ALIGN - 1));\n    }\nprivate:\n    //free-list\n    union obj {\n        union obj * free_list_link;\n        char client_data[1];    /* The client sees this.        */\n    };\nprivate:\n    //16\u4e2afree-list\n    static obj * volatile free_list[__NFREELISTS]; \n    //\u6839\u636e\u533a\u5757\u5927\u5c0f\uff0c\u51b3\u5b9a\u4f7f\u7528\u7b2cn\u53f7free-list\u3002n\u4ece0\u7b97\u8d77\n    static  size_t FREELIST_INDEX(size_t bytes) {\n        return (((bytes) + __ALIGN-1)/__ALIGN - 1);\n    }\n\n    //\u8fd4\u56de\u4e00\u4e2a\u5927\u5c0f\u4e3an\u7684\u5bf9\u8c61\uff0c\u5e76\u53ef\u80fd\u52a0\u5165\u5927\u5c0f\u4e3an\u7684\u5176\u5b83\u533a\u5757\u5230free-list\n    static void *refill(size_t n);\n    //\u5206\u914d\u4e00\u5927\u5757\u7a7a\u95f4\uff0c\u53ef\u5bb9\u7eb3nobjs\u4e2a\u5927\u5c0f\u4e3a\u201dsize\u201c\u7684\u533a\u5757\n    //\u5982\u679c\u5206\u914dnobjs\u4e2a\u533a\u5757\u6709\u6240\u4e0d\u4fbf\uff0cnobjs\u53ef\u80fd\u4f1a\u964d\u4f4e\n    static char *chunk_alloc(size_t size, int &nobjs);\n\n    // Chunk allocation state.\n    static char *start_free;  //\u5185\u5b58\u6c60\u8d77\u59cb\u4f4d\u7f6e\u3002\u53ea\u5728chunk_alloc()\u4e2d\u53d8\u5316\n    static char *end_free;    //\u5185\u5b58\u6c60\u7ed3\u675f\u4f4d\u7f6e\u3002\u53ea\u5728chunk_alloc()\u4e2d\u53d8\u5316\n    static size_t heap_size;\n\npublic:\n    static void * allocate(size_t n){ /*\u8be6\u8ff0\u4e8e\u540e*/ }\n    static void deallocate(void *p, size_t n){ /*\u8be6\u8ff0\u4e8e\u540e*/ }\n    static void * reallocate(void *p, size_t old_sz, size_t new_sz);\n};\n\n/*\u4ee5\u4e0b\u662fstatic data member\u7684\u5b9a\u4e49\u4e0e\u521d\u59cb\u503c*/\n\ntemplate <bool threads, int inst>\nchar *__default_alloc_template<threads, inst>::start_free = 0;\n\ntemplate <bool threads, int inst>\nchar *__default_alloc_template<threads, inst>::end_free = 0;\n\ntemplate <bool threads, int inst>\nsize_t __default_alloc_template<threads, inst>::heap_size = 0;\n\ntemplate <bool threads, int inst>\n__default_alloc_template<threads, inst>::obj * volatile\n__default_alloc_template<threads, inst> ::free_list[__NFREELISTS] = \n    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };\n    \u2022 \u7a7a\u95f4\u5206\u914d\u51fd\u6570allocate()\n        \u25e6 \u82e5\u533a\u5757\u5927\u4e8e128bytes\uff0c\u5c31\u8c03\u7528\u7b2c\u4e00\u7ea7\u5206\u914d\u5668\n        \u25e6 \u82e5\u533a\u5757\u5c0f\u4e8e128bytes\uff0c\u68c0\u67e5\u5bf9\u5e94\u7684free-list\n            \u25aa \u82e5free-list\u4e4b\u5185\u6709\u53ef\u7528\u7684\u533a\u5757\uff0c\u5219\u76f4\u63a5\u4f7f\u7528\n            \u25aa \u82e5free-list\u4e4b\u5185\u6ca1\u6709\u53ef\u7528\u533a\u5757\uff0c\u5c06\u533a\u5757\u5927\u5c0f\u8c03\u81f38\u500d\u6570\u8fb9\u754c\uff0c\u8c03\u7528refill()\uff0c\u51c6\u5907\u4e3afree-list\u91cd\u65b0\u586b\u5145\u7a7a\u95f4\n\n    \u2022 \u7a7a\u95f4\u91ca\u653e\u51fd\u6570deallocate()\n        \u25e6 \u82e5\u533a\u5757\u5927\u4e8e128bytes\uff0c\u5c31\u8c03\u7528\u7b2c\u4e00\u7ea7\u5206\u914d\u5668\n        \u25e6 \u82e5\u533a\u5757\u5c0f\u4e8e128bytes\uff0c\u627e\u51fa\u5bf9\u5e94\u7684free-list\uff0c\u5c06\u533a\u5757\u56de\u6536\n\n    \u2022 \u91cd\u65b0\u586b\u5145free-list\u7684\u51fd\u6570refill()\n        \u25e6 \u82e5free-list\u4e2d\u6ca1\u6709\u53ef\u7528\u533a\u5757\u65f6\uff0c\u4f1a\u8c03\u7528chunk_alloc\u4ece\u5185\u5b58\u6c60\u4e2d\u7533\u8bf7\u7a7a\u95f4\u91cd\u65b0\u586b\u5145free-list\u3002\u7f3a\u7701\u7533\u8bf720\u4e2a\u65b0\u8282\u70b9(\u65b0\u533a\u5757)\uff0c\u5982\u679c\u5185\u5b58\u6c60\u7a7a\u95f4\u4e0d\u8db3\uff0c\u83b7\u5f97\u7684\u8282\u70b9\u6570\u53ef\u80fd\u5c0f\u4e8e20\n    \u2022 chunk_alloc()\u51fd\u6570\u4ece\u5185\u5b58\u6c60\u7533\u8bf7\u7a7a\u95f4\uff0c\u6839\u636eend_free-start_free\u5224\u65ad\u5185\u5b58\u6c60\u4e2d\u5269\u4f59\u7684\u7a7a\u95f4\n        \u25e6 \u5982\u679c\u5269\u4f59\u7a7a\u95f4\u5145\u8db3\n            \u25aa \u76f4\u63a5\u8c03\u51fa20\u4e2a\u533a\u5757\u8fd4\u56de\u7ed9free-list\n        \u25e6 \u5982\u679c\u5269\u4f59\u7a7a\u95f4\u4e0d\u8db3\u4ee5\u63d0\u4f9b20\u4e2a\u533a\u5757\uff0c\u4f46\u8db3\u591f\u4f9b\u5e94\u81f3\u5c111\u4e2a\u533a\u5757\n            \u25aa \u62e8\u51fa\u8fd9\u4e0d\u8db320\u4e2a\u533a\u5757\u7684\u7a7a\u95f4\n        \u25e6 \u5982\u679c\u5269\u4f59\u7a7a\u95f4\u8fde\u4e00\u4e2a\u533a\u5757\u90fd\u65e0\u6cd5\u4f9b\u5e94\n            \u25aa \u5229\u7528malloc()\u4eceheap\u4e2d\u5206\u914d\u5185\u5b58\uff08\u5927\u5c0f\u4e3a\u9700\u6c42\u91cf\u76842\u500d\uff0c\u52a0\u4e0a\u4e00\u4e2a\u968f\u7740\u5206\u914d\u6b21\u6570\u589e\u52a0\u800c\u8d8a\u6765\u8d8a\u5927\u7684\u9644\u52a0\u91cf\uff09\uff0c\u4e3a\u5185\u5b58\u6c60\u6ce8\u5165\u65b0\u7684\u53ef\u7528\u7a7a\u95f4\uff08\u8be6\u7ec6\u4f8b\u5b50\u89c1\u4e0b\u56fe\uff09\n            \u25aa \u5982\u679cmalloc()\u83b7\u53d6\u5931\u8d25\uff0cchunk_alloc()\u5c31\u56db\u5904\u5bfb\u627e\u6709\u65e0\u201d\u5c1a\u6709\u672a\u7528\u4e14\u533a\u5757\u8db3\u591f\u5927\u201c\u7684free-list\u3002\u627e\u5230\u4e86\u5c31\u6316\u51fa\u4e00\u5757\u4ea4\u51fa\n            \u25aa \u5982\u679c\u4e0a\u4e00\u6b65\u4ecd\u672a\u6210\u529f\uff0c\u90a3\u4e48\u5c31\u8c03\u7528\u7b2c\u4e00\u7ea7\u5206\u914d\u5668\uff0c\u7b2c\u4e00\u7ea7\u5206\u914d\u5668\u6709out-of-memory\u5904\u7406\u673a\u5236\uff0c\u6216\u8bb8\u6709\u673a\u4f1a\u91ca\u653e\u5176\u5b83\u7684\u5185\u5b58\u62ff\u6765\u6b64\u5904\u4f7f\u7528\u3002\u5982\u679c\u53ef\u4ee5\uff0c\u5c31\u6210\u529f\uff0c\u5426\u5219\u629b\u51fabad_alloc\u5f02\u5e38\n    \u2022 \n    \u2022 \u4e0a\u56fe\u4e2d\uff0c\u4e00\u5f00\u59cb\u5c31\u8c03\u7528chunk_alloc(32,20)\uff0c\u4e8e\u662fmalloc()\u5206\u914d40\u4e2a32bytes\u533a\u5757\uff0c\u5176\u4e2d\u7b2c1\u4e2a\u4ea4\u51fa\uff0c\u53e619\u4e2a\u4ea4\u7ed9free-list[3]\u7ef4\u62a4\uff0c\u4f5920\u4e2a\u7559\u7ed9\u5185\u5b58\u6c60\uff1b\u63a5\u4e0b\u6765\u5ba2\u6237\u8c03\u7528chunk_alloc(64,20)\uff0c\u6b64\u65f6free_list[7]\u7a7a\u7a7a\u5982\u4e5f\uff0c\u5fc5\u987b\u5411\u5185\u5b58\u6c60\u7533\u8bf7\u3002\u5185\u5b58\u6c60\u53ea\u80fd\u4f9b\u5e94(32*20)/64=10\u4e2a64bytes\u533a\u5757\uff0c\u5c31\u628a\u8fd910\u4e2a\u533a\u5757\u8fd4\u56de\uff0c\u7b2c1\u4e2a\u4ea4\u7ed9\u5ba2\u6237\uff0c\u4f599\u4e2a\u7531free_list[7]\u7ef4\u62a4\u3002\u6b64\u65f6\u5185\u5b58\u6c60\u5168\u7a7a\u3002\u63a5\u4e0b\u6765\u518d\u8c03\u7528chunk_alloc(96,20)\uff0c\u6b64\u65f6free-list[11]\u7a7a\u7a7a\u5982\u4e5f\uff0c\u5fc5\u987b\u5411\u5185\u5b58\u6c60\u7533\u8bf7\u3002\u800c\u5185\u5b58\u6c60\u6b64\u65f6\u4e5f\u4e3a\u7a7a\uff0c\u4e8e\u662f\u4ee5malloc()\u5206\u914d40+n(\u9644\u52a0\u91cf)\u4e2a96bytes\u533a\u5757\uff0c\u5176\u4e2d\u7b2c1\u4e2a\u4ea4\u51fa\uff0c\u53e619\u4e2a\u4ea4\u7ed9free-list[11]\u7ef4\u62a4\uff0c\u4f5920+n(\u9644\u52a0\u91cf)\u4e2a\u533a\u5757\u7559\u7ed9\u5185\u5b58\u6c60\u2026\n3.3 \u5185\u5b58\u57fa\u672c\u5904\u7406\u5de5\u5177\nSTL\u5b9a\u4e49\u4e865\u4e2a\u5168\u5c40\u51fd\u6570\uff0c\u4f5c\u7528\u4e8e\u672a\u521d\u59cb\u5316\u7a7a\u95f4\u4e0a\uff0c\u6709\u52a9\u4e8e\u5bb9\u5668\u7684\u5b9e\u73b0\uff1a\n    \u2022 \u4f5c\u7528\u4e8e\u5355\u4e2a\u5bf9\u8c61\uff08\u89c13.1 \u5bf9\u8c61\u6784\u9020\u4e0e\u6790\u6784\uff0cSGI STL\u5b9a\u4e49\u5728\u5934\u6587\u4ef6<stl_construct.h>\u4e2d\uff09\n        \u25e6 construct()\u51fd\u6570\uff08\u6784\u9020\u5355\u4e2a\u5bf9\u8c61\uff09\n        \u25e6 destroy()\u51fd\u6570\uff08\u6790\u6784\u5355\u4e2a\u5bf9\u8c61\uff09\n    \u2022 \u4f5c\u7528\u4e8e\u5bb9\u5668\u7684\u533a\u95f4\uff08\u672c\u8282\uff0cSGI STL\u5b9a\u4e49\u5728\u5934\u6587\u4ef6<stl_uninitialized.h>\u4e2d\uff0c\u662f\u9ad8\u5c42copy()\u3001fill()\u3001fill_n()\u7684\u5e95\u5c42\u51fd\u6570\uff09\n        \u25e6 uninitialized_copy()\u51fd\u6570\n        \u25e6 uninitialized_fill()\u51fd\u6570\n        \u25e6 uninitialized_fill_n()\u51fd\u6570\n\u5bb9\u5668\u7684\u5168\u533a\u95f4\u6784\u9020\u51fd\u6570\u901a\u5e38\u52062\u6b65\uff1a\n    1. \u5206\u914d\u5185\u5b58\u533a\u5757\uff0c\u8db3\u4ee5\u5305\u542b\u8303\u56f4\u5185\u7684\u6240\u6709\u5143\u7d20\n    2. \u8c03\u7528\u4e0a\u8ff03\u4e2a\u51fd\u6570\u5728\u5168\u533a\u95f4\u8303\u56f4\u5185\u6784\u9020\u5bf9\u8c61\uff08\u56e0\u6b64\uff0c\u8fd93\u4e2a\u51fd\u6570\u4f7f\u6211\u4eec\u80fd\u591f\u5c06\u5185\u5b58\u7684\u5206\u914d\u4e0e\u5bf9\u8c61\u7684\u6784\u9020\u884c\u4e3a\u5206\u79bb\uff1b\u5e76\u4e143\u4e2a\u51fd\u6570\u90fd\u5177\u6709\u201dcommit or rollback\u201c\u8bed\u610f\uff0c\u8981\u4e48\u6240\u6709\u5bf9\u8c61\u90fd\u6784\u9020\u6210\u529f\uff0c\u8981\u4e48\u4e00\u4e2a\u90fd\u6ca1\u6709\u6784\u9020\uff09\n\n\n\u4e09.\u8fed\u4ee3\u5668\u4e0etraits\u7f16\u7a0b\u6280\u6cd5\n1.\u8fed\u4ee3\u5668\u76f8\u5e94\u7c7b\u578b\n\u5728\u7b97\u6cd5\u4e2d\u8fd0\u7528\u8fed\u4ee3\u5668\u65f6\uff0c\u5f88\u53ef\u80fd\u4f1a\u7528\u5230\u5176\u76f8\u5e94\u7c7b\u578b\u3002\u6240\u8c13\u76f8\u5e94\u7c7b\u578b\uff0c\u8fed\u4ee3\u5668\u6240\u6307\u4e4b\u7269\u7684\u7c7b\u578b\u4fbf\u662f\u5176\u4e2d\u4e4b\u4e00\uff0c\u7b97\u6cd5\u53ef\u4ee5\u5728\u51fd\u6570\u4f53\u4e2d\u4f7f\u7528\u8fed\u4ee3\u5668\u6240\u6307\u4e4b\u7269\u7684\u7c7b\u578b\u6765\u5b9a\u4e49\u53d8\u91cf\uff0c\u4e5f\u53ef\u80fd\u5c06\u8fed\u4ee3\u5668\u6240\u6307\u4e4b\u7269\u7684\u7c7b\u578b\u4f5c\u4e3a\u7b97\u6cd5\u7684\u8fd4\u56de\u503c\uff1a\n\n    \u2022 \u5728\u51fd\u6570\u4f53\u4e2d\u4f7f\u7528\u8fed\u4ee3\u5668\u6240\u6307\u4e4b\u7269\u7684\u7c7b\u578b\n        \u25e6 C++\u652f\u6301sizeof()\uff0c\u4f46\u5e76\u672a\u652f\u6301typeof()\u3002\u5373\u4fbf\u52a8\u7528RTTI\u6027\u8d28\u4e2d\u7684typeid()\uff0c\u83b7\u5f97\u7684\u4e5f\u53ea\u662f\u7c7b\u578b\u540d\u79f0\uff0c\u4e0d\u80fd\u62ff\u6765\u505a\u53d8\u91cf\u58f0\u660e\n        \u25e6 \u8fd9\u91cc\u5229\u7528\u51fd\u6570\u6a21\u677f\u7684\u53c2\u6570\u63a8\u5bfc\u673a\u5236\u89e3\u51b3\u3002\u7b97\u6cd5func()\u4f5c\u4e3a\u5bf9\u5916\u63a5\u53e3\uff0c\u7b97\u6cd5\u7684\u6240\u6709\u903b\u8f91\u53e6\u5916\u5c01\u88c5\u5728\u4e00\u4e2a\u5b9e\u73b0\u51fd\u6570func_impl()\u4e2d\uff0c\u7531\u4e8e\u5b83\u662f\u4e00\u4e2a\u51fd\u6570\u6a21\u677f\uff0c\u4e00\u65e6\u88ab\u8c03\u7528\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u81ea\u52a8\u8fdb\u884c\u53c2\u6570\u63a8\u5bfc\uff0c\u5bfc\u51fa\u7c7b\u578bT\n    \u2022 \u8fed\u4ee3\u5668\u6240\u6307\u4e4b\u7269\u7684\u7c7b\u578b\u4f5c\u4e3a\u7b97\u6cd5\u7684\u8fd4\u56de\u7c7b\u578b\n        \u25e6 \u51fd\u6570\u6a21\u677f\u7684\u53c2\u6570\u63a8\u5bfc\u673a\u5236\u63a8\u5bfc\u7684\u662f\u53c2\u6570\uff0c\u65e0\u6cd5\u63a8\u5bfc\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\n        \u25e6 \u8fd9\u91cc\u4f7f\u7528\u5d4c\u5957\u7c7b\u578b\u58f0\u660e\u89e3\u51b3\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u7c7b\u7c7b\u578b\u7684\u8fed\u4ee3\u5668\uff0c\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u4f46\u662f\u975e\u7c7b\u7c7b\u578b\u7684\u539f\u751f\u6307\u9488\u65e0\u6cd5\u5904\u7406\n\u901a\u8fc7\u4e0a\u56fe\uff0c\u53ef\u4ee5\u4e86\u89e3\u5230\u5728\u7b97\u6cd5\u4e2d\u5bf9\u8fed\u4ee3\u5668\u76f8\u5e94\u7c7b\u578b\u7684\u9700\u6c42\u3002\u9664\u4e86\u8fed\u4ee3\u5668\u6240\u6307\u4e4b\u7269\u7684\u7c7b\u578b(value type)\uff0c\u8fed\u4ee3\u5668\u76f8\u5e94\u7c7b\u578b\u8fd8\u5305\u62ec\u53e6\u59164\u79cd\uff0c\u5728traits\u7f16\u7a0b\u6280\u6cd5\u4e2d\u5c06\u4f1a\u4ecb\u7ecd\uff0c\u5e76\u4e14\u4f1a\u63d0\u5230\u5982\u4f55\u4f7f\u7528traits\u6765\u89e3\u51b3\u4e0a\u9762\u7684\u95ee\u9898\uff08\u8fd9\u4e5f\u662fSTL\u4e2d\u5b9e\u9645\u4f7f\u7528\u7684\u65b9\u6cd5\uff09\n2.traits\u7f16\u7a0b\u6280\u6cd5\n\u4e0a\u4e00\u8282\u6240\u4f7f\u7528\u7684\u65b9\u6cd5\uff0c\u5728value type\u4f5c\u4e3a\u8fd4\u56de\u7c7b\u578b\u65f6\uff0c\u65e0\u6cd5\u5904\u7406\u975e\u7c7b\u7c7b\u578b\u7684\u539f\u751f\u6307\u9488\u3002\u4e0b\u56fe\u4f7f\u7528traits\u6765\u89e3\u51b3\uff0c\u4f7f\u7528\u4e86\u6a21\u677f\u504f\u7279\u5316\u6765\u5904\u7406\u975e\u7c7b\u7c7b\u578b\u7684\u539f\u751f\u6307\u9488\uff1a\n\n\n\u73b0\u5728\uff0c\u4e0d\u8bba\u9762\u5bf9\u7684\u662f\u8fed\u4ee3\u5668MyIter\uff0c\u6216\u662f\u539f\u751f\u6307\u9488int*\u6216const int*\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7traits\u53d6\u51fa\u6b63\u786e\u7684value type\n\n\u5f53\u7136\uff0c\u82e5\u8981\u201c\u7279\u6027\u8403\u53d6\u673a\u201dtraits\u80fd\u591f\u6709\u6548\u8fd0\u4f5c\uff0c\u6bcf\u4e00\u4e2a\u8fed\u4ee3\u5668\u5fc5\u987b\u9075\u5faa\u7ea6\u5b9a\uff0c\u81ea\u884c\u4ee5\u5185\u5d4c\u7c7b\u578b\u5b9a\u4e49\u7684\u65b9\u5f0f\u5b9a\u4e49\u51fa\u76f8\u5e94\u7c7b\u578b\u3002\u8fd9\u662f\u4e00\u4e2a\u7ea6\u5b9a\uff0c\u8c01\u4e0d\u9075\u5b88\u8fd9\u4e2a\u7ea6\u5b9a\uff0c\u8c01\u5c31\u4e0d\u80fd\u517c\u5bb9\u4e8eSTL\u8fd9\u4e2a\u5927\u5bb6\u5ead\n\u6839\u636e\u7ecf\u9a8c\uff0c\u6700\u5e38\u7528\u5230\u7684\u8fed\u4ee3\u5668\u76f8\u5e94\u7c7b\u578b\u67095\u79cd\uff1a\n    1. value type\uff1a\u6307\u8fed\u4ee3\u5668\u6240\u6307\u5bf9\u8c61\u7684\u7c7b\u578b\n    2. difference type\uff1a\u7528\u4ee5\u8868\u793a\u4e24\u4e2a\u8fed\u4ee3\u5668\u4e4b\u95f4\u7684\u8ddd\u79bb\n    3. pointer\uff1a\u5982\u679cvalue type\u662fT\uff0c\u90a3\u4e48pointer\u5c31\u662f\u6307\u5411T\u7684\u6307\u9488\n    4. reference\uff1a\u5982\u679cvalue type\u662fT\uff0c\u90a3\u4e48reference\u5c31\u662fT\u7684\u5f15\u7528\n    5. iterator category\uff1a\u8fed\u4ee3\u5668\u7684\u7c7b\u578b\uff08\u8be6\u89c1\uff09\n    \u2022 \n\u5982\u679c\u5e0c\u671b\u5f00\u53d1\u7684\u5bb9\u5668\u80fd\u4e0eSTL\u76f8\u5bb9\uff0c\u4e00\u5b9a\u8981\u4e3a\u5bb9\u5668\u5b9a\u4e49\u8fd95\u79cd\u76f8\u5e94\u7c7b\u578b\u3002\u201c\u7279\u6027\u8403\u53d6\u673a\u201dtraits\u4f1a\u5f88\u5fe0\u5b9e\u5730\u5c06\u7279\u6027\u8403\u53d6\u51fa\u6765\uff1a\ntemplate <class Iterator>\nstruct iterator_traits{\n    typedef typename Iterator::iterator_category   iterator_category;\n    typedef typename Iterator::value_type          value_type;\n    typedef typename Iterator::difference_type     difference_type;\n    typedef typename Iterator::pointer             pointer;\n    typedef typename Iterator::reference           reference;\n};\niterator_traits\u5fc5\u987b\u9488\u5bf9\u4f20\u5165\u7684\u7c7b\u578b\u4e3apointer\u53capointer-to-const\u8005\u8bbe\u8ba1\u504f\u7279\u5316\u7248\u672c\uff1a\n//\u4ee5C++\u5185\u5efa\u7684ptrdiff_t\uff08\u5b9a\u4e49\u4e8e<cstddef>\u5934\u6587\u4ef6\uff09\u4f5c\u4e3a\u539f\u751f\u6307\u9488\u7684difference type\n\n//\u9488\u5bf9\u539f\u751f\u6307\u9488\u7684\u504f\u7279\u5316\u7248\u672c\ntemplate <class T>\nstruct iterator_traits<T*>{\n    //\u539f\u751f\u6307\u9488\u662f\u4e00\u79cdRandom Access Iterator\n    typedef random_access_iterator_tag   iterator_category;\n    typedef T                            value_type;\n    typedef ptrdiff_t                    difference_type;\n    typedef T*                           pointer;\n    typedef T&                           reference;\n};\n\n//\u9488\u5bf9\u539f\u751fpointer-to-const\u7684\u504f\u7279\u5316\u7248\u672c\ntemplate <class T>\nstruct iterator_traits<const T*>{\n    //\u539f\u751f\u6307\u9488\u662f\u4e00\u79cdRandom Access Iterator\n    typedef random_access_iterator_tag   iterator_category;\n    typedef T                            value_type;\n    typedef ptrdiff_t                    difference_type;\n    typedef const T*                     pointer;\n    typedef const T&                     reference;\n};\nSTL\u63d0\u4f9b\u4ee5\u4e0b\u51fd\u6570\uff0c\u7b80\u5316\u8fed\u4ee3\u5668\u76f8\u5e94\u7c7b\u578b\u7684\u8403\u53d6\uff1a\n//\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u8403\u53d6category\ntemplate <class Iterator>\ninline typename iterator_traits<Iterator>::iterator_category\niterator_category(const Iterator&) {\n  typedef typename iterator_traits<Iterator>::iterator_category category;\n  return category();\n}\n\n//\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u8403\u53d6distance type\ntemplate <class Iterator>\ninline typename iterator_traits<Iterator>::difference_type*\ndistance_type(const Iterator&) {\n  return static_cast<typename iterator_traits<Iterator>::difference_type*>(0);\n}\n\n//\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u8403\u53d6value type\ntemplate <class Iterator>\ninline typename iterator_traits<Iterator>::value_type*\nvalue_type(const Iterator&) {\n  return static_cast<typename iterator_traits<Iterator>::value_type*>(0);\n}\n2.1 \u8fed\u4ee3\u5668\u7c7b\u578b\n\u8bbe\u8ba1\u7b97\u6cd5\u65f6\uff0c\u5982\u679c\u53ef\u80fd\uff0c\u5c3d\u91cf\u9488\u5bf9\u67d0\u79cd\u8fed\u4ee3\u5668\u63d0\u4f9b\u4e00\u4e2a\u660e\u786e\u5b9a\u4e49\uff0c\u5e76\u9488\u5bf9\u66f4\u5f3a\u5316\u7684\u67d0\u79cd\u8fed\u4ee3\u5668\u63d0\u4f9b\u53e6\u4e00\u79cd\u5b9a\u4e49\uff0c\u8fd9\u6837\u624d\u80fd\u5728\u4e0d\u540c\u60c5\u51b5\u4e0b\u63d0\u4f9b\u6700\u5927\u6548\u7387\uff0c\u5982\u4e0b\u56fe\u7684advanced()\u51fd\u6570\uff0c\u7528\u4e8e\u79fb\u52a8\u8fed\u4ee3\u5668\uff1a\n\n\u5728\u4e0a\u56fe\u4e2d\uff0c\u6bcf\u4e2a__advance()\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u90fd\u53ea\u58f0\u660e\u7c7b\u578b\uff0c\u5e76\u672a\u6307\u5b9a\u53c2\u6570\u540d\u79f0\uff0c\u56e0\u4e3a\u5b83\u7eaf\u7cb9\u53ea\u662f\u7528\u6765\u6fc0\u6d3b\u91cd\u8f7d\u673a\u5236\uff0c\u51fd\u6570\u4e4b\u4e2d\u6839\u672c\u4e0d\u4f7f\u7528\u8be5\u53c2\u6570\u3002\u5982\u679c\u52a0\u4e0a\u53c2\u6570\u540d\u79f0\u4e5f\u6ca1\u6709\u9519\uff0c\u4f46\u662f\u6ca1\u5fc5\u8981\n\u5c06advance()\u4e2d\u7684iterator_category(i)\u5c55\u5f00\u5f97\u5230iterator_traits<InputIterator>::iterator_category()\uff0c\u8fd9\u4f1a\u4ea7\u751f\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61\uff0c\u5176\u7c7b\u578b\u96b6\u5c5e\u4e8e\u51e0\u79cd\u8fed\u4ee3\u5668\u4e2d\u7684\u4e00\u79cd\u3002\u7136\u540e\uff0c\u6839\u636e\u8fd9\u4e2a\u7c7b\u578b\uff0c\u7f16\u8bd1\u5668\u624d\u51b3\u5b9a\u8c03\u7528\u54ea\u4e00\u4e2a__advance()\u91cd\u8f7d\u51fd\u6570\n\u4e0a\u56fe\u4ee5class\u6765\u5b9a\u4e49\u8fed\u4ee3\u5668\u7684\u5404\u79cd\u5206\u7c7b\u6807\u7b7e\uff0c\u6709\u4e0b\u5217\u597d\u5904\uff1a\n    \u2022 \u53ef\u4ee5\u4fc3\u6210\u91cd\u8f7d\u673a\u5236\u7684\u6210\u529f\u8fd0\u4f5c\n    \u2022 **\u901a\u8fc7\u7ee7\u627f\uff0c\u53ef\u4ee5\u4e0d\u5fc5\u518d\u5199\u201c\u5355\u7eaf\u53ea\u505a\u4f20\u9012\u8c03\u7528\u201d\u7684\u51fd\u6570\uff08\u5982__advance()\u7684Forward Iterator\u7248\u53ea\u662f\u5355\u7eaf\u7684\u8c03\u7528Input Iterator\u7248\uff0c\u56e0\u6b64\u53ef\u4ee5\u7701\u7565\uff09,\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u4f8b\u5b50\u6765\u6a21\u62df\u8bc1\u5b9e**\n3.std::iterator\u7684\u4fdd\u8bc1\n\u4e3a\u4e86\u7b26\u5408\u89c4\u8303\uff0c\u4efb\u4f55\u8fed\u4ee3\u5668\u90fd\u5e94\u8be5\u63d0\u4f9b5\u4e2a\u5185\u5d4c\u76f8\u5e94\u7c7b\u578b\uff0c\u4ee5\u4fbf\u4e8etraits\u8403\u53d6\uff0c\u5426\u5219\u4fbf\u662f\u81ea\u522b\u4e8e\u6574\u4e2aSTL\u67b6\u6784\uff0c\u53ef\u80fd\u65e0\u6cd5\u4e0e\u5176\u5b83STL\u7ec4\u4ef6\u987a\u5229\u642d\u914d\u3002\u7136\u800c\uff0c\u5199\u4ee3\u7801\u96be\u514d\u4f1a\u6709\u9057\u6f0f\u3002\u56e0\u6b64\uff0cSTL\u63d0\u4f9b\u4e86\u4e00\u4e2aiterators class\u5982\u4e0b\uff0c\u5982\u679c\u6bcf\u4e2a\u65b0\u8bbe\u8ba1\u7684\u8fed\u4ee3\u5668\u90fd\u7ee7\u627f\u81ea\u5b83\uff0c\u5c31\u53ef\u4fdd\u8bc1\u7b26\u5408STL\u6240\u9700\u7684\u89c4\u8303\uff1b\ntemplate <class Category,\n          class T,\n          class Distance = ptrdiff_t,\n          class Pointer = T*,\n          class Reference = T&>\nstruct iterator{\n    typedef Category    iterator_category;\n    typedef T           value_type;\n    typedef Distance    difference_type;\n    typedef Pointer     pointer;\n    typedef Reference   reference;\n};\niterator class\u4e0d\u542b\u4efb\u4f55\u6210\u5458\uff0c\u5b58\u7cb9\u53ea\u662f\u7c7b\u578b\u5b9a\u4e49\uff0c\u6240\u4ee5\u7ee7\u627f\u5b83\u4e0d\u4f1a\u5bfc\u81f4\u4efb\u4f55\u989d\u5916\u8d1f\u62c5\u3002\u7531\u4e8e\u540e3\u4e2a\u53c2\u6570\u7686\u6709\u9ed8\u8ba4\u503c\uff0c\u6545\u65b0\u7684\u8fed\u4ee3\u5668\u53ea\u9700\u63d0\u4f9b\u524d2\u4e2a\u53c2\u6570\u5373\u53ef\u3002\u4ee5\u4e0b\u4e3a\u4e00\u4e2a\u7ee7\u627f\u793a\u4f8b\uff1a\ntemplate <class Item>\nstruct ListIter : public std::iterator<std::forword_iterator_tag, Item>{\n    ...\n};\n4.SGI STL\u7684__type_traits\nSGI\u5c06STL\u7684traits\u8fdb\u4e00\u6b65\u6269\u5927\u5230\u8fed\u4ee3\u5668\u4ee5\u5916\uff0c\u4e8e\u662f\u6709\u4e86\u6240\u8c13\u7684__type_traits\uff0c\u5b83\u5c5e\u4e8eSGI STL\uff0c\u4e0d\u5c5e\u4e8eSTL\u6807\u51c6\u89c4\u8303\n    \u2022 iterator_traits\uff1a\u8d1f\u8d23\u8403\u53d6\u8fed\u4ee3\u5668\u7684\u7279\u6027\n    \u2022 __type_traits\uff1a\u8d1f\u8d23\u8403\u53d6\u7c7b\u578b\u7684\u7279\u6027\uff0c\u5305\u62ec\uff1a\n        \u25e6 \u8be5\u7c7b\u578b\u662f\u5426\u5177\u5907non-trivial default ctor\n        \u25e6 \u8be5\u7c7b\u578b\u662f\u5426\u5177\u5907non-trivial copy ctor\n        \u25e6 \u8be5\u7c7b\u578b\u662f\u5426\u5177\u5907non-trivial assignment operator\n        \u25e6 \u8be5\u7c7b\u578b\u662f\u5426\u5177\u5907non-trivial dtor\n\u901a\u8fc7\u4f7f\u7528__type_traits\uff0c\u5728\u5bf9\u67d0\u4e2a\u7c7b\u578b\u8fdb\u884c\u6784\u9020\u3001\u6790\u6784\u3001\u62f7\u8d1d\u3001\u8d4b\u503c\u7b49\u64cd\u4f5c\u65f6\uff0c\u5c31\u53ef\u4ee5\u91c7\u7528\u6700\u6709\u6548\u7387\u7684\u63aa\u65bd\u3002\u8fd9\u5bf9\u4e8e\u5927\u89c4\u6a21\u800c\u64cd\u4f5c\u9891\u7e41\u7684\u5bb9\u5668\uff0c\u6709\u7740\u663e\u8457\u7684\u6548\u7387\u63d0\u5347\n\u8403\u53d6\u7c7b\u578b\u7684\u7279\u6027\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u4e00\u4e2a\u201d\u771f\u201c\u6216\u201d\u5047\u201c\uff08\u4ee5\u4fbf\u51b3\u5b9a\u91c7\u53d6\u4ec0\u4e48\u7b56\u7565\uff09\uff0c\u4f46\u5176\u7ed3\u679c\u4e0d\u5e94\u8be5\u53ea\u662f\u4e2abool\u503c\uff0c\u5e94\u8be5\u662f\u4e2a\u6709\u7740\u771f/\u5047\u6027\u8d28\u7684\u201d\u5bf9\u8c61\u201d\uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u5229\u7528\u54cd\u5e94\u7684\u7ed3\u679c\u6765\u8fdb\u884c\u53c2\u6570\u63a8\u5bfc\uff0c\u800c\u7f16\u8bd1\u5668\u53ea\u6709\u9762\u5bf9class object\u5f62\u5f0f\u7684\u53c2\u6570\uff0c\u624d\u4f1a\u505a\u53c2\u6570\u63a8\u5bfc\uff0c\u6240\u4ee5\u8403\u53d6\u7c7b\u578b\u7684\u7279\u6027\u65f6\uff0c\u8fd4\u56de__true_type\u6216__false_type\uff1a\nstruct __true_type { };\nstruct __false_type { };\n\u6a21\u677f\u7c7b__type_traits\u7684\u6cdb\u5316\u4e0e\u7279\u5316/\u504f\u7279\u5316\u89c1\u4e0b\u56fe\uff1a\n\u56db.\u987a\u5e8f\u5bb9\u5668\n\n\u4e0a\u56fe\u4e2d\u7684\u201c\u884d\u751f\u201d\u5e76\u975e\u201c\u6d3e\u751f\u201d\uff0c\u800c\u662f\u5185\u542b\u5173\u7cfb\u3002\u4f8b\u5982heap\u5185\u542b\u4e00\u4e2avector\uff0cpriority-queue\u5185\u542b\u4e00\u4e2aheap\uff0cstack\u548cqueue\u90fd\u542b\u4e00\u4e2adeque\uff0cset/map/multiset/multimap\u90fd\u5185\u542b\u4e00\u4e2aRB-tree\uff0chas_x\u90fd\u5185\u542b\u4e00\u4e2ahashtable\n1.vector\narray\u662f\u9759\u6001\u7a7a\u95f4\uff0c\u4e00\u65e6\u914d\u7f6e\u4e86\u5c31\u4e0d\u80fd\u6539\u53d8\uff1bvector\u4e0earray\u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u662fvector\u662f\u52a8\u6001\u7a7a\u95f4\uff0c\u968f\u7740\u5143\u7d20\u7684\u52a0\u5165\uff0c\u5185\u90e8\u673a\u5236\u4f1a\u81ea\u52a8\u6269\u5145\u4ee5\u5bb9\u7eb3\u65b0\u5143\u7d20\nSGI STL\u4e2dvector\u7684\u5b9a\u4e49\n1.1 \u8fed\u4ee3\u5668\nvector\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u8fde\u7eed\u7ebf\u6027\u7a7a\u95f4\uff0c\u6240\u4ee5\u4e0d\u8bba\u5176\u5143\u7d20\u7c7b\u578b\u4e3a\u4f55\uff0c\u666e\u901a\u6307\u9488\u90fd\u53ef\u4ee5\u4f5c\u4e3avector\u7684\u8fed\u4ee3\u5668\u800c\u6ee1\u8db3\u6240\u6709\u5fc5\u8981\u6761\u4ef6\uff0c\u56e0\u4e3avector\u8fed\u4ee3\u5668\u6240\u9700\u8981\u7684\u64cd\u4f5c\u884c\u4e3a\uff0c\u5982operator*\uff0coperator->\uff0coperator++\uff0coperator\u2013\uff0coperator+\uff0coperator-\uff0coperator+=\uff0coperator-=\uff0c\u666e\u901a\u6307\u9488\u5929\u751f\u5c31\u5177\u5907\u3002vector\u652f\u6301\u968f\u673a\u5b58\u53d6\uff0c\u800c\u666e\u901a\u6307\u9488\u6b63\u6709\u7740\u8fd9\u6837\u7684\u80fd\u529b\u3002\u6240\u4ee5\uff0cvector\u63d0\u4f9b\u7684\u662fRandom Access Iterators\uff1a\ntemplate <class T,class Alloc = alloc>\nclass vector{\npublic:\n    typedef T               value_type;\n    typedef value_type*     iterator;   //vector\u7684\u8fed\u4ee3\u5668\u65f6\u666e\u901a\u6307\u9488\n...\n};\n1.2 \u5206\u914d\u5668\nvector\u7f3a\u7701\u4f7f\u7528alloc\u4f5c\u4e3a\u7a7a\u95f4\u5206\u914d\u5668\uff0c\u5e76\u636e\u6b64\u53e6\u5916\u5b9a\u4e49\u4e86\u4e00\u4e2adata_allocator\uff0c\u4e3a\u7684\u662f\u66f4\u65b9\u4fbf\u4ee5\u5143\u7d20\u5927\u5c0f\u4e3a\u914d\u7f6e\u5355\u4f4d\uff1a\ntemplate<class T,class Alloc = alloc>\nclass vector{\nprotected:\n    typedef simple_alloc<value_type,Alloc> data_allocator;\n...\n};\n\u56e0\u6b64\uff0cdata_allocator::allocate(n)\u8868\u793a\u5206\u914dn\u4e2a\u5143\u7d20\u7a7a\u95f4\n1.3 vector\u64cd\u4f5c\u7684\u5b9e\u73b0\n\u5e38\u89c1\u7684vector\u64cd\u4f5c\u5305\u62ec\uff1a\n    \u2022 vector(size_type n,const T &value)\n        \u25e6 fill_initialize(size_type n,const T &value)\n            \u25aa allocate_and_fill(size_type n, const T& x)\n    \u2022 push_back(const T &x)\n        \u25e6 insert_aux(iterator position,const T &x)\n    \u2022 pop_back()\n    \u2022 erase(iterator first, iterator last)\n    \u2022 erase(iterator position)\n    \u2022 insert(iterator position, size_type n, const T& x)\n\u63d2\u5165\u64cd\u4f5c\u53ef\u80fd\u9020\u6210vector\u76843\u4e2a\u6307\u9488\u91cd\u65b0\u914d\u7f6e\uff0c\u5bfc\u81f4\u539f\u6709\u7684\u8fed\u4ee3\u5668\u5168\u90e8\u5931\u6548\n2.list\nSGI STL\u4e2dlist\u7684\u5b9a\u4e49\n2.1 \u8282\u70b9\n\ntemplate <class T>\nstruct __list_node{\n    typedef void* void_pointer;\n    void_pointer prev;  //\u7c7b\u578b\u4e3avoid*\n    void_pointer next;\n    T data;\n};\n2.2 \u8fed\u4ee3\u5668\nlist\u4e0d\u518d\u80fd\u591f\u50cfvector\u4e00\u6837\u4ee5\u666e\u901a\u6307\u9488\u4f5c\u4e3a\u8fed\u4ee3\u5668\uff0c\u56e0\u4e3a\u5176\u8282\u70b9\u4e0d\u4fdd\u8bc1\u5728\u5b58\u50a8\u7a7a\u95f4\u4e2d\u8fde\u7eed\u5b58\u5728\nlist\u8fed\u4ee3\u5668\u5fc5\u987b\u6709\u80fd\u529b\u6307\u5411list\u7684\u8282\u70b9\uff0c\u5e76\u6709\u80fd\u529b\u8fdb\u884c\u6b63\u786e\u7684\u9012\u589e\u3001\u9012\u51cf\u3001\u53d6\u503c\u3001\u6210\u5458\u5b58\u53d6\u7b49\u64cd\u4f5c\u3002list\u4e2d\uff0c\u8fed\u4ee3\u5668\u4e0e\u8282\u70b9\u7684\u5173\u7cfb\u89c1\u4e0b\u56fe\uff1a\n\n\u7531\u4e8eSTL list\u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u8fed\u4ee3\u5668\u5fc5\u987b\u5177\u5907\u524d\u79fb\u3001\u540e\u79fb\u7684\u80fd\u529b\uff0c\u6240\u4ee5list\u63d0\u4f9b\u7684\u662fBidirectional Iterators\nlist\u7684\u63d2\u5165\u548c\u63a5\u5408\u64cd\u4f5c\u90fd\u4e0d\u4f1a\u9020\u6210\u539f\u6709\u7684list\u8fed\u4ee3\u5668\u5931\u6548\uff0c\u5bf9\u4e8e\u5220\u9664\u64cd\u4f5c\uff0c\u4e5f\u53ea\u6709\u201d\u6307\u5411\u88ab\u5220\u9664\u5143\u7d20\u201c\u7684\u90a3\u4e2a\u8fed\u4ee3\u5668\u5931\u6548\uff0c\u5176\u5b83\u8fed\u4ee3\u5668\u4e0d\u53d7\u4efb\u4f55\u5f71\u54cd\ntemplate<class T, class Ref, class Ptr>\nstruct __list_iterator {\n  typedef __list_iterator<T, T&, T*>             iterator;\n  typedef __list_iterator<T, const T&, const T*> const_iterator;\n  typedef __list_iterator<T, Ref, Ptr>           self;\n\n  typedef bidirectional_iterator_tag iterator_category;\n  typedef T value_type;\n  typedef Ptr pointer;\n  typedef Ref reference;\n  typedef __list_node<T>* link_type;//\u8282\u70b9\u6307\u9488\u7c7b\u578blink_type\n  typedef size_t size_type;\n  typedef ptrdiff_t difference_type;\n\n  link_type node;//\u8fed\u4ee3\u5668\u5185\u90e8\u7684\u6307\u9488\uff0c\u6307\u5411list\u7684\u8282\u70b9\n\n  __list_iterator(link_type x) : node(x) {}\n  __list_iterator() {}\n  __list_iterator(const iterator& x) : node(x.node) {}\n\n  bool operator==(const self& x) const { return node == x.node; }\n  bool operator!=(const self& x) const { return node != x.node; }\n  //\u5bf9\u8fed\u4ee3\u5668\u53d6\u503c\uff0c\u53d6\u7684\u662f\u8282\u70b9\u7684\u6570\u636e\u503c\n  reference operator*() const { return (*node).data; }\n\n#ifndef __SGI_STL_NO_ARROW_OPERATOR\n  //\u4ee5\u4e0b\u662f\u8fed\u4ee3\u5668\u7684\u6210\u5458\u5b58\u53d6\u8fd0\u7b97\u5b50\u7684\u6807\u51c6\u505a\u6cd5\n  pointer operator->() const { return &(operator*()); }\n#endif /* __SGI_STL_NO_ARROW_OPERATOR */\n\n  //\u5bf9\u8fed\u4ee3\u5668\u7d2f\u52a01\uff0c\u5c31\u662f\u524d\u8fdb\u4e00\u4e2a\u8282\u70b9\n  self& operator++() { \n    node = (link_type)((*node).next);\n    return *this;\n  }\n  self operator++(int) { \n    self tmp = *this;\n    ++*this;\n    return tmp;\n  }\n\n  //\u5bf9\u8fed\u4ee3\u5668\u9012\u51cf1\uff0c\u5c31\u662f\u540e\u9000\u4e00\u4e2a\u8282\u70b9\n  self& operator--() { \n    node = (link_type)((*node).prev);\n    return *this;\n  }\n  self operator--(int) { \n    self tmp = *this;\n    --*this;\n    return tmp;\n  }\n};\n2.3 list\u7684\u6570\u636e\u7ed3\u6784\nSGI list\u4e0d\u4ec5\u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u8fd8\u662f\u4e00\u4e2a\u73af\u72b6\u53cc\u5411\u94fe\u8868\u3002\u6240\u4ee5\u5b83\u53ea\u9700\u8981\u4e00\u4e2a\u6307\u9488\uff0c\u4fbf\u53ef\u5b8c\u6574\u8868\u73b0\u6574\u4e2a\u94fe\u8868\uff1a\ntemplate <class T, class Alloc = alloc>\nclass list {\nprotected:\n    typedef __list_node<T> list_node;\npublic:\n    typedef list_node* link_type;\n\nprotected:\n    link_type node; //\u53ea\u8981\u4e00\u4e2a\u6307\u9488\uff0c\u4fbf\u53ef\u8868\u793a\u6574\u4e2a\u73af\u72b6\u53cc\u5411\u94fe\u8868\n};\n\niterator begin() { return (link_type)((*node).next); }\niterator end() { return node; }\nsize_type size() const {\n    size_type result = 0;\n    distance(begin(), end(), result);\n    return result;\n}\n\n2.4 \u5206\u914d\u5668\nlist\u7f3a\u7701\u4f7f\u7528alloc\u4f5c\u4e3a\u7a7a\u95f4\u5206\u914d\u5668\uff0c\u5e76\u636e\u6b64\u53e6\u5916\u5b9a\u4e49\u4e86\u4e00\u4e2alist_node_allocator\uff0c\u4e3a\u7684\u662f\u66f4\u65b9\u4fbf\u4ee5\u8282\u70b9\u5927\u5c0f\u4e3a\u914d\u7f6e\u5355\u4f4d\uff1a\ntemplate <class T, class Alloc = alloc>\nclass list {\nprotected:\n    typedef simple_alloc<list_node, Alloc> list_node_allocator;\n...\n};\n\u56e0\u6b64\uff0clist_node_allocator::allocate(n)\u8868\u793a\u5206\u914dn\u4e2a\u8282\u70b9\u7a7a\u95f4\n2.5 list\u64cd\u4f5c\u7684\u5b9e\u73b0\n    \u2022 \u8282\u70b9\u64cd\u4f5c\n        \u25e6 \u5206\u914d\u4e00\u4e2a\u8282\u70b9\uff1aget_node\n        \u25e6 \u91ca\u653e\u4e00\u4e2a\u8282\u70b9\uff1aput_node\n        \u25e6 \u751f\u6210\uff08\u5206\u914d\u5e76\u6784\u9020\uff09\u4e00\u4e2a\u8282\u70b9\uff1acreate_node\n        \u25e6 \u9500\u6bc1\uff08\u6790\u6784\u5e76\u91ca\u653e\uff09\u4e00\u4e2a\u8282\u70b9\uff1adestroy_node\n        \u25e6 \u8282\u70b9\u63d2\u5165\uff1apush_back\u548cpush_front\n            \u25aa insert\n        \u25e6 \u8282\u70b9\u79fb\u9664\uff1aerase,pop_front\u548cpop_back\n        \u25e6 \u79fb\u9664\u67d0\u4e00\u6570\u503c\u7684\u6240\u6709\u8282\u70b9\uff1aremove\n        \u25e6 \u79fb\u9664\u6570\u503c\u76f8\u540c\u7684\u8fde\u7eed\u8282\u70b9\uff1aunique\n    \u2022 \u94fe\u8868\u64cd\u4f5c\n        \u25e6 \u521b\u5efa\u4e00\u4e2a\u7a7a\u94fe\u8868\uff1alist()\n            \u25aa empty_initialize\n        \u25e6 \u94fe\u8868\u6e05\u7a7a\uff1aclear\n    \u2022 \u94fe\u8868\u62fc\u63a5\uff1asplice\n        \u25e6 \u5c06[first,last)\u5185\u7684\u5143\u7d20\u79fb\u52a8\u5230position\u4e4b\u524d\uff1atransfer\uff08[first,last)\u533a\u95f4\u53ef\u4ee5\u5728\u540c\u4e00\u4e2alist\u4e4b\u4e2d\uff0ctransfer\u5e76\u975e\u516c\u5f00\u63a5\u53e3\uff0c\u516c\u5f00\u7684\u662fsplice\uff09\n3.deque\ndeque\u662f\u4e00\u79cd\u53cc\u5411\u5f00\u53e3\u7684\u8fde\u7eed\u7ebf\u6027\u7a7a\u95f4\ndeque\u548cvector\u6700\u5927\u7684\u5dee\u5f02\uff1a\n    1. deque\u5141\u8bb8\u4e8e\u5e38\u6570\u65f6\u95f4\u5185\u5bf9\u8d77\u5934\u7aef\u8fdb\u884c\u5143\u7d20\u7684\u63d2\u5165\u6216\u79fb\u9664\u64cd\u4f5c\n    2. deque\u6ca1\u6709\u6240\u8c13\u5bb9\u91cf\u89c2\u5ff5\uff0c\u56e0\u4e3a\u5b83\u662f\u52a8\u6001\u5730\u4ee5\u5206\u6bb5\u8fde\u7eed\u7a7a\u95f4\u7ec4\u5408\u800c\u6210\uff0c\u968f\u65f6\u53ef\u4ee5\u589e\u52a0\u4e00\u6bb5\u65b0\u7684\u7a7a\u95f4\u5e76\u94fe\u63a5\u8d77\u6765\uff08deque\u6ca1\u6709\u5fc5\u8981\u63d0\u4f9b\u6240\u8c13\u7684\u7a7a\u95f4\u4fdd\u7559\u529f\u80fd\uff09\n3.1 \u8fed\u4ee3\u5668\ndeque\u662f\u5206\u6bb5\u8fde\u7eed\u7a7a\u95f4\u3002\u7ef4\u6301\u5176\u201d\u6574\u4f53\u8fde\u7eed\u201c\u5047\u8c61\u7684\u4efb\u52a1\uff0c\u843d\u5728\u4e86\u8fed\u4ee3\u5668\u7684operator++\u548coperator\u2013\u4e24\u4e2a\u8fd0\u7b97\u5b50\u8eab\u4e0a\ndeque\u8fed\u4ee3\u5668\u5fc5\u987b\u80fd\u591f\u6307\u51fa\u5206\u6bb5\u8fde\u7eed\u7a7a\u95f4\uff08\u5373\u7f13\u51b2\u533a\uff09\u5728\u54ea\uff1b\u5fc5\u987b\u80fd\u591f\u5224\u65ad\u81ea\u5df1\u662f\u5426\u5df2\u7ecf\u5904\u4e8e\u5176\u6240\u5728\u7f13\u51b2\u5668\u7684\u8fb9\u7f18\u3002\u4e3a\u4e86\u80fd\u591f\u6b63\u786e\u8df3\u8dc3\uff0c\u8fed\u4ee3\u5668\u5fc5\u987b\u968f\u65f6\u638c\u63e1\u4e2d\u63a7\u5668map\ntemplate <class T, class Ref, class Ptr, size_t BufSiz>\nstruct __deque_iterator {   //\u672a\u7ee7\u627fstd::iterator\n  typedef __deque_iterator<T, T&, T*, BufSiz>             iterator;\n  typedef __deque_iterator<T, const T&, const T*, BufSiz> const_iterator;\n  static size_t buffer_size() {return __deque_buf_size(BufSiz, sizeof(T)); }\n\n  //\u4e3a\u7ee7\u627fstd::iterator\uff0c\u6240\u4ee5\u5fc5\u987b\u81ea\u884c\u64b0\u51995\u4e2a\u5fc5\u8981\u7684\u8fed\u4ee3\u5668\u76f8\u5e94\u7c7b\u578b\n  typedef random_access_iterator_tag iterator_category; // (1)\n  typedef T value_type;                                 // (2)\n  typedef Ptr pointer;                                  // (3)\n  typedef Ref reference;                                // (4)\n  typedef size_t size_type;\n  typedef ptrdiff_t difference_type;                    // (5)\n  typedef T** map_pointer;\n\n  typedef __deque_iterator self;\n\n  //\u4fdd\u6301\u4e0e\u5bb9\u5668\u7684\u8054\u7ed3\n  T* cur;           //\u6b64\u8fed\u4ee3\u5668\u6240\u6307\u7f13\u51b2\u533a\u4e2d\u7684\u5f53\u524d\u5143\u7d20\n  T* first;         //\u6b64\u8fed\u4ee3\u5668\u6240\u6307\u7f13\u51b2\u533a\u7684\u5934\n  T* last;          //\u6b64\u8fed\u4ee3\u5668\u6240\u6307\u7f13\u51b2\u533a\u7684\u5c3e(\u542b\u5907\u7528\u7a7a\u95f4)\n  map_pointer node; //\u6307\u5411\u4e2d\u63a7\u5668map\n...\n};\n\u8fed\u4ee3\u5668\u64cd\u4f5c\uff1a\n    \u2022 \u66f4\u65b0\u8fed\u4ee3\u5668\u6307\u5411\u7684\u7f13\u51b2\u533a\uff1aset_node\n    \u2022 \u89e3\u5f15\u7528*\n    \u2022 \u6210\u5458\u9009\u62e9->\n    \u2022 \u8fed\u4ee3\u5668\u76f8\u51cf-\n    \u2022 \u524d\u7f6e++\u548c\u540e\u7f6e++\n    \u2022 \u524d\u7f6e\u2013\u548c\u540e\u7f6e\u2013\n    \u2022 \u590d\u5408\u8d4b\u503c+=\u548c-=\n    \u2022 \u8fed\u4ee3\u5668+n\u548c-n\n    \u2022 \u968f\u673a\u5b58\u53d6[]\n    \u2022 \u76f8\u7b49\u5224\u65ad==\uff0c!=\u548c<\n3.3 deque\u7684\u6570\u636e\u7ed3\u6784\ndeque\u91c7\u7528\u4e00\u5757\u6240\u8c13\u7684map\u4f5c\u4e3a\u4e3b\u63a7(\u4e2d\u63a7\u5668)\u3002\u8fd9\u91cc\u6240\u8c13\u7684map\u662f\u6307\u4e00\u5c0f\u5757\u8fde\u7eed\u7a7a\u95f4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u53e6\u4e00\u6bb5\uff08\u8f83\u5927\u7684\uff09\u8fde\u7eed\u7ebf\u6027\u7a7a\u95f4\uff0c\u79f0\u4e3a\u7f13\u51b2\u533a\u3002\u7f13\u51b2\u533a\u624d\u662fdeque\u7684\u5b58\u50a8\u7a7a\u95f4\u4e3b\u4f53\u3002SGI STL\u5141\u8bb8\u6211\u4eec\u6307\u5b9a\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u9ed8\u8ba4\u503c0\u8868\u793a\u4f7f\u7528512bytes\u7f13\u51b2\u533a\n\ndeque\u9664\u4e86\u7ef4\u62a4\u4e00\u4e2a\u6307\u5411map\u7684\u6307\u9488\u5916\uff0c\u4e5f\u7ef4\u62a4start\uff0cfinish\u4e24\u4e2a\u8fed\u4ee3\u5668\u3002\u5206\u522b\u6307\u5411\u7b2c\u4e00\u7f13\u51b2\u533a\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u548c\u6700\u540e\u7f13\u51b2\u533a\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff08\u7684\u4e0b\u4e00\u4f4d\u7f6e\uff09\u3002\u6b64\u5916\uff0c\u4e5f\u5fc5\u987b\u8bb0\u4f4f\u76ee\u524d\u7684map\u5927\u5c0f\u3002\u56e0\u4e3a\u4e00\u65e6map\u6240\u63d0\u4f9b\u7684\u8282\u70b9\u4e0d\u8db3\uff0c\u5c31\u5fc5\u987b\u91cd\u65b0\u914d\u7f6e\u66f4\u5927\u7684\u4e00\u5757map\ntemlate <class T,class Alloc = alloc,size_t BufSiz = 0>\nclass deque{\npublic:     //Basic types\n    typedef T value_type;\n    typedef value_type* pointer;\n    typedef size_t size_type;\n    ...\n\npublic:\n    typedef __deque_iterator<T,T&.T*,BufSiz> iterator;  //\u8fed\u4ee3\u5668\u7c7b\u578b\n\nprotected:  //Internal typedefs\n    //\u5143\u7d20\u7684\u6307\u9488\u7684\u6307\u9488\n    typedef pointer* map_pointer;\n\nprotected:  //Data members\n    iterator start;         //\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u8fed\u4ee3\u5668\n    iterator finish;        //\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u8fed\u4ee3\u5668\n\n    map_pointer map;        //\u6307\u5411map\uff0cmap\u662f\u5757\u8fde\u7eed\u7a7a\u95f4\n                            //\u5176\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e2a\u6307\u9488\uff0c\u6307\u5411\u4e00\u4e2a\u8282\u70b9(\u7f13\u51b2\u533a)\n    size_type map_size;     //map\u7684\u5927\u5c0f\uff0c\u5373\u5185\u6709\u591a\u5c11\u4e2a\u6307\u9488\n...\n};\ndeque\u7684\u4e2d\u63a7\u5668\u3001\u7f13\u51b2\u533a\u3001\u8fed\u4ee3\u5668\u7684\u5173\u7cfb\u5982\u4e0b\u56fe\uff1a\n\n3.4 \u5206\u914d\u5668\ndeque\u81ea\u884c\u5b9a\u4e49\u4e862\u4e2a\u4e13\u5c5e\u7684\u7a7a\u95f4\u914d\u7f6e\u5668\uff1a\nprotected:\n    //\u4e13\u5c5e\u7684\u7a7a\u95f4\u5206\u914d\u5668\uff0c\u6bcf\u6b21\u5206\u914d\u4e00\u4e2a\u5143\u7d20\u5927\u5c0f\n    typedef simple_alloc<value_type,Alloc> data_allocator;\n    //\u4e13\u5c5e\u7684\u7a7a\u95f4\u5206\u914d\u5668\uff0c\u6bcf\u6b21\u5206\u914d\u4e00\u4e2a\u6307\u9488\u5927\u5c0f\n    typedef simple_alloc<pointer,Alloc> map_allocator;\n3.5 deque\u64cd\u4f5c\u7684\u5b9e\u73b0\n    \u2022 deque\u6784\u9020\u4e0e\u521d\u59cb\u5316\uff1adeque\n        \u25e6 \u5143\u7d20\u521d\u59cb\u5316fill_initialize\n            \u25aa \u7a7a\u95f4\u5206\u914d\u4e0e\u6210\u5458\u8bbe\u5b9acreate_map_and_nodes\n    \u2022 \u63d2\u5165\u64cd\u4f5c\uff1a\n        \u25e6 \u5728\u961f\u5217\u672b\u5c3e\u63d2\u5165\uff1apush_back\n            \u25aa \u6700\u540e\u7f13\u51b2\u533a\u53ea\u67091\u4e2a\u53ef\u7528\u7a7a\u95f4\u65f6\uff1apush_back_aux\n                \u2022 map\u4e0d\u8db3\u65f6\uff1areserve_map_at_back\n                    \u25e6 reallocate_map\n        \u25e6 \u5728\u961f\u5217\u9996\u90e8\u63d2\u5165\uff1apush_front\n            \u25aa \u7b2c\u4e00\u4e2a\u7f13\u51b2\u533a\u6ca1\u6709\u53ef\u7528\u7a7a\u95f4\u65f6\uff1apush_front_aux\n                \u2022 map\u4e0d\u8db3\u65f6\uff1areserve_map_at_front\n                    \u25e6 reallocate_map\n        \u25e6 \u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\uff1ainsert\n            \u25aa \u5728\u9996\u90e8\u63d2\u5165\uff1apush_front\n            \u25aa \u5728\u5c3e\u90e8\u63d2\u5165\uff1apush_back\n            \u25aa \u5728\u4e2d\u95f4\u63d2\u5165\uff1ainsert_aux\n    \u2022 \u5f39\u51fa\u64cd\u4f5c\uff1a\n        \u25e6 \u5f39\u51fa\u961f\u5217\u672b\u5c3e\u5143\u7d20\uff1apop_back\n            \u25aa \u6700\u540e\u7f13\u51b2\u533a\u6ca1\u6709\u5143\u7d20\u65f6\uff1apop_back_aux\n        \u25e6 \u5f39\u51fa\u961f\u5217\u9996\u90e8\u5143\u7d20\uff1apop_front\n            \u25aa \u7b2c\u4e00\u4e2a\u7f13\u51b2\u533a\u4ec5\u6709\u4e00\u4e2a\u5143\u7d20\u65f6\uff1apop_front_aux\n    \u2022 \u6e05\u9664\u6240\u6709\u5143\u7d20\uff1aclear\n    \u2022 \u6e05\u9664\u67d0\u4e2a\u533a\u95f4\u7684\u5143\u7d20\uff1aerase\n4.stack\n\u5177\u6709\u201d\u4fee\u6539\u67d0\u7269\u63a5\u53e3\uff0c\u5f62\u6210\u53e6\u4e00\u79cd\u98ce\u8c8c\u201c\u7684\u6027\u8d28\u8005\uff0c\u79f0\u4e3a\u9002\u914d\u5668\u3002\u56e0\u6b64\uff0cSTL stack\u5f80\u5f80\u4e0d\u88ab\u5f52\u7c7b\u4e3a\u5bb9\u5668\uff0c\u800c\u88ab\u5f52\u7c7b\u4e3a\u5bb9\u5668\u9002\u914d\u5668\nSGI STL\u4ee5deque\u4f5c\u4e3a\u7f3a\u7701\u60c5\u51b5\u4e0b\u7684stack\u5e95\u90e8\u7ed3\u6784\uff0c\u5b9a\u4e49\u5982\u4e0b\uff1a\ntemplate <class T, class Sequence = deque<T> >\nclass stack {\n  //\u4ee5\u4e0b__STL_NULL_TMPL_ARGS\u4f1a\u5c55\u5f00\u4e3a <>\n  friend bool operator== __STL_NULL_TMPL_ARGS (const stack&, const stack&);\n  friend bool operator< __STL_NULL_TMPL_ARGS (const stack&, const stack&);\npublic:\n  typedef typename Sequence::value_type value_type;\n  typedef typename Sequence::size_type size_type;\n  typedef typename Sequence::reference reference;\n  typedef typename Sequence::const_reference const_reference;\nprotected:\n  Sequence c;   //\u5e95\u5c42\u5bb9\u5668\npublic:\n  //\u4ee5\u4e0b\u5b8c\u5168\u5229\u7528Sequence c\u7684\u64cd\u4f5c\uff0c\u5b8c\u6210stack\u7684\u64cd\u4f5c\n  bool empty() const { return c.empty(); }\n  size_type size() const { return c.size(); }\n  reference top() { return c.back(); }\n  const_reference top() const { return c.back(); }\n  //deque\u662f\u4e24\u5934\u53ef\u8fdb\u51fa\uff0cstack\u662f\u540e\u8fdb\u540e\u51fa\n  void push(const value_type& x) { c.push_back(x); }\n  void pop() { c.pop_back(); }\n};\n\ntemplate <class T, class Sequence>\nbool operator==(const stack<T, Sequence>& x, const stack<T, Sequence>& y) {\n  return x.c == y.c;\n}\n\ntemplate <class T, class Sequence>\nbool operator<(const stack<T, Sequence>& x, const stack<T, Sequence>& y) {\n  return x.c < y.c;\n}\n\u53ea\u6709stack\u9876\u7aef\u7684\u5143\u7d20\u6709\u673a\u4f1a\u88ab\u5916\u754c\u53d6\u7528\uff0cstack\u4e0d\u63d0\u4f9b\u904d\u5386\u529f\u80fd\uff0c\u4e5f\u4e0d\u63d0\u4f9b\u8fed\u4ee3\u5668\n\u6307\u5b9a\u5176\u5b83\u5bb9\u5668\u4f5c\u4e3astack\u7684\u5e95\u5c42\u5bb9\u5668\u7684\u65b9\u6cd5\uff1a\nstack<int,list<int> > istack;\n5.queue\nqueue\uff08\u961f\u5217\uff09\u662f\u4e00\u79cd\u5148\u8fdb\u5148\u51fa\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5c3e\u7aef\u63d2\u5165\uff0c\u9996\u90e8\u79fb\u51fa\nSGI STL\u4ee5deque\u4f5c\u4e3a\u7f3a\u7701\u60c5\u51b5\u4e0b\u7684queue\u5e95\u90e8\u7ed3\u6784\uff0c\u5b9a\u4e49\u5982\u4e0b\uff1a\ntemplate <class T, class Sequence = deque<T> >\nclass queue {\n  //\u4ee5\u4e0b__STL_NULL_TMPL_ARGS\u4f1a\u5c55\u5f00\u4e3a <>\n  friend bool operator== __STL_NULL_TMPL_ARGS (const queue& x, const queue& y);\n  friend bool operator< __STL_NULL_TMPL_ARGS (const queue& x, const queue& y);\npublic:\n  typedef typename Sequence::value_type value_type;\n  typedef typename Sequence::size_type size_type;\n  typedef typename Sequence::reference reference;\n  typedef typename Sequence::const_reference const_reference;\nprotected:\n  Sequence c;   //\u5e95\u5c42\u5bb9\u5668\npublic:\n  //\u4ee5\u4e0b\u5b8c\u5168\u5229\u7528Sequence c\u7684\u64cd\u4f5c\uff0c\u5b8c\u6210stack\u7684\u64cd\u4f5c\n  bool empty() const { return c.empty(); }\n  size_type size() const { return c.size(); }\n  reference front() { return c.front(); }\n  const_reference front() const { return c.front(); }\n  reference back() { return c.back(); }\n  const_reference back() const { return c.back(); }\n  //deque\u662f\u4e24\u5934\u53ef\u8fdb\u51fa\uff0cqueue\u662f\u5c3e\u7aef\u8fdb\u3001\u9996\u90e8\u51fa\n  void push(const value_type& x) { c.push_back(x); }\n  void pop() { c.pop_front(); }\n};\n\ntemplate <class T, class Sequence>\nbool operator==(const queue<T, Sequence>& x, const queue<T, Sequence>& y) {\n  return x.c == y.c;\n}\n\ntemplate <class T, class Sequence>\nbool operator<(const queue<T, Sequence>& x, const queue<T, Sequence>& y) {\n  return x.c < y.c;\n}\n\u53ea\u6709\u9996\u90e8\u5143\u7d20\u624d\u6709\u673a\u4f1a\u88ab\u5916\u754c\u53d6\u7528\uff0cqueue\u4e0d\u63d0\u4f9b\u904d\u5386\u529f\u80fd\uff0c\u4e5f\u4e0d\u63d0\u4f9b\u8fed\u4ee3\u5668\n\u6307\u5b9a\u5176\u5b83\u5bb9\u5668\u4f5c\u4e3aqueue\u7684\u5e95\u5c42\u5bb9\u5668\u7684\u65b9\u6cd5\uff1a\nqueue<int,list<int> > iqueue;\n6.heap\nheap\u5e76\u4e0d\u5f52\u5c5e\u4e0eSTL\u5bb9\u5668\u7ec4\u4ef6\uff0c\u5b83\u662f\u4e2a\u5e55\u540e\u82f1\u96c4\uff0c\u626e\u6f14priority queue\u7684\u52a9\u624b\nheap\u662f\u4e00\u9897\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5b8c\u5168\u4e8c\u53c9\u6811\u4f7f\u7528\u6570\u7ec4\u5b9e\u73b0\uff0c\u56e0\u6b64\u4f7f\u7528\u4e00\u4e2avector\u4f5c\u4e3aheap\u7684\u7ed3\u6784\uff0c\u7136\u540e\u901a\u8fc7\u4e00\u7ec4xxx_heap\u7b97\u6cd5\uff0c\u4f7f\u5176\u7b26\u5408heap\u7684\u6027\u8d28\n    \u2022 \u4e0a\u6eaf\uff08\u5728\u6b64\u4e4b\u524d\u5e94\u8be5push_back\uff09\uff1apush_heap\n        \u25e6 __push_heap_aux\n            \u25aa __push_heap\n    \u2022 \n    \u2022 pop_heap\uff08\u5728\u6b64\u4e4b\u540e\u5e94\u8be5pop_back\uff09\n        \u25e6 __pop_heap_aux\n            \u25aa __pop_heap\n                \u2022 __adjust_heap\n    \u2022 \n    \u2022 sort_heap\n    \u2022 \n    \u2022 make_heap\n        \u25e6 __make_heap\n7.priority_queue\n\u987e\u540d\u601d\u4e49\uff0cpriority_queue\u5c31\u662f\u5177\u6709\u4f18\u5148\u7ea7\u7684queue\uff0c\u5141\u8bb8\u9996\u90e8\u79fb\u51fa\uff0c\u5c3e\u7aef\u63d2\u5165\u3002\u7f3a\u7701\u60c5\u51b5\u4e0b\u5229\u7528\u4e00\u4e2amax-heap\u5b8c\u6210\uff0c\u56e0\u6b64\u9996\u90e8\u5143\u7d20\u4f18\u5148\u7ea7\u6700\u9ad8\n\u4ee5\u4e0b\u4e3aSGI STL\u4e2dpriority_queue\u7684\u5b9a\u4e49\uff1a\ntemplate <class T, class Sequence = vector<T>, \n          class Compare = less<typename Sequence::value_type> >\nclass  priority_queue {\npublic:\n  typedef typename Sequence::value_type value_type;\n  typedef typename Sequence::size_type size_type;\n  typedef typename Sequence::reference reference;\n  typedef typename Sequence::const_reference const_reference;\nprotected:\n  Sequence c;       //\u5e95\u5c42\u5bb9\u5668\n  Compare comp;     //\u5143\u7d20\u5927\u5c0f\u6bd4\u8f83\u6807\u51c6\npublic:\n  priority_queue() : c() {}\n  explicit priority_queue(const Compare& x) :  c(), comp(x) {}\n\n  //\u4ee5\u4e0b\u7528\u5230\u7684make_heap()\u3001push_heap()\u3001pop_heap()\u90fd\u662f\u6cdb\u578b\u7b97\u6cd5\n  //\u6784\u9020\u4e00\u4e2apriority queue\uff0c\u9996\u5148\u6839\u636e\u4f20\u5165\u7684\u8fed\u4ee3\u5668\u533a\u95f4\u521d\u59cb\u5316\u5e95\u5c42\u5bb9\u5668c\uff0c\u7136\u540e\u8c03\u7528\n  //make_heap()\u4f7f\u7528\u5e95\u5c42\u5bb9\u5668\u5efa\u5806\n  template <class InputIterator>\n  priority_queue(InputIterator first, InputIterator last, const Compare& x)\n    : c(first, last), comp(x) { make_heap(c.begin(), c.end(), comp); }\n  template <class InputIterator>\n  priority_queue(InputIterator first, InputIterator last) \n    : c(first, last) { make_heap(c.begin(), c.end(), comp); }\n\n  bool empty() const { return c.empty(); }\n  size_type size() const { return c.size(); }\n  const_reference top() const { return c.front(); }\n  void push(const value_type& x) {\n    //\u5148\u5229\u7528\u5e95\u5c42\u5bb9\u5668\u7684push_back()\u5c06\u65b0\u5143\u7d20\u63a8\u5165\u672b\u7aef\uff0c\u518d\u91cd\u6392heap\n    __STL_TRY {\n      c.push_back(x); \n      push_heap(c.begin(), c.end(), comp);\n    }\n    __STL_UNWIND(c.clear());\n  }\n  void pop() {\n    //\u4eceheap\u5185\u53d6\u51fa\u4e00\u4e2a\u5143\u7d20\u3002\u4f46\u4e0d\u662f\u771f\u6b63\u5f39\u51fa\uff0c\u800c\u662f\u91cd\u6392heap\uff0c\u7136\u540e\u4ee5\u5e95\u5c42\u5bb9\u5668\u7684pop_back()\n    //\u53d6\u5f97\u88ab\u5f39\u51fa\u7684\u5143\u7d20\n    __STL_TRY {\n      pop_heap(c.begin(), c.end(), comp);\n      c.pop_back();\n    }\n    __STL_UNWIND(c.clear());\n  }\n};\n\u548cqueue\u4e00\u6837\uff0cpriority queue\u53ea\u6709\u9996\u90e8\u7684\u5143\u7d20\u6709\u673a\u4f1a\u88ab\u5916\u754c\u53d6\u7528\u3002\u4e0d\u63d0\u4f9b\u904d\u5386\u529f\u80fd\uff0c\u4e5f\u4e0d\u63d0\u4f9b\u8fed\u4ee3\u5668\n8.slist\nslist\u5e76\u4e0d\u5728\u6807\u51c6\u89c4\u683c\u4e4b\u5185\uff0c\u7531SGI STL\u63d0\u4f9b\uff0cslist\u548clist\u4e0d\u540c\u7684\u662fslist\u662f\u5355\u94fe\u8868\n\u5355\u94fe\u8868\u6bcf\u4e2a\u8282\u70b9\u7684\u6d88\u8017\u66f4\u5c0f\uff0c\u4f46\u662f\u53ea\u652f\u6301\u5355\u5411\u904d\u5386\uff0c\u6240\u4ee5\u529f\u80fd\u4f1a\u53d7\u5230\u8bb8\u591a\u9650\u5236\nSGI STL\u4e2dslist\u7684\u5b9a\u4e49\n8.1 slist\u7684\u8282\u70b9\n\n\u8282\u70b9\u76f8\u5173\u7684\u7ed3\u6784\uff1a\n//\u5355\u5411\u94fe\u8868\u7684\u8282\u70b9\u57fa\u672c\u7ed3\u6784\nstruct __slist_node_base\n{\n    __slist_node_base *next;\n};\n\n//\u5355\u5411\u94fe\u8868\u7684\u8282\u70b9\u7ed3\u6784\ntemplate <class T>\nstruct __slist_node : public __slist_node_base\n{\n    T data;\n}\n\u8282\u70b9\u76f8\u5173\u7684\u5168\u5c40\u51fd\u6570\uff1a\n//\u5df2\u77e5\u67d0\u4e00\u8282\u70b9prev_node\uff0c\u5c06\u65b0\u8282\u70b9new_node\u63d2\u5165\u5176\u540e\ninline __slist_node_base* __slist_make_link(\n    __slist_node_base *prev_node,\n    __slist_node_base *new_node)\n{\n    //\u4ee4new\u8282\u70b9\u7684\u4e0b\u4e00\u8282\u70b9\u4e3aprev\u8282\u70b9\u7684\u4e0b\u4e00\u8282\u70b9\n    new_node->next = prev_node->next;\n    prev_node->next = new_node; //\u4ee4prev\u8282\u70b9\u7684\u4e0b\u4e00\u8282\u70b9\u6307\u5411new\u8282\u70b9\n    return new_node;\n}\n\n//\u5355\u5411\u94fe\u8868\u7684\u5927\u5c0f\uff08\u5143\u7d20\u4e2a\u6570\uff09\ninline size_t __slist_size(__slist_node_base *node)\n{\n    size_t result = 0;\n    for(;node != 0;node = node->next)\n        ++result;   //\u4e00\u4e2a\u4e2a\u7d2f\u8ba1\n    return result;\n}\n8.2 slist\u7684\u8fed\u4ee3\u5668\n\n\u8fed\u4ee3\u5668\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\n//\u5355\u5411\u94fe\u8868\u7684\u8fed\u4ee3\u5668\u57fa\u672c\u7ed3\u6784\nstruct __slist_iterator_base\n{\n  typedef size_t size_type;\n  typedef ptrdiff_t difference_type;\n  typedef forward_iterator_tag iterator_category;   //\u5355\u5411\n\n  __slist_node_base* node;  //\u6307\u5411\u8282\u70b9\u57fa\u672c\u7ed3\u6784\n\n  __slist_iterator_base(__slist_node_base* x) : node(x) {}\n\n  void incr() { node = node->next; }    //\u524d\u8fdb\u4e00\u4e2a\u8282\u70b9\n\n  bool operator==(const __slist_iterator_base& x) const {\n    return node == x.node;\n  }\n  bool operator!=(const __slist_iterator_base& x) const {\n    return node != x.node;\n  }\n};\n\n//\u5355\u5411\u94fe\u8868\u7684\u8fed\u4ee3\u5668\u7ed3\u6784\ntemplate <class T, class Ref, class Ptr>\nstruct __slist_iterator : public __slist_iterator_base\n{\n  typedef __slist_iterator<T, T&, T*>             iterator;\n  typedef __slist_iterator<T, const T&, const T*> const_iterator;\n  typedef __slist_iterator<T, Ref, Ptr>           self;\n\n  typedef T value_type;\n  typedef Ptr pointer;\n  typedef Ref reference;\n  typedef __slist_node<T> list_node;\n\n  __slist_iterator(list_node* x) : __slist_iterator_base(x) {}\n  __slist_iterator() : __slist_iterator_base(0) {}\n  __slist_iterator(const iterator& x) : __slist_iterator_base(x.node) {}\n\n  reference operator*() const { return ((list_node*) node)->data; }\n  pointer operator->() const { return &(operator*()); }\n\n  self& operator++()\n  {\n    incr(); //\u524d\u8fdb\u4e00\u4e2a\u8282\u70b9\n    return *this;\n  }\n  self operator++(int)\n  {\n    self tmp = *this;\n    incr(); //\u524d\u8fdb\u4e00\u4e2a\u8282\u70b9\n    return tmp;\n  }\n};\n\n\u4e94.\u5173\u8054\u5bb9\u5668\n\n\u6807\u51c6\u7684STL\u5173\u8054\u5bb9\u5668\u5206\u4e3aset(\u96c6\u5408)\u548cmap(\u6620\u5c04\u8868)\u4e24\u5927\u7c7b\uff0c\u4ee5\u53ca\u8fd9\u4e24\u5927\u7c7b\u7684\u884d\u751f\u4f53multiset(\u591a\u952e\u96c6\u5408)\u548cmultimap(\u591a\u952e\u6620\u5c04\u8868)\u3002\u8fd9\u4e9b\u5bb9\u5668\u7684\u5e95\u5c42\u673a\u5236\u5747\u4ee5RB-tree(\u7ea2\u9ed1\u6811)\u5b8c\u6210\u3002RB-tree\u4e5f\u662f\u4e00\u4e2a\u72ec\u7acb\u5bb9\u5668\uff0c\u4f46\u5e76\u4e0d\u5f00\u653e\u7ed9\u5916\u754c\u4f7f\u7528\n\u6b64\u5916\uff0cSGI STL\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u5728\u6807\u51c6\u89c4\u683c\u4e4b\u5217\u7684\u5173\u8054\u5bb9\u5668\uff1ahash table\uff0c\u4ee5\u53ca\u4ee5\u6b64hash table\u4e3a\u5e95\u5c42\u673a\u5236\u800c\u5b8c\u6210\u7684hash_set(\u6563\u5217\u96c6\u5408)\u3001hash_map(\u6563\u5217\u6620\u5c04\u8868)\u3001hash_multiset(\u6563\u5217\u591a\u952e\u96c6\u5408)\u3001hash_multimap(\u6563\u5217\u591a\u952e\u6620\u5c04\u8868)\n1.RB-tree\n1.1 RB-tree\u7684\u8282\u70b9\ntypedef bool __rb_tree_color_type;\nconst __rb_tree_color_type __rb_tree_red = false;   //\u7ea2\u8272\u4e3a0\nconst __rb_tree_color_type __rb_tree_black = true;  //\u9ed1\u8272\u4e3a1\n\n//RB-tree\u8282\u70b9\u7684\u57fa\u7c7b\nstruct __rb_tree_node_base\n{\n  typedef __rb_tree_color_type color_type;\n  typedef __rb_tree_node_base* base_ptr;\n\n  color_type color; //\u989c\u8272\n  base_ptr parent;  //\u6307\u5411\u7236\u8282\u70b9\u7684\u6307\u9488\n  base_ptr left;    //\u6307\u5411\u5de6\u5b50\u8282\u70b9\u7684\u6307\u9488\n  base_ptr right;   //\u6307\u5411\u53f3\u5b50\u8282\u70b9\u7684\u6307\u9488\n\n  //\u9759\u6001\u51fd\u6570\uff0c\u83b7\u53d6\u4ee5x\u4e3a\u6839\u8282\u70b9\u7684RB-tree\u6700\u5c0f\u8282\u70b9\u7684\u6307\u9488\n  static base_ptr minimum(base_ptr x)\n  {\n    while (x->left != 0) x = x->left;\n    return x;\n  }\n\n  //\u9759\u6001\u51fd\u6570\uff0c\u83b7\u53d6\u4ee5x\u4e3a\u6839\u8282\u70b9\u7684RB-tree\u6700\u5927\u8282\u70b9\u7684\u6307\u9488\n  static base_ptr maximum(base_ptr x)\n  {\n    while (x->right != 0) x = x->right;\n    return x;\n  }\n};\n\n//RB-tree\u8282\u70b9\u7c7b\ntemplate <class Value>\nstruct __rb_tree_node : public __rb_tree_node_base\n{\n  typedef __rb_tree_node<Value>* link_type;\n  Value value_field;    //RB-tree\u8282\u70b9\u7684value\n};\n\u952e\u548c\u503c\u90fd\u5305\u542b\u5728value_field\u4e2d\n1.2 RB-tree\u7684\u8fed\u4ee3\u5668\nSGI\u5c06RB-tree\u8fed\u4ee3\u5668\u5b9e\u73b0\u4e3a\u4e24\u5c42\uff1a\n\nRB-tree\u8fed\u4ee3\u5668\u5c5e\u4e8e\u53cc\u5411\u8fed\u4ee3\u5668\uff0c\u4f46\u4e0d\u5177\u5907\u968f\u673a\u5b9a\u4f4d\u80fd\u529b\u3002\u524d\u8fdb\u64cd\u4f5coperator++()\u8c03\u7528\u4e86\u57fa\u7c7b\u8fed\u4ee3\u5668\u7684increment()\uff0c\u540e\u9000\u64cd\u4f5coperator\u2013()\u8c03\u7528\u4e86\u57fa\u7c7b\u8fed\u4ee3\u5668\u7684decrement()\u3002\u524d\u8fdb\u6216\u540e\u9000\u7684\u4e3e\u6b62\u884c\u4e3a\u5b8c\u5168\u4f9d\u636e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u8282\u70b9\u6392\u5217\u6cd5\u5219\n//\u8fed\u4ee3\u5668\u57fa\u7c7b\nstruct __rb_tree_base_iterator\n{\n  typedef __rb_tree_node_base::base_ptr base_ptr;\n  typedef bidirectional_iterator_tag iterator_category;\n  typedef ptrdiff_t difference_type;\n\n  base_ptr node;    //\u8282\u70b9\u57fa\u7c7b\u7c7b\u578b\u7684\u6307\u9488\uff0c\u5c06\u8fed\u4ee3\u5668\u8fde\u63a5\u5230RB-tree\u7684\u8282\u70b9\n\n  void increment()\n  {\n    if (node->right != 0) {//\u5982\u679cnode\u53f3\u5b50\u6811\u4e0d\u4e3a\u7a7a\uff0c\u5219\u627e\u5230\u53f3\u5b50\u6811\u7684\u6700\u5de6\u5b50\u8282\u70b9\n      node = node->right;\n      while (node->left != 0)\n        node = node->left;\n    }\n    else {//\u5982\u679cnode\u53f3\u5b50\u6811\u4e3a\u7a7a\uff0c\u5219\u627e\u5230\u7b2c\u4e00\u4e2a\u201c\u8be5\u8282\u70b9\u4f4d\u4e8e\u5176\u5de6\u5b50\u6811\u201d\u7684\u8282\u70b9\n      base_ptr y = node->parent;\n      while (node == y->right) {\n        node = y;\n        y = y->parent;\n      }\n      if (node->right != y)\n        node = y;\n    }\n  }\n\n  void decrement()\n  {\n    if (node->color == __rb_tree_red &&\n        node->parent->parent == node)//\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u4e8enode\u4e3aheader\u65f6\uff08\u4ea6\u5373node\u4e3a\n      node = node->right;            //end()\u65f6\uff09header\u53f3\u5b50\u8282\u70b9\u5373mostright\uff0c\u6307\u5411max\u8282\u70b9\n    else if (node->left != 0) {//\u5982\u679c\u5de6\u5b50\u6811\u4e0d\u4e3a\u7a7a\uff0c\u5219\u627e\u5230\u5de6\u5b50\u6811\u7684\u6700\u53f3\u5b50\u8282\u70b9\n      base_ptr y = node->left;\n      while (y->right != 0)\n        y = y->right;\n      node = y;\n    }\n    else {//\u5982\u679c\u5de6\u5b50\u6811\u4e3a\u7a7a\uff0c\u5219\u627e\u5230\u7b2c\u4e00\u4e2a\u201c\u8be5\u8282\u70b9\u4f4d\u4e8e\u5176\u53f3\u5b50\u6811\u201d\u7684\u8282\u70b9\n      base_ptr y = node->parent;\n      while (node == y->left) {\n        node = y;\n        y = y->parent;\n      }\n      node = y;\n    }\n  }\n};\n\n//\u8fed\u4ee3\u5668\u7c7b\ntemplate <class Value, class Ref, class Ptr>\nstruct __rb_tree_iterator : public __rb_tree_base_iterator\n{\n  typedef Value value_type;\n  typedef Ref reference;\n  typedef Ptr pointer;\n  typedef __rb_tree_iterator<Value, Value&, Value*>             iterator;\n  typedef __rb_tree_iterator<Value, const Value&, const Value*> const_iterator;\n  typedef __rb_tree_iterator<Value, Ref, Ptr>                   self;\n  typedef __rb_tree_node<Value>* link_type; //\u6307\u5411RB-tree\u8282\u70b9\u7684\u6307\u9488\u7c7b\u578b\n\n  __rb_tree_iterator() {}\n  __rb_tree_iterator(link_type x) { node = x; }\n  __rb_tree_iterator(const iterator& it) { node = it.node; }\n\n  //\u89e3\u5f15\u7528\u64cd\u4f5c\u4e3a\u83b7\u53d6\u6240\u6307RB-tree\u8282\u70b9\u7684value\n  reference operator*() const { return link_type(node)->value_field; }\n#ifndef __SGI_STL_NO_ARROW_OPERATOR\n  pointer operator->() const { return &(operator*()); }\n#endif /* __SGI_STL_NO_ARROW_OPERATOR */\n\n  //\u8c03\u7528\u7236\u7c7b\u7684increment()\uff0c\u51fd\u6570\u4f1a\u4fee\u6539node\u6210\u5458\uff0c\u4f7f\u5176\u6307\u5411\u540e\u4e00\u4e2aRB-tree\u8282\u70b9\n  self& operator++() { increment(); return *this; }\n  self operator++(int) {\n    self tmp = *this;\n    increment();\n    return tmp;\n  }\n    \n  //\u8c03\u7528\u7236\u7c7b\u7684decrement()\uff0c\u51fd\u6570\u4f1a\u4fee\u6539node\u6210\u5458\uff0c\u4f7f\u5176\u6307\u5411\u524d\u4e00\u4e2aRB-tree\u8282\u70b9\n  self& operator--() { decrement(); return *this; }\n  self operator--(int) {\n    self tmp = *this;\n    decrement();\n    return tmp;\n  }\n};\n1.3 RB-tree\u64cd\u4f5c\u7684\u5b9e\u73b0\nSGI STL\u4e2dRB-tree\u7684\u5b9a\u4e49\n    \u2022 \u8282\u70b9\u64cd\u4f5c\uff1a\n        \u25e6 \u6d89\u53ca\u5185\u5b58\u7ba1\u7406\u7684\u64cd\u4f5c\n            \u25aa \u5206\u914d\u8282\u70b9\uff1aget_node\n            \u25aa \u91ca\u653e\u8282\u70b9\uff1aput_node\n            \u25aa \u521b\u5efa\u8282\u70b9\uff1acreate_node\n            \u25aa \u62f7\u8d1d\u8282\u70b9\uff1aclone_node\n            \u25aa \u9500\u6bc1\u8282\u70b9\uff1adestroy_node\n        \u25e6 \u83b7\u53d6\u8282\u70b9\u6210\u5458\uff1a\n            \u25aa left\n            \u25aa right\n            \u25aa parent\n            \u25aa value\n            \u25aa key\n            \u25aa color\n    \u2022 RB-tree\u64cd\u4f5c\n        \u25e6 \u521b\u5efa\u7a7aRB-tree\uff1arb_tree\n            \u25aa \u521d\u59cb\u5316\uff1ainit\n        \u25e6 \u83b7\u53d6root\u8282\u70b9\uff1aroot\n        \u25e6 \u83b7\u53d6\u6700\u5de6\u5b50\u8282\u70b9\uff1aleftmost\n        \u25e6 \u83b7\u53d6\u6700\u53f3\u5b50\u8282\u70b9\uff1arightmost\n        \u25e6 \u83b7\u53d6\u8d77\u59cb\u8282\u70b9\uff1abegin\n        \u25e6 \u83b7\u53d6\u672b\u5c3e\u8282\u70b9\uff1aend\n        \u25e6 \u662f\u5426\u4e3a\u7a7a\uff1aempty\n        \u25e6 \u5927\u5c0f\uff1asize\n        \u25e6 \u63d2\u5165\u8282\u70b9\uff1a\n            \u25aa \u8282\u70b9\u503c\u72ec\u4e00\u65e0\u4e8c\uff1ainsert_unique\n                \u2022 __insert\n                    \u25e6 __rb_tree_rebalance\n                        \u25aa __rb_tree_rotate_left\n                        \u25aa __rb_tree_rotate_right\n            \u25aa \u5141\u8bb8\u8282\u70b9\u503c\u91cd\u590d\uff1ainsert_equal\n                \u2022 __insert\uff08\u540c\u4e0a\uff09\n                    \u25e6 __rb_tree_rebalance\uff08\u540c\u4e0a\uff09\n                        \u25aa __rb_tree_rotate_left\uff08\u540c\u4e0a\uff09\n                        \u25aa __rb_tree_rotate_right\uff08\u540c\u4e0a\uff09\n        \u25e6 \u5143\u7d20\u641c\u7d22\uff1a\n            \u25aa find\n2.set\nSGI STL\u4e2dset\u7684\u5b9a\u4e49\nset\u7684\u6240\u6709\u5143\u7d20\u90fd\u4f1a\u6839\u636e\u5143\u7d20\u7684\u952e\u503c\u81ea\u52a8\u88ab\u6392\u5e8f\u3002\u5143\u7d20\u7684\u952e\u503c\u5c31\u662f\u5b9e\u503c\uff0c\u5b9e\u503c\u5c31\u662f\u952e\u503c\u3001set\u4e0d\u5141\u8bb8\u4e24\u4e2a\u5143\u7d20\u5177\u6709\u76f8\u540c\u7684\u952e\u503c\ntemplate <class Key, class Compare = less<Key>, class Alloc = alloc>\nclass set {\npublic:\n    ...\n    //\u952e\u503c\u548c\u5b9e\u503c\u7c7b\u578b\u76f8\u540c\uff0c\u6bd4\u8f83\u51fd\u6570\u4e5f\u662f\u540c\u4e00\u4e2a\n    typedef Key key_type;\n    typedef Key value_type;\n    typedef Compare key_compare;\n    typedef Compare value_compare;\nprivate:\n    ...\n    typedef rb_tree<key_type, value_type, \n                  identity<value_type>, key_compare, Alloc> rep_type;\n    rep_type t;  // \u5185\u542b\u4e00\u68f5RB-tree\uff0c\u4f7f\u7528RB-tree\u6765\u8868\u73b0set\npublic:\n    ...\n    //iterator\u5b9a\u4e49\u4e3aRB-tree\u7684const_iterator\uff0c\u8868\u793aset\u7684\u8fed\u4ee3\u5668\u65e0\u6cd5\u6267\u884c\u5199\u64cd\u4f5c\n    typedef typename rep_type::const_iterator iterator;\n    ...\n};\nset\u7684\u5143\u7d20\u503c\u5c31\u662f\u952e\u503c\uff0c\u5173\u7cfb\u5230set\u5143\u7d20\u7684\u6392\u5217\u89c4\u5219\u3002\u56e0\u6b64\u4e0d\u80fd\u901a\u8fc7set\u7684\u8fed\u4ee3\u5668\u6539\u53d8set\u7684\u5143\u7d20\u503c\u3002set\u5c06\u5176\u8fed\u4ee3\u5668\u5b9a\u4e49\u4e3aRB-tree\u7684const_iterator\u4ee5\u9632\u6b62\u4fee\u6539\nset\u6240\u5f00\u653e\u7684\u5404\u79cd\u64cd\u4f5c\u63a5\u53e3\uff0cRB-tree\u4e5f\u63d0\u4f9b\u4e86\uff0c\u6240\u4ee5\u51e0\u4e4e\u6240\u6709\u7684set\u64cd\u4f5c\u884c\u4e3a\uff0c\u90fd\u53ea\u662f\u8f6c\u8c03\u7528RB-tree\u7684\u64cd\u4f5c\u884c\u4e3a\u800c\u5df2\n3.map\nSGI STL\u4e2dmap\u7684\u5b9a\u4e49\nmap\u7684\u6240\u6709\u5143\u7d20\u4f1a\u6839\u636e\u5143\u7d20\u7684\u952e\u503c\u81ea\u52a8\u88ab\u6392\u5e8f\u3002\u6240\u6709\u5143\u7d20\u90fd\u662fpair\uff0c\u540c\u65f6\u62e5\u6709\u952e\u503c\u548c\u5b9e\u503c\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u88ab\u89c6\u4e3a\u952e\u503c\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u88ab\u89c6\u4e3a\u5b9e\u503c\u3002map\u4e0d\u5141\u8bb8\u4e24\u4e2a\u5143\u7d20\u62e5\u6709\u76f8\u540c\u7684\u952e\u503c\ntemplate <class Key, class T, class Compare = less<Key>, class Alloc = alloc>\nclass map {\npublic:\n  typedef Key key_type;     //\u952e\u503c\u7c7b\u578b\n  typedef T data_type;      //\u5b9e\u503c\u7c7b\u578b\n  typedef T mapped_type;    \n  typedef pair<const Key, T> value_type;    //\u952e\u503c\u5bf9\uff0cRB-tree\u8282\u70b9\u4e2d\u7684value\u7c7b\u578b\n  typedef Compare key_compare;  //\u952e\u503c\u6bd4\u8f83\u51fd\u6570\n\n  ...\n\nprivate:\n  typedef rb_tree<key_type, value_type, \n                  select1st<value_type>, key_compare, Alloc> rep_type;\n  rep_type t;  // \u5185\u542b\u4e00\u68f5RB-tree\uff0c\u4f7f\u7528RB-tree\u6765\u8868\u73b0map\npublic:\n  ...\n  //\u8fed\u4ee3\u5668\u548cset\u4e0d\u540c\uff0c\u5141\u8bb8\u4fee\u6539\u5b9e\u503c\n  typedef typename rep_type::iterator iterator;\n  ...\n\n  //\u4e0b\u6807\u64cd\u4f5c\n  T& operator[](const key_type& k) {\n    return (*((insert(value_type(k, T()))).first)).second;\n  }\n\n  //\u63d2\u5165\u64cd\u4f5c\n  pair<iterator,bool> insert(const value_type& x) { return t.insert_unique(x); }\n\n  ...\n};\n\u53ef\u4ee5\u901a\u8fc7map\u7684\u8fed\u4ee3\u5668\u4fee\u6539\u5143\u7d20\u7684\u5b9e\u503c\uff0c\u4e0d\u80fd\u4fee\u6539\u5143\u7d20\u7684\u952e\u503c\nmap\u6240\u5f00\u653e\u7684\u5404\u79cd\u64cd\u4f5c\u63a5\u53e3\uff0cRB-tree\u4e5f\u90fd\u63d0\u4f9b\u4e86\uff0c\u6240\u4ee5\u51e0\u4e4e\u6240\u6709\u7684map\u64cd\u4f5c\u884c\u4e3a\uff0c\u90fd\u53ea\u662f\u8f6c\u8c03\u7528RB-tree\u7684\u64cd\u4f5c\u884c\u4e3a\u800c\u5df2\n4.multiset\nSGI STL\u4e2dset\u7684\u5b9a\u4e49\nmultiset\u7684\u7279\u6027\u53ca\u7528\u6cd5\u548cset\u5b8c\u5168\u76f8\u540c\uff0c\u552f\u4e00\u7684\u5dee\u522b\u5728\u4e8e\u5b83\u5141\u8bb8\u952e\u503c\u91cd\u590d\uff0c\u63d2\u5165\u64cd\u4f5c\u91c7\u7528\u7684\u662f\u5e95\u5c42\u673a\u5236RB-tree\u7684insert_equal()\u800c\u975einsert_unique()\n5.multimap\nSGI STL\u4e2dmap\u7684\u5b9a\u4e49\nmultimap\u7684\u7279\u6027\u53ca\u7528\u6cd5\u548cmap\u5b8c\u5168\u76f8\u540c\uff0c\u552f\u4e00\u7684\u5dee\u522b\u5728\u4e8e\u5b83\u5141\u8bb8\u952e\u503c\u91cd\u590d\uff0c\u63d2\u5165\u64cd\u4f5c\u91c7\u7528\u7684\u662f\u5e95\u5c42\u673a\u5236RB-tree\u7684insert_equal()\u800c\u975einsert_unique()\n6.hashtable\n\nSGI STL\u4e2d\u4ee5\u5f00\u54c8\u5e0c\u5b9e\u73b0hash table\uff0chash table\u8868\u683c\u4e2d\u7684\u5143\u7d20\u4e3a\u6876\uff0c\u6bcf\u4e2a\u6876\u4e2d\u5305\u542b\u4e86\u54c8\u5e0c\u5230\u8fd9\u4e2a\u6876\u4e2d\u7684\u8282\u70b9\uff0c\u8282\u70b9\u5b9a\u4e49\u5982\u4e0b\uff1a\ntemplate <class Value>\nstruct __hashtable_node\n{\n    __hashtable_node *next;\n    Value val;\n};\n6.1 hashtable\u7684\u8fed\u4ee3\u5668\ntemplate <class Value, class Key, class HashFcn,\n          class ExtractKey, class EqualKey, class Alloc>\nstruct __hashtable_iterator {\n  typedef hashtable<Value, Key, HashFcn, ExtractKey, EqualKey, Alloc>\n          hashtable;\n  typedef __hashtable_iterator<Value, Key, HashFcn, \n                               ExtractKey, EqualKey, Alloc>\n          iterator;\n  typedef __hashtable_const_iterator<Value, Key, HashFcn, \n                                     ExtractKey, EqualKey, Alloc>\n          const_iterator;\n  typedef __hashtable_node<Value> node;\n\n  typedef forward_iterator_tag iterator_category;\n  typedef Value value_type;\n  typedef ptrdiff_t difference_type;\n  typedef size_t size_type;\n  typedef Value& reference;\n  typedef Value* pointer;\n\n  node* cur;        //\u8fed\u4ee3\u5668\u76ee\u524d\u6240\u6307\u7684\u8282\u70b9\n  hashtable* ht;    //\u6307\u5411\u76f8\u5e94\u7684hashtable\n\n  __hashtable_iterator(node* n, hashtable* tab) : cur(n), ht(tab) {}\n  __hashtable_iterator() {}\n  reference operator*() const { return cur->val; }\n  pointer operator->() const { return &(operator*()); }\n  iterator& operator++();\n  iterator operator++(int);\n  bool operator==(const iterator& it) const { return cur == it.cur; }\n  bool operator!=(const iterator& it) const { return cur != it.cur; }\n};\n\u524d\u8fdb\u64cd\u4f5c\u9996\u5148\u5c1d\u8bd5\u4ece\u76ee\u524d\u6240\u6307\u7684\u8282\u70b9\u51fa\u53d1\uff0c\u524d\u8fdb\u4e00\u4e2a\u4f4d\u7f6e(\u8282\u70b9)\uff0c\u7531\u4e8e\u8282\u70b9\u88ab\u5b89\u7f6e\u4e8elist\u5185\uff0c\u6240\u4ee5\u5229\u7528\u8282\u70b9\u7684next\u6307\u9488\u5373\u53ef\u8f7b\u6613\u5b8c\u6210\u3002\u5982\u679c\u76ee\u524d\u8282\u70b9\u6b63\u597d\u662flist\u7684\u5c3e\u7aef\uff0c\u5c31\u8df3\u81f3\u4e0b\u4e00\u4e2abucket\u8eab\uff0c\u5b83\u6b63\u597d\u6307\u5411\u4e0b\u4e00\u4e2alist\u7684\u5934\u90e8\u8282\u70b9\uff1a\ntemplate <class V, class K, class HF, class ExK, class EqK, class A>\n__hashtable_iterator<V, K, HF, ExK, EqK, A>&\n__hashtable_iterator<V, K, HF, ExK, EqK, A>::operator++()\n{\n  const node* old = cur;\n  cur = cur->next;  //\u5982\u679c\u5b58\u5728\uff0c\u5c31\u662f\u5b83\u3002\u5426\u5219\u8fdb\u5165\u4ee5\u4e0bif\u6d41\u7a0b\n  if (!cur) {\n    //\u6839\u636e\u5143\u7d20\u503c\uff0c\u5b9a\u4f4d\u51fa\u4e0b\u4e00\u4e2abucket\uff0c\u5176\u8d77\u5934\u5904\u5c31\u662f\u6211\u4eec\u7684\u76ee\u7684\u5730\n    size_type bucket = ht->bkt_num(old->val);\n    while (!cur && ++bucket < ht->buckets.size())\n      cur = ht->buckets[bucket];\n  }\n  return *this;\n}\n\ntemplate <class V, class K, class HF, class ExK, class EqK, class A>\ninline __hashtable_iterator<V, K, HF, ExK, EqK, A>\n__hashtable_iterator<V, K, HF, ExK, EqK, A>::operator++(int)\n{\n  iterator tmp = *this;\n  ++*this;\n  return tmp;\n}\nhashtable\u7684\u8fed\u4ee3\u5668\u6ca1\u6709\u540e\u9000\u64cd\u4f5c\uff0chashtable\u4e5f\u6ca1\u6709\u5b9a\u4e49\u6240\u8c13\u7684\u9006\u5411\u8fed\u4ee3\u5668\n6.2 hashtable\u7684\u5b9e\u73b0\nSGI STL\u4e2dhashtable\u7684\u5b9a\u4e49\ntemplate <class Value, class Key, class HashFcn,\n          class ExtractKey, class EqualKey, class Alloc = alloc>\nclass hashtable;\n\n...\n\ntemplate <class Value, class Key, class HashFcn,\n          class ExtractKey, class EqualKey,\n          class Alloc> //\u5148\u524d\u58f0\u660e\u65f6\uff0c\u5df2\u7ed9\u51faAlloc\u9ed8\u8ba4\u503calloc\nclass hashtable {\npublic:\n  typedef HashFcn hasher;\n  typedef EqualKey key_equal;\n  ...\nprivate:\n  //\u4ee5\u4e0b3\u8005\u90fd\u662ffunction  objects\n  hasher hash;\n  key_equal equals;\n  ExtractKey get_key;\n\n  typedef __hashtable_node<Value> node;  //hashtable\u8282\u70b9\u7c7b\u578b\n  typedef simple_alloc<node, Alloc> node_allocator;\n\n  vector<node*,Alloc> buckets; //hashtable\u7684\u6876\u6570\u7ec4\uff0c\u4ee5vector\u5b8c\u6210\n  size_type num_elements;      //\u5143\u7d20\u4e2a\u6570\n  ...\n};\nSGI STL\u4ee5\u8d28\u6570\u6765\u8bbe\u8ba1\u8868\u683c\u5927\u5c0f\uff0c\u5e76\u4e14\u5148\u5c0628\u4e2a\u8d28\u6570\uff08\u9010\u6e10\u5448\u73b0\u5927\u7ea62\u500d\u7684\u5173\u7cfb\uff09\u8ba1\u7b97\u597d\uff0c\u4ee5\u5907\u968f\u65f6\u8bbf\u95ee\uff0c\u540c\u65f6\u63d0\u4f9b\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u67e5\u8be2\u5728\u8fd928\u4e2a\u8d28\u6570\u4e2d\uff0c\u201c\u6700\u63a5\u8fd1\u67d0\u6570\u5e76\u5927\u4e8e\u67d0\u6570\u201d\u7684\u8d28\u6570\uff1a\nstatic const int __stl_num_primes = 28;\nstatic const unsigned long __stl_prime_list[__stl_num_primes] =\n{\n  53,         97,           193,         389,       769,\n  1543,       3079,         6151,        12289,     24593,\n  49157,      98317,        196613,      393241,    786433,\n  1572869,    3145739,      6291469,     12582917,  25165843,\n  50331653,   100663319,    201326611,   402653189, 805306457, \n  1610612741, 3221225473ul, 4294967291ul\n};\n\n//\u8be5\u51fd\u6570\u88abnext_size()\u6240\u8c03\u7528\ninline unsigned long __stl_next_prime(unsigned long n)\n{\n  const unsigned long* first = __stl_prime_list;\n  const unsigned long* last = __stl_prime_list + __stl_num_primes;\n  const unsigned long* pos = lower_bound(first, last, n);\n  return pos == last ? *(last - 1) : *pos;\n}\n6.3 hashtable\u64cd\u4f5c\u7684\u5b9e\u73b0\n    \u2022 \u8282\u70b9\u64cd\u4f5c\n        \u25e6 \u6d89\u53ca\u5185\u5b58\u7ba1\u7406\n            \u25aa \u521b\u5efa\u8282\u70b9\uff1anew_node\n            \u25aa \u9500\u6bc1\u8282\u70b9\uff1adelete_node\n    \u2022 hashtable\u64cd\u4f5c\n        \u25e6 \u521b\u5efa\u6ee1\u8db3n\u4e2abucket\u7684hashtable\uff1ahashtable\n            \u25aa initialize_buckets\n        \u25e6 \u63d2\u5165\u8282\u70b9\n            \u25aa \u4e0d\u5141\u8bb8\u952e\u503c\u91cd\u590d\uff1a insert_unique\n                \u2022 \u5224\u65ad\u548c\u91cd\u65b0\u5206\u914dbucket\uff1aresize\n                \u2022 insert_unique_noresize\n            \u25aa \u5141\u8bb8\u952e\u503c\u91cd\u590d\uff1ainsert_equal\n                \u2022 \u5224\u65ad\u548c\u91cd\u65b0\u5206\u914dbucket\uff1aresize\uff08\u540c\u4e0a\uff09\n                \u2022 insert_equal_noresize\n        \u25e6 \u54c8\u5e0c\u6620\u5c04\u5bfb\u627ebucket\n            \u25aa \u63a5\u53d7\u5b9e\u503c\u548cbuckets\u4e2a\u6570\uff1abkt_num\n            \u25aa \u53ea\u63a5\u53d7\u5b9e\u503c\uff1abkt_num\n            \u25aa \u53ea\u63a5\u53d7\u952e\u503c\uff1abkt_num_key\n            \u25aa \u63a5\u53d7\u952e\u503c\u548cbuckets\u4e2a\u6570\uff1abkt_num_key\n        \u25e6 \u6e05\u9664\uff1aclear\n        \u25e6 \u590d\u5236\uff1acopy_from\n        \u25e6 \u67e5\u627e\u5143\u7d20\uff1afind\n        \u25e6 \u7edf\u8ba1\u5143\u7d20\u4e2a\u6570\uff1acount\n6.4 hash functions\nhash function\u662f\u8ba1\u7b97\u5143\u7d20\u4f4d\u7f6e\u7684\u51fd\u6570\uff0cSGI\u5c06\u8fd9\u9879\u4efb\u52a1\u8d4b\u4e88\u4e86bkt_num()\uff0c\u518d\u7531\u5b83\u6765\u8c03\u7528\u8fd9\u91cc\u63d0\u4f9b\u7684hash function\uff0c\u53d6\u5f97\u4e00\u4e2a\u53ef\u4ee5\u5bf9hashtable\u8fdb\u884c\u6a21\u8fd0\u7b97\u7684\u503c\u3002\u9488\u5bf9char\uff0cint\uff0clong\u7b49\u6574\u6570\u7c7b\u578b\uff0c\u5927\u90e8\u5206\u7684hash functions\u4ec0\u4e48\u4e5f\u6ca1\u505a\uff0c\u53ea\u662f\u5fe0\u5b9e\u8fd4\u56de\u539f\u503c\ninline size_t __stl_hash_string(const char* s)\n{\n  unsigned long h = 0; \n  for ( ; *s; ++s)\n    h = 5*h + *s;\n  \n  return size_t(h);\n}\n\n__STL_TEMPLATE_NULL struct hash<char*>\n{\n  size_t operator()(const char* s) const { return __stl_hash_string(s); }\n};\n\n__STL_TEMPLATE_NULL struct hash<const char*>\n{\n  size_t operator()(const char* s) const { return __stl_hash_string(s); }\n};\n\n__STL_TEMPLATE_NULL struct hash<char> {\n  size_t operator()(char x) const { return x; }\n};\n__STL_TEMPLATE_NULL struct hash<unsigned char> {\n  size_t operator()(unsigned char x) const { return x; }\n};\n__STL_TEMPLATE_NULL struct hash<signed char> {\n  size_t operator()(unsigned char x) const { return x; }\n};\n__STL_TEMPLATE_NULL struct hash<short> {\n  size_t operator()(short x) const { return x; }\n};\n__STL_TEMPLATE_NULL struct hash<unsigned short> {\n  size_t operator()(unsigned short x) const { return x; }\n};\n__STL_TEMPLATE_NULL struct hash<int> {\n  size_t operator()(int x) const { return x; }\n};\n__STL_TEMPLATE_NULL struct hash<unsigned int> {\n  size_t operator()(unsigned int x) const { return x; }\n};\n__STL_TEMPLATE_NULL struct hash<long> {\n  size_t operator()(long x) const { return x; }\n};\n__STL_TEMPLATE_NULL struct hash<unsigned long> {\n  size_t operator()(unsigned long x) const { return x; }\n};\n7.hash_set\nSGI STL\u4e2dhash_set\u7684\u5b9a\u4e49\nhash_set\u4ee5hashtable\u4e3a\u5e95\u5c42\u673a\u5236\uff0c\u7531\u4e8ehash_set\u6240\u4f9b\u5e94\u7684\u64cd\u4f5c\u63a5\u53e3hashtable\u90fd\u63d0\u4f9b\u4e86\uff0c\u6240\u4ee5\u51e0\u4e4e\u6240\u6709\u7684hash_set\u64cd\u4f5c\u884c\u4e3a\uff0c\u90fd\u53ea\u662f\u8f6c\u8c03\u7528hashtable\u7684\u64cd\u4f5c\u884c\u4e3a\u800c\u5df2\n8.hash_map\nSGI STL\u4e2dhash_map\u7684\u5b9a\u4e49\nhash_map\u4ee5hashtable\u4e3a\u5e95\u5c42\u673a\u5236\uff0c\u7531\u4e8ehash_map\u6240\u4f9b\u5e94\u7684\u64cd\u4f5c\u63a5\u53e3hashtable\u90fd\u63d0\u4f9b\u4e86\uff0c\u6240\u4ee5\u51e0\u4e4e\u6240\u6709\u7684hash_map\u64cd\u4f5c\u884c\u4e3a\uff0c\u90fd\u53ea\u662f\u8f6c\u8c03\u7528hashtable\u7684\u64cd\u4f5c\u884c\u4e3a\u800c\u5df2\n9.hash_multiset\nSGI STL\u4e2dhash_multiset\u7684\u5b9a\u4e49\nhash_multiset\u548chash_set\u5b9e\u73b0\u4e0a\u7684\u552f\u4e00\u5dee\u522b\u5728\u4e8e\uff0c\u524d\u8005\u7684\u5143\u7d20\u63d2\u5165\u64cd\u4f5c\u91c7\u7528\u5e95\u5c42\u673a\u5236hashtable\u7684insert_equal()\uff0c\u540e\u8005\u5219\u662f\u91c7\u7528insert_unique()\n10.hash_multimap\nSGI STL\u4e2dhash_multimap\u7684\u5b9a\u4e49\nhash_multimap\u548chash_map\u5b9e\u73b0\u4e0a\u7684\u552f\u4e00\u5dee\u522b\u5728\u4e8e\uff0c\u524d\u8005\u7684\u5143\u7d20\u63d2\u5165\u64cd\u4f5c\u91c7\u7528\u5e95\u5c42\u673a\u5236hashtable\u7684insert_equal()\uff0c\u540e\u8005\u5219\u662f\u91c7\u7528insert_unique()\n\n\u516d.\u7b97\u6cd5\n\n\n\n\n1.\u533a\u95f4\u62f7\u8d1d\n1.1 copy\nSGI STL\u7684copy\u7b97\u6cd5\u7528\u5c3d\u5404\u79cd\u529e\u6cd5\uff0c\u5305\u62ec\u51fd\u6570\u91cd\u8f7d\u3001\u7c7b\u578b\u7279\u6027\u3001\u504f\u7279\u5316\u7b49\u7f16\u7a0b\u6280\u5de7\u6765\u5c3d\u53ef\u80fd\u5730\u52a0\u5f3a\u6548\u7387\n\n    \u2022 \u6cdb\u5316\u7248\u672c\n        \u25e6 copy\n            \u25aa \u6cdb\u5316\u7248\u672c\uff1a__copy_dispatch\n                \u2022 \u7248\u672c\u4e00\uff1a__copy\n                \u2022 \u7248\u672c\u4e8c\uff1a__copy\n                    \u25e6 __copy_d\n            \u25aa \u504f\u7279\u5316\u7248\u672c\uff1a__copy_dispatch\n                \u2022 __copy_t\uff08\u6307\u9488\u6240\u6307\u5bf9\u8c61\u5177\u6709trivial\u2026\uff09\n                \u2022 __copy_t\uff08\u6307\u9488\u6240\u6307\u5bf9\u8c61\u5177\u6709non-trivial\u2026\uff09\n            \u25aa \u504f\u7279\u5316\u7248\u672c\uff1a__copy_dispatch\n                \u2022 __copy_t\uff08\u540c\u4e0a\uff09\n    \u2022 \u7279\u5316\u7248\u672c\n        \u25e6 copy\uff08\u9488\u5bf9const char*\uff09\n        \u25e6 copy\uff08\u9488\u5bf9const wchar_t*\uff09\ncopy\u5c06\u8f93\u5165\u533a\u95f4[first,last)\u5185\u7684\u5143\u7d20\u590d\u5236\u5230\u8f93\u51fa\u533a\u95f4[result,result+(last-first))\u5185\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4f1a\u6267\u884c\u8d4b\u503c\u64cd\u4f5c*result = *first,*(result+1) = *(first+1),...\u4f9d\u6b21\u7c7b\u63a8\u3002\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff1aresult+(last-first)\u3002copy\u5bf9\u5176template\u53c2\u6570\u6240\u8981\u6c42\u7684\u6761\u4ef6\u975e\u5e38\u5bbd\u677e\u3002\u5176\u8f93\u5165\u533a\u95f4\u53ea\u9700\u7531inputIterators\u6784\u6210\u5373\u53ef\uff0c\u8f93\u51fa\u533a\u95f4\u53ea\u9700\u8981\u7531OutputIterator\u6784\u6210\u5373\u53ef\u3002\u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u4f7f\u7528copy\u7b97\u6cd5\uff0c\u5c06\u4efb\u4f55\u5bb9\u5668\u7684\u4efb\u4f55\u4e00\u6bb5\u533a\u95f4\u7684\u5185\u5bb9\uff0c\u590d\u5236\u5230\u4efb\u4f55\u5bb9\u5668\u7684\u4efb\u4f55\u4e00\u6bb5\u533a\u95f4\u4e0a\n\n\u7531\u4e8e\u62f7\u8d1d\u7684\u987a\u5e8f\uff0c\u5bf9\u4e8e\u6ca1\u6709\u4f7f\u7528memmove()\u7684\u7248\u672c\uff0c\u8981\u7279\u522b\u6ce8\u610f\u76ee\u7684\u533a\u95f4\u4e0e\u6e90\u533a\u95f4\u91cd\u5408\u7684\u60c5\u51b5\u3002memmove()\u80fd\u5904\u7406\u533a\u95f4\u91cd\u5408\u7684\u60c5\u51b5\ncopy\u4f1a\u4e3a\u8f93\u51fa\u533a\u95f4\u5185\u7684\u5143\u7d20\u8d4b\u4e88\u65b0\u503c\uff0c\u800c\u4e0d\u662f\u4ea7\u751f\u65b0\u7684\u5143\u7d20\u3002\u5b83\u4e0d\u80fd\u6539\u53d8\u8f93\u51fa\u533a\u95f4\u7684\u8fed\u4ee3\u5668\u4e2a\u6570\u3002\u6362\u53e5\u8bdd\u8bf4\uff0ccopy\u4e0d\u80fd\u76f4\u63a5\u7528\u6765\u5c06\u5143\u7d20\u63d2\u5165\u7a7a\u5bb9\u5668\u4e2d\u3002\u5982\u679c\u60f3\u5c06\u5143\u7d20\u63d2\u5165\u5e8f\u5217\u4e4b\u5185\uff0c\u8981\u4e48\u4f7f\u7528\u5e8f\u5217\u5bb9\u5668\u7684insert\u6210\u5458\u51fd\u6570\uff0c\u8981\u4e48\u4f7f\u7528copy\u7b97\u6cd5\u5e76\u642d\u914dinsert_iterator\n1.2 copy_backward\ncopy_backward\u5c06[first,last)\u533a\u95f4\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u4ee5\u9006\u884c\u7684\u65b9\u5411\u590d\u5236\u5230\u4ee5result-1\u4e3a\u8d77\u70b9\uff0c\u65b9\u5411\u4ea6\u4e3a\u9006\u884c\u7684\u533a\u95f4\u4e0a\u3002\u6362\u53e5\u8bdd\u8bf4\uff0ccopy_backward\u7b97\u6cd5\u4f1a\u6267\u884c\u8d4b\u503c\u64cd\u4f5c*(result-1) = *(last - 1),*(result-2) = *(last - 2),...\u4ee5\u6b64\u7c7b\u63a8\uff0c\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff1aresult-(last-first)\n\ncopy_backward\u6240\u63a5\u53d7\u7684\u8fed\u4ee3\u5668\u5fc5\u987b\u662fBidirectionalIterators\uff0c\u624d\u80fd\u591f\u201c\u5012\u884c\u9006\u65bd\u201d\n2.set\u76f8\u5173\u7b97\u6cd5\n\u8fd9\u90e8\u5206\u4ecb\u7ecd\u76844\u4e2a\u7b97\u6cd5\u6240\u63a5\u53d7\u7684set\uff0c\u5fc5\u987b\u662f\u6709\u5e8f\u533a\u95f4\uff0c\u5143\u7d20\u53ef\u80fd\u91cd\u590d\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u4eec\u53ef\u4ee5\u63a5\u53d7STL\u7684set/multiset\u5bb9\u5668\u4f5c\u4e3a\u8f93\u5165\u533a\u95f4\u3002hash_set/hash_multiset\u4e24\u79cd\u5bb9\u5668\uff0c\u4ee5hashtable\u4e3a\u5e95\u5c42\u673a\u5236\uff0c\u5176\u5185\u7684\u5143\u7d20\u5e76\u672a\u5448\u73b0\u6392\u5e8f\u72b6\u6001\uff0c\u6240\u4ee5\u867d\u7136\u540d\u79f0\u4e2d\u4e5f\u6709set\u5b57\u6837\uff0c\u5374\u4e0d\u53ef\u5e94\u7528\u4e8e\u8fd9\u91cc\u76844\u4e2a\u7b97\u6cd5\n2.1 set_union\n\u8fd9\u4e2a\u51fd\u6570\u6c42\u96c6\u5408s1\u548cs2\u7684\u5e76\u96c6\u3002s1\u548cs2\u53ca\u5176\u5e76\u96c6\u90fd\u662f\u4ee5\u6392\u5e8f\u533a\u95f4\u8868\u793a\u3002\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u8f93\u51fa\u533a\u95f4\u7684\u5c3e\u7aef\ns1\u548cs2\u5185\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e0d\u9700\u8981\u552f\u4e00\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u67d0\u4e2a\u503c\u5728s1\u51fa\u73b0n\u6b64\uff0c\u5728s2\u51fa\u73b0m\u6b21\uff0c\u90a3\u4e48\u8be5\u503c\u5728\u8f93\u51fa\u533a\u95f4\u4e2d\u4f1a\u51fa\u73b0max(m,n)\u6b21\nSGI SLT\u4e2dset_union\u7684\u5b9e\u73b0\uff0c\u64cd\u4f5c\u793a\u4f8b\u5982\u4e0b\uff1a\n\n2.2 set_intersection\n\u8fd9\u4e2a\u51fd\u6570\u6c42\u96c6\u5408s1\u548cs2\u7684\u4ea4\u96c6\u3002s1\u548cs2\u53ca\u5176\u4ea4\u96c6\u90fd\u662f\u4ee5\u6392\u5e8f\u533a\u95f4\u8868\u793a\u3002\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u8f93\u51fa\u533a\u95f4\u7684\u5c3e\u7aef\nSGI SLT\u4e2dset_intersection\u7684\u5b9e\u73b0\uff0c\u64cd\u4f5c\u793a\u4f8b\u5982\u4e0b\uff1a\n\n2.3 set_difference\n\u8be5\u51fd\u6570\u8ba1\u7b97\u4e24\u4e2a\u96c6\u5408\u7684\u5dee\u96c6\uff0c\u5373\u5f53s1\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0cs2\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u65f6\uff0c\u8ba1\u7b97s1-s2\u3002\u5185\u542b\u201c\u51fa\u73b0\u4e8es1\u4f46\u4e0d\u51fa\u73b0\u4e8es2\u201d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u3002s1\u548cs2\u53ca\u5176\u5dee\u96c6\u90fd\u662f\u4ee5\u6392\u5e8f\u533a\u95f4\u8868\u793a\u3002\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u8f93\u51fa\u533a\u95f4\u7684\u5c3e\u7aef\nSGI SLT\u4e2dset_difference\u7684\u5b9e\u73b0\uff0c\u64cd\u4f5c\u793a\u4f8b\u5982\u4e0b\uff1a\n\n2.4 set_symmetric_difference\n\u8fd9\u4e2a\u51fd\u6570\u6c42\u96c6\u5408s1\u548cs2\u7684\u5bf9\u79f0\u5dee\u96c6\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u80fd\u6784\u9020\u51fa\u96c6\u5408s1-s2\u4e0e\u96c6\u5408s2-s1\u7684\u5e76\u96c6\uff0c\u5185\u542b\u201c\u51fa\u73b0\u4e8es1\u4f46\u4e0d\u51fa\u73b0\u4e8es2\u201d\u4ee5\u53ca\u201c\u51fa\u73b0\u4e8es2\u4f46\u4e0d\u51fa\u73b0\u4e8es1\u201d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u3002s1\u3001s2\u53ca\u5176\u5bf9\u79f0\u5dee\u96c6\u90fd\u662f\u4ee5\u6392\u5e8f\u533a\u95f4\u8868\u793a\uff0c\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u8f93\u51fa\u533a\u95f4\u7684\u5c3e\u7aef\n\u7531\u4e8es1\u548cs2\u5185\u7684\u6bcf\u4e2a\u5143\u7d20\u4e0d\u9700\u8981\u552f\u4e00\uff0c\u56e0\u6b64\u5982\u679c\u67d0\u4e2a\u503c\u5728s1\u51fa\u73b0n\u6b64\uff0c\u5728s2\u51fa\u73b0m\u6b21\uff0c\u90a3\u4e48\u8be5\u503c\u5728\u8f93\u51fa\u533a\u95f4\u4e2d\u4f1a\u51fa\u73b0|n-m|\u6b21\nSGI SLT\u4e2dset_symmetric_difference\u7684\u5b9e\u73b0\uff0c\u64cd\u4f5c\u793a\u4f8b\u5982\u4e0b\uff1a\n\n3.\u6392\u5e8fsort\nsort\u8981\u6c42\u4f20\u5165\u7684\u8fed\u4ee3\u5668\u4e3a\u968f\u673a\u8fed\u4ee3\u5668\uff0c\u56e0\u6b64\u53ea\u80fd\u5bf9vector\u548cdeque\u8fdb\u884c\u6392\u5e8f\nSTL\u7684sort\u7b97\u6cd5\uff0c\u6570\u636e\u91cf\u5927\u65f6\u91c7\u7528Quick Sort\uff0c\u5206\u6bb5\u9012\u5f52\u6392\u5e8f\u3002\u4e00\u65e6\u5206\u6bb5\u540e\u7684\u6570\u636e\u91cf\u5c0f\u4e8e\u67d0\u4e2a\u95e8\u69db\uff0c\u4e3a\u907f\u514dQuick Sort\u7684\u9012\u5f52\u8c03\u7528\u5e26\u6765\u8fc7\u5927\u7684\u989d\u5916\u8d1f\u8377\uff0c\u5c31\u6539\u7528Insertion Sort\u3002\u5982\u679c\u9012\u5f52\u5c42\u6b21\u8fc7\u6df1\uff0c\u8fd8\u4f1a\u6539\u7528Heap Sort\n\u4ee5\u4e0b\u4e3aSGI SLT\u7684sort\u5b9e\u73b0\uff1a\n    \u2022 sort\n        \u25e6 __lg\n        \u25e6 __introsort_loop\n            \u25aa \u5f53\u5b50\u533a\u95f4\u5927\u4e8e__stl_threshold(16)\u65f6\u624d\u8fd0\u884c\uff0c\u5426\u5219\u76f4\u63a5\u8fd4\u56de\n                \u2022 \u5f53\u6df1\u5ea6\u9650\u5236\u4e3a0\u65f6\uff0c\u4f7f\u7528\u5806\u6392\u5e8f\n                \u2022 \u5f53\u6df1\u5ea6\u9650\u5236\u5927\u4e8e0\u65f6\uff0c\u7ee7\u7eed\u9012\u5f52\u6392\u5e8f\n        \u25e6 __final_insertion_sort\uff08\u6b64\u65f6\uff0c\u5df2\u7ecf\u57fa\u672c\u6709\u5e8f\uff09\n            \u25aa \u5f53\u6570\u7ec4\u533a\u95f4\u5927\u4e8e__stl_threshold(16)\u65f6\n                \u2022 \u5bf9\u524d\u9762\u5927\u5c0f\u4e3a16\u7684\u533a\u95f4\u8c03\u7528\uff1a__insertion_sort\n                    \u25e6 __linear_insert\n                        \u25aa __unguarded_linear_insert\n                \u2022 \u5bf9\u540e\u9762\u7684\u533a\u95f4\u8c03\u7528\uff1a__unguarded_insertion_sort\n                    \u25e6 __unguarded_insertion_sort_aux\n                        \u25aa __unguarded_linear_insert\n            \u25aa \u5f53\u6570\u7ec4\u533a\u95f4\u5c0f\u4e8e\u7b49\u4e8e__stl_threshold(16)\u65f6\n                \u2022 \u8c03\u7528\uff1a__insertion_sort\uff08\u540c\u4e0a\uff09\n4.\u5176\u5b83\u7b97\u6cd5\n\u76f8\u5bf9\u7b80\u5355\u7684\u7b97\u6cd5\uff1a\n    \u2022 \u67e5\u627e\n        \u25e6 adjacent_find\uff08\u67e5\u627e\u7b2c\u4e00\u5bf9\u6ee1\u8db3\u6761\u4ef6\u7684\u76f8\u90bb\u5143\u7d20\uff0c\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff09\n            \u25aa \u7248\u672c\u4e00\n            \u25aa \u7248\u672c\u4e8c\n        \u25e6 find\n        \u25e6 find_if\uff08\u53ef\u4ee5\u6307\u5b9a\u64cd\u4f5c\uff09\n        \u25e6 find_end\uff08\u5728\u533a\u95f4\u4e00\u4e2d\u67e5\u627e\u533a\u95f4\u4e8c\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff09\n            \u25aa \u7248\u672c\u4e00\n                \u2022 \u5355\u5411\u8fed\u4ee3\u5668\u7248\uff1a__find_end\n                \u2022 \u53cc\u5411\u8fed\u4ee3\u5668\u7248\uff1a__find_end\n            \u25aa \u7248\u672c\u4e8c\uff08\u53ef\u4ee5\u6307\u5b9a\u64cd\u4f5c\uff09\n                \u2022 \u5355\u5411\u8fed\u4ee3\u5668\u7248\uff1a__find_end\n                \u2022 \u53cc\u5411\u8fed\u4ee3\u5668\u7248\uff1a__find_end\n        \u25e6 find_first_of\uff08\u5728\u533a\u95f4\u4e00\u4e2d\u67e5\u627e\u533a\u95f4\u4e8c\u4e2d\u4efb\u4e00\u5143\u7d20\u7b2c\u4e00\u6b21\u51fa\u73b0\u70b9\uff09\n            \u25aa \u7248\u672c\u4e00\n            \u25aa \u7248\u672c\u4e8c\uff08\u5141\u8bb8\u6307\u5b9a\u64cd\u4f5c\uff09\n        \u25e6 max_element\n            \u25aa \u7248\u672c\u4e00\n            \u25aa \u7248\u672c\u4e8c\uff08\u5141\u8bb8\u6307\u5b9a\u6bd4\u8f83\u64cd\u4f5c\uff09\n        \u25e6 min_element\n            \u25aa \u7248\u672c\u4e00\n            \u25aa \u7248\u672c\u4e8c\uff08\u5141\u8bb8\u6307\u5b9a\u6bd4\u8f83\u64cd\u4f5c\uff09\n        \u25e6 search\uff08\u5728\u5e8f\u5217\u4e00\u7684\u533a\u95f4\u4e2d\u67e5\u627e\u5e8f\u5217\u4e8c\u7684\u9996\u6b21\u51fa\u73b0\u70b9\uff09\n            \u25aa \u7248\u672c\u4e00\n            \u25aa \u7248\u672c\u4e8c\uff08\u5141\u8bb8\u6307\u5b9a\u64cd\u4f5c\uff09\n        \u25e6 search_n\uff08\u5728\u5e8f\u5217\u4e00\u4e2d\u67e5\u627e\u8fde\u7eedn\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\u7684\u8d77\u70b9\uff09\n            \u25aa \u7248\u672c\u4e00\n            \u25aa \u7248\u672c\u4e8c\n    \u2022 \u7edf\u8ba1\n        \u25e6 count\uff08\u7edf\u8ba1\u7b49\u4e8e\u67d0\u503c\u7684\u4e2a\u6570\uff09\n            \u25aa \u7248\u672c\u4e00\n            \u25aa \u7248\u672c\u4e8c\uff08\u8ba1\u6570\u53d8\u91cf\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\uff09\n        \u25e6 count_if\uff08\u53ef\u4ee5\u6307\u5b9a\u64cd\u4f5c\uff09\n            \u25aa \u7248\u672c\u4e00\n            \u25aa \u7248\u672c\u4e8c\uff08\u8ba1\u6570\u53d8\u91cf\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\uff09\n    \u2022 \u5355\u533a\u95f4\u64cd\u4f5c\n        \u25e6 for_each\uff08\u5c06\u4eff\u51fd\u6570f\u65bd\u884c\u4e8e\u6307\u5b9a\u533a\u95f4\uff0cf\u4e0d\u5141\u8bb8\u4fee\u6539\u5143\u7d20\uff0c\u56e0\u4e3a\u8fed\u4ee3\u5668\u7c7b\u578b\u662fInputIterators\uff09\n        \u25e6 generate\uff08\u5c06\u4eff\u51fd\u6570gen\u7684\u8fd0\u7b97\u7ed3\u679c\u8d4b\u503c\u5230\u6307\u5b9a\u533a\u95f4\u7684\u6240\u6709\u5143\u7d20\u4e0a\uff09\n        \u25e6 generate_n\uff08\u5c06\u4eff\u51fd\u6570gen\u7684\u8fd0\u7b97\u7ed3\u679c\u8d4b\u503c\u5230\u8fed\u4ee3\u5668first\u5f00\u59cb\u7684n\u4e2a\u5143\u7d20\u4e0a\uff09\n        \u25e6 partition\uff08\u4e0d\u4fdd\u8bc1\u5143\u7d20\u7684\u539f\u59cb\u76f8\u5bf9\u4f4d\u7f6e\uff09\n    \u2022 \n        \u25e6 stable_partition\uff08\u4fdd\u7559\u5143\u7d20\u7684\u539f\u59cb\u76f8\u5bf9\u4f4d\u7f6e\uff09\n        \u25e6 remove\uff08\u533a\u95f4\u5927\u5c0f\u5e76\u4e0d\u53d1\u9001\u53d8\u5316\uff0c\u9700\u8981\u79fb\u9664\u7684\u5143\u7d20\u4f1a\u88ab\u540e\u9762\u7684\u8986\u76d6\uff0c\u533a\u95f4\u5c3e\u90e8\u4f1a\u6709\u6b8b\u4f59\uff0c\u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u6b8b\u4f59\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff09\n            \u25aa remove_copy\n        \u25e6 remove_if\n            \u25aa remove_copy_if\n    \u2022 \n        \u25e6 replace\n        \u25e6 replace_copy\n        \u25e6 repalce_if\n        \u25e6 replace_copy_if\n        \u25e6 reverse\n            \u25aa \u8fed\u4ee3\u5668\u4e3a\u53cc\u5411\u8fed\u4ee3\u5668\uff1a__reverse\n            \u25aa \u8fed\u4ee3\u5668\u4e3a\u968f\u673a\u8fed\u4ee3\u5668\uff1a__reverse\n        \u25e6 reverse_copy\n        \u25e6 rotate\uff08\u5c06[first,middle)\u548c[middle,last)\u7684\u5143\u7d20\u4e92\u6362\uff0cmiddle\u6240\u6307\u5143\u7d20\u5c06\u6210\u4e3a\u5bb9\u5668\u7b2c\u4e00\u4e2a\u5143\u7d20\uff09\n            \u25aa \u8fed\u4ee3\u5668\u4e3a\u5411\u524d\u8fed\u4ee3\u5668\uff1a__rotate\n        \u25e6 \n            \u25aa \u8fed\u4ee3\u5668\u4e3a\u53cc\u5411\u8fed\u4ee3\u5668\uff1a__rotate\n        \u25e6 \n            \u25aa \u8fed\u4ee3\u5668\u4e3a\u968f\u673a\u8fed\u4ee3\u5668\uff1a__rotate\n                \u2022 __gcd\n                \u2022 __rotate_cycle\n        \u25e6 rotate_copy\n        \u25e6 transform\n            \u25aa \u7248\u672c\u4e00\n            \u25aa \u7248\u672c\u4e8c\n        \u25e6 unique\uff08\u79fb\u9664\u76f8\u90bb\u7684\u91cd\u590d\u5143\u7d20\uff0c\u5fc5\u987b\u76f8\u90bb\uff0c\u6240\u4ee5\u8981\u5148\u6392\u5e8f\u3002\u548cremove\u4e00\u6837\uff0c\u4f1a\u6709\u6b8b\u4f59\uff09\n            \u25aa \u7248\u672c\u4e00\n            \u25aa \u7248\u672c\u4e8c\uff08\u5141\u8bb8\u6307\u5b9a\u64cd\u4f5c\uff09\n        \u25e6 unique_copy\n            \u25aa \u8fed\u4ee3\u5668\u4e3a\u5411\u524d\u8fed\u4ee3\u5668\uff1a__unique_copy\n            \u25aa \u8fed\u4ee3\u5668\u4e3a\u8f93\u51fa\u8fed\u4ee3\u5668(\u4e0d\u80fd\u8bfb)\uff1a__unique_copy\n                \u2022 __unique_copy\n    \u2022 \u53cc\u533a\u95f4\u64cd\u4f5c\n        \u25e6 includes\uff08\u5224\u65ad\u533a\u95f4\u4e8c\u662f\u5426\u201c\u6db5\u76d6\u4e8e\u201d\u533a\u95f4\u4e00\uff0c\u4e24\u4e2a\u533a\u95f4\u5fc5\u987b\u6709\u5e8f\uff09\n            \u25aa \u7248\u672c\u4e00\n            \u25aa \u7248\u672c\u4e8c\n    \u2022 \n        \u25e6 merged\uff08\u5408\u5e76\u4e24\u4e2a\u533a\u95f4\uff0c\u7f6e\u4e8e\u53e6\u4e00\u6bb5\u7a7a\u95f4\uff0c\u8fd4\u56de\u6307\u5411\u7ed3\u679c\u5e8f\u5217\u6700\u540e\u5143\u7d20\u4e0b\u4e00\u4f4d\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\uff09\n            \u25aa \u7248\u672c\u4e00\n            \u25aa \u7248\u672c\u4e8c\uff08\u5141\u8bb8\u6307\u5b9a\u64cd\u4f5c\uff09\n    \u2022 \n        \u25e6 swap_ranges\uff08\u5c06\u533a\u95f4\u4e00\u7684\u5143\u7d20\u4e0efirst2\u5f00\u59cb\u7b49\u4e2a\u6570\u7684\u5143\u7d20\u4e92\u6362\uff09\n\u8f83\u4e3a\u590d\u6742\u7684\u7b97\u6cd5\uff1a\n    \u2022 \u67e5\u627e\n        \u25e6 lower_bound\uff08\u67e5\u627e\u7b49\u4e8evalue\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de\u7b2c\u4e00\u4e2a\u63d2\u5165\u70b9\uff09\n            \u25aa \u7248\u672c\u4e00\n                \u2022 \u8fed\u4ee3\u5668\u662f\u5411\u524d\u8fed\u4ee3\u5668\uff1a__lower_bound\n                \u2022 \u8fed\u4ee3\u5668\u662f\u968f\u673a\u8fed\u4ee3\u5668\uff1a__lower_bound\n            \u25aa \u7248\u672c\u4e8c\uff08\u5141\u8bb8\u6307\u5b9a\u6bd4\u8f83\u64cd\u4f5c\uff09\n        \u25e6 upper_bound\uff08\u67e5\u627evalue\u7684\u6700\u540e\u4e00\u4e2a\u63d2\u5165\u70b9\uff0c\u5373\u5982\u679c\u5b58\u5728\u5143\u7d20\u7b49\u4e8evalue\uff0c\u90a3\u4e48\u63d2\u5165\u6700\u540e\u4e00\u4e2a\u7b49\u4e8evalue\u7684\u5143\u7d20\u4e4b\u540e\uff09\n            \u25aa \u7248\u672c\u4e00\n                \u2022 \u8fed\u4ee3\u5668\u662f\u5411\u524d\u8fed\u4ee3\u5668\uff1a__upper_bound\n                \u2022 \u8fed\u4ee3\u5668\u662f\u968f\u673a\u8fed\u4ee3\u5668\uff1a__upper_bound\n            \u25aa \u7248\u672c\u4e8c\uff08\u5141\u8bb8\u6307\u5b9a\u6bd4\u8f83\u64cd\u4f5c\uff09\n        \u25e6 binary_search\n            \u25aa \u7248\u672c\u4e00\n            \u25aa \u7248\u672c\u4e8c\uff08\u5141\u8bb8\u6307\u5b9a\u6bd4\u8f83\u64cd\u4f5c\uff09\n        \u25e6 equal_range\uff08\u8fd4\u56de\u4e00\u5bf9\u8fed\u4ee3\u5668i\u548cj\uff0ci\u662flower_bound\u7684\u7ed3\u679c\uff0cj\u662fupper_bound\u7684\u7ed3\u679c\uff09\n            \u25aa \u7248\u672c\u4e00\n                \u2022 \u8fed\u4ee3\u5668\u662f\u5411\u524d\u8fed\u4ee3\u5668\uff1a__equal_range\n                \u2022 \u8fed\u4ee3\u5668\u662f\u968f\u673a\u8fed\u4ee3\u5668\uff1a__equal_range\n    \u2022 \u5355\u533a\u95f4\u64cd\u4f5c\n        \u25e6 next_permutation\uff08\u6309\u5b57\u5178\u5e8f\u8ba1\u7b97\u4e0b\u4e00\u4e2a\u6392\u5217\u7ec4\u5408\u3002\u7b97\u6cd5\u601d\u60f3\uff1a\u4ece\u6700\u5c3e\u7aef\u5f00\u59cb\u5f80\u524d\u5bfb\u627e\u4e24\u4e2a\u76f8\u90bb\u5143\u7d20\uff0c\u4ee4\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e3a*i\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e3a*ii\uff0c\u4e14\u6ee1\u8db3*i<*ii\u3002\u627e\u5230\u8fd9\u6837\u4e00\u7ec4\u76f8\u90bb\u5143\u7d20\u540e\uff0c\u518d\u4ece\u6700\u5c3e\u7aef\u5f00\u59cb\u5f80\u524d\u68c0\u9a8c\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e*i\u7684\u5143\u7d20\uff0c\u8bbe\u4e3a*j\uff0c\u5c06i\uff0cj\u5143\u7d20\u5bf9\u8c03\uff0c\u518d\u5c06ii\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u98a0\u5012\u6392\u5217\u3002\u5c31\u662f\u4e0b\u4e00\u4e2a\u6392\u5217\u7ec4\u5408\uff09\n            \u25aa \u7248\u672c\u4e00\n            \u25aa \u7248\u672c\u4e8c\n        \u25e6 prev_permutation\uff08\u6309\u5b57\u5178\u5e8f\u8ba1\u7b97\u4e0a\u4e00\u4e2a\u6392\u5217\u7ec4\u5408\u3002\u7b97\u6cd5\u601d\u60f3\uff1a\u4ece\u6700\u5c3e\u7aef\u5f00\u59cb\u5f80\u524d\u5bfb\u627e\u4e24\u4e2a\u76f8\u90bb\u5143\u7d20\uff0c\u4ee4\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e3a*i\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e3a*ii\uff0c\u4e14\u6ee1\u8db3*i>*ii\u3002\u627e\u5230\u8fd9\u6837\u4e00\u7ec4\u76f8\u90bb\u5143\u7d20\u540e\uff0c\u518d\u4ece\u6700\u5c3e\u7aef\u5f00\u59cb\u5f80\u524d\u68c0\u9a8c\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e*i\u7684\u5143\u7d20\uff0c\u8bbe\u4e3a*j\uff0c\u5c06i\uff0cj\u5143\u7d20\u5bf9\u8c03\uff0c\u518d\u5c06ii\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u98a0\u5012\u6392\u5217\u3002\u5c31\u662f\u4e0b\u4e00\u4e2a\u6392\u5217\u7ec4\u5408\uff09\n            \u25aa \u7248\u672c\u4e00\n            \u25aa \u7248\u672c\u4e8c\n        \u25e6 random_shuffle\n            \u25aa \u7248\u672c\u4e00\uff08\u4f7f\u7528\u5185\u90e8\u968f\u673a\u6570\u4ea7\u751f\u5668\uff09 __random_shuffle\n            \u25aa \u7248\u672c\u4e8c\uff08\u4f7f\u7528\u4e00\u4e2a\u4f1a\u4ea7\u751f\u968f\u673a\u6570\u7684\u4eff\u51fd\u6570\uff09\n        \u25e6 partial_sort\uff08\u5c06middle-first\u4e2a\u6700\u5c0f\u5143\u7d20\u6392\u5e8f\u5e76\u7f6e\u4e8e[first,middle)\uff0c\u5176\u4f59\u5143\u7d20\u653e\u5728middle\u5f00\u59cb\u7684\u540e\u534a\u90e8\uff09\n            \u25aa \u7248\u672c\u4e00\n                \u2022 __partial_sort\n            \u25aa \u7248\u672c\u4e8c\uff08\u8fd0\u884c\u6307\u5b9a\u6bd4\u8f83\u64cd\u4f5c\uff09\n                \u2022 __partial_sort\n        \u25e6 \n        \u25e6 partial_sort_copy\n            \u25aa \u7248\u672c\u4e00\n            \u25aa \u7248\u672c\u4e8c\uff08\u5141\u8bb8\u6307\u5b9a\u6bd4\u8f83\u64cd\u4f5c\uff09\n        \u25e6 inplace_merge\n            \u25aa inplace_merge_aux\n                \u2022 \u6709\u989d\u5916\u7684\u7f13\u51b2\u533a\u8f85\u52a9\uff1a__merge_adaptive\n                    \u25e6 \u5f53\u5e8f\u52171\u8f83\u5c0f\uff0c\u4e14\u7f13\u51b2\u533a\u8db3\u591f\u5bb9\u7eb3\u5e8f\u52171\n                \u2022 \n                    \u25e6 \u5f53\u5e8f\u52172\u8f83\u5c0f\uff0c\u4e14\u7f13\u51b2\u533a\u8db3\u591f\u5bb9\u7eb3\u5e8f\u52172\n                \u2022 \n                    \u25e6 \u5f53\u7f13\u51b2\u533a\u4e0d\u8db3\u4ee5\u5bb9\u7eb3\u5e8f\u52171\u548c\u5e8f\u52172 __rotate_adaptive\n                \u2022 \n        \u25e6 nth_element\n            \u25aa __nth_element\n    \u2022 \n    \u2022 \n\u4e03.\u4eff\u51fd\u6570\n\u5728STL\u6807\u51c6\u89c4\u683c\u5b9a\u6848\u540e\uff0c\u4eff\u51fd\u6570\u91c7\u7528\u51fd\u6570\u5bf9\u8c61\u4f5c\u4e3a\u65b0\u540d\u79f0\n\u51fd\u6570\u6307\u9488\u7684\u7f3a\u70b9\u5728\u4e8e\uff1a\u4e0d\u80fd\u6ee1\u8db3STL\u5bf9\u62bd\u8c61\u6027\u7684\u8981\u6c42\uff0c\u4e5f\u4e0d\u80fd\u6ee1\u8db3\u8f6f\u4ef6\u79ef\u6728\u7684\u8981\u6c42\u2014\u2014\u51fd\u6570\u6307\u9488\u65e0\u6cd5\u548cSTL\u5176\u5b83\u7ec4\u4ef6\uff08\u5982\u9002\u914d\u5668\uff09\u642d\u914d\uff0c\u4ea7\u751f\u66f4\u7075\u6d3b\u7684\u53d8\u5316\n\u5c31\u5b9e\u73b0\u800c\u8a00\uff0c\u4eff\u51fd\u6570\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u201c\u884c\u4e3a\u7c7b\u4f3c\u51fd\u6570\u201d\u7684\u5bf9\u8c61\uff0c\u4e3a\u4e86\u80fd\u591f\u201c\u884c\u4e3a\u7c7b\u4f3c\u51fd\u6570\u201d\uff0c\u5176\u7c7b\u522b\u5b9a\u4e49\u4e2d\u5fc5\u987b\u81ea\u5b9a\u4e49function call\u8fd0\u7b97\u5b50\u3002\u62e5\u6709\u8fd9\u6837\u7684\u8fd0\u7b97\u5b50\u540e\uff0c\u5c31\u53ef\u4ee5\u5728\u4eff\u51fd\u6570\u7684\u5bf9\u8c61\u540e\u9762\u52a0\u4e0a\u4e00\u5bf9\u5c0f\u62ec\u53f7\uff0c\u4ee5\u6b64\u8c03\u7528\u4eff\u51fd\u6570\u6240\u5b9a\u4e49\u7684operator()\n\nSTL\u4eff\u51fd\u6570\u7684\u5206\u7c7b\uff0c\u82e5\u4ee5\u64cd\u4f5c\u6570\u7684\u4e2a\u6570\u5212\u5206\uff0c\u53ef\u5206\u4e3a\u4e00\u5143\u548c\u4e8c\u5143\u4eff\u51fd\u6570\uff0c\u82e5\u4ee5\u529f\u80fd\u5212\u5206\uff0c\u53ef\u5206\u4e3a\u7b97\u672f\u8fd0\u7b97\uff0c\u5173\u7cfb\u8fd0\u7b97\uff0c\u903b\u8f91\u8fd0\u7b97\u4e09\u5927\u7c7b\n\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u6b32\u4f7f\u7528STL\u5167\u5efa\u7684\u4eff\u51fd\u6570\uff0c\u90fd\u5fc5\u987b\u542b\u5165\u5934\u6587\u4ef6\uff0cSGI\u5219\u5c06\u5b83\u4eec\u5b9e\u9645\u5b9a\u4e49\u4e8e<stl_function.h>\u5934\u6587\u4ef6\n1.\u4eff\u51fd\u6570\u7684\u76f8\u5e94\u7c7b\u578b\nSTL\u4eff\u51fd\u6570\u5e94\u8be5\u6709\u80fd\u529b\u88ab\u51fd\u6570\u9002\u914d\u5668\u4fee\u9970\uff0c\u5f7c\u6b64\u50cf\u79ef\u6728\u4e00\u6837\u5730\u4e32\u63a5\u3002\u4e3a\u4e86\u62e5\u6709\u9002\u914d\u80fd\u529b\uff0c\u6bcf\u4e00\u4e2a\u4eff\u51fd\u6570\u5fc5\u987b\u5b9a\u4e49\u81ea\u5df1\u7684\u76f8\u5e94\u7c7b\u578b\u3002\u5c31\u50cf\u8fed\u4ee3\u5668\u5982\u679c\u8981\u878d\u5165\u6574\u4e2aSTL\u5927\u5bb6\u5ead\uff0c\u4e5f\u5fc5\u987b\u4f9d\u7167\u89c4\u5b9a\u5b9a\u4e49\u81ea\u5df1\u76845\u4e2a\u76f8\u5e94\u7c7b\u578b\u4e00\u6837\u3002\u8fd9\u4e9b\u76f8\u5e94\u7c7b\u578b\u662f\u4e3a\u4e86\u8ba9\u9002\u914d\u5668\u80fd\u591f\u53d6\u51fa\uff0c\u83b7\u5f97\u4eff\u51fd\u6570\u7684\u67d0\u4e9b\u4fe1\u606f\n\u4eff\u51fd\u6570\u7684\u76f8\u5e94\u7c7b\u578b\u4e3b\u8981\u7528\u6765\u8868\u73b0\u51fd\u6570\u53c2\u6570\u7c7b\u578b\u548c\u4f20\u56de\u503c\u7c7b\u578b\n\u4e3a\u65b9\u4fbf\u8d77\u89c1\uff0c<stl_function.h>\u5b9a\u4e49\u4e86\u4e24\u4e2aclasses\uff0c\u5206\u522b\u4ee3\u8868\u4e00\u5143\u4eff\u51fd\u6570\u548c\u4e8c\u5143\u4eff\u51fd\u6570\uff08STL\u4e0d\u652f\u6301\u4e09\u5143\u4eff\u51fd\u6570\uff09\uff0c\u5176\u4e2d\u6ca1\u6709\u4efb\u4f55data members\u6216member functions\uff0c\u552f\u6709\u4e00\u4e9b\u7c7b\u578b\u5b9a\u4e49\u3002\u4efb\u4f55\u4eff\u51fd\u6570\u53ea\u8981\u4f9d\u636e\u9700\u6c42\u9009\u62e9\u7ee7\u627f\u5176\u4e2d\u4e00\u4e2aclass\uff0c\u5c31\u81ea\u52a8\u62e5\u6709\u4e86\u90a3\u4e9b\u76f8\u5e94\u7c7b\u578b\uff0c\u4e5f\u5c31\u62e5\u6709\u4e86\u9002\u914d\u80fd\u529b\n1.1 unary_function\nunary_function\u7528\u6765\u5448\u73b0\u4e00\u5143\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\u548c\u8fd4\u56de\u503c\u7c7b\u578b\uff1a\ntemplate <class Arg, class Result>\nstruct unary_function {\n    typedef Arg argument_type;\n    typedef Result result_type;\n};\n1.2 binary_function\nbinary_function\u7528\u6765\u5448\u73b0\u4e8c\u5143\u51fd\u6570\u7684\u7b2c\u4e00\u53c2\u6570\u7c7b\u578b\uff0c\u7b2c\u4e8c\u53c2\u6570\u7c7b\u578b\uff0c\u4ee5\u53ca\u8fd4\u56de\u503c\u7c7b\u578b\uff1a\ntemplate <class Arg1, class Arg2, class Result>\nstruct binary_function {\n    typedef Arg1 first_argument_type;\n    typedef Arg2 second_argument_type;\n    typedef Result result_type;\n};  \n2.\u7b97\u672f\u7c7b\u4eff\u51fd\u6570\n\u4ee5\u4e0b\u4e3aSTL\u5185\u5efa\u7684\u201c\u7b97\u672f\u7c7b\u4eff\u51fd\u6570\u201d\uff0c\u9664\u4e86\u201c\u5426\u5b9a\u201d\u8fd0\u7b97\u4e3a\u4e00\u5143\u8fd0\u7b97\uff0c\u5176\u5b83\u90fd\u662f\u4e8c\u5143\u8fd0\u7b97\uff1a\n    \u2022 \u52a0\u6cd5\uff1aplus<T>\n    \u2022 \u51cf\u6cd5\uff1aminus<T>\n    \u2022 \u4e58\u6cd5\uff1amultiplies<T>\n    \u2022 \u9664\u6cd5\uff1adivides<T>\n    \u2022 \u53d6\u6a21\uff1amodulus<T>\n    \u2022 \u5426\u5b9a\uff1anegate<T>\ntemplate <class T>\nstruct plus : public binary_function<T, T, T> {\n    T operator()(const T& x, const T& y) const { return x + y; }\n};\n\ntemplate <class T>\nstruct minus : public binary_function<T, T, T> {\n    T operator()(const T& x, const T& y) const { return x - y; }\n};\n\ntemplate <class T>\nstruct multiplies : public binary_function<T, T, T> {\n    T operator()(const T& x, const T& y) const { return x * y; }\n};\n\ntemplate <class T>\nstruct divides : public binary_function<T, T, T> {\n    T operator()(const T& x, const T& y) const { return x / y; }\n};\n\ntemplate <class T>\nstruct modulus : public binary_function<T, T, T> {\n    T operator()(const T& x, const T& y) const { return x % y; }\n};\n\ntemplate <class T>\nstruct negate : public unary_function<T, T> {\n    T operator()(const T& x) const { return -x; }\n};\n3.\u5173\u7cfb\u8fd0\u7b97\u7c7b\u4eff\u51fd\u6570\n\u4ee5\u4e0b\u4e3aSTL\u5185\u5efa\u7684\u201c\u5173\u7cfb\u8fd0\u7b97\u7c7b\u4eff\u51fd\u6570\u201d\uff0c\u6bcf\u4e00\u4e2a\u90fd\u662f\u4e8c\u5143\u8fd0\u7b97\uff1a\n    \u2022 \u7b49\u4e8e\uff1aequal_to<T>\n    \u2022 \u4e0d\u7b49\u4e8e\uff1anot_equal_to<T>\n    \u2022 \u5927\u4e8e\uff1agreater<T>\n    \u2022 \u5927\u4e8e\u6216\u7b49\u4e8e\uff1agreater_equal<T>\n    \u2022 \u5c0f\u4e8e\uff1aless<T>\n    \u2022 \u5c0f\u4e8e\u6216\u7b49\u4e8e\uff1aless_equal<T>\ntemplate <class T>\nstruct equal_to : public binary_function<T, T, bool> {\n    bool operator()(const T& x, const T& y) const { return x == y; }\n};\n\ntemplate <class T>\nstruct not_equal_to : public binary_function<T, T, bool> {\n    bool operator()(const T& x, const T& y) const { return x != y; }\n};\n\ntemplate <class T>\nstruct greater : public binary_function<T, T, bool> {\n    bool operator()(const T& x, const T& y) const { return x > y; }\n};\n\ntemplate <class T>\nstruct less : public binary_function<T, T, bool> {\n    bool operator()(const T& x, const T& y) const { return x < y; }\n};\n\ntemplate <class T>\nstruct greater_equal : public binary_function<T, T, bool> {\n    bool operator()(const T& x, const T& y) const { return x >= y; }\n};\n\ntemplate <class T>\nstruct less_equal : public binary_function<T, T, bool> {\n    bool operator()(const T& x, const T& y) const { return x <= y; }\n};\n4.\u903b\u8f91\u8fd0\u7b97\u7c7b\u4eff\u51fd\u6570\n\u4ee5\u4e0b\u4e3aSTL\u5185\u5efa\u7684\u201c\u903b\u8f91\u8fd0\u7b97\u7c7b\u4eff\u51fd\u6570\u201d\uff0c\u5176\u4e2dAnd\u548cOr\u662f\u4e8c\u5143\u8fd0\u7b97\uff0cNot\u4e3a\u4e00\u5143\u8fd0\u7b97\uff1a\n    \u2022 \u903b\u8f91\u8fd0\u7b97 And\uff1alogical_and<T>\n    \u2022 \u903b\u8f91\u8fd0\u7b97 Or\uff1alogical_or<T>\n    \u2022 \u903b\u8f91\u8fd0\u7b97 Not\uff1alogical_not<T>\ntemplate <class T>\nstruct logical_and : public binary_function<T, T, bool> {\n    bool operator()(const T& x, const T& y) const { return x && y; }\n};\n\ntemplate <class T>\nstruct logical_or : public binary_function<T, T, bool> {\n    bool operator()(const T& x, const T& y) const { return x || y; }\n};\n\ntemplate <class T>\nstruct logical_not : public unary_function<T, bool> {\n    bool operator()(const T& x) const { return !x; }\n};\n5.\u8bc1\u540c\uff0c\u9009\u62e9\u4e0e\u6295\u5c04\nC++\u6807\u51c6\u5e76\u672a\u6db5\u76d6\u8fd9\u91cc\u4ecb\u7ecd\u7684\u4efb\u4f55\u4e00\u4e2a\u4eff\u51fd\u6570\uff0c\u4e0d\u8fc7\u5b83\u4eec\u5e38\u5e38\u5b58\u5728\u4e8e\u5404\u4e2a\u5b9e\u73b0\u54c1\u4e2d\u4f5c\u4e3a\u5185\u90e8\u8fd0\u7528\u3002\u5728SGI STL\u4e2d\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a\n//\u8bc1\u540c\u51fd\u6570\u3002\u4efb\u4f55\u6570\u503c\u901a\u8fc7\u6b64\u51fd\u6570\u540e\uff0c\u4e0d\u4f1a\u6709\u4efb\u4f55\u6539\u53d8\n//\u6b64\u51fd\u6570\u8fd0\u7528\u4e8e<stl_set.h>\uff0c\u7528\u6765\u6307\u5b9aRB-tree\u6240\u9700\u7684KeyOfValue op\n//\u90a3\u662f\u56e0\u4e3aset\u5143\u7d20\u7684\u952e\u503c\u5373\u5b9e\u503c\uff0c\u6240\u4ee5\u91c7\u7528identity\ntemplate <class T>\nstruct identity : public unary_function<T, T> {\n  const T& operator()(const T& x) const { return x; }\n};\n\n//\u9009\u62e9\u51fd\u6570\uff1a\u63a5\u53d7\u4e00\u4e2apair\uff0c\u4f20\u56de\u5176\u7b2c\u4e00\u5143\u7d20\n//\u6b64\u51fd\u6570\u8fd0\u7528\u4e8e<stl_map.h>\uff0c\u7528\u6765\u6307\u5b9aRB-tree\u6240\u9700\u7684KeyOfValue op\n//\u7531\u4e8emap\u7cfb\u4ee5pair\u5143\u7d20\u7684\u7b2c\u4e00\u5143\u7d20\u4e3a\u5176\u952e\u503c\uff0c\u6240\u4ee5\u91c7\u7528select1st\ntemplate <class Pair>\nstruct select1st : public unary_function<Pair, typename Pair::first_type> {\n  const typename Pair::first_type& operator()(const Pair& x) const\n  {\n    return x.first;\n  }\n};\n\n//\u9009\u62e9\u51fd\u6570\uff1a\u63a5\u53d7\u4e00\u4e2apair,\u4f20\u56de\u5176\u7b2c\u4e8c\u5143\u7d20\n//SGI STL\u5e76\u672a\u8fd0\u7528\u6b64\u51fd\u6570\ntemplate <class Pair>\nstruct select2nd : public unary_function<Pair, typename Pair::second_type> {\n  const typename Pair::second_type& operator()(const Pair& x) const\n  {\n    return x.second;\n  }\n};\n\n//\u6295\u5c04\u51fd\u6570\uff1a\u4f20\u56de\u5176\u7b2c\u4e00\u53c2\u6570\uff0c\u5ffd\u7565\u7b2c\u4e8c\u53c2\u6570\ntemplate <class Arg1, class Arg2>\nstruct project1st : public binary_function<Arg1, Arg2, Arg1> {\n  Arg1 operator()(const Arg1& x, const Arg2&) const { return x; }\n};\n\n//\u6295\u5c04\u51fd\u6570\uff1a\u4f20\u56de\u7b2c\u4e8c\u53c2\u6570\uff0c\u5ffd\u7565\u7b2c\u4e00\u53c2\u6570\ntemplate <class Arg1, class Arg2>\nstruct project2nd : public binary_function<Arg1, Arg2, Arg2> {\n  Arg2 operator()(const Arg1&, const Arg2& y) const { return y; }\n};\n\n\u516b.\u9002\u914d\u5668\n\u9002\u914d\u5668\u5728STL\u7ec4\u4ef6\u7684\u7075\u6d3b\u7ec4\u5408\u8fd0\u7528\u529f\u80fd\u4e0a\uff0c\u626e\u6f14\u7740\u8f74\u627f\u3001\u8f6c\u6362\u5668\u7684\u89d2\u8272\nSTL\u6240\u63d0\u4f9b\u7684\u5404\u79cd\u9002\u914d\u5668\u4e2d\uff1a1\uff09\u6539\u53d8\u4eff\u51fd\u6570\u63a5\u53e3\u8005\uff0c\u79f0\u4e3a\u51fd\u6570\u9002\u914d\u5668\uff1b2\uff09\u6539\u53d8\u5bb9\u5668\u63a5\u53e3\u8005\uff0c\u79f0\u4e3a\u5bb9\u5668\u9002\u914d\u5668\uff1b3\uff09\u6539\u53d8\u8fed\u4ee3\u5668\u63a5\u53e3\u8005\uff0c\u79f0\u4e3a\u8fed\u4ee3\u5668\u9002\u914d\u5668\n1.\u5bb9\u5668\u9002\u914d\u5668\nSTL\u63d0\u4f9b\u4e24\u4e2a\u5bb9\u5668\u9002\u914d\u5668\uff1aqueue\u548cstack\uff0c\u5b83\u4eec\u4fee\u9970deque\u7684\u63a5\u53e3\u800c\u751f\u6210\u65b0\u7684\u5bb9\u5668\u98ce\u8c8c\nstack\u7684\u5e95\u5c42\u7531deque\u6784\u6210\u3002stack\u5c01\u9501\u4f4f\u4e86\u6240\u6709\u7684deque\u5bf9\u5916\u63a5\u53e3\uff0c\u53ea\u5f00\u653e\u7b26\u5408stack\u539f\u5219\u7684\u51e0\u4e2a\u51fd\u6570\nqueue\u7684\u5e95\u5c42\u4e5f\u7531deque\u6784\u6210\u3002queue\u5c01\u9501\u4f4f\u4e86\u6240\u6709\u7684deque\u5bf9\u5916\u63a5\u53e3\uff0c\u53ea\u5f00\u653e\u7b26\u5408queue\u539f\u5219\u7684\u51e0\u4e2a\u51fd\u6570\nstack\u548cqueue\u7684\u5177\u4f53\u8be6\u89c1\u7b2c\u56db\u7ae0\n2.\u8fed\u4ee3\u5668\u9002\u914d\u5668\nSTL\u63d0\u4f9b\u4e86\u8bb8\u591a\u5e94\u7528\u4e8e\u8fed\u4ee3\u5668\u8eab\u4e0a\u7684\u9002\u914d\u5668\uff0c\u5305\u62ec\uff1a\n    1. insert iterators\uff1a\u53ef\u4ee5\u5c06\u4e00\u822c\u8fed\u4ee3\u7684\u8d4b\u503c\u64cd\u4f5c\u8f6c\u53d8\u4e3a\u63d2\u5165\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e0b\u9762\u51e0\u4e2a\n        \u25e6 back_insert_iterator\uff1a\u4e13\u95e8\u8d1f\u8d23\u5c3e\u7aef\u7684\u63d2\u5165\u64cd\u4f5c\n        \u25e6 front_insert_iterator\uff1a\u4e13\u95e8\u8d1f\u8d23\u9996\u90e8\u7684\u63d2\u5165\u64cd\u4f5c\n        \u25e6 insert_iterator\uff1a\u53ef\u4ee5\u4ece\u4efb\u610f\u4f4d\u7f6e\u6267\u884c\u63d2\u5165\u64cd\u4f5c\n    \u2022 \u7531\u4e8e\u4e0a\u97623\u4e2a\u8fed\u4ee3\u5668\u7684\u4f7f\u7528\u63a5\u53e3\u4e0d\u662f\u5341\u5206\u76f4\u89c2\uff0c\u56e0\u6b64\uff0cSTL\u63d0\u4f9b\u4e86\u4e09\u4e2a\u76f8\u5e94\u51fd\u6570\u7528\u4ee5\u83b7\u53d6\u76f8\u5e94\u8fed\u4ee3\u5668\uff1a\n    \u2022 \n    2. reverse iterators\uff1a\u53ef\u4ee5\u5c06\u4e00\u822c\u8fed\u4ee3\u5668\u7684\u884c\u8fdb\u65b9\u5411\u53cd\u8f6c\n    3. iostream iterators\uff1a\u53ef\u4ee5\u5c06\u8fed\u4ee3\u5668\u7ed1\u5b9a\u5230\u67d0\u4e2aiostream\u5bf9\u8c61\u8eab\u4e0a\n        \u25e6 \u7ed1\u5b9a\u5230istream\u5bf9\u8c61\u8eab\u4e0a\u7684\uff0c\u79f0\u4e3aistream_iterator\uff0c\u62e5\u6709\u8f93\u5165\u529f\u80fd\n        \u25e6 \u7ed1\u5b9a\u5230ostream\u5bf9\u8c61\u8eab\u4e0a\u7684\uff0c\u79f0\u4e3aostream_iterator\uff0c\u62e5\u6709\u8f93\u51fa\u529f\u80fd\nC++ Standard\u89c4\u5b9a\u5b83\u4eec\u7684\u63a5\u53e3\u53ef\u4ee5\u85c9\u7531\u83b7\u5f97\uff0cSGI STL\u5c06\u5b83\u4eec\u5b9e\u9645\u5b9a\u4e49\u4e8e<stl_iterator.h>\n2.1 insert iterators\ninsert iterators\u5b9e\u73b0\u7684\u4e3b\u8981\u89c2\u5ff5\u662f\uff1a\u6bcf\u4e00\u4e2ainsert iterators\u5185\u90e8\u90fd\u7ef4\u62a4\u6709\u4e00\u4e2a\u5bb9\u5668\uff08\u5fc5\u987b\u7531\u7528\u6237\u6307\u5b9a\uff09\uff1b\u5bb9\u5668\u5f53\u7136\u6709\u81ea\u5df1\u7684\u8fed\u4ee3\u5668\uff0c\u4e8e\u662f\uff0c\u5f53\u5ba2\u6237\u7aef\u5bf9insert iterators\u505a\u8d4b\u503c\u64cd\u4f5c\u65f6\uff0c\u5c31\u5728insert iterators\u4e2d\u88ab\u8f6c\u4e3a\u5bf9\u8be5\u5bb9\u5668\u7684\u8fed\u4ee3\u5668\u505a\u63d2\u5165\u64cd\u4f5c\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u8c03\u7528\u5e95\u5c42\u5bb9\u5668\u7684push_front()\u6216push_back()\u6216insert()\uff09\n\u5176\u5b83\u8fed\u4ee3\u5668\u60ef\u5e38\u7684\u884c\u4e3a\u5982\uff1aoperator++\u3001operator++(int)\u3001operator*\u90fd\u88ab\u5173\u95ed\uff0c\u66f4\u6ca1\u6709\u63d0\u4f9boperator\u2013\u6216operator\u2013(int)\u6216operator->\u7b49\u529f\u80fd\uff0c\u56e0\u6b64\u7c7b\u578b\u88ab\u5b9a\u4e49\u4e3aoutput_iterator_tag\n1\uff09back_insert_iterator\ntemplate <class Container>\nclass back_insert_iterator {\nprotected:\n  Container* container; //\u5e95\u5c42\u5bb9\u5668\npublic:\n  typedef output_iterator_tag iterator_category;    //\u8fed\u4ee3\u5668\u7c7b\u578b\n  typedef void                value_type;\n  typedef void                difference_type;\n  typedef void                pointer;\n  typedef void                reference;\n\n  //\u6784\u9020\u51fd\u6570\u3002\u4f20\u5165\u4e00\u4e2a\u5bb9\u5668\uff0c\u4f7fback_insert_iterator\u4e0e\u5bb9\u5668\u7ed1\u5b9a\u8d77\u6765\n  explicit back_insert_iterator(Container& x) : container(&x) {}\n  //\u8d4b\u503c\u64cd\u4f5c\n  back_insert_iterator<Container>&\n  operator=(const typename Container::value_type& value) { \n    container->push_back(value);  //\u8d4b\u503c\u64cd\u4f5c\u7684\u5173\u952e\u662f\u8f6c\u8c03\u7528\u5bb9\u5668\u7684push_back()\n    return *this;\n  }\n  //\u4ee5\u4e0b3\u4e2a\u64cd\u4f5c\u5bf9back_insert_iterator\u4e0d\u8d77\u4f5c\u7528\uff08\u5173\u95ed\u529f\u80fd\uff09\n  //\u4e09\u4e2a\u64cd\u4f5c\u7b26\u8fd4\u56de\u7684\u90fd\u662fback_insert_iterator\u81ea\u5df1\n  back_insert_iterator<Container>& operator*() { return *this; }\n  back_insert_iterator<Container>& operator++() { return *this; }\n  back_insert_iterator<Container>& operator++(int) { return *this; }\n};\n\n//\u8fd9\u662f\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570\uff0c\u5e2e\u52a9\u6211\u4eec\u65b9\u4fbf\u4f7f\u7528back_insert_iterator\ntemplate <class Container>\ninline back_insert_iterator<Container> back_inserter(Container& x) {\n  return back_insert_iterator<Container>(x);\n}\n2\uff09front_insert_iterator\ntemplate <class Container>\nclass front_insert_iterator {\nprotected:\n  Container* container; //\u5e95\u5c42\u5bb9\u5668\npublic:\n  typedef output_iterator_tag iterator_category;   //\u8fed\u4ee3\u5668\u7c7b\u578b\n  typedef void                value_type;\n  typedef void                difference_type;\n  typedef void                pointer;\n  typedef void                reference;\n\n  //\u6784\u9020\u51fd\u6570\u3002\u4f20\u5165\u4e00\u4e2a\u5bb9\u5668\uff0c\u4f7ffront_insert_iterator\u4e0e\u5bb9\u5668\u7ed1\u5b9a\u8d77\u6765\n  explicit front_insert_iterator(Container& x) : container(&x) {}\n  //\u8d4b\u503c\u64cd\u4f5c\n  front_insert_iterator<Container>&\n  operator=(const typename Container::value_type& value) { \n    container->push_front(value);  //\u8d4b\u503c\u64cd\u4f5c\u7684\u5173\u952e\u662f\u8f6c\u8c03\u7528\u5bb9\u5668\u7684push_front()\n    return *this;\n  }\n  //\u4ee5\u4e0b3\u4e2a\u64cd\u4f5c\u5bf9front_insert_iterator\u4e0d\u8d77\u4f5c\u7528\uff08\u5173\u95ed\u529f\u80fd\uff09\n  //\u4e09\u4e2a\u64cd\u4f5c\u7b26\u8fd4\u56de\u7684\u90fd\u662ffront_insert_iterator\u81ea\u5df1\n  front_insert_iterator<Container>& operator*() { return *this; }\n  front_insert_iterator<Container>& operator++() { return *this; }\n  front_insert_iterator<Container>& operator++(int) { return *this; }\n};\n\n//\u8fd9\u662f\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570\uff0c\u5e2e\u52a9\u6211\u4eec\u65b9\u4fbf\u4f7f\u7528front_insert_iterator\ntemplate <class Container>\ninline front_insert_iterator<Container> front_inserter(Container& x) {\n  return front_insert_iterator<Container>(x);\n}\n3\uff09insert_iterator\ntemplate <class Container>\nclass insert_iterator {\nprotected:\n  Container* container;                 //\u5e95\u5c42\u5bb9\u5668\n  typename Container::iterator iter;    //\u5e95\u5c42\u5bb9\u5668\u7684\u8fed\u4ee3\u5668\uff08\u524d2\u4e2a\u63d2\u5165\u8fed\u4ee3\u5668\u6ca1\u6709\uff09\npublic:\n  typedef output_iterator_tag iterator_category;    //\u8fed\u4ee3\u5668\u7c7b\u578b\n  typedef void                value_type;\n  typedef void                difference_type;\n  typedef void                pointer;\n  typedef void                reference;\n\n  //\u6784\u9020\u51fd\u6570\u3002\u4f20\u5165\u4e00\u4e2a\u5bb9\u5668\uff0c\u4f7finsert_iterator\u4e0e\u5bb9\u5668\u548c\u5bb9\u5668\u8fed\u4ee3\u5668\u7ed1\u5b9a\u8d77\u6765\n  insert_iterator(Container& x, typename Container::iterator i) \n    : container(&x), iter(i) {}\n  //\u8d4b\u503c\u64cd\u4f5c\n  insert_iterator<Container>&\n  operator=(const typename Container::value_type& value) { \n    iter = container->insert(iter, value);  //\u8d4b\u503c\u64cd\u4f5c\u7684\u5173\u952e\u662f\u8f6c\u8c03\u7528\u5bb9\u5668\u7684insert()\n    ++iter; //\u4f7finsert iterator\u6c38\u8fdc\u968f\u5176\u76ee\u6807\u8d34\u8eab\u79fb\u52a8\n    return *this;\n  }\n  //\u4ee5\u4e0b3\u4e2a\u64cd\u4f5c\u5bf9insert_iterator\u4e0d\u8d77\u4f5c\u7528\uff08\u5173\u95ed\u529f\u80fd\uff09\n  //\u4e09\u4e2a\u64cd\u4f5c\u7b26\u8fd4\u56de\u7684\u90fd\u662finsert_iterator\u81ea\u5df1\n  insert_iterator<Container>& operator*() { return *this; }\n  insert_iterator<Container>& operator++() { return *this; }\n  insert_iterator<Container>& operator++(int) { return *this; }\n};\n\n//\u8fd9\u662f\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570\uff0c\u5e2e\u52a9\u6211\u4eec\u65b9\u4fbf\u4f7f\u7528insert_iterator\n//\u548c\u524d2\u4e2a\u63d2\u5165\u8fed\u4ee3\u5668\u4e0d\u5bb9\uff0c\u8fd9\u91cc\u8fd8\u9700\u989d\u5916\u4f20\u5165\u4e00\u4e2a\u5e95\u5c42\u5bb9\u5668\u7684\u8fed\u4ee3\u5668\ntemplate <class Container, class Iterator>\ninline insert_iterator<Container> inserter(Container& x, Iterator i) {\n  typedef typename Container::iterator iter;\n  return insert_iterator<Container>(x, iter(i));\n}\n2.2 reverse iterators\n\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u53cc\u5411\u987a\u5e8f\u5bb9\u5668\u8c03\u7528rbegin()\uff0c\u548crend()\u6765\u83b7\u53d6\u76f8\u5e94\u7684\u9006\u5411\u8fed\u4ee3\u5668\u3002\u53ea\u8981\u53cc\u5411\u987a\u5e8f\u5bb9\u5668\u63d0\u4f9b\u4e86begin(),end()\uff0c\u5b83\u7684rbegin()\u548crend()\u5c31\u5982\u540c\u4e0b\u9762\u7684\u5f62\u5f0f\u3002\u5355\u5411\u987a\u5e8f\u5bb9\u5668slist\u4e0d\u53ef\u4f7f\u7528reserve iterators\u3002\u6709\u4e9b\u5bb9\u5668\u5982stack\u3001queue\u3001priority_queue\u5e76\u4e0d\u63d0\u4f9bbegin()\uff0cend()\uff0c\u5f53\u7136\u4e5f\u5c31\u6ca1\u6709rbegin()\u548crend()\uff1a\ntemplate <class T, class Alloc = alloc>\nclass vector {\npublic:\n  typedef T value_type;\n  typedef value_type* iterator; //\u5bb9\u5668\u8fed\u4ee3\u5668\u7c7b\u578b\n  typedef reverse_iterator<iterator> reverse_iterator; //\u9006\u5411\u8fed\u4ee3\u5668\u7c7b\u578b\n  reverse_iterator rbegin() { return reverse_iterator(end()); }\n  reverse_iterator rend() { return reverse_iterator(begin()); }\n...\n};\n\ntemplate <class T, class Alloc = alloc>\nclass list {\npublic:\n    typedef __list_iterator<T, T&, T*>   iterator; //\u5bb9\u5668\u8fed\u4ee3\u5668\u7c7b\u578b\n    typedef reverse_iterator<iterator> reverse_iterator;  //\u9006\u5411\u8fed\u4ee3\u5668\u7c7b\u578b\n    reverse_iterator rbegin() { return reverse_iterator(end()); }\n    reverse_iterator rend() { return reverse_iterator(begin()); }\n...\n};\n\ntemplate <class T, class Alloc = alloc, size_t BufSiz = 0> \nclass deque {\npublic:\n    typedef __deque_iterator<T, T&, T*, BufSiz>   iterator;  //\u5bb9\u5668\u8fed\u4ee3\u5668\u7c7b\u578b\n    typedef reverse_iterator<iterator> reverse_iterator; //\u9006\u5411\u8fed\u4ee3\u5668\u7c7b\u578b\n    iterator begin() { return start; }\n    iterator end() { return finish; }\n    reverse_iterator rbegin() { return reverse_iterator(finish); }\n    reverse_iterator rend() { return reverse_iterator(start); }\n\u6b63\u5411\u8fed\u4ee3\u5668\u548c\u9006\u5411\u8fed\u4ee3\u5668\u7684\u903b\u8f91\u4f4d\u7f6e\u5982\u4e0b\u56fe\uff1a\n\n\u5177\u6709\u8fd9\u6837\u7684\u903b\u8f91\u4f4d\u7f6e\u5173\u7cfb\uff0c\u5f53\u6211\u4eec\u5c06\u4e00\u4e2a\u6b63\u5411\u8fed\u4ee3\u5668\u533a\u95f4\u8f6c\u6362\u4e3a\u4e00\u4e2a\u9006\u5411\u8fed\u4ee3\u5668\u533a\u95f4\u540e\uff0c\u4e0d\u5fc5\u518d\u6709\u4efb\u4f55\u989d\u5916\u5904\u7406\uff0c\u5c31\u53ef\u4ee5\u8ba9\u63a5\u53d7\u8fd9\u4e2a\u9006\u5411\u8fed\u4ee3\u5668\u533a\u95f4\u7684\u7b97\u6cd5\uff0c\u4ee5\u76f8\u53cd\u7684\u5143\u7d20\u6b21\u5e8f\u5904\u7406\u533a\u95f4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\nreverse_iterator\u5b9e\u73b0\u5982\u4e0b\uff1a\ntemplate <class Iterator>\nclass reverse_iterator \n{\nprotected:\n  Iterator current; //\u5bf9\u5e94\u7684\u6b63\u5411\u8fed\u4ee3\u5668\npublic:\n  //\u8fed\u4ee3\u5668\u76845\u79cd\u76f8\u5e94\u7c7b\u578b\u90fd\u548c\u5176\u5bf9\u5e94\u7684\u6b63\u5411\u8fed\u4ee3\u5668\u76f8\u540c\n  typedef typename iterator_traits<Iterator>::iterator_category\n          iterator_category;\n  typedef typename iterator_traits<Iterator>::value_type\n          value_type;\n  typedef typename iterator_traits<Iterator>::difference_type\n          difference_type;\n  typedef typename iterator_traits<Iterator>::pointer\n          pointer;\n  typedef typename iterator_traits<Iterator>::reference\n          reference;\n\n  typedef Iterator iterator_type;              //\u4ee3\u8868\u6b63\u5411\u8fed\u4ee3\u5668\n  typedef reverse_iterator<Iterator> self;     //\u4ee3\u8868\u9006\u5411\u8fed\u4ee3\u5668\n\npublic:\n  reverse_iterator() {}\n  //\u4e0b\u9762\u8fd9\u4e2a\u6784\u9020\u51fd\u6570\u5c06\u9006\u5411\u8fed\u4ee3\u5668\u4e0e\u6b63\u5411\u8fed\u4ee3\u5668x\u5173\u8054\u8d77\u6765\n  explicit reverse_iterator(iterator_type x) : current(x) {}\n  reverse_iterator(const self& x) : current(x.current) {}\n  \n  //base()\u6210\u5458\u51fd\u6570\u8fd4\u56de\u76f8\u5e94\u7684\u6b63\u5411\u8fed\u4ee3\u5668\n  iterator_type base() const { return current; }\n\n  //\u5bf9\u9006\u5411\u8fed\u4ee3\u5668\u53d6\u503c\uff0c\u5c31\u662f\u5c06\u201c\u5bf9\u5e94\u7684\u6b63\u5411\u8fed\u4ee3\u5668\u201d\u540e\u9000\u4e00\u6b65\u540e\u53d6\u503c\xdf\xdf\xdf\xdf\n  reference operator*() const {\n    Iterator tmp = current;\n    return *--tmp;\n  }\n\n  //\u524d\u7f6e++\uff0c++\u53d8\u4e3a--\n  self& operator++() {\n    --current;\n    return *this;\n  }\n  //\u540e\u7f6e++\uff0c++\u53d8--\n  self operator++(int) {\n    self tmp = *this;\n    --current;\n    return tmp;\n  }\n  //\u524d\u7f6e--\uff0c--\u53d8++\n  self& operator--() {\n    ++current;\n    return *this;\n  }\n  //\u540e\u7f6e--\uff0c--\u53d8++\n  self operator--(int) {\n    self tmp = *this;\n    ++current;\n    return tmp;\n  }\n\n  //\u524d\u8fdb\u4e0e\u540e\u9000\u65b9\u5411\u5b8c\u5168\u9006\u8f6c\n  self operator+(difference_type n) const {\n    return self(current - n);\n  }\n  self& operator+=(difference_type n) {\n    current -= n;\n    return *this;\n  }\n  self operator-(difference_type n) const {\n    return self(current + n);\n  }\n  self& operator-=(difference_type n) {\n    current += n;\n    return *this;\n  }\n  //\u7b2c\u4e00\u4e2a*\u4f1a\u8c03\u7528\u672c\u7c7b\u7684operator*\uff0c\u7b2c\u4e8c\u4e2a\u4e0d\u4f1a\n  reference operator[](difference_type n) const { return *(*this + n); }  \n}; \n2.3 iostream iterators\n1\uff09istream_iterator\n\u6240\u8c13\u7ed1\u5b9a\u4e00\u4e2aistream object\uff0c\u5176\u5b9e\u5c31\u662f\u5728istream iterator\u5185\u90e8\u7ef4\u62a4\u4e00\u4e2aistream member\uff0c\u5ba2\u6237\u7aef\u5bf9\u4e8e\u8fd9\u4e2a\u8fed\u4ee3\u5668\u6240\u505a\u7684operator++\u64cd\u4f5c\uff0c\u4f1a\u88ab\u5f15\u5bfc\u8c03\u7528\u8fed\u4ee3\u5668\u5185\u90e8\u6240\u542b\u7684\u90a3\u4e2aistream member\u7684\u8f93\u5165\u64cd\u4f5c(operator>>)\u3002\u8fd9\u4e2a\u8fed\u4ee3\u5668\u662f\u4e2ainput iterator\uff0c\u4e0d\u5177\u5907operator\u2013\n//\u6b64\u7248\u672c\u662f\u65e7\u6709\u7684HP\u89c4\u683c\uff0c\u672a\u7b26\u5408\u6807\u51c6\u63a5\u53e3\uff1aistream_iterator<T,charT,traits,Distance>\n//\u7136\u800c\u4e00\u822c\u4f7f\u7528input iterators\u65f6\u90fd\u53ea\u4f7f\u7528\u7b2c\u4e00\u4e2atemplate\u53c2\u6570\u3001\u6b64\u65f6\u4ee5\u4e0b\u4ecd\u9002\u7528\n//SGI STL 3.3\u5df2\u5b9e\u73b0\u51fa\u7b26\u5408\u6807\u51c6\u63a5\u53e3\u7684istream_iterator\uff0c\u505a\u6cd5\u4e0e\u672c\u7248\u5927\u540c\u5c0f\u5f02\ntemplate <class T, class Distance = ptrdiff_t> \nclass istream_iterator {\n  friend bool\n  operator== __STL_NULL_TMPL_ARGS (const istream_iterator<T, Distance>& x,\n                                   const istream_iterator<T, Distance>& y);\nprotected:\n  istream* stream;\n  T value;\n  bool end_marker;\n  void read() {\n    end_marker = (*stream) ? true : false;\n    if (end_marker) *stream >> value;       //\u5173\u952e\n    //\u8f93\u5165\u540e\uff0cstream\u7684\u72b6\u6001\u53ef\u80fd\u6539\u53d8\uff0c\u6240\u4ee5\u4e0b\u9762\u518d\u5224\u65ad\u4e00\u6b21\u4ee5\u51b3\u5b9aend_marker\n    //\u5f53\u8bfb\u5230eof\u6216\u8bfb\u5230\u7c7b\u578b\u4e0d\u7b26\u7684\u6570\u636e\uff0cstream\u5373\u5904\u4e8efalse\u72b6\u6001\n    end_marker = (*stream) ? true : false;\n  }\npublic:\n  typedef input_iterator_tag iterator_category; //\u8fed\u4ee3\u5668\u7c7b\u578b\n  typedef T                  value_type;\n  typedef Distance           difference_type;\n  typedef const T*           pointer;\n  typedef const T&           reference;\n\n  istream_iterator() : stream(&cin), end_marker(false) {}\n  istream_iterator(istream& s) : stream(&s) { read(); }\n  //\u4ee5\u4e0a\u4e24\u884c\u7684\u7528\u6cd5\uff1a\n  // istream_iterator<int> eos;         \u9020\u6210end_marker\u4e3afalse\n  // istream_iterator<int> initer(cin)  \u5f15\u53d1read()\uff0c\u7a0b\u5e8f\u81f3\u6b64\u4f1a\u7b49\u5f85\u8f93\u5165\n  \n  reference operator*() const { return value; }\n  pointer operator->() const { return &(operator*()); }\n\n  //\u8fed\u4ee3\u5668\u524d\u8fdb\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u4ee3\u8868\u8981\u8bfb\u53d6\u4e00\u6b21\u6570\u636e\n  istream_iterator<T, Distance>& operator++() { \n    read(); \n    return *this;\n  }\n  istream_iterator<T, Distance> operator++(int)  {\n    istream_iterator<T, Distance> tmp = *this;\n    read();\n    return tmp;\n  }\n};\n\u4e0b\u56fe\u5c55\u793a\u4e86copy()\u548cistream_iterator\u5171\u540c\u5408\u4f5c\u7684\u4f8b\u5b50\uff1a\n\n2\uff09ostream_iterator\n\u6240\u8c13\u7ed1\u5b9a\u4e00\u4e2aostream object\uff0c\u5176\u5b9e\u5c31\u662f\u5728o\xdfstream iterator\u5185\u90e8\u7ef4\u62a4\u4e00\u4e2aostream member\uff0c\u5ba2\u6237\u7aef\u5bf9\u4e8e\u8fd9\u4e2a\u8fed\u4ee3\u5668\u6240\u505a\u7684operator=\u64cd\u4f5c\uff0c\u4f1a\u88ab\u5f15\u5bfc\u8c03\u7528\u8fed\u4ee3\u5668\u5185\u90e8\u6240\u542b\u7684\u90a3\u4e2aostream member\u7684\u8f93\u51fa\u64cd\u4f5c(operator<<)\u3002\u8fd9\u4e2a\u8fed\u4ee3\u5668\u662f\u4e2aOnput iterator\n//\u6b64\u7248\u672c\u662f\u65e7\u6709\u7684HP\u89c4\u683c\uff0c\u672a\u7b26\u5408\u6807\u51c6\u63a5\u53e3\uff1aistream_iterator<T,charT,traits>\n//\u7136\u800c\u4e00\u822c\u4f7f\u7528onput iterators\u65f6\u90fd\u53ea\u4f7f\u7528\u7b2c\u4e00\u4e2atemplate\u53c2\u6570\u3001\u6b64\u65f6\u4ee5\u4e0b\u4ecd\u9002\u7528\n//SGI STL 3.3\u5df2\u5b9e\u73b0\u51fa\u7b26\u5408\u6807\u51c6\u63a5\u53e3\u7684ostream_iterator\uff0c\u505a\u6cd5\u4e0e\u672c\u7248\u5927\u540c\u5c0f\u5f02\ntemplate <class T>\nclass ostream_iterator {\nprotected:\n  ostream* stream;\n  const char* string;   //\u6bcf\u6b21\u8f93\u51fa\u540e\u7684\u95f4\u9694\u7b26\u53f7\npublic:\n  typedef output_iterator_tag iterator_category;    //\u8fed\u4ee3\u5668\u7c7b\u578b\n  typedef void                value_type;\n  typedef void                difference_type;\n  typedef void                pointer;\n  typedef void                reference;\n\n  ostream_iterator(ostream& s) : stream(&s), string(0) {}\n  ostream_iterator(ostream& s, const char* c) : stream(&s), string(c)  {}\n  //\u5bf9\u8fed\u4ee3\u5668\u505a\u8d4b\u503c\u64cd\u4f5c\uff0c\u5c31\u4ee3\u8868\u8981\u8f93\u51fa\u4e00\u7b14\u6570\u636e\n  ostream_iterator<T>& operator=(const T& value) { \n    *stream << value;               //\u5173\u952e\uff0c\u8f93\u51fa\u6570\u503c\n    if (string) *stream << string;  //\u5982\u679c\u95f4\u9694\u7b26\u53f7\u4e0d\u4e3a\u7a7a\uff0c\u8f93\u51fa\u95f4\u9694\u7b26\u53f7\n    return *this;\n  }\n  ostream_iterator<T>& operator*() { return *this; }\n  ostream_iterator<T>& operator++() { return *this; } \n  ostream_iterator<T>& operator++(int) { return *this; } \n};\n\u4e0b\u56fe\u5c55\u793a\u4e86copy()\u548costream_iterator\u5171\u540c\u5408\u4f5c\u7684\u4f8b\u5b50\uff1a\n\n3.\u51fd\u6570\u9002\u914d\u5668\n\u51fd\u6570\u9002\u914d\u5668(functor adapters\uff0c\u4ea6\u5373function adapters)\u662f\u6240\u6709\u9002\u914d\u5668\u4e2d\u6570\u91cf\u6700\u5e9e\u5927\u7684\u4e00\u4e2a\u65cf\u7fa4\uff0c\u5176\u9002\u914d\u7075\u6d3b\u5ea6\u4e5f\u662f\u524d2\u8005\u6240\u4e0d\u80fd\u53ca\uff0c\u53ef\u4ee5\u9002\u914d\u3001\u9002\u914d\u3001\u518d\u9002\u914d\n\u51fd\u6570\u9002\u914d\u5668\u7684\u4ef7\u503c\uff1a\u901a\u8fc7\u5b83\u4eec\u4e4b\u95f4\u7684\u7ed1\u5b9a\u3001\u7ec4\u5408\u3001\u4fee\u9970\u80fd\u529b\uff0c\u51e0\u4e4e\u53ef\u4ee5\u65e0\u9650\u5236\u5730\u521b\u9020\u51fa\u5404\u79cd\u53ef\u80fd\u7684\u8868\u8fbe\u5f0f\uff0c\u642d\u914dSTL\u7b97\u6cd5\u4e00\u8d77\u6f14\u51fa\u3002\u4e0b\u8868\u662fSTL\u51fd\u6570\u9002\u914d\u5668\u4e00\u89c8\u8868\uff1a\n\n\u9002\u914d\u64cd\u4f5c\u5305\u62ec\uff1a\n    \u2022 bind\u3001negate\u3001compose\n    \u2022 \u5bf9\u4e00\u822c\u51fd\u6570\u6216\u6210\u5458\u51fd\u6570\u7684\u4fee\u9970\nC++\u6807\u51c6\u89c4\u5b9a\uff0c\u8fd9\u4e9b\u9002\u914d\u5668\u7684\u63a5\u53e3\u53ef\u7531<functional>\u83b7\u5f97\uff0cSGI STL\u5c06\u5b83\u4eec\u5b9a\u4e49\u4e8e<stl_function.h>\n\u6ce8\u610f\uff0c\u6240\u6709\u671f\u671b\u83b7\u5f97\u9002\u914d\u80fd\u529b\u7684\u7ec4\u4ef6\uff0c\u672c\u8eab\u90fd\u5fc5\u987b\u662f\u53ef\u9002\u914d\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c1\uff09\u4e00\u5143\u4eff\u51fd\u6570\u5fc5\u987b\u7ee7\u627f\u81eaunary_function\uff1b2\uff09\u4e8c\u5143\u4eff\u51fd\u6570\u5fc5\u987b\u7ee7\u627f\u81eabinary_function\uff1b3\uff09\u6210\u5458\u51fd\u6570\u5fc5\u987b\u4ee5mem_fun\u5904\u7406\u8fc7\uff1b4\uff09\u4e00\u822c\u51fd\u6570\u5fc5\u987b\u4ee5ptr_fun\u5904\u7406\u8fc7\u3002\u4e00\u4e2a\u672a\u7ecfptr_fun\u5904\u7406\u8fc7\u7684\u4e00\u822c\u51fd\u6570\uff0c\u867d\u7136\u4e5f\u80fd\u4ee5\u51fd\u6570\u6307\u9488\u7684\u5f62\u5f0f\u4f20\u7ed9STL\u7b97\u6cd5\u4f7f\u7528\uff0c\u5374\u65e0\u6cd5\u62e5\u6709\u4efb\u4f55\u9002\u914d\u80fd\u529b\n\u4e0b\u56fe\u662fcount_if()\u548cbind2nd(less(),12)\u7684\u642d\u914d\u5b9e\u4f8b\uff1b\n\n3.1 not1\u548cnot2\n1\uff09not1\n//\u4ee5\u4e0b\u9002\u914d\u5668\u7528\u6765\u8868\u793a\u67d0\u4e2a "\u53ef\u9002\u914d predicate" \u7684\u903b\u8f91\u8d1f\u503c\ntemplate <class Predicate>\nclass unary_negate\n  : public unary_function<typename Predicate::argument_type, bool> {\nprotected:\n  Predicate pred;   //\u5185\u90e8\u6210\u5458\npublic:\n  explicit unary_negate(const Predicate& x) : pred(x) {}\n  bool operator()(const typename Predicate::argument_type& x) const {\n    return !pred(x); //\u5c06pred\u7684\u8fd0\u7b97\u7ed3\u679c\u52a0\u4e0a\u5426\u5b9a\u8fd0\u7b97\n  }\n};\n\n//\u8f85\u52a9\u51fd\u6570\uff0c\u4f7f\u6211\u4eec\u5f97\u4ee5\u66f4\u65b9\u4fbf\u4f7f\u7528unary_negate\ntemplate <class Predicate>\ninline unary_negate<Predicate> not1(const Predicate& pred) {\n  return unary_negate<Predicate>(pred);\n}\n2\uff09not2\n//\u4ee5\u4e0b\u9002\u914d\u5668\u7528\u6765\u8868\u793a\u67d0\u4e2a "\u53ef\u9002\u914d binary predicate" \u7684\u903b\u8f91\u8d1f\u503c\ntemplate <class Predicate> \nclass binary_negate \n  : public binary_function<typename Predicate::first_argument_type,\n                           typename Predicate::second_argument_type,\n                           bool> {\nprotected:\n  Predicate pred;   //\u5185\u90e8\u6210\u5458\npublic:\n  explicit binary_negate(const Predicate& x) : pred(x) {}\n  bool operator()(const typename Predicate::first_argument_type& x, \n                  const typename Predicate::second_argument_type& y) const {\n    return !pred(x, y);  //\u5c06pred\u7684\u8fd0\u7b97\u7ed3\u679c\u52a0\u4e0a\u5426\u5b9a\u8fd0\u7b97\n  }\n};\n\n//\u8f85\u52a9\u51fd\u6570\uff0c\u4f7f\u6211\u4eec\u5f97\u4ee5\u66f4\u65b9\u4fbf\u4f7f\u7528binary_negate\ntemplate <class Predicate>\ninline binary_negate<Predicate> not2(const Predicate& pred) {\n  return binary_negate<Predicate>(pred);\n}\n3.2 bind1st\u548cbind2st\n1\uff09bind1st\n//\u4ee5\u4e0b\u9002\u914d\u5668\u7528\u6765\u8868\u793a\u67d0\u4e2a "\u53ef\u9002\u914d binary function" \u8f6c\u6362\u4e3a \u201cunary function\u201d\ntemplate <class Operation> \nclass binder1st\n  : public unary_function<typename Operation::second_argument_type,\n                          typename Operation::result_type> {\nprotected:\n  Operation op;     //\u5185\u90e8\u6210\u5458\n  typename Operation::first_argument_type value;    //\u5185\u90e8\u6210\u5458\npublic:\n  binder1st(const Operation& x,\n            const typename Operation::first_argument_type& y)\n      : op(x), value(y) {}  //\u5c06\u8868\u8fbe\u5f0f\u548c\u7b2c\u4e00\u53c2\u6570\u8bb0\u5f55\u4e8e\u5185\u90e8\u6210\u5458\n  typename Operation::result_type\n  operator()(const typename Operation::second_argument_type& x) const {\n    return op(value, x);    //\u5b9e\u9645\u8c03\u7528\u8868\u8fbe\u5f0f\uff0c\u5e76\u5c06value\u7ed1\u5b9a\u4e3a\u7b2c\u4e00\u53c2\u6570\n  }\n};\n\n//\u8f85\u52a9\u51fd\u6570\uff0c\u4f7f\u6211\u4eec\u5f97\u4ee5\u66f4\u65b9\u4fbf\u4f7f\u7528binder1st\ntemplate <class Operation, class T>\ninline binder1st<Operation> bind1st(const Operation& op, const T& x) {\n  //\u5148\u628ax\u8f6c\u578b\u4e3aop\u7684\u7b2c\u4e00\u53c2\u6570\u7c7b\u578b\n  typedef typename Operation::first_argument_type arg1_type;\n  return binder1st<Operation>(op, arg1_type(x));\n}\n2\uff09bind2st\n//\u4ee5\u4e0b\u9002\u914d\u5668\u7528\u6765\u8868\u793a\u67d0\u4e2a "\u53ef\u9002\u914d binary function" \u8f6c\u6362\u4e3a \u201cunary function\u201d\ntemplate <class Operation> \nclass binder2nd\n  : public unary_function<typename Operation::first_argument_type,\n                          typename Operation::result_type> {\nprotected:\n  Operation op;     //\u5185\u90e8\u6210\u5458\n  typename Operation::second_argument_type value;   //\u5185\u90e8\u6210\u5458\npublic:\n  binder2nd(const Operation& x,\n            const typename Operation::second_argument_type& y) \n      : op(x), value(y) {}  //\u5c06\u8868\u8fbe\u5f0f\u548c\u7b2c\u4e8c\u53c2\u6570\u8bb0\u5f55\u4e8e\u5185\u90e8\u6210\u5458\n  typename Operation::result_type\n  operator()(const typename Operation::first_argument_type& x) const {\n    return op(x, value);  //\u5b9e\u9645\u8c03\u7528\u8868\u8fbe\u5f0f\uff0c\u5e76\u5c06value\u7ed1\u5b9a\u4e3a\u7b2c\u4e8c\u53c2\u6570\n  }\n};\n\n//\u8f85\u52a9\u51fd\u6570\uff0c\u4f7f\u6211\u4eec\u5f97\u4ee5\u66f4\u65b9\u4fbf\u4f7f\u7528binder2nd\ntemplate <class Operation, class T>\ninline binder2nd<Operation> bind2nd(const Operation& op, const T& x) {\n  //\u5148\u628ax\u8f6c\u578b\u4e3aop\u7684\u7b2c\u4e00\u53c2\u6570\u7c7b\u578b\n  typedef typename Operation::second_argument_type arg2_type;\n  return binder2nd<Operation>(op, arg2_type(x));\n}\n3.3 compose1\u548ccompose2\n1\uff09compose1\n//\u5df2\u77e5\u4e24\u4e2a "\u53ef\u9002\u914d unary function" f(),g()\uff0c\u4ee5\u4e0b\u9002\u914d\u5668\u7528\u6765\u4ea7\u751f\u4e00\u4e2ah()\uff0c\n//\u4f7f h(x) = f(g(x))\ntemplate <class Operation1, class Operation2>\nclass unary_compose : public unary_function<typename Operation2::argument_type,\n                                            typename Operation1::result_type> {\nprotected:\n  Operation1 op1;   //\u5185\u90e8\u6210\u5458\n  Operation2 op2;   //\u5185\u90e8\u6210\u5458\npublic:\n  //\u6784\u9020\u51fd\u6570\uff0c\u5c06\u4e24\u4e2a\u8868\u8fbe\u5f0f\u8bb0\u5f55\u4e8e\u5185\u90e8\u6210\u5458\n  unary_compose(const Operation1& x, const Operation2& y) : op1(x), op2(y) {}\n  \n  typename Operation1::result_type\n  operator()(const typename Operation2::argument_type& x) const {\n    return op1(op2(x));     //\u51fd\u6570\u5408\u6210\n  }\n};\n\n//\u8f85\u52a9\u51fd\u6570\uff0c\u8ba9\u6211\u4eec\u5f97\u4ee5\u65b9\u4fbf\u8fd0\u7528unary_compose\ntemplate <class Operation1, class Operation2>\ninline unary_compose<Operation1, Operation2> compose1(const Operation1& op1, \n                                                      const Operation2& op2) {\n  return unary_compose<Operation1, Operation2>(op1, op2);\n}\n2\uff09compose2\n//\u5df2\u77e5\u4e00\u4e2a \u201c\u53ef\u9002\u914d binary function\u201d f \u548c \u4e24\u4e2a "\u53ef\u9002\u914d unary function" g1,g2\uff0c\n//\u4ee5\u4e0b\u9002\u914d\u5668\u7528\u6765\u4ea7\u751f\u4e00\u4e2ah\uff0c\u4f7f h(x) = f(g1(x),g2(x))\ntemplate <class Operation1, class Operation2, class Operation3>\nclass binary_compose\n  : public unary_function<typename Operation2::argument_type,\n                          typename Operation1::result_type> {\nprotected:\n  Operation1 op1;   //\u5185\u90e8\u6210\u5458\n  Operation2 op2;   //\u5185\u90e8\u6210\u5458\n  Operation3 op3;   //\u5185\u90e8\u6210\u5458\npublic:\n  //\u6784\u9020\u51fd\u6570\uff0c\u5c06\u4e09\u4e2a\u8868\u8fbe\u5f0f\u8bb0\u5f55\u4e8e\u5185\u90e8\u6210\u5458\n  binary_compose(const Operation1& x, const Operation2& y, \n                 const Operation3& z) : op1(x), op2(y), op3(z) { }\n  typename Operation1::result_type\n  operator()(const typename Operation2::argument_type& x) const {\n    return op1(op2(x), op3(x));     //\u51fd\u6570\u5408\u6210\n  }\n};\n\n//\u8f85\u52a9\u51fd\u6570\uff0c\u8ba9\u6211\u4eec\u5f97\u4ee5\u65b9\u4fbf\u8fd0\u7528binary_compose\ntemplate <class Operation1, class Operation2, class Operation3>\ninline binary_compose<Operation1, Operation2, Operation3> \ncompose2(const Operation1& op1, const Operation2& op2, const Operation3& op3) {\n  return binary_compose<Operation1, Operation2, Operation3>(op1, op2, op3);\n}\n3.4 \u7528\u4e8e\u51fd\u6570\u6307\u9488\u7684ptr_fun\n//\u4ee5\u4e0b\u9002\u914d\u5668\u5176\u5b9e\u5c31\u662f\u628a\u4e00\u4e2a\u4e00\u5143\u51fd\u6570\u6307\u9488\u5305\u8d77\u6765\n//\u5f53\u4eff\u51fd\u6570\u88ab\u52a8\u8c03\u7528\u65f6\uff0c\u5c31\u8c03\u7528\u8be5\u51fd\u6570\u6307\u9488\ntemplate <class Arg, class Result>\nclass pointer_to_unary_function : public unary_function<Arg, Result> {\nprotected:\n  Result (*ptr)(Arg);   //\u5185\u90e8\u6210\u5458\uff0c\u4e00\u4e2a\u51fd\u6570\u6307\u9488\npublic:\n  pointer_to_unary_function() {}\n  //\u6784\u9020\u51fd\u6570\uff0c\u5c06\u51fd\u6570\u6307\u9488\u8bb0\u5f55\u4e8e\u5185\u90e8\u6210\u5458\u4e2d\n  explicit pointer_to_unary_function(Result (*x)(Arg)) : ptr(x) {}\n  //\u901a\u8fc7\u51fd\u6570\u6307\u9488\u6307\u5411\u51fd\u6570\n  Result operator()(Arg x) const { return ptr(x); }\n};\n\n//\u8f85\u52a9\u51fd\u6570\uff0c\u8ba9\u6211\u4eec\u5f97\u4ee5\u65b9\u4fbf\u4f7f\u7528pointer_to_unary_function \ntemplate <class Arg, class Result>\ninline pointer_to_unary_function<Arg, Result> ptr_fun(Result (*x)(Arg)) {\n  return pointer_to_unary_function<Arg, Result>(x);\n}\n\n//\u4ee5\u4e0b\u9002\u914d\u5668\u5176\u5b9e\u5c31\u662f\u628a\u4e00\u4e2a\u4e8c\u5143\u51fd\u6570\u6307\u9488\u5305\u8d77\u6765\n//\u5f53\u4eff\u51fd\u6570\u88ab\u52a8\u8c03\u7528\u65f6\uff0c\u5c31\u8c03\u7528\u8be5\u51fd\u6570\u6307\u9488\ntemplate <class Arg1, class Arg2, class Result>\nclass pointer_to_binary_function : public binary_function<Arg1, Arg2, Result> {\nprotected:\n    Result (*ptr)(Arg1, Arg2);  //\u5185\u90e8\u6210\u5458\uff0c\u4e00\u4e2a\u51fd\u6570\u6307\u9488\npublic:\n    pointer_to_binary_function() {}\n    //\u6784\u9020\u51fd\u6570\uff0c\u5c06\u51fd\u6570\u6307\u9488\u8bb0\u5f55\u4e8e\u5185\u90e8\u6210\u5458\u4e2d\n    explicit pointer_to_binary_function(Result (*x)(Arg1, Arg2)) : ptr(x) {}\n    //\u901a\u8fc7\u51fd\u6570\u6307\u9488\u6307\u5411\u51fd\u6570\n    Result operator()(Arg1 x, Arg2 y) const { return ptr(x, y); }\n};\n\n//\u8f85\u52a9\u51fd\u6570\uff0c\u8ba9\u6211\u4eec\u5f97\u4ee5\u65b9\u4fbf\u4f7f\u7528pointer_to_binary_function \ntemplate <class Arg1, class Arg2, class Result>\ninline pointer_to_binary_function<Arg1, Arg2, Result> \nptr_fun(Result (*x)(Arg1, Arg2)) {\n  return pointer_to_binary_function<Arg1, Arg2, Result>(x);\n}\n3.5 \u7528\u4e8e\u6210\u5458\u51fd\u6570\u6307\u9488\u7684mem_fun\u548cmem_fun_ref\n\u5047\u8bbeShape\u662f\u4e00\u4e2a\u7ee7\u627f\u4f53\u7cfb\u4e2d\u7684\u57fa\u7c7b\uff0c\u5e76\u4e14\u5177\u6709\u865a\u51fd\u6570display()\uff0c\u6709\u4e00\u4e2avector<Shape*> V\uff0c\u90a3\u4e48\u53ef\u4ee5\u7ed9for_each()\u4f20\u5165\u4e00\u4e2a\u4ee5\u9002\u914d\u5668mem_fun\u4fee\u9970\u7684display()\uff1a\nfor_each(V.begin(),V.end(),mem_fun(&Shape::display));\n\u4e0d\u80fd\u5199\u6210\uff1a\nfor_each(V.begin(),V.end(),&Shape::display);\nfor_each(V.begin(),V.end(),Shape::display);\n\u4ee5\u4e0b\u662f\u7528\u4e8e\u6210\u5458\u51fd\u6570\u7684\u9002\u914d\u5668\u7684\u5b9e\u73b0\uff1a\n//\u201c\u65e0\u4efb\u4f55\u53c2\u6570\u201d\u3001\u201c\u901a\u8fc7pointer\u8c03\u7528\u201d\u3001\u201cnon-const\u6210\u5458\u51fd\u6570\u201d\ntemplate <class S, class T>\nclass mem_fun_t : public unary_function<T*, S> {\npublic:\n  explicit mem_fun_t(S (T::*pf)()) : f(pf) {}       //\u6784\u9020\u51fd\u6570\n  S operator()(T* p) const { return (p->*f)(); }    //\u8f6c\u8c03\u7528\nprivate:\n  S (T::*f)();\n};\n\n//\u201c\u65e0\u4efb\u4f55\u53c2\u6570\u201d\u3001\u201c\u901a\u8fc7pointer\u8c03\u7528\u201d\u3001\u201cconst\u6210\u5458\u51fd\u6570\u201d\ntemplate <class S, class T>\nclass const_mem_fun_t : public unary_function<const T*, S> {\npublic:\n  explicit const_mem_fun_t(S (T::*pf)() const) : f(pf) {} //\u6784\u9020\u51fd\u6570\n  S operator()(const T* p) const { return (p->*f)(); }    //\u8f6c\u8c03\u7528\nprivate:\n  S (T::*f)() const;\n};\n\n//\u201c\u65e0\u4efb\u4f55\u53c2\u6570\u201d\u3001\u201c\u901a\u8fc7reference\u8c03\u7528\u201d\u3001\u201cnon-const\u6210\u5458\u51fd\u6570\u201d\ntemplate <class S, class T>\nclass mem_fun_ref_t : public unary_function<T, S> {\npublic:\n  explicit mem_fun_ref_t(S (T::*pf)()) : f(pf) {}   //\u6784\u9020\u51fd\u6570\n  S operator()(T& r) const { return (r.*f)(); }     //\u8f6c\u8c03\u7528\nprivate:\n  S (T::*f)();\n};\n\n//\u201c\u65e0\u4efb\u4f55\u53c2\u6570\u201d\u3001\u201c\u901a\u8fc7reference\u8c03\u7528\u201d\u3001\u201cconst\u6210\u5458\u51fd\u6570\u201d\ntemplate <class S, class T>\nclass const_mem_fun_ref_t : public unary_function<T, S> {\npublic:\n  explicit const_mem_fun_ref_t(S (T::*pf)() const) : f(pf) {}  //\u6784\u9020\u51fd\u6570\n  S operator()(const T& r) const { return (r.*f)(); }          //\u8f6c\u8c03\u7528\nprivate:\n  S (T::*f)() const;\n};\n\n//\u201c\u67091\u4e2a\u53c2\u6570\u201d\u3001\u201c\u901a\u8fc7pointer\u8c03\u7528\u201d\u3001\u201cnon-const\u6210\u5458\u51fd\u6570\u201d\ntemplate <class S, class T, class A>\nclass mem_fun1_t : public binary_function<T*, A, S> {\npublic:\n  explicit mem_fun1_t(S (T::*pf)(A)) : f(pf) {}         //\u6784\u9020\u51fd\u6570\n  S operator()(T* p, A x) const { return (p->*f)(x); }  //\u8f6c\u8c03\u7528\nprivate:\n  S (T::*f)(A);\n};\n\n//\u201c\u67091\u4e2a\u53c2\u6570\u201d\u3001\u201c\u901a\u8fc7pointer\u8c03\u7528\u201d\u3001\u201cconst\u6210\u5458\u51fd\u6570\u201d\ntemplate <class S, class T, class A>\nclass const_mem_fun1_t : public binary_function<const T*, A, S> {\npublic:\n  explicit const_mem_fun1_t(S (T::*pf)(A) const) : f(pf) {}  //\u6784\u9020\u51fd\u6570\n  S operator()(const T* p, A x) const { return (p->*f)(x); } //\u8f6c\u8c03\u7528\nprivate:\n  S (T::*f)(A) const;\n};\n\n//\u201c\u67091\u4e2a\u53c2\u6570\u201d\u3001\u201c\u901a\u8fc7reference\u8c03\u7528\u201d\u3001\u201cnon-const\u6210\u5458\u51fd\u6570\u201d\ntemplate <class S, class T, class A>\nclass mem_fun1_ref_t : public binary_function<T, A, S> {\npublic:\n  explicit mem_fun1_ref_t(S (T::*pf)(A)) : f(pf) {}     //\u6784\u9020\u51fd\u6570\n  S operator()(T& r, A x) const { return (r.*f)(x); }   //\u8f6c\u8c03\u7528\nprivate:\n  S (T::*f)(A);\n};\n\n//\u201c\u67091\u4e2a\u53c2\u6570\u201d\u3001\u201c\u901a\u8fc7reference\u8c03\u7528\u201d\u3001\u201cconst\u6210\u5458\u51fd\u6570\u201d\ntemplate <class S, class T, class A>\nclass const_mem_fun1_ref_t : public binary_function<T, A, S> {\npublic:\n  explicit const_mem_fun1_ref_t(S (T::*pf)(A) const) : f(pf) {} //\u6784\u9020\u51fd\u6570\n  S operator()(const T& r, A x) const { return (r.*f)(x); }     //\u8f6c\u8c03\u7528\nprivate:\n  S (T::*f)(A) const;\n};\n\n/*********************************************************\n * \u4e0b\u9762\u76848\u4e2a\u8f85\u52a9\u51fd\u6570\u7b80\u5316\u4e86\u4e0a\u97628\u4e2a\u7c7b\u7684\u4f7f\u7528\n * mem_fun \u4e0e mem_fun_ref\n * mem_fun1 \u4e0e mem_fun1_ref\uff1aC++\u6807\u51c6\u5df2\u7ecf\u53bb\u6389\u4e861\uff0c\u6539\u6210\u548c\u4e0a\u97622\u4e2a\n                            \u51fd\u6570\u91cd\u8f7d\u7684\u5f62\u5f0f\n *********************************************************/\n\ntemplate <class S, class T>\ninline mem_fun_t<S,T> mem_fun(S (T::*f)()) { \n  return mem_fun_t<S,T>(f);\n}\n\ntemplate <class S, class T>\ninline const_mem_fun_t<S,T> mem_fun(S (T::*f)() const) {\n  return const_mem_fun_t<S,T>(f);\n}\n\ntemplate <class S, class T>\ninline mem_fun_ref_t<S,T> mem_fun_ref(S (T::*f)()) { \n  return mem_fun_ref_t<S,T>(f);\n}\n\ntemplate <class S, class T>\ninline const_mem_fun_ref_t<S,T> mem_fun_ref(S (T::*f)() const) {\n  return const_mem_fun_ref_t<S,T>(f);\n}\n\ntemplate <class S, class T, class A>\ninline mem_fun1_t<S,T,A> mem_fun1(S (T::*f)(A)) { \n  return mem_fun1_t<S,T,A>(f);\n}\n\ntemplate <class S, class T, class A>\ninline const_mem_fun1_t<S,T,A> mem_fun1(S (T::*f)(A) const) {\n  return const_mem_fun1_t<S,T,A>(f);\n}\n\ntemplate <class S, class T, class A>\ninline mem_fun1_ref_t<S,T,A> mem_fun1_ref(S (T::*f)(A)) { \n  return mem_fun1_ref_t<S,T,A>(f);\n}\n\ntemplate <class S, class T, class A>\ninline const_mem_fun1_ref_t<S,T,A> mem_fun1_ref(S (T::*f)(A) const) {\n  return const_mem_fun1_ref_t<S,T,A>(f);\n}\n')))}u.isMDXComponent=!0}}]);