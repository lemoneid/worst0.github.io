(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[753],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),f=p(t),d=i,k=f["".concat(s,".").concat(d)]||f[d]||u[d]||l;return t?r.createElement(k,o(o({ref:n},c),{},{components:t})):r.createElement(k,o({ref:n},c))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,o=new Array(l);o[0]=f;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var p=2;p<l;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},94575:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var r=t(22122),i=t(19756),l=(t(67294),t(3905)),o=["components"],a={id:"B10.IO\u6a21\u578b",title:"B10.IO\u6a21\u578b","typora-root-url":"../"},s={unversionedId:"Operating_system/B10.IO\u6a21\u578b",id:"Operating_system/B10.IO\u6a21\u578b",isDocsHomePage:!1,title:"B10.IO\u6a21\u578b",description:"epoll\u9ad8\u6548\u539f\u7406",source:"@site/docs/5.Operating_system/B10.IO\u6a21\u578b.md",sourceDirName:"5.Operating_system",slug:"/Operating_system/B10.IO\u6a21\u578b",permalink:"/Operating_system/B10.IO\u6a21\u578b",editUrl:"https://github.com/worst0/wiki_note/edit/main/docs/5.Operating_system/B10.IO\u6a21\u578b.md",version:"current",frontMatter:{id:"B10.IO\u6a21\u578b",title:"B10.IO\u6a21\u578b","typora-root-url":"../"},sidebar:"Document\ud83d\udcbb",previous:{title:"B9.\u6587\u4ef6\u4f20\u8f93",permalink:"/Operating_system/B9.\u6587\u4ef6\u4f20\u8f93"},next:{title:"B11.sleep\u548c\u95f4\u9694\u8ba1\u65f6\u5668",permalink:"/Operating_system/B11.sleep\u548c\u95f4\u9694\u8ba1\u65f6\u5668"}},p=[{value:"epoll\u9ad8\u6548\u539f\u7406",id:"epoll\u9ad8\u6548\u539f\u7406",children:[]},{value:"\u591a\u7ebf\u7a0b\u4e0e\u591a\u8fdb\u7a0b",id:"\u591a\u7ebf\u7a0b\u4e0e\u591a\u8fdb\u7a0b",children:[]},{value:"fork-io-worker\u591a\u8fdb\u7a0b",id:"fork-io-worker\u591a\u8fdb\u7a0b",children:[]},{value:"one-thread\u5355\u7ebf\u7a0b",id:"one-thread\u5355\u7ebf\u7a0b",children:[]},{value:"thread_pool_reactor\u6a21\u5f0f",id:"thread_pool_reactor\u6a21\u5f0f",children:[]},{value:"\u4e3b\u4ece\u53cd\u5e94\u5806\u6a21\u5f0f",id:"\u4e3b\u4ece\u53cd\u5e94\u5806\u6a21\u5f0f",children:[]}],c={toc:p};function u(e){var n=e.components,a=(0,i.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"epoll\u9ad8\u6548\u539f\u7406"},"epoll\u9ad8\u6548\u539f\u7406"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"epoll"),"\u4f7f\u7528",(0,l.kt)("inlineCode",{parentName:"p"},"RB-Tree"),"\u7ea2\u9ed1\u6811\u53bb\u76d1\u542c\u5e76\u7ef4\u62a4\u6240\u6709\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c",(0,l.kt)("inlineCode",{parentName:"p"},"RB-Tree"),"\u7684\u6839\u8282\u70b9"),(0,l.kt)("p",null,"\u8c03\u7528epoll_create\u65f6\uff0c\u5185\u6838\u9664\u4e86\u5e2e\u6211\u4eec\u5728epoll\u6587\u4ef6\u7cfb\u7edf\u91cc\u5efa\u4e86\u4e2afile\u7ed3\u70b9\uff0c\u5728\u5185\u6838cache\u91cc\u5efa\u4e86\u4e2a",(0,l.kt)("strong",{parentName:"p"},"\u7ea2\u9ed1\u6811"),"\u7528\u4e8e\u5b58\u50a8\u4ee5\u540eepoll_ctl\u4f20\u6765\u7684socket\u5916\uff0c\u8fd8\u4f1a\u518d\u5efa\u7acb\u4e00\u4e2alist\u94fe\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u51c6\u5907\u5c31\u7eea\u7684\u4e8b\u4ef6."),(0,l.kt)("p",null,"\u5f53",(0,l.kt)("strong",{parentName:"p"},"epoll_wait\u8c03\u7528\u65f6\uff0c\u4ec5\u4ec5\u89c2\u5bdf\u8fd9\u4e2alist\u94fe\u8868\u91cc\u6709\u6ca1\u6709\u6570\u636e\u5373\u53ef\u3002\u6709\u6570\u636e\u5c31\u8fd4\u56de\uff0c\u6ca1\u6709\u6570\u636e\u5c31sleep\uff0c\u7b49\u5230timeout\u65f6\u95f4\u5230\u540e\u5373\u4f7f\u94fe\u8868\u6ca1\u6570\u636e\u4e5f\u8fd4\u56de\u3002\u6240\u4ee5\uff0cepoll_wait\u975e\u5e38\u9ad8\u6548"),"\u3002\u800c\u4e14\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u5373\u4f7f\u6211\u4eec\u8981\u76d1\u63a7\u767e\u4e07\u8ba1\u7684\u53e5\u67c4\uff0c\u5927\u591a\u4e00\u6b21\u4e5f\u53ea\u8fd4\u56de\u5f88\u5c11\u91cf\u7684\u51c6\u5907\u5c31\u7eea\u53e5\u67c4\u800c\u5df2\uff0c\u6240\u4ee5\uff0cepoll_wait\u4ec5\u9700\u8981\u4ece\u5185\u6838\u6001copy\u5c11\u91cf\u7684\u53e5\u67c4\u5230\u7528\u6237\u6001\u800c\u5df2."),(0,l.kt)("p",null,"\u90a3\u4e48\uff0c\u8fd9\u4e2a\u51c6\u5907\u5c31\u7eealist\u94fe\u8868\u662f\u600e\u4e48\u7ef4\u62a4\u7684\u5462\uff1f"),(0,l.kt)("p",null,"\u5f53\u6211\u4eec\u6267\u884cepoll_ctl\u65f6\uff0c\u9664\u4e86\u628asocket\u653e\u5230epoll\u6587\u4ef6\u7cfb\u7edf\u91ccfile\u5bf9\u8c61\u5bf9\u5e94\u7684\u7ea2\u9ed1\u6811\u4e0a\u4e4b\u5916\uff0c\u8fd8\u4f1a\u7ed9\u5185\u6838\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u6ce8\u518c\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u544a\u8bc9\u5185\u6838\uff0c\u5982\u679c\u8fd9\u4e2a\u53e5\u67c4\u7684\u4e2d\u65ad\u5230\u4e86\uff0c\u5c31\u628a\u5b83\u653e\u5230\u51c6\u5907\u5c31\u7eealist\u94fe\u8868\u91cc\u3002\u6240\u4ee5\uff0c\u5f53\u4e00\u4e2asocket\u4e0a\u6709\u6570\u636e\u5230\u4e86\uff0c\u5185\u6838\u5728\u628a\u7f51\u5361\u4e0a\u7684\u6570\u636ecopy\u5230\u5185\u6838\u4e2d\u540e\u5c31\u6765\u628asocket\u63d2\u5165\u5230\u51c6\u5907\u5c31\u7eea\u94fe\u8868\u91cc\u4e86\u3002"),(0,l.kt)("p",null,"epoll\u76f8\u6bd4\u4e8eselect\u5e76\u4e0d\u662f\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u90fd\u8981\u9ad8\u6548\uff0c\u4f8b\u5982\u5728\u5982\u679c\u6709\u5c11\u4e8e1024\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u76d1\u542c\uff0c\u4e14\u5927\u591a\u6570socket\u90fd\u662f\u51fa\u4e8e\u6d3b\u8dc3\u7e41\u5fd9\u7684\u72b6\u6001\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cselect\u8981\u6bd4epoll\u66f4\u4e3a\u9ad8\u6548\uff0c\u56e0\u4e3aepoll\u4f1a\u6709\u66f4\u591a\u6b21\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u7528\u6237\u6001\u548c\u5185\u6838\u6001\u4f1a\u6709\u66f4\u52a0\u9891\u7e41\u7684\u5207\u6362\u3002"),(0,l.kt)("p",null,"epoll\u9ad8\u6548\u7684\u672c\u8d28\u5728\u4e8e\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u51cf\u5c11\u4e86\u7528\u6237\u6001\u548c\u5185\u6838\u6001\u7684\u6587\u4ef6\u53e5\u67c4\u62f7\u8d1d"),(0,l.kt)("li",{parentName:"ul"},"\u51cf\u5c11\u4e86\u5bf9\u53ef\u8bfb\u53ef\u5199\u6587\u4ef6\u53e5\u67c4\u7684\u904d\u5386"),(0,l.kt)("li",{parentName:"ul"},"mmap \u52a0\u901f\u4e86\u5185\u6838\u4e0e\u7528\u6237\u7a7a\u95f4\u7684\u4fe1\u606f\u4f20\u9012\uff0cepoll\u662f\u901a\u8fc7\u5185\u6838\u4e0e\u7528\u6237mmap\u540c\u4e00\u5757\u5185\u5b58\uff0c\u907f\u514d\u4e86\u65e0\u8c13\u7684\u5185\u5b58\u62f7\u8d1d"),(0,l.kt)("li",{parentName:"ul"},"IO\u6027\u80fd\u4e0d\u4f1a\u968f\u7740\u76d1\u542c\u7684\u6587\u4ef6\u63cf\u8ff0\u7684\u6570\u91cf\u589e\u957f\u800c\u4e0b\u964d"),(0,l.kt)("li",{parentName:"ul"},"\u4f7f\u7528\u7ea2\u9ed1\u6811\u5b58\u50a8fd\uff0c\u4ee5\u53ca\u5bf9\u5e94\u7684\u56de\u8c03\u51fd\u6570\uff0c\u5176\u63d2\u5165\uff0c\u67e5\u627e\uff0c\u5220\u9664\u7684\u6027\u80fd\u4e0d\u9519\uff0c\u76f8\u6bd4\u4e8ehash\uff0c\u4e0d\u5fc5\u9884\u5148\u5206\u914d\u5f88\u591a\u7684\u7a7a\u95f4")),(0,l.kt)("h2",{id:"\u591a\u7ebf\u7a0b\u4e0e\u591a\u8fdb\u7a0b"},"\u591a\u7ebf\u7a0b\u4e0e\u591a\u8fdb\u7a0b"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u591a\u7ebf\u7a0b\u6bd4\u591a\u8fdb\u7a0b\uff0c\u5185\u5b58\u76f8\u4e92\u5171\u4eab\uff0c\u901a\u4fe1\u7b80\u5355"),(0,l.kt)("li",{parentName:"ol"},"\u7ebf\u7a0b\u4e2d\u5355\u72ec\u6a21\u5757\u5316\u53bb\u5199\uff0c\u901a\u8fc7\u4f20\u5165\u56de\u8c03\u51fd\u6570"),(0,l.kt)("li",{parentName:"ol"},"\u7ebf\u7a0b\u8c03\u5ea6\u6bd4\u8fdb\u7a0b\u8c03\u5ea6\u5c0f\u5f88\u591a")),(0,l.kt)("p",null,"\u7ebf\u7a0b\u5b89\u5168\uff1a\u7ade\u4e89\u7684\u53d1\u751f\uff0c\u591a\u4e2a\u7ebf\u7a0b\u8bbf\u95ee\u7edf\u4e00\u8d44\u6e90\uff0c\u9700\u8981\u4e92\u65a5\u8bbf\u95ee"),(0,l.kt)("h2",{id:"fork-io-worker\u591a\u8fdb\u7a0b"},"fork-io-worker\u591a\u8fdb\u7a0b"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20210319080347559",src:t(78599).Z})),(0,l.kt)("p",null,"\u591a\u8fdb\u7a0b\u670d\u52a1\u5668,\u6bcf\u4e00\u6b21client\u4e0eacceptor(\u670d\u52a1\u7aef\u76d1\u542c\u5957\u63a5\u5b57)\u8fde\u63a5,\u82e5\u5224\u5b9a\u4e3a\u6709\u6548\u8fde\u63a5,\u5219fork\u5f00\u4e00\u4e2a\u65b0\u8fdb\u7a0b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'void worker(int fd, struct User *user) {\n    while (1) {\n        char buff[512] = {0};\n        if ((recv(fd, buff, sizeof(buff), 0)) <= 0) {\n            break;\n        }\n        printf(GREEN"<%s>"NONE" : %s!\\n", user->name, buff);\n    }\n    close(fd);\n    DBG(GREEN"<%s>"NONE" : logout!\\n", user->name);\n    return ;\n}\n\nint main(int argc, char **argv) {\n    if (argc != 2) {\n        fprintf(stderr, "Usgae : %s port!\\n", argv[0]);\n        exit(1);\n    }\n    int server_listen, sockfd, port;\n    port = atoi(argv[1]);\n    \n    if ((server_listen = socket_create(port)) < 0) {\n        perror("server_listen()");\n        exit(1);\n    }\n\n    pid_t pid;\n\n    while (1) {\n        struct sockaddr_in client;\n        struct User user;\n\n        bzero(&user, sizeof(user));\n        \n        //sizeof\u662f\u64cd\u4f5c\u7b26\uff0c\u7c7b\u4f3c\u4e8e+-\xd7/\n        socklen_t len = sizeof(client);\n        if ((sockfd = accept(server_listen, (struct sockaddr *)&client, &len)) < 0)  {\n            perror("accept()");\n            exit(1);\n        }\n        get_info("../../common/names", &user, inet_ntoa(client.sin_addr)); \n        if ((pid = fork()) < 0) {\n            perror("fork()");\n            exit(1);\n        }\n\n        if (pid == 0) {\n            worker(sockfd, &user); //\u5982\u679c\u662f\u591a\u7ebf\u7a0b\u4f7f\u7528user\u4f1a\u51fa\u9519,\u4f7f\u7528\u540c\u4e00\u5757\u5185\u5b58\n            exit(0);\n        }\n        //\u662f\u5426wait\n    }\n\n    return 0;\n}\n')),(0,l.kt)("h2",{id:"one-thread\u5355\u7ebf\u7a0b"},"one-thread\u5355\u7ebf\u7a0b"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20210324190158287",src:t(18712).Z})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'int main(int argc, char **argv) {\n    if (argc != 2) {\n        fprintf(stderr, "Usage : %s port!\\n", argv[0]);\n        exit(1);\n    }\n\n    int server_listen, sockfd, port;\n    port = atoi(argv[1]);\n    if ((server_listen = socket_create(port)) < 0) {\n        perror("socket_create()");\n        exit(1);\n    }\n    \n    while (1) {\n        struct sockaddr_in client;\n        char buff[512] = {0};\n        socklen_t len = sizeof(client);\n        if ((sockfd = accept(server_listen, (struct sockaddr *)&client, &len)) < 0) {\n            perror("accept()");\n            exit(1);\n        }\n        read(sockfd, buff, sizeof(buff));\n        printf(BLUE"%s"NONE" : %s\\n", user.name, buff);\n        close(sockfd);\n    }\n    return 0;\n}\n\n')),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20210319084750441",src:t(32675).Z})),(0,l.kt)("p",null,"\u53cd\u5e94\u5806\u6a21\u5f0f\uff1aIO\u591a\u8def\u590d\u7528"),(0,l.kt)("p",null,"\u5355\u7ebf\u7a0bCPU\u5229\u7528\u7387\u4f4e"),(0,l.kt)("h2",{id:"thread_pool_reactor\u6a21\u5f0f"},"thread_pool_reactor\u6a21\u5f0f"),(0,l.kt)("p",null,"\u5355\u72ec\u591a\u7ebf\u7a0b\u9700\u8981\u52a0\u9501,\u54cd\u5e94\u65f6\u95f4\u8fc7\u957f"),(0,l.kt)("p",null,"\u89e3\u51b3\u963b\u585e\u7684\u65b9\u6cd5:IO\u591a\u8def\u590d\u7528"),(0,l.kt)("p",null,"reactor dispatch\u53cd\u5e94\u5806\u8c03\u5ea6"),(0,l.kt)("p",null,"Acceptor\u53d7\u4f53"),(0,l.kt)("p",null,"Main Accpet thread\u4e3b\u63a5\u53d7\u7ebf\u7a0b"),(0,l.kt)("p",null,"sub-reactor thread\u5b50\u53cd\u5e94\u5668\u7ebf\u7a0b"),(0,l.kt)("p",null,"worker threads\u5de5\u4f5c\u7ebf\u7a0b"),(0,l.kt)("p",null,"Thread Pool\u7ebf\u7a0b\u6c60"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20210324191003817",src:t(73003).Z})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "head.h"\n#include "./thread_pool/thread_pool.h"\n#define MAXTHREAD 10\n#define MAXQUEUE 20\n#define MAXEVENTS 10\n#define MAXUSER 1024\n\nint epollfd;\n\nint main(int argc, char **argv) {\n    if (argc != 2) {\n        fprintf(stderr, "Usage : %s port!\\n", argv[0]);\n        exit(1);\n    }\n    int server_listen, sockfd, port;\n    int fd[MAXUSER] = {0};\n    port = atoi(argv[1]);\n    if ((server_listen = socket_create(port)) < 0) {\n        perror("socket_create()");\n        exit(1);\n    }\n\n    struct task_queue taskQueue;\n    task_queue_init(&taskQueue, MAXQUEUE);\n\n    pthread_t *tid = (pthread_t *)calloc(MAXTHREAD, sizeof(pthread_t));\n\n    for (int i = 0; i < MAXTHREAD; i++) {\n        pthread_create(&tid[i], NULL, thread_run, (void *)&taskQueue);\n    }\n\n    if ((epollfd = epoll_create(1)) < 0) {\n        perror("epoll_create()");\n        exit(1);\n    }\n\n    struct epoll_event ev, events[MAXEVENTS];\n\n    ev.data.fd = server_listen;\n    ev.events = EPOLLIN;\n\n    if (epoll_ctl(epollfd, EPOLL_CTL_ADD, server_listen, &ev) < 0) {\n        perror("epoll_ctl()");\n        exit(1);\n    }\n    \n    while (1) {\n        int nfds = epoll_wait(epollfd, events, MAXEVENTS, -1);\n        if (nfds < 0) {\n            perror("epoll_wait");\n            exit(1);\n        }\n        DBG(YELLOW"<Debg>"NONE" : After wait nfds = %d\\n", nfds);\n        for (int i = 0; i < nfds; ++i) {\n            if (events[i].data.fd == server_listen  && (events[i].events & EPOLLIN)) {\n                if ((sockfd = accept(server_listen, NULL, NULL)) < 0) {\n                    perror("accept()");\n                    exit(1);\n                }\n                fd[sockfd] = sockfd;\n                ev.events = EPOLLIN;\n                ev.data.fd = sockfd;\n                if (epoll_ctl(epollfd, EPOLL_CTL_ADD, sockfd, &ev) < 0) {\n                    perror("epoll_ctl()");\n                    exit(1);\n                }\n            } else {\n                if (events[i].events & EPOLLIN) {\n                    task_queue_push(&taskQueue, events[i].data.fd);\n                }\n                /*sleep(3);\n                if (events[i].events & EPOLLHUP) {\n                    epoll_ctl(epollfd, EPOLL_CTL_DEL, events[i].data.fd, NULL);\n                    DBG("events[i].data.fd = %d\\n", events[i].data.fd);\n                    close(events[i].data.fd);\n                    printf("Logout!\\n");\n                }\n                */\n            }\n        }\n    }\n    return 0;\n}\n\n')),(0,l.kt)("h2",{id:"\u4e3b\u4ece\u53cd\u5e94\u5806\u6a21\u5f0f"},"\u4e3b\u4ece\u53cd\u5e94\u5806\u6a21\u5f0f"),(0,l.kt)("p",null,"\u4e3a\u4e86\u89e3\u8026"),(0,l.kt)("p",null,"\u6839\u636eCPU\u7684\u6838\u5fc3\u6570\uff0c\u8bbe\u7f6e\u53cd\u5e94\u5806\u7684\u6570\u91cf\uff0c\u6700\u5927\u5229\u7528CPU"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20210324191241195",src:t(51718).Z})),(0,l.kt)("p",null,"\u4e3b\u53cd\u5e94\u5806\uff1a\u8d1f\u8d23\u63a5\u6536IO\u8bf7\u6c42"),(0,l.kt)("p",null,"\u4ece\u53cd\u5e94\u5806\uff1a\u8d1f\u8d23\u5904\u7406\u6570\u636e"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20210324191529514",src:t(72649).Z})),(0,l.kt)("p",null,"\u7ebf\u7a0b\u6c60\uff1a\u89e3\u8026"),(0,l.kt)("p",null,"\u53cd\u5e94\u5806\uff1aCPU\u6838\u5fc3\u6570\uff0cIO\u591a\u8def\u590d\u7528"))}u.isMDXComponent=!0},78599:function(e,n,t){"use strict";n.Z=t.p+"assets/images/image-20210319080347559-675314bdc746b71ef656c6b747d83087.png"},32675:function(e,n,t){"use strict";n.Z=t.p+"assets/images/image-20210319084750441-9e75353c1b8b563f6d52f9e7bf290469.png"},18712:function(e,n,t){"use strict";n.Z=t.p+"assets/images/image-20210324190158287-3fbb3ddbe5b493068e5e2e997d082c32.png"},73003:function(e,n,t){"use strict";n.Z=t.p+"assets/images/image-20210324191003817-cbd555e01355e91fe169b978990e1e7d.png"},51718:function(e,n,t){"use strict";n.Z=t.p+"assets/images/image-20210324191241195-2d49b2081bd1d64fc966860135ce1da6.png"},72649:function(e,n,t){"use strict";n.Z=t.p+"assets/images/image-20210324191529514-44eff7125c9c69e5d743ffcffc8febfc.png"}}]);