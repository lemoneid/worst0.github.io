(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[6715],{3905:function(n,e,t){"use strict";t.d(e,{Zo:function(){return o},kt:function(){return d}});var a=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function p(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,a,i=function(n,e){if(null==n)return{};var t,a,i={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var l=a.createContext({}),m=function(n){var e=a.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):p(p({},e),n)),t},o=function(n){var e=m(n.components);return a.createElement(l.Provider,{value:e},n.children)},c={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(n,e){var t=n.components,i=n.mdxType,r=n.originalType,l=n.parentName,o=s(n,["components","mdxType","originalType","parentName"]),u=m(t),d=i,k=u["".concat(l,".").concat(d)]||u[d]||c[d]||r;return t?a.createElement(k,p(p({ref:e},o),{},{components:t})):a.createElement(k,p({ref:e},o))}));function d(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var r=t.length,p=new Array(r);p[0]=u;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s.mdxType="string"==typeof n?n:i,p[1]=s;for(var m=2;m<r;m++)p[m]=t[m];return a.createElement.apply(null,p)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},13302:function(n,e,t){"use strict";t.r(e),t.d(e,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return m},default:function(){return c}});var a=t(22122),i=t(19756),r=(t(67294),t(3905)),p=["components"],s={id:"A4.\u5806\u548c\u4f18\u5148\u961f\u5217",title:"A4.\u5806\u548c\u4f18\u5148\u961f\u5217","typora-root-url":"../"},l={unversionedId:"Algorithm/A4.\u5806\u548c\u4f18\u5148\u961f\u5217",id:"Algorithm/A4.\u5806\u548c\u4f18\u5148\u961f\u5217",isDocsHomePage:!1,title:"\u5806\u548c\u4f18\u5148\u961f\u5217",description:"\u6700\u5927\u5806\u548c\u6700\u5c0f\u5806",source:"@site/docs/2.Algorithm/A4.\u5806\u548c\u4f18\u5148\u961f\u5217.md",sourceDirName:"2.Algorithm",slug:"/Algorithm/A4.\u5806\u548c\u4f18\u5148\u961f\u5217",permalink:"/Algorithm/A4.\u5806\u548c\u4f18\u5148\u961f\u5217",editUrl:"https://github.com/worst0/wiki_note/edit/main/docs/2.Algorithm/A4.\u5806\u548c\u4f18\u5148\u961f\u5217.md",version:"current",frontMatter:{id:"A4.\u5806\u548c\u4f18\u5148\u961f\u5217",title:"A4.\u5806\u548c\u4f18\u5148\u961f\u5217","typora-root-url":"../"},sidebar:"Document\ud83d\udcbb",previous:{title:"\u6808,\u961f\u5217",permalink:"/Algorithm/A3.\u6808\u548c\u961f\u5217"},next:{title:"\u54c8\u5f17\u66fc\u6811\u4e0e\u54c8\u5f17\u66fc\u7f16\u7801",permalink:"/Algorithm/A5.\u54c8\u592b\u66fc\u6811"}},m=[{value:"\u6700\u5927\u5806\u548c\u6700\u5c0f\u5806",id:"\u6700\u5927\u5806\u548c\u6700\u5c0f\u5806",children:[{value:"\u5e95\u5c42\u8868\u793a",id:"\u5e95\u5c42\u8868\u793a",children:[]}]},{value:"\u4f18\u5148\u961f\u5217",id:"\u4f18\u5148\u961f\u5217",children:[{value:"\u5b9e\u73b0",id:"\u5b9e\u73b0",children:[]}]},{value:"==\u7ebf\u6027\u5efa\u5806\u6cd5==",id:"\u7ebf\u6027\u5efa\u5806\u6cd5",children:[]},{value:"\u5806\u6392\u5e8f",id:"\u5806\u6392\u5e8f",children:[{value:"\u5b9e\u73b0",id:"\u5b9e\u73b0-1",children:[]}]}],o={toc:m};function c(n){var e=n.components,s=(0,i.Z)(n,p);return(0,r.kt)("wrapper",(0,a.Z)({},o,s,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"\u6700\u5927\u5806\u548c\u6700\u5c0f\u5806"},"\u6700\u5927\u5806\u548c\u6700\u5c0f\u5806"),(0,r.kt)("p",null,"\u4f18\u5148\u7ea7\u961f\u5217\u9ad8\u6548\u7684\u539f\u56e0\u4e3b\u8981\u539f\u56e0\u5728\u4e8e\u5176\u4e0d\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u5168\u5e8f\u5173\u7cfb\uff0c\u4ec5\u4ec5\u9700\u8981\u7ef4\u62a4\u4e00\u504f\u5e8f\u5173\u7cfb\u3002\u5b8c\u5168\u4e8c\u53c9\u5806\u662f\u4f18\u5148\u7ea7\u961f\u5217\u7684\u4e00\u79cd\u5b9e\u73b0\u3002 "),(0,r.kt)("p",null,"\u5806\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6839\u636e\u7ed3\u70b9\u548c\u5de6\u53f3\u5b69\u5b50\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u5206\u4e3a\u6700\u5927\u5806\u548c\u6700\u5c0f\u5806"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u6700\u5927\u5806",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u90fd\u5927\u4e8e\u6216\u7b49\u4e8e\u5176\u5de6\u53f3\u5b69\u5b50\u7ed3\u70b9\u7684\u503c"))),(0,r.kt)("li",{parentName:"ul"},"\u6700\u5c0f\u5806",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u90fd\u5c0f\u4e8e\u6216\u7b49\u4e8e\u5176\u5de6\u53f3\u5b69\u5b50\u7ed3\u70b9\u7684\u503c")))),(0,r.kt)("h3",{id:"\u5e95\u5c42\u8868\u793a"},"\u5e95\u5c42\u8868\u793a"),(0,r.kt)("p",null,"\u5b8c\u5168\u4e8c\u53c9\u5806\u7684\u5e95\u5c42\u5b9e\u73b0\u65b9\u5f0f\u662f\u4e00\u4e2a",(0,r.kt)("inlineCode",{parentName:"p"},"vector"),"\u3002\u5e95\u5c42\u501f\u52a9",(0,r.kt)("inlineCode",{parentName:"p"},"vector"),"\u4f7f\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"O(n)"),"\u7684\u7d27\u51d1\u7a7a\u95f4\u8868\u793a\uff1a\u5b8c\u5168\u4e8c\u53c9\u6811\u4ece\u5de6\u5230\u53f3\u5c42\u7684\u6b21\u904d\u5386\u6b21\u5e8f\u548c",(0,r.kt)("inlineCode",{parentName:"p"},"vector"),"\u7684\u5143\u7d20\u5185\u5bb9\u4e00\u4e00\u5bf9\u5e94\u3002"),(0,r.kt)("h2",{id:"\u4f18\u5148\u961f\u5217"},"\u4f18\u5148\u961f\u5217"),(0,r.kt)("h3",{id:"\u5b9e\u73b0"},"\u5b9e\u73b0"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'/*************************************************************************\n    > File Name: 9.priority_queue.cpp\n    > Author:\n    > Mail:\n    > Created Time: \u4e8c  2/18 16:31:07 2020\n ************************************************************************/\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n#define swap(a, b) {\\\n    __typeof(a) __temp = a;\\\n    a = b; b = __temp;\\\n}\n\ntypedef struct priority_queue {\n    int *data;\n    int cnt, size;\n} priority_queue;\n\npriority_queue *init(int n) {\n    priority_queue *q = (priority_queue *)malloc(sizeof(priority_queue));\n    q->data = (int *)malloc(sizeof(int) * (n + 1));\n    q->cnt = 0;\n    q->size = n;\n    return q;\n}\n\nint empty(priority_queue *q) {\n    return q->cnt == 0;\n}\n\nint top(priority_queue *q) {\n    return q->data[1];\n}\n\nint push(priority_queue *q, int val) {\n    if (q == NULL) return 0;\n    if (q->cnt == q->size) return 0;\n    q->cnt += 1;\n    q->data[q->cnt] = val;\n    int ind = q->cnt;\n    while (ind >> 1 && q->data[ind] > q->data[ind >> 1]) {\n        swap(q->data[ind], q->data[ind >> 1]);\n        ind >>= 1;\n    }\n    return 1;\n}\n\nint pop(priority_queue *q) {\n    if (q == NULL) return 0;\n    if (empty(q)) return 0;\n    q->data[1] = q->data[q->cnt--];\n    int ind = 1;\n    while ((ind << 1) <= q->cnt) {\n        int temp = ind, l = ind << 1, r = ind << 1 | 1;\n        if (q->data[l] > q->data[temp]) temp = l;\n        if (r <= q->cnt && q->data[r] > q->data[temp]) temp = r;\n        if (temp == ind) break;\n        swap(q->data[ind], q->data[temp]);\n        ind = temp;\n    }\n    return 1;\n}\n\nvoid clear(priority_queue *q) {\n    if (q == NULL) return ;\n    free(q->data);\n    free(q);\n    return ;\n}\n\nint main() {\n    srand(time(0));\n    #define max_op 20\n    priority_queue *q = init(max_op);\n    for (int i = 0; i < max_op; i++) {\n        int val = rand() % 100;\n        push(q, val);\n        printf("insert %d to queue\\n", val);\n    }\n    for (int i = 0; i < max_op; i++) {\n        printf("%d ", top(q));\n        pop(q);\n    }\n    printf("\\n");\n    clear(q);\n    return 0;\n}\n')),(0,r.kt)("h2",{id:"\u7ebf\u6027\u5efa\u5806\u6cd5"},"==\u7ebf\u6027\u5efa\u5806\u6cd5=="),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Floyd\u7b97\u6cd5"),"\uff1a\u81ea\u4e0b\u800c\u4e0a\u7684\u4e0b\u6ee4  "),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Floyd"),"\u7b97\u6cd5\uff0c\u662f\u4ece\u5e95\u5c42\u5f00\u59cb\uff1a\u5bf9\u4e8e\u5806 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"H0,H1")))," \u4ee5\u53ca\u7ed9\u5b9a\u7684\u9876\u70b9",(0,r.kt)("inlineCode",{parentName:"p"},"p")," \uff0c\u5408\u5e76\u4e00\u4e2a\u66f4\u9ad8\u7684\u5806\u3002 \u8fd9\u4e2a\u64cd\u4f5c\u7c7b\u4f3c\u4e8e ",(0,r.kt)("inlineCode",{parentName:"p"},"deleteMax"),", \u53ea\u662f\u9700\u8981\u5c06",(0,r.kt)("inlineCode",{parentName:"p"},"p"),"\u8fdb\u884c\u4e0b\u6ee4\u64cd\u4f5c\u5373\u53ef\u3002\u6700\u521d ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"H0,H1")))," \u5c31\u662f\u53f6\u8282\u70b9\uff0c\u7ecf\u8fc7\u4e0d\u65ad\u5730\u5408\u5e76\uff0c\u6700\u7ec8\u53d8\u6210\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u5806\u3002"),(0,r.kt)("h2",{id:"\u5806\u6392\u5e8f"},"\u5806\u6392\u5e8f"),(0,r.kt)("h3",{id:"\u5b9e\u73b0-1"},"\u5b9e\u73b0"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'/*************************************************************************\n    > File Name: 10.heap_sort.cpp\n    > Author:\n    > Mail:\n    > Created Time: \u4e8c  2/18 19:24:12 2020\n ************************************************************************/\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n#define swap(a, b) {\\\n    __typeof(a) __temp = a;\\\n    a = b; b = __temp;\\\n}\n\nvoid downUpdate(int *arr, int n, int ind) {\n    while ((ind << 1) <= n) {\n        int temp = ind, l = ind << 1, r = ind << 1 | 1;\n        if (arr[l] > arr[temp]) temp = l;\n        if (r <= n && arr[r] > arr[temp]) temp = r;\n        if (temp == ind) break;\n        swap(arr[temp], arr[ind]);\n        ind = temp;\n    }\n    return ;\n}\n\nvoid heap_sort(int *arr, int n) {\n    arr -= 1;\n    for (int i = n >> 1; i >= 1; i--) {\n        downUpdate(arr, n, i);\n    }\n    for (int i = n; i > 1; i--) {\n        swap(arr[i], arr[1]);\n        downUpdate(arr, i - 1, 1);\n    }\n    return ;\n}\n\nvoid output(int *arr, int n) {\n    printf("arr(%d) = [", n);\n    for (int i = 0; i < n; i++) {\n        printf(" %d", arr[i]);\n    }\n    printf("]\\n");\n    return ;\n}\n\nint main() {\n    srand(time(0));\n    #define max_op 20\n    int *arr = (int *)malloc(sizeof(int) * max_op);\n    for (int i = 0; i < max_op; i++) {\n        int val = rand() % 100;\n        arr[i] = val;\n    }\n    output(arr, max_op);\n    heap_sort(arr, max_op);\n    output(arr, max_op);\n    free(arr);\n    return 0;\n}\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image-20201008200910691",src:t(6649).Z})),(0,r.kt)("h4",{id:"poj2431\u8fdc\u5f81"},"POJ2431.\u8fdc\u5f81"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u4f60\u9700\u8981\u9a7e\u9a76\u4e00\u8f86\u5361\u8f66\u884c\u9a76 L\u5355\u4f4d\u8ddd\u79bb\u3002\u6700\u5f00\u59cb\u65f6 \uff0c\u5361\u8f66\u4e0a\u6709 P \u5355\u4f4d\u7684\u6c7d\u6cb9 \u3002\u5361\u8f66\u6bcf\u5f00 1 \u5355\u4f4d\u8ddd\u79bb\u9700\u8981\u6d88\u8017 1 \u5355\u4f4d\u7684\u6c7d\u6cb9 \u3002\u5982\u679c\u5728\u9014\u4e2d\u8f66\u4e0a\u7684\u6c7d\u6cb9\u8017\u5c3d\uff0c\u5361\u8f66\u5c31\u65e0\u6cd5\u7ee7\u7eed\u524d\u884c\uff0c\u56e0 \u800c\u65e0\u6cd5\u5230\u8fbe\u7ec8\u70b9\u3002 \u5728\u9014\u4e2d\u4e00\u5171\u6709 N \u4e2a \u52a0\u6cb9\u7ad9 \u3002\u7b2c i \u4e2a\u52a0\u6cb9\u7ad9\u5728\u8ddd\u79bb\u8d77\u70b9 ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"A"),(0,r.kt)("mi",{parentName:"msub"},"i"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"A_i")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.83333em",verticalAlign:"-0.15em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"A"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.31166399999999994em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"}))))))))))," \u5355\u4f4d\u8ddd\u79bb\u7684\u5730\u65b9 \uff0c\u6700\u591a\u53ef\u4ee5\u7ed9\u5361\u8f66\u52a0 ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"B"),(0,r.kt)("mi",{parentName:"msub"},"i"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"B_i")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.83333em",verticalAlign:"-0.15em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05017em"}},"B"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.31166399999999994em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"-0.05017em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"}))))))))))," \u5355\u4f4d\u6c7d\u6cb9\u3002\u5047\u8bbe\u5361\u8f66\u7684\u71c3\u6599\u7bb1\u7684\u5bb9\u91cf\u662f\u65e0\u9650\u5927\u7684 \uff0c\u65e0\u8bba\u52a0\u591a\u5c11\u6cb9\u90fd\u6ca1\u6709\u95ee\u9898 \uff0c\u90a3\u4e48\u8bf7\u95ee\u5361\u8f66\u662f\u5426\u80fd\u5230\u8fbe\u7ec8\u70b9\uff1f \u5982 \u679c\u53ef\u4ee5 \uff0c\u6700\u5c11\u9700\u8981\u52a0\u591a\u5c11\u6b21\u6cb9\uff1f \u5982\u679c\u53ef \u4ee5\u5230\u8fbe\u7ec8\u70b9\uff0c\u8f93\u51fa\u6700\u5c11\u7684\u52a0\u6cb9\u6b21\u6570 \uff0c\u5426\u5219\u8f93\u51fa -1\u3002")),(0,r.kt)("p",null,"\u53d8\u6362\u4e00\u4e0b\u601d\u8003\u65b9\u5f0f\u3002\u5728\u5361\u8f66\u5f00\u5f80\u7ec8\u70b9\u7684\u9014\u4e2d \uff0c\u53ea\u6709\u5728\u52a0\u6cb9\u7ad9\u624d\u53ef\u4ee5\u52a0\u6cb9\u3002\u4f46\u662f\uff0c\u5982\u679c\u8ba4\n\u4e3a\u201c\u5728\u5230\u8fbe\u52a0\u6cb9\u7ad9\u201c \u65f6\uff0c\u5c31\u83b7\u5f97\u4e86\u4e00\u6b21\u5728\u4e4b\u540e\u7684\u4efb\u4f55\u65f6\u5019\u90fd\u53ef\u4ee5\u52a0\u6c7d\u6cb9\u7684\u6743\u5229 "),(0,r.kt)("p",null,"\u56e0\u4e3a\u5e0c\u671b\u5230\u8fbe\u7ec8\u70b9\u65f6\u52a0\u6cb9\u6b21\u6570\u5c3d\u53ef\u80fd\u5c11\uff0c\u4ece\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u4f9d\u6b21\u53d6\u51fa\u6570\u503c\u7684\u4f18\u5148\u961f\u5217"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u5728\u7ecf\u8fc7\u52a0\u6cb9\u7ad9 ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"A"),(0,r.kt)("mi",{parentName:"msub"},"i"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"A_i")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.83333em",verticalAlign:"-0.15em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"A"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.31166399999999994em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"}))))))))))," \u65f6 \uff0c\u5f80\u4f18\u5148\u961f\u5217\u91cc\u52a0\u4eba",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"B"),(0,r.kt)("mi",{parentName:"msub"},"i"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"B_i")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.83333em",verticalAlign:"-0.15em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05017em"}},"B"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.31166399999999994em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"-0.05017em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"}))))))))))),(0,r.kt)("li",{parentName:"ol"},"\u5f53\u71c3\u6599\u7bb1\u7a7a\u4e86\u65f6\uff0c",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u5982\u679c\u4f18\u5148\u961f\u5217\u4e5f\u662f\u7a7a\u7684 \uff0c\u5219\u65e0\u6cd5\u5230\u8fbe\u7ec8\u70b9\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u5426\u5219 \u53d6\u51fa\u4f18\u5148\u961f\u5217\u4e2d\u7684\u6700\u5927\u5143\u7d20 \uff0c\u5e76\u7528\u6765\u7ed9\u5361\u8f66\u52a0\u6cb9\u3002")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"typedef pair<int, int> PII;\nvector<PII> arr;\nint l, p, n;\n\nbool cmp(const PII &a, const PII &b) {\n    return a.first < b.first;\n}\n\nint solve() {\n    arr[0].first = arr[0].second = 0;\n    sort(arr.begin(), arr.end(), cmp);\n    priority_queue<int> que;\n    int ans = 0, pos = l, tank = p;\n    for (int i = n; i >= 0 ; i--){\n        int d = pos - arr[i].first;\n        while (tank < d) {\n            if (que.empty()) {\n                return -1;\n            }\n            tank += que.top();\n            que.pop();\n            ans++;\n        }\n        tank -= d;\n        pos = arr[i].first;\n        que.push(arr[i].second);\n    }\n    return ans;\n}\n")),(0,r.kt)("h4",{id:"218\u5929\u9645\u7ebf\u95ee\u9898"},(0,r.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/the-skyline-problem/description/"},"218.\u5929\u9645\u7ebf\u95ee\u9898")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u57ce\u5e02\u7684\u5929\u9645\u7ebf\u662f\u4ece\u8fdc\u5904\u89c2\u770b\u8be5\u57ce\u5e02\u4e2d\u6240\u6709\u5efa\u7b51\u7269\u5f62\u6210\u7684\u8f6e\u5ed3\u7684\u5916\u90e8\u8f6e\u5ed3\u3002\u7ed9\u4f60\u6240\u6709\u5efa\u7b51\u7269\u7684\u4f4d\u7f6e\u548c\u9ad8\u5ea6\uff0c\u8bf7\u8fd4\u56de\u7531\u8fd9\u4e9b\u5efa\u7b51\u7269\u5f62\u6210\u7684 ",(0,r.kt)("strong",{parentName:"p"},"\u5929\u9645\u7ebf")," \u3002"),(0,r.kt)("p",{parentName:"blockquote"},"\u6bcf\u4e2a\u5efa\u7b51\u7269\u7684\u51e0\u4f55\u4fe1\u606f\u7531\u6570\u7ec4 ",(0,r.kt)("inlineCode",{parentName:"p"},"buildings")," \u8868\u793a\uff0c\u5176\u4e2d\u4e09\u5143\u7ec4 ",(0,r.kt)("inlineCode",{parentName:"p"},"buildings[i] = [lefti, righti, heighti]")," \u8868\u793a\uff1a"),(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"lefti")," \u662f\u7b2c ",(0,r.kt)("inlineCode",{parentName:"li"},"i")," \u5ea7\u5efa\u7b51\u7269\u5de6\u8fb9\u7f18\u7684 ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," \u5750\u6807\u3002"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"righti")," \u662f\u7b2c ",(0,r.kt)("inlineCode",{parentName:"li"},"i")," \u5ea7\u5efa\u7b51\u7269\u53f3\u8fb9\u7f18\u7684 ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," \u5750\u6807\u3002"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"heighti")," \u662f\u7b2c ",(0,r.kt)("inlineCode",{parentName:"li"},"i")," \u5ea7\u5efa\u7b51\u7269\u7684\u9ad8\u5ea6\u3002")),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"\u5929\u9645\u7ebf")," \u5e94\u8be5\u8868\u793a\u4e3a\u7531 \u201c\u5173\u952e\u70b9\u201d \u7ec4\u6210\u7684\u5217\u8868\uff0c\u683c\u5f0f ",(0,r.kt)("inlineCode",{parentName:"p"},"[[x1,y1],[x2,y2],...]")," \uff0c\u5e76\u6309 ",(0,r.kt)("strong",{parentName:"p"},"x \u5750\u6807")," \u8fdb\u884c ",(0,r.kt)("strong",{parentName:"p"},"\u6392\u5e8f")," \u3002",(0,r.kt)("strong",{parentName:"p"},"\u5173\u952e\u70b9\u662f\u6c34\u5e73\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9"),"\u3002\u5217\u8868\u4e2d\u6700\u540e\u4e00\u4e2a\u70b9\u662f\u6700\u53f3\u4fa7\u5efa\u7b51\u7269\u7684\u7ec8\u70b9\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"y")," \u5750\u6807\u59cb\u7ec8\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," \uff0c\u4ec5\u7528\u4e8e\u6807\u8bb0\u5929\u9645\u7ebf\u7684\u7ec8\u70b9\u3002\u6b64\u5916\uff0c\u4efb\u4f55\u4e24\u4e2a\u76f8\u90bb\u5efa\u7b51\u7269\u4e4b\u95f4\u7684\u5730\u9762\u90fd\u5e94\u88ab\u89c6\u4e3a\u5929\u9645\u7ebf\u8f6e\u5ed3\u7684\u4e00\u90e8\u5206\u3002"),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"\u6ce8\u610f\uff1a"),"\u8f93\u51fa\u5929\u9645\u7ebf\u4e2d\u4e0d\u5f97\u6709\u8fde\u7eed\u7684\u76f8\u540c\u9ad8\u5ea6\u7684\u6c34\u5e73\u7ebf\u3002\u4f8b\u5982 ",(0,r.kt)("inlineCode",{parentName:"p"},"[...[2 3], [4 5], [7 5], [11 5], [12 7]...]")," \u662f\u4e0d\u6b63\u786e\u7684\u7b54\u6848\uff1b\u4e09\u6761\u9ad8\u5ea6\u4e3a 5 \u7684\u7ebf\u5e94\u8be5\u5728\u6700\u7ec8\u8f93\u51fa\u4e2d\u5408\u5e76\u4e3a\u4e00\u4e2a\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"[...[2 3], [4 5], [12 7], ...]")),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1\uff1a")),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/12/01/merged.jpg",alt:"img"})),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"\u8f93\u5165\uff1abuildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\n\u8f93\u51fa\uff1a[[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\n\u89e3\u91ca\uff1a\n\u56fe A \u663e\u793a\u8f93\u5165\u7684\u6240\u6709\u5efa\u7b51\u7269\u7684\u4f4d\u7f6e\u548c\u9ad8\u5ea6\uff0c\n\u56fe B \u663e\u793a\u7531\u8fd9\u4e9b\u5efa\u7b51\u7269\u5f62\u6210\u7684\u5929\u9645\u7ebf\u3002\u56fe B \u4e2d\u7684\u7ea2\u70b9\u8868\u793a\u8f93\u51fa\u5217\u8868\u4e2d\u7684\u5173\u952e\u70b9\u3002\n")),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"\u793a\u4f8b 2\uff1a")),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"\u8f93\u5165\uff1abuildings = [[0,2,3],[2,5,3]]\n\u8f93\u51fa\uff1a[[0,3],[5,0]]\n"))),(0,r.kt)("p",null,"\u4f7f\u7528\u4f18\u5148\u961f\u5217\u50a8\u5b58\u6bcf\u4e2a\u5efa\u7b51\u7269\u7684\u9ad8\u5ea6\u548c\u53f3\u7aef\uff08\u8fd9\u91cc\u4f7f\u7528 pair\uff0c\u5176\u9ed8\u8ba4\u6bd4\u8f83\u51fd\u6570\u662f\u5148\u6bd4\u8f83\u7b2c\u4e00\u4e2a\u503c\uff0c\u5982\u679c\u76f8\u7b49\u5219\u518d\u6bd4\u8f83\u7b2c\u4e8c\u4e2a\u503c\uff09\uff0c\u4ece\u800c\u83b7\u53d6\u76ee\u524d\u4f1a\u62d4\u9ad8\u5929\u9645\u7ebf\u3001\u4e14\u59a8\u788d\u5230\u524d\u4e00\u4e2a\u5efa\u7b51\u7269\uff08\u7684\u53f3\u7aef\u7aef\u70b9\uff09\u7684\u4e0b\u4e00\u4e2a\u5efa\u7b51\u7269\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"}," class Solution {\npublic:\n    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {\n        vector<vector<int>> ans;\n        priority_queue<pair<int, int>> max_heap;\n        int i = 0, size = buildings.size();\n        int cur_x, cur_h;\n        while (i < size || !max_heap.empty()) {\n            if (max_heap.empty()\n                ||i < size \n                && buildings[i][0] <= max_heap.top().second) {\n                cur_x = buildings[i][0];\n                while (i < size && cur_x == buildings[i][0]) {\n                    max_heap.emplace(buildings[i][2], buildings[i][1]);\n                    ++i;\n                }\n            } else {\n                cur_x = max_heap.top().second;\n                while (!max_heap.empty() && cur_x >= max_heap.top().second) {\n                    max_heap.pop(); \n                }\n            }\n            cur_h = (max_heap.empty() ? 0 : max_heap.top().first);\n            if (ans.empty() || cur_h != ans.back()[1]) {\n                ans.push_back({cur_x, cur_h});\n            }\n        }\n        return ans;\n    }\n};\n")),(0,r.kt)("h4",{id:"lc-703-\u6570\u636e\u6d41\u4e2d\u7684\u7b2ck\u5927\u5143\u7d20"},(0,r.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/"},"LC-703. \u6570\u636e\u6d41\u4e2d\u7684\u7b2cK\u5927\u5143\u7d20")),(0,r.kt)("p",null,"\u8bbe\u8ba1\u4e00\u4e2a\u627e\u5230\u6570\u636e\u6d41\u4e2d\u7b2cK\u5927\u5143\u7d20\u7684\u7c7b\uff08class\uff09\u3002\u6ce8\u610f\u662f\u6392\u5e8f\u540e\u7684\u7b2cK\u5927\u5143\u7d20\uff0c\u4e0d\u662f\u7b2cK\u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002"),(0,r.kt)("p",null,"\u4f60\u7684 KthLargest \u7c7b\u9700\u8981\u4e00\u4e2a\u540c\u65f6\u63a5\u6536\u6574\u6570 k \u548c\u6574\u6570\u6570\u7ec4nums \u7684\u6784\u9020\u5668\uff0c\u5b83\u5305\u542b\u6570\u636e\u6d41\u4e2d\u7684\u521d\u59cb\u5143\u7d20\u3002\u6bcf\u6b21\u8c03\u7528 KthLargest.add\uff0c\u8fd4\u56de\u5f53\u524d\u6570\u636e\u6d41\u4e2d\u7b2cK\u5927\u7684\u5143\u7d20\u3002"),(0,r.kt)("p",null,"\u793a\u4f8b:"),(0,r.kt)("p",null,"int k = 3;\nint[] arr = ","[4,5,8,2]",";\nKthLargest kthLargest = new KthLargest(3, arr);\nkthLargest.add(3);   // returns 4\nkthLargest.add(5);   // returns 5\nkthLargest.add(10);  // returns 5\nkthLargest.add(9);   // returns 8\nkthLargest.add(4);   // returns 8"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"#define swap(a, b) { \\\n    __typeof(a) __temp = a; \\\n    a = b, b = __temp; \\\n}\n\ntypedef struct {\n    int *data;\n    int cnt, size;\n} KthLargest;\n\nvoid downUpdate(int *arr, int n, int ind) {\n    while ((ind << 1) <= n) {\n        int temp = ind, l = ind << 1, r = ind << 1 | 1;\n        if (arr[l] < arr[temp]) temp = l;\n        if (r <= n && arr[r] < arr[temp]) temp = r;\n        if (temp == ind) break;\n        swap(arr[temp], arr[ind]);\n        ind = temp;\n    }\n    return ;\n}\n\nvoid upUpdate(int *arr, int ind) {\n    while (ind >> 1) {\n        if (arr[ind] >= arr[ind >> 1]) break;\n        swap(arr[ind], arr[ind >> 1]);\n        ind >>= 1;\n    }\n    return ;\n}\n\nint kthLargestAdd(KthLargest*, int);\nKthLargest* kthLargestCreate(int k, int* nums, int numsSize) {\n    KthLargest *p = (KthLargest *)malloc(sizeof(KthLargest));\n    p->data = (int *)malloc(sizeof(int) * (k + 1));\n    p->size = k;\n    p->cnt = k - 1;\n    memcpy(p->data + 1, nums, sizeof(int) * (k - 1));\n    for (int i = (k - 1) >> 1; i >= 1; --i) {\n        downUpdate(p->data, k - 1, i);\n    }\n    for (int i = k - 1; i < numsSize; i++) {\n        kthLargestAdd(p, nums[i]);\n    }\n    return p;\n}\n\nint kthLargestAdd(KthLargest* obj, int val) {\n    if (obj->cnt == obj->size) {\n        if (val > obj->data[1]) {\n            obj->data[1] = val;\n            downUpdate(obj->data, obj->size, 1);\n        }\n    } else {\n        obj->cnt += 1;\n        obj->data[obj->cnt] = val;\n        upUpdate(obj->data, obj->cnt);\n    }\n    return obj->data[1];\n}\n\nvoid kthLargestFree(KthLargest* obj) {\n    if (obj == NULL) return ;\n    free(obj->data);\n    free(obj);\n    return ;\n}\n")),(0,r.kt)("h4",{id:"295-\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570"},(0,r.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/find-median-from-data-stream/"},"295. \u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570")),(0,r.kt)("p",null,"\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u7528\u4ee5\u4e0b\u65b9\u5f0f\u7ef4\u62a4\u4e24\u4e2a\u5806\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u7528\u4e8e\u5b58\u50a8\u8f93\u5165\u6570\u5b57\u4e2d\u8f83\u5c0f\u4e00\u534a\u7684\u6700\u5927\u5806"),(0,r.kt)("li",{parentName:"ol"},"\u7528\u4e8e\u5b58\u50a8\u8f93\u5165\u6570\u5b57\u7684\u8f83\u5927\u4e00\u534a\u7684\u6700\u5c0f\u5806")),(0,r.kt)("p",null,"\u8fd9\u6837\u5c31\u53ef\u4ee5\u8bbf\u95ee\u8f93\u5165\u4e2d\u7684\u4e2d\u503c\uff1a\u5b83\u4eec\u7ec4\u6210\u5806\u7684\u9876\u90e8\uff01"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct Heap {\n    int *data;\n    int n, size;\n} Heap;\n\nvoid expandHeap(Heap *h) {\n    h->data = realloc(h->data, 2 * h->size * sizeof(int));\n    h->size *= 2;\n    return ;\n}\n\n#define swap(a, b) { \\\n    __typeof(a) __temp = a; \\\n    a = b, b = __temp; \\\n}\n\n#define pushHeap(h, val, comp) { \\\n    if (h->size == h->n + 1) { \\\n        expandHeap(h); \\\n    } \\\n    h->data[++(h->n)] = val; \\\n    int ind = h->n; \\\n    while (ind != 1 && h->data[ind] comp h->data[ind >> 1]) { \\\n        swap(h->data[ind], h->data[ind >> 1]); \\\n        ind >>= 1; \\\n    } \\\n}\n\n#define popHeap(h, comp) do { \\\n    if (h->n == 0) break; \\\n    h->data[1] = h->data[(h->n)--]; \\\n    int ind = 1; \\\n    while (ind << 1 <= h->n) { \\\n        int temp = ind, l = ind << 1, r = ind << 1 | 1; \\\n        if (h->data[l] comp h->data[temp]) temp = l; \\\n        if (r <= h->n && h->data[r] comp h->data[temp]) temp = r; \\\n        if (temp == ind) break; \\\n        swap(h->data[temp], h->data[ind]); \\\n        ind = temp; \\\n    } \\\n} while(0);\n\nHeap *creatHeap() {\n    Heap *h = (Heap *)malloc(sizeof(Heap));\n    h->size = 100;\n    h->data = (int *)malloc(sizeof(int) * h->size);\n    h->n = 0;\n    return h;\n}\n\nvoid clearHeap(Heap *h) {\n    if (h == NULL) return ;\n    free(h->data);\n    free(h);\n    return ;\n}\n\ntypedef struct {\n    Heap *min_heap, *max_heap;\n} MedianFinder;\n\n/** initialize your data structure here. */\n\nMedianFinder* medianFinderCreate() {\n    MedianFinder* m = (MedianFinder*)malloc(sizeof(MedianFinder));\n    m->min_heap = creatHeap();\n    m->max_heap = creatHeap();\n    return m;\n}\n\nvoid medianFinderAddNum(MedianFinder* m, int num) {\n    if (m->min_heap->n == 0 || num >= m->min_heap->data[1]) {\n        pushHeap(m->min_heap, num, <);\n    } else {\n        pushHeap(m->max_heap, num, >);\n    }\n    if (m->min_heap->n - m->max_heap->n == 2) {\n        pushHeap(m->max_heap, m->min_heap->data[1], >);\n        popHeap(m->min_heap, <);\n    }\n    if (m->max_heap->n - m->min_heap->n == 2) {\n        pushHeap(m->min_heap, m->max_heap->data[1], <);\n        popHeap(m->max_heap, >);\n    }\n    return ;\n}\n\ndouble medianFinderFindMedian(MedianFinder* m) {\n    switch (m->min_heap->n - m->max_heap->n) {\n        case -1: return m->max_heap->data[1];\n        case 0: return 1.0 * (m->min_heap->data[1] + m->max_heap->data[1]) / 2.0;\n        case 1: return m->min_heap->data[1];\n    }\n    return 0.0;\n}\n\nvoid medianFinderFree(MedianFinder* obj) {\n    if (obj == NULL) return ;\n    clearHeap(obj->min_heap);\n    clearHeap(obj->max_heap);\n    free(obj);\n    return ;\n}\n")),(0,r.kt)("h4",{id:"lc-264-\u4e11\u6570-ii"},"LC-264 ",(0,r.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/ugly-number-ii/description/"},"\u4e11\u6570 II")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u51fa\u7b2c ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," \u4e2a\u4e11\u6570\u3002"),(0,r.kt)("p",{parentName:"blockquote"},"\u4e11\u6570\u5c31\u662f\u8d28\u56e0\u6570\u53ea\u5305\u542b ",(0,r.kt)("inlineCode",{parentName:"p"},"2, 3, 5")," \u7684",(0,r.kt)("strong",{parentName:"p"},"\u6b63\u6574\u6570"),"\u3002")),(0,r.kt)("p",null,"2.\u4f18\u5148\u961f\u5217 (\u5c0f\u9876\u5806)\n\u4f18\u5148\u961f\u5217/\u5c0f\u9876\u5806/\u5927\u9876\u5806\n\u5229\u7528\u4f18\u5148\u961f\u5217\u6709\u81ea\u52a8\u6392\u5e8f\u7684\u529f\u80fd\n\u6bcf\u6b21\u53d6\u51fa\u961f\u5934\u5143\u7d20\uff0c\u5b58\u5165\u961f\u5934\u5143\u7d20",(0,r.kt)("em",{parentName:"p"},"2\u3001\u961f\u5934\u5143\u7d20"),"3\u3001\u961f\u5934\u5143\u7d20*5\n\u4f46\u6ce8\u610f\uff0c\u50cf 12 \u8fd9\u4e2a\u5143\u7d20\uff0c\u53ef\u7531 4 \u4e58 3 \u5f97\u5230\uff0c\u4e5f\u53ef\u7531 6 \u4e58 2 \u5f97\u5230\uff0c\u6240\u4ee5\u8981\u6ce8\u610f\u53bb\u91cd\n\u8fd8\u53ef\u4ee5\u66f4\u8fdb\u4e00\u6b65\u91c7\u7528 set \u6765\u8bc6\u522b\u6709\u65e0\u91cd\u590d"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int nthUglyNumber(int n) {\n        priority_queue <double,vector<double>,greater<double> > q;\n        set<int> s;\n        s.insert(1);\n        vector<int> mask({2,3,5});\n        double answer=1;\n        for (int i=1;i<n;++i)\n        {\n            for (int &j:mask)\n                if (s.count(answer*j)==0)\n                {\n                    q.push(answer*j);\n                    s.insert(answer*j);\n                }\n            answer=q.top();\n            q.pop();\n        }\n        return answer;\n    }\n};\n\n")),(0,r.kt)("p",null,"3.\u52a8\u6001\u89c4\u5212 (\u4e09\u6307\u9488)\n\u6211\u4eec\u5148\u6a21\u62df\u624b\u5199\u4e11\u6570\u7684\u8fc7\u7a0b\n1 \u6253\u5934\uff0c1 \u4e58 2 1 \u4e58 3 1 \u4e58 5\uff0c\u73b0\u5728\u662f {1,2,3,5}\n\u8f6e\u5230 2\uff0c2 \u4e58 2 2 \u4e58 3 2 \u4e58 5\uff0c\u73b0\u5728\u662f {1,2,3,4,5,6,10}\n\u624b\u5199\u7684\u8fc7\u7a0b\u548c\u91c7\u7528\u5c0f\u9876\u5806\u7684\u65b9\u6cd5\u5f88\u50cf\uff0c\u4f46\u662f\u600e\u4e48\u505a\u5230\u63d0\u524d\u6392\u5e8f\u5462"),(0,r.kt)("p",null,"\u5c0f\u9876\u5806\u7684\u65b9\u6cd5\u662f\u5148\u5b58\u518d\u6392\uff0cdp \u7684\u65b9\u6cd5\u5219\u662f\u5148\u6392\u518d\u5b58\n\u6211\u4eec\u8bbe 3 \u4e2a\u6307\u9488 p_2,p_3,p_5\n\u4ee3\u8868\u7684\u662f\u7b2c\u51e0\u4e2a\u6570\u76842\u500d\u3001\u7b2c\u51e0\u4e2a\u6570 3 \u500d\u3001\u7b2c\u51e0\u4e2a\u6570 5 \u500d\n\u52a8\u6001\u65b9\u7a0b dp","[i]","=min(dp","[p_2]",(0,r.kt)("em",{parentName:"p"},"2,dp","[p_3]"),"3,dp","[p_5]","*5)\n\u5c0f\u9876\u5806\u662f\u4e00\u4e2a\u5143\u7d20\u51fa\u6765\u7136\u540e\u5b58 3 \u4e2a\u5143\u7d20\n\u52a8\u6001\u89c4\u5212\u5219\u662f\u6807\u8bc6 3 \u4e2a\u5143\u7d20\uff0c\u901a\u8fc7\u6bd4\u8f83\u4ed6\u4eec\u7684 2 \u500d\u30013 \u500d\u30015 \u500d\u7684\u5927\u5c0f\uff0c\u6765\u4e00\u4e2a\u4e00\u4e2a\u5b58"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"        int t1 = 0, t2 = 0, t3 = 0;\n        vector<int> k(n);\n        k[0] = 1;\n        for (int i = 1; i < n; ++i) {\n            int f1 = k[t1] * 2, f2 = k[t2] * 3, f3 = k[t3] * 5;\n            k[i] = min(f1, min(f2, f3));\n            if (k[i] == f1) t1++;\n            if (k[i] == f2) t2++;\n            if (k[i] == f3) t3++;\n        }\n        return k[n - 1];\n")),(0,r.kt)("h4",{id:"lc-23-\u5408\u5e76k\u4e2a\u5347\u5e8f\u94fe\u8868"},"LC-23 ",(0,r.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/merge-k-sorted-lists/description/"},"\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u5206\u6cbb\u5408\u5e76")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        if (lists.empty()) return nullptr;\n        return merge(lists, 0, lists.size() - 1);\n    }\nprivate :\n    ListNode* merge(vector<ListNode*>& lists, int l, int r) {\n        if (l == r) return lists[l];\n        if (l > r) return nullptr;\n        int mid = (l + r) >> 1;\n        return mergeTwoLists(merge(lists, l, mid), merge(lists, mid + 1, r));\n    }\n    ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {\n        if (!l1) return l2;\n        if (!l2) return l1;\n        ListNode dummy, *p = &dummy;\n        dummy.next = nullptr;\n        while (l1 || l2) {\n            if (!l2 || l1 && l1->val < l2->val) {\n                p->next = l1;\n                p = p->next;\n                l1 = l1->next;\n            } else {\n                p->next = l2;\n                p = p->next;\n                l2 = l2->next;\n            }\n        }\n        return dummy.next;\n    }\n};\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\u4f7f\u7528\u4f18\u5148\u961f\u5217\u5408\u5e76"),(0,r.kt)("p",{parentName:"li"},"\u9700\u8981\u7ef4\u62a4\u5f53\u524d\u6bcf\u4e2a\u94fe\u8868\u6ca1\u6709\u88ab\u5408\u5e76\u7684\u5143\u7d20\u7684\u6700\u524d\u9762\u4e00\u4e2a\uff0ck\u4e2a\u94fe\u8868\u5c31\u6700\u591a\u6709 k\u4e2a\u6ee1\u8db3\u8fd9\u6837\u6761\u4ef6\u7684\u5143\u7d20\uff0c\u6bcf\u6b21\u5728\u8fd9\u4e9b\u5143\u7d20\u91cc\u9762\u9009\u53d6 val \u5c5e\u6027\u6700\u5c0f\u7684\u5143\u7d20\u5408\u5e76\u5230\u7b54\u6848\u4e2d"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    typedef pair<int, ListNode *> PII;\n    struct cmp {\n        bool operator()(const PII &a, const PII &b) const {\n          return a.first > b.first;\n      }\n    };\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        if (lists.empty()) return nullptr;\n        //return merge(lists, 0, lists.size() - 1);\n        priority_queue<PII, vector<PII>, cmp> q;\n        for (auto cur : lists) {\n            if (cur) q.push({cur->val, cur});\n        }\n        ListNode head, *tail = &head;\n        while (!q.empty()) {\n            auto cur = q.top();\n            ListNode *ptr = cur.second;\n            q.pop();\n            tail->next = ptr;\n            tail = tail->next;\n            if (ptr->next) q.push({ptr->next->val, ptr->next});\n        }\n        tail->next = nullptr;\n        return head.next;\n\n    }\n")),(0,r.kt)("h4",{id:"hzoj-571-\u5173\u7cfb\u7f51\u7edc1cpp"},"HZOJ-571-\u5173\u7cfb\u7f51\u7edc1.cpp"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n#include <map>\n#include <cmath>\n#include <set>\nusing namespace std;\n#define MAX_N 100\nint arr[MAX_N + 5][MAX_N + 5];\n\nstruct Data {\n    Data(int a, int b, int c) {\n        x = a, y = b, cnt = c;\n    }\n    int cnt, x, y;\n};\n\nstruct DataCompare {\n    bool operator()(const Data &a, const Data &b) const {\n        if (a.cnt - b.cnt) return a.cnt < b.cnt;\n        if (a.x - b.x) return a.x < b.x;\n        return a.y < b.y;\n    }\n};\n\nset<Data, DataCompare> s;\n\nint main() {\n    int n, x, y;\n    cin >> n >> x >> y;\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            cin >> arr[i][j];\n            if (arr[i][j]) {\n                s.insert(Data(i, j, 1));\n            }\n        }\n    }\n    while (s.size()) {\n        int x = s.begin()->x;\n        int y = s.begin()->y;\n        int cnt = s.begin()->cnt;\n        s.erase(s.begin());\n        for (int i = 1; i <= n; i++) {\n            if (arr[y][i] != 1) continue;\n            if (arr[x][i]) continue;\n            arr[x][i] = cnt + 1;\n            s.insert(Data(x, i, cnt + 1));\n        }\n    }\n    cout << arr[x][y] - 1 << endl;\n    return 0;\n}\n")),(0,r.kt)("h4",{id:"hzoj-572-\u6709\u5e8f\u8868\u7684\u6700\u5c0f\u548ccpp"},"HZOJ-572-\u6709\u5e8f\u8868\u7684\u6700\u5c0f\u548c.cpp"),(0,r.kt)("p",null," \u7ed9\u51fa\u4e24\u4e2a\u957f\u5ea6\u4e3a ",(0,r.kt)("em",{parentName:"p"},"\ud835\udc5b"),"n \u7684\u6709\u5e8f\u8868 ",(0,r.kt)("em",{parentName:"p"},"\ud835\udc34"),"A \u548c ",(0,r.kt)("em",{parentName:"p"},"\ud835\udc35"),"B\uff0c\u5728 ",(0,r.kt)("em",{parentName:"p"},"\ud835\udc34"),"A \u548c ",(0,r.kt)("em",{parentName:"p"},"\ud835\udc35"),"B \u4e2d\u5404\u4efb\u53d6\u4e00\u4e2a\u5143\u7d20\uff0c\u53ef\u4ee5\u5f97\u5230 ",(0,r.kt)("em",{parentName:"p"},"\ud835\udc5b"),"2n2 \u4e2a\u548c\uff0c\u6c42\u8fd9\u4e9b\u548c\u4e2d\u524d ",(0,r.kt)("em",{parentName:"p"},"\ud835\udc5b"),"n \u4e2a\u6700\u5c0f\u503c\u3002"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u53cc\u6307\u9488")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n#include <map>\n#include <cmath>\n#include <set>\nusing namespace std;\n#define MAX_N 400000\nlong long a[MAX_N + 5], b[MAX_N + 5];\n\nstruct Data {\n    Data(long long val, long long i, long long j) : val(val), i(i), j(j) {}\n    long long val, i, j;\n    bool operator<(const Data &a) const {\n        if (val - a.val) return val < a.val;\n        if (i - a.i) return i < a.i;\n        return j < a.j;\n    }\n};\n\nset<Data> s;\n\nint main() {\n    int n;\n    scanf("%d", &n);\n    for (int i = 0; i < n; i++) scanf("%lld", a + i);\n    for (int i = 0; i < n; i++) scanf("%lld", b + i);\n    s.insert(Data(a[0] + b[0], 0, 0));\n    for (long long i = 0; i < n; i++) {\n        long long val = s.begin()->val;\n        long long x = s.begin()->i;\n        long long y = s.begin()->j;\n        s.erase(s.begin());\n        printf("%lld\\n", val);\n        if (x + 1 < n) s.insert(Data(a[x + 1] + b[y], x + 1, y));\n        if (y + 1 < n) s.insert(Data(a[x] + b[y + 1], x, y + 1));\n    }\n    return 0;\n}\n')),(0,r.kt)("p",null,"2.\u4f18\u5148\u961f\u5217"),(0,r.kt)("h4",{id:"hzoj-284-\u8d85\u5e02\u5356\u8d27-\u4e8c\u53c9\u5806-\u5e76\u67e5\u96c6"},"hzoj-284-\u8d85\u5e02\u5356\u8d27-\u4e8c\u53c9\u5806-\u5e76\u67e5\u96c6"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u8d85\u5e02\u91cc\u6709N\u4e2a\u5546\u54c1. \u7b2ci\u4e2a\u5546\u54c1\u5fc5\u987b\u5728\u4fdd\u8d28\u671f(\u7b2cdi\u5929)\u4e4b\u524d\u5356\u6389, \u82e5\u5356\u6389\u53ef\u8ba9\u8d85\u5e02\u83b7\u5f97pi\u7684\u5229\u6da6."),(0,r.kt)("p",{parentName:"blockquote"},"\u6bcf\u5929\u53ea\u80fd\u5356\u4e00\u4e2a\u5546\u54c1."),(0,r.kt)("p",{parentName:"blockquote"},"\u73b0\u5728\u4f60\u8981\u8ba9\u8d85\u5e02\u83b7\u5f97\u6700\u5927\u7684\u5229\u6da6.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <queue>\n#include <stack>\n#include <algorithm>\n#include <string>\n#include <map>\n#include <set>\n#include <vector>\nusing namespace std;\n#define MAX_N 10000\nstruct Data {\n    int p, d;\n} a[MAX_N + 5];\n\nbool cmp(const Data &a, const Data &b) {\n    return a.d < b.d;\n}\n\ntypedef pair<int, int> PII;\nset<PII> s;\n\nint main() {\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        cin >> a[i].p >> a[i].d;\n    }\n    sort(a, a + n, cmp);\n    for (int i = 0; i < n; i++) {\n        if (s.size() < a[i].d) {\n      //\u63d2\u5165i\u662f\u4e3a\u4e86set\u53bb\u91cd\n            s.insert(PII(a[i].p, i));\n        } else if (s.begin()->first < a[i].p) {\n            s.erase(s.begin());\n            s.insert(PII(a[i].p, i));\n        }\n    }\n    int ans = 0;\n    for (auto iter = s.begin(); iter != s.end(); iter++) {\n        ans += iter->first;\n        cout << iter->first << endl;\n    }\n    cout << ans << endl;\n    return 0;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#define MAX_N 10000\n\nstruct Data {\n    int p, d;\n} arr[MAX_N + 5];\n \nstruct UnionSet {\n    int fa[MAX_N + 5];\n    void init(int n) {\n        for (int i = 0; i <= n; ++i) fa[i] = i;\n    }\n    int get(int x) {\n        return (fa[x] = (x - fa[x] ? get(fa[x]) : x));\n    }\n    //\u6839\u8282\u70b9\u4ee3\u8868\u5f53\u524d\u8282\u70b9\u524d\u9762\u7b2c\u4e00\u4e2a\u7a7a\u4f4d\u7f6e\n    //\u524d\u9762\u505a\u513f\u5b50\n    void merge(int a, int b) {\n        fa[get(a)] = get(b);\n    }\n};\n\nbool cmp(const Data &a, const Data &b) {\n    return a.p > b.p;\n}\n\nUnionSet u;\n\nint solve(int n) {\n    for (int i = 0; i < n; ++i) {\n        cin >> arr[i].p >> arr[i].d;\n    }\n    sort(arr, arr + n, cmp);\n    u.init(MAX_N);\n    int ans = 0;\n    for (int i = 0; i < n; ++i) {\n        if (u.get(arr[i].d) == 0) continue;\n        ans += arr[i].p;\n        int day = u.get(arr[i].d);\n        //\u8ba9day\u4f5c\u4e3aday-1\u7684\u5b50\u96c6\uff0cday\u88ab\u5360\u7528\n        u.merge(day, day - 1);\n    }\n    cout << ans << endl;\n    return 0;\n}\n\nint main() {\n    int n;\n    while (cin >> n) solve(n);\n    return 0;\n}\n\n")),(0,r.kt)("h4",{id:"hzoj-286-\u6570\u636e\u5907\u4efd"},"hzoj-286. \u6570\u636e\u5907\u4efd"),(0,r.kt)("p",null,"\u7b49\u6548\u6743\u503c\u66ff\u6362"),(0,r.kt)("p",null,"\u53cd\u6094\u7b56\u7565"),(0,r.kt)("p",null,"\u57fa\u4e8e\u9009\u62e9\u4e00\u6761\u7535\u7f06\u7684\u60c5\u51b5\u53bb\u9009\u62e9\u7b2c\u4e8c\u6761\u7535\u7f06"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image-20210121192544196",src:t(7529).Z})),(0,r.kt)("p",null,"\u82e5\u8981\u9009\u62e9\u5468\u56f4\u76843-4\u5219\u5fc5\u987b\u9009\u62e91-2"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image-20210121192854505",src:t(35260).Z})),(0,r.kt)("p",null,"\u7b49\u6548\u56fe\u7684\u751f\u6210\uff0c\u53cd\u6094\u4fa7\u7387"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#define MAX_N 100000\n#define inf 0x3f3f3f\n\nint a[MAX_N + 5];\nint l[MAX_N + 5], pre[MAX_N + 5], nxt[MAX_N + 5];\ntypedef pair<int, int> PII;\nset<PII> s;\n\nint main() {\n    int n, k;\n    cin >> n >> k;\n    a[0] = 0;\n    for (int i = 1; i <= n; ++i) {\n        cin >> a[i];\n        l[i] = a[i] - a[i - 1];\n        pre[i] = i - 1;\n        nxt[i] = i + 1 > n ? 0 : i + 1;\n        s.insert(PII(l[i], i));\n    }\n    int sum = 0;\n    while (k) {\n        int t0 = s.begin()->second, t1 = pre[t0], t2 = nxt[t0];\n        if (t1 == 0 || l[t0] != s.begin()->first) {\n            s.erase(s.begin());\n            continue;\n        }\n        s.erase(s.begin());\n        sum += l[t0];\n        k--;\n        l[t0] = l[t1] + l[t2] - l[t0];\n        l[t1] = l[t2] = inf;\n        if (t2 == 0) continue;\n        pre[t0] = pre[t1];\n        nxt[t0] = nxt[t2];\n        nxt[pre[t1]] = t0;\n        pre[nxt[t2]] = t0;\n        s.insert(PII(l[t0], t0));\n    }\n    cout << sum << endl;\n\n    return 0;\n}\n\n")),(0,r.kt)("h4",{id:"hzoj-289-\u751f\u65e5\u793c\u7269cpp"},"HZOJ-289-\u751f\u65e5\u793c\u7269.cpp"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.cnblogs.com/zyfzyf/p/4114774.html"},"BZOJ2288")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"}," \u674e\u534e 1818 \u5c81\u751f\u65e5\u7684\u65f6\u5019\uff0c\u5c0f\u660e\u7ed9\u5979\u770b\u4e86\u4e00\u4e2a\u795e\u5947\u7684\u5e8f\u5217 ",(0,r.kt)("em",{parentName:"p"},"\ud835\udc34"),"1,",(0,r.kt)("em",{parentName:"p"},"\ud835\udc34"),"2,...,",(0,r.kt)("em",{parentName:"p"},"\ud835\udc34**\ud835\udc41"),"A1,A2,...,AN\u3002 \u5979\u88ab\u5141\u8bb8\u9009\u62e9\u4e0d\u8d85\u8fc7 ",(0,r.kt)("em",{parentName:"p"},"\ud835\udc40"),"M \u4e2a\u8fde\u7eed\u7684\u90e8\u5206\u4f5c\u4e3a\u81ea\u5df1\u7684\u751f\u65e5\u793c\u7269\u3002\u81ea\u7136\u5730\uff0c\u674e\u534e\u60f3\u8981\u77e5\u9053\u9009\u62e9\u5143\u7d20\u4e4b\u548c\u7684\u6700\u5927\u503c\u3002\u4f60\u80fd\u5e2e\u52a9\u5979\u5417\uff1f\n\u9996\u5148\u8fde\u5728\u4e00\u5757\u7684\u6b63\u8d1f\u76f8\u540c\u7684\u80af\u5b9a\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u6b63\u8d1f\u4ea4\u66ff\u7684\u6570\u5217\uff0c\u5e76\u4e14\u9996\u4f4d\u4e24\u9879\u90fd\u662f\u6b63\u6570\uff08\u8d1f\u6570\u53bb\u6389\uff09")),(0,r.kt)("p",null,"\u7136\u540e\u5982\u679c\u6b63\u7684\u9879\u6570<=m\uff0c\u90a3\u663e\u7136\u6211\u4eec\u5168\u90e8\u9009\u8d70\u5c31\u83b7\u5f97\u4e86\u6700\u5927\u6743\u503c\uff0c\u5426\u5219\u6211\u4eec\u9700\u8981\u505a\u4e00\u70b9\u727a\u7272\u3002"),(0,r.kt)("p",null,"1\uff09\u4e0d\u9009\u67d0\u4e9b\u6b63\u9879"),(0,r.kt)("p",null,"2\uff09\u9009\u4e00\u4e9b\u8d1f\u9879\u4f7f\u5f97\u76f8\u90bb\u7684\u6b63\u9879\u6210\u4e3a1\u5757"),(0,r.kt)("p",null,"\u8bb0\u6240\u6709\u6b63\u6570\u4e4b\u548c\u4e3asum\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u4e0a\u9762\u4e24\u79cd\u64cd\u4f5c\u4f7f\u5f97sum\u51cf\u6389\u7684\u6570\u6700\u5c0f\u5e76\u4e14\u6ee1\u8db3\u53ea\u6709m\u5757\u3002"),(0,r.kt)("p",null,"\u6211\u4eec\u628a\u6240\u6709\u6570\u7684\u7edd\u5bf9\u503c\u653e\u5165\u4e00\u4e2a\u5806\uff0c\u6bcf\u6b21\u53d6\u6700\u5c0f\u5143\u7d20x\u3002sum'-=x"),(0,r.kt)("p",null,"\u90a3\u4e48\u5982\u679c\u8be5\u6570\u539f\u6765\u662f\u6b63\u7684\uff0c\u610f\u601d\u662f\u4e0d\u9009\u5b83\uff1b"),(0,r.kt)("p",null,"\u5982\u679c\u662f\u8d1f\u7684\uff0c\u610f\u601d\u662f\u628a\u5b83\u4e24\u8fb9\u7684\u6b63\u6570\u5408\u5e76\u3002"),(0,r.kt)("p",null,"\u4f46\u76f4\u63a5\u8fd9\u6837\u505a\u662f\u4e0d\u884c\u7684\uff0c\u6211\u4eec\u5fc5\u987b\u4fdd\u8bc1\u53d6\u8d1f\u7684\u65f6\u5019\u4e24\u8fb9\u7684\u6b63\u7684\u5fc5\u987b\u4e0d\u88ab\u53d6\uff0c\u53d6\u6b63\u7684\u65f6\u5019\u4e24\u8fb9\u7684\u8d1f\u7684\u4e0d\u88ab\u53d6\u3002"),(0,r.kt)("p",null,"\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e0d\u80fd\u9009\u62e9\u76f8\u90bb\u7684\u4e24\u4e2a\u6570\uff01\u6211\u4eec\u6210\u529f\u7684\u5c06\u6b64\u9898\u8f6c\u5316\u6210\u4e86\u6570\u636e\u5907\u4efd\u95ee\u9898\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n#include <map>\n#include <cmath>\n#include <set>\nusing namespace std;\n#define MAX_N 100000\nlong long arr[MAX_N + 5];\n\nstruct Node {\n    long long val, id, f;\n    long long pre, next;\n    bool operator<(const Node &a) const {\n        if (abs(val) - abs(a.val)) return abs(val) < abs(a.val);\n        return id < a.id;\n    }\n} list[MAX_N + 5];\n\nset<Node> s;\n\nvoid del(long long k) {\n    if (list[k].f == 0) return ;\n    if (list[k].pre)  list[list[k].pre].next = list[k].next;\n    if (list[k].next) list[list[k].next].pre = list[k].pre;\n    list[k].f = 0;\n    return ;\n}\n\nint main() {\n    long long n, m, cnt = 0, sum = 0;\n    cin >> n >> m;\n    for (long long i = 0; i < n; i++) cin >> arr[i];\n    for (long long i = 0, k = 1; i < n; k++) {\n        list[k].val = 0;\n        list[k].id = k;\n        list[k].f = 1;\n        while (i < n && arr[i] == 0) i++;\n        long long val = arr[i];\n        while (i < n && arr[i] * val >= 0) {\n            list[k].val += arr[i++];\n        }\n        if (k - 1) list[k - 1].next = k;\n        list[k].pre = k - 1;\n        list[k].next = 0;\n        if (list[k].val > 0) cnt += 1, sum += list[k].val;\n        s.insert(list[k]);\n    }\n    while (cnt > m) {\n        long long k = s.begin()->id;\n        s.erase(s.begin());\n        if (list[k].f == 0) continue;\n        if (list[k].pre && list[k].next) {\n            sum -= abs(list[k].val);\n            cnt -= 1;\n            list[k].val += list[list[k].pre].val;\n            list[k].val += list[list[k].next].val;\n            del(list[k].pre);\n            del(list[k].next);\n            s.insert(list[k]);\n        } else {\n            if (list[k].val > 0) sum -= list[k].val, cnt -= 1;\n            del(k);\n        }\n    }\n    cout << sum << endl;\n    return 0;\n}\n")),(0,r.kt)("h4",{id:"hzoj-285-\u5e8f\u5217m\u5c0f\u548c"},"HZOJ-285 \u5e8f\u5217M\u5c0f\u548c"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"  \u7ed9\u51fa\u4e00\u4e2a ",(0,r.kt)("em",{parentName:"p"},"\ud835\udc5b"),"\u2217",(0,r.kt)("em",{parentName:"p"},"\ud835\udc5a"),"n\u2217m \u7684\u77e9\u9635\uff0c\u6bcf\u884c\u53d6\u4e00\u4e2a\u5143\u7d20\uff0c\u7ec4\u6210\u4e00\u4e2a\u5305\u542b ",(0,r.kt)("em",{parentName:"p"},"\ud835\udc5b"),"n \u4e2a\u5143\u7d20\u7684\u5e8f\u5217\uff0c\u4e00\u5171\u6709 ",(0,r.kt)("em",{parentName:"p"},"\ud835\udc5a**\ud835\udc5b"),"mn \u79cd\u5e8f\u5217\uff0c\u6c42\u51fa\u5e8f\u5217\u548c\u6700\u5c0f\u7684\u524d ",(0,r.kt)("em",{parentName:"p"},"\ud835\udc5a"),"m \u4e2a\u5e8f\u5217\u7684\u5e8f\u5217\u548c\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#define INF 0x3f3f3f3f\n#define MAX_M 2000\nint nums[MAX_M + 5];\n//\u65f6\u95f4\u6233, \u52a0\u8d1f\u53f7\u6a21\u62df\u5927\u9876\u5806\ntypedef pair<int, int> PII;\n\nstruct BigSet : set<PII> {\npublic :\n    BigSet() : t(0) {}\n    void insert(int &a) {\n        this->set<PII>::insert(PII(-a, t++));\n    }\n    void pop() {\n        erase(begin());\n    }\n    int top() {\n        return -(begin()->first);\n    }\n\nprivate :\n    int t;\n};\n\nBigSet s;\n\nvoid extract(int m) {\n    for (int i = m - 1; i >= 0; --i) {\n        nums[i] = s.top();\n        s.pop();\n    }\n}\n\nint main() {\n    int n, m, x;\n    cin >> n >> m;\n    for (int i = 0; i < m; ++i) {\n        cin >> x;\n        s.insert(x);\n    }\n    for (int i = 1; i < n; ++i) {\n        extract(m);\n        for (int j = 0; j < m; ++j) {\n            cin >> x;\n            for (int k = 0; k < m; ++k) {\n                int y = x + nums[k];\n                if (s.size() == m && y >= s.top()) break;\n                if (s.size() == m) s.pop();\n                s.insert(y);\n            }\n        }\n    }\n    extract(m);\n    for (int i = 0; i < m; ++i) {\n        i && cout << " ";\n        cout << nums[i];\n    }\n    cout << endl;\n    return 0;\n}\n\n')))}c.isMDXComponent=!0},6649:function(n,e,t){"use strict";e.Z=t.p+"assets/images/image-20201008200910691-3baab76da896d3a08ac944b03c954f74.png"},7529:function(n,e,t){"use strict";e.Z=t.p+"assets/images/image-20210121192544196-d89e97924f384bf79b855f068b028b00.png"},35260:function(n,e,t){"use strict";e.Z=t.p+"assets/images/image-20210121192854505-fb96ca781f4a9ef6abf7f67001a2033b.png"}}]);