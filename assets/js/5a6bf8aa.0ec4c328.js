(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[7682],{3905:function(n,t,e){"use strict";e.d(t,{Zo:function(){return s},kt:function(){return f}});var a=e(67294);function r(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function i(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,a)}return e}function l(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?i(Object(e),!0).forEach((function(t){r(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):i(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function c(n,t){if(null==n)return{};var e,a,r=function(n,t){if(null==n)return{};var e,a,r={},i=Object.keys(n);for(a=0;a<i.length;a++)e=i[a],t.indexOf(e)>=0||(r[e]=n[e]);return r}(n,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(a=0;a<i.length;a++)e=i[a],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}return r}var o=a.createContext({}),u=function(n){var t=a.useContext(o),e=t;return n&&(e="function"==typeof n?n(t):l(l({},t),n)),e},s=function(n){var t=u(n.components);return a.createElement(o.Provider,{value:t},n.children)},p={inlineCode:"code",wrapper:function(n){var t=n.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(n,t){var e=n.components,r=n.mdxType,i=n.originalType,o=n.parentName,s=c(n,["components","mdxType","originalType","parentName"]),d=u(e),f=r,_=d["".concat(o,".").concat(f)]||d[f]||p[f]||i;return e?a.createElement(_,l(l({ref:t},s),{},{components:e})):a.createElement(_,l({ref:t},s))}));function f(n,t){var e=arguments,r=t&&t.mdxType;if("string"==typeof n||r){var i=e.length,l=new Array(i);l[0]=d;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=n,c.mdxType="string"==typeof n?n:r,l[1]=c;for(var u=2;u<i;u++)l[u]=e[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,e)}d.displayName="MDXCreateElement"},3427:function(n,t,e){"use strict";e.r(t),e.d(t,{frontMatter:function(){return c},metadata:function(){return o},toc:function(){return u},default:function(){return p}});var a=e(22122),r=e(19756),i=(e(67294),e(3905)),l=["components"],c={id:"A1.Gtest\u6d4b\u8bd5\u6846\u67b6",title:"A1.Gtest\u6d4b\u8bd5\u6846\u67b6","typora-root-url":"../"},o={unversionedId:"Project/A1.Gtest\u6d4b\u8bd5\u6846\u67b6",id:"Project/A1.Gtest\u6d4b\u8bd5\u6846\u67b6",isDocsHomePage:!1,title:"A1.Gtest\u6d4b\u8bd5\u6846\u67b6",description:"gtest",source:"@site/docs/13.Project/A1.Gtest\u6d4b\u8bd5\u6846\u67b6.md",sourceDirName:"13.Project",slug:"/Project/A1.Gtest\u6d4b\u8bd5\u6846\u67b6",permalink:"/Project/A1.Gtest\u6d4b\u8bd5\u6846\u67b6",editUrl:"https://github.com/worst0/wiki_note/edit/main/docs/13.Project/A1.Gtest\u6d4b\u8bd5\u6846\u67b6.md",version:"current",frontMatter:{id:"A1.Gtest\u6d4b\u8bd5\u6846\u67b6",title:"A1.Gtest\u6d4b\u8bd5\u6846\u67b6","typora-root-url":"../"},sidebar:"Document\ud83d\udcbb",previous:{title:"C1.\u7b80\u5386",permalink:"/Interview/C1.\u7b80\u5386"},next:{title:"A2.udp-football",permalink:"/Project/A2.udp-football"}},u=[{value:"gtest",id:"gtest",children:[{value:"gtest\u4ecb\u7ecd",id:"gtest\u4ecb\u7ecd",children:[]},{value:"gtest\u7cfb\u5217\u4e4bTEST\u5b8f",id:"gtest\u7cfb\u5217\u4e4btest\u5b8f",children:[]},{value:"gtest\u7cfb\u5217\u4e4b\u65ad\u8a00",id:"gtest\u7cfb\u5217\u4e4b\u65ad\u8a00",children:[]}]},{value:"haizei_test\u81ea\u5236\u5355\u5143\u6d4b\u8bd5",id:"haizei_test\u81ea\u5236\u5355\u5143\u6d4b\u8bd5",children:[{value:"GNU\u7684\u5c5e\u6027\uff08attribute\uff09",id:"gnu\u7684\u5c5e\u6027\uff08attribute\uff09",children:[]},{value:"1.\u521d\u7248\u6d4b\u8bd5\u6846\u67b6",id:"1\u521d\u7248\u6d4b\u8bd5\u6846\u67b6",children:[]},{value:"2.\u8f93\u51fa\u989c\u8272\u4e0e\u683c\u5f0f\u4fe1\u606f",id:"2\u8f93\u51fa\u989c\u8272\u4e0e\u683c\u5f0f\u4fe1\u606f",children:[]},{value:"3.\u8f93\u51fa\u7edf\u8ba1\u4fe1\u606f",id:"3\u8f93\u51fa\u7edf\u8ba1\u4fe1\u606f",children:[]},{value:"4.\u8f93\u51fa\u9519\u8bef\u4fe1\u606f",id:"4\u8f93\u51fa\u9519\u8bef\u4fe1\u606f",children:[]},{value:"5.\u94fe\u8868\u5916\u9aa8\u9abc",id:"5\u94fe\u8868\u5916\u9aa8\u9abc",children:[]},{value:"makefile\u6587\u4ef6",id:"makefile\u6587\u4ef6",children:[]},{value:"test.h",id:"testh",children:[]},{value:"test.c",id:"testc",children:[]},{value:"linklist.h",id:"linklisth",children:[]}]}],s={toc:u};function p(n){var t=n.components,e=(0,r.Z)(n,l);return(0,i.kt)("wrapper",(0,a.Z)({},s,e,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"gtest"},"gtest"),(0,i.kt)("h3",{id:"gtest\u4ecb\u7ecd"},"gtest\u4ecb\u7ecd"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"gtest\u662f\u4e00\u4e2a\u8de8\u5e73\u53f0\u7684(Liunx\u3001Mac OS X\u3001Windows\u3001Cygwin \u3001Windows CE and Symbian )  C++\u5355\u5143\u6d4b\u8bd5\u6846\u67b6\uff0c\u7531google\u516c\u53f8\u53d1\u5e03\u3002gtest\u662f\u4e3a\u5728\u4e0d\u540c\u5e73\u53f0\u4e0a\u4e3a\u7f16\u5199C++\u6d4b\u8bd5\u800c\u751f\u6210\u7684\u3002\u5b83\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u65ad\u8a00\u3001\u81f4\u547d\u548c\u975e\u81f4\u547d\u5224\u65ad\u3001\u53c2\u6570\u5316\u3001\u201d\u6b7b\u4ea1\u6d4b\u8bd5\u201d\u7b49\u7b49")),(0,i.kt)("h3",{id:"gtest\u7cfb\u5217\u4e4btest\u5b8f"},"gtest\u7cfb\u5217\u4e4bTEST\u5b8f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"TEST(test_case_name, test_name)\nTEST_F(test_fixture,test_name) //\u591a\u4e2a\u6d4b\u8bd5\u573a\u666f\u9700\u8981\u76f8\u540c\u6570\u636e\u914d\u7f6e\u7684\u60c5\u51b5\uff0c\u7528TEST_F\u3002TEST_F test fixture\uff0c\u6d4b\u8bd5\u5939\u5177\uff0c\u6d4b\u8bd5\u5957\uff0c\u627f\u62c5\u4e86\u4e00\u4e2a\u6ce8\u518c\u7684\u529f\u80fd\u3002 \n")),(0,i.kt)("p",null,"TEST\u5b8f\u7684\u4f5c\u7528\u662f\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u6d4b\u8bd5\uff0c\u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6d4b\u8bd5\u51fd\u6570\uff0c\u5728\u8fd9\u4e2a\u51fd\u6570\u91cc\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55C++\u4ee3\u7801\u5e76\u4f7f\u7528\u63d0\u4f9b\u7684\u65ad\u8a00\u6765\u8fdb\u884c\u68c0\u67e5\u3002"),(0,i.kt)("h3",{id:"gtest\u7cfb\u5217\u4e4b\u65ad\u8a00"},"gtest\u7cfb\u5217\u4e4b\u65ad\u8a00"),(0,i.kt)("p",null,"gtest\u4e2d\u65ad\u8a00\u7684\u5b8f\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\uff1a\u4e00\u7c7b\u662fASSERT\u5b8f\uff0c\u53e6\u4e00\u7c7b\u5c31\u662fEXPECT\u5b8f\u4e86\u3002\n1\u3001",(0,i.kt)("inlineCode",{parentName:"p"},"ASSERT_"),"\u7cfb\u5217\uff1a\u5982\u679c\u5f53\u524d\u70b9\u68c0\u6d4b\u5931\u8d25\u5219\u9000\u51fa\u5f53\u524d\u51fd\u6570\n2\u3001",(0,i.kt)("inlineCode",{parentName:"p"},"EXPECT_"),"\u7cfb\u5217\uff1a\u5982\u679c\u5f53\u524d\u70b9\u68c0\u6d4b\u5931\u8d25\u5219\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c "),(0,i.kt)("p",null,"bool\u503c\u68c0\u67e5"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"ASSERT_TRUE(\u53c2\u6570)\uff0c\u671f\u5f85\u7ed3\u679c\u662ftrue"),(0,i.kt)("li",{parentName:"ol"},"ASSERT_FALSE(\u53c2\u6570)\uff0c\u671f\u5f85\u7ed3\u679c\u662ffalse")),(0,i.kt)("p",null,"\u6570\u503c\u578b\u6570\u636e\u68c0\u67e5"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"ASSERT_EQ(\u53c2\u65701\uff0c\u53c2\u65702)\uff0cequal\uff0c\u7b49\u4e8e\u624d\u8fd4\u56detrue                       "),(0,i.kt)("li",{parentName:"ol"},"ASSERT_NE(\u53c2\u65701\uff0c\u53c2\u65702)\uff0cnot equal\uff0c\u4e0d\u7b49\u4e8e\u624d\u8fd4\u56detrue"),(0,i.kt)("li",{parentName:"ol"},"ASSERT_LT(\u53c2\u65701\uff0c\u53c2\u65702)\uff0cless than\uff0c\u5c0f\u4e8e\u624d\u8fd4\u56detrue"),(0,i.kt)("li",{parentName:"ol"},"ASSERT_GT(\u53c2\u65701\uff0c\u53c2\u65702)\uff0cgreater than\uff0c\u5927\u4e8e\u624d\u8fd4\u56detrue"),(0,i.kt)("li",{parentName:"ol"},"ASSERT_LE(\u53c2\u65701\uff0c\u53c2\u65702)\uff0cless equal\uff0c\u5c0f\u4e8e\u7b49\u4e8e\u624d\u8fd4\u56detrue"),(0,i.kt)("li",{parentName:"ol"},"ASSERT_GE(\u53c2\u65701\uff0c\u53c2\u65702)\uff0cgreater equal\uff0c\u5927\u4e8e\u7b49\u4e8e\u624d\u8fd4\u56detrue")),(0,i.kt)("p",null,"\u5b57\u7b26\u4e32\u68c0\u67e5"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"ASSERT_STREQ(expected_str, actual_str)\uff0c\u4e24\u4e2aC\u98ce\u683c\u7684\u5b57\u7b26\u4e32\u76f8\u7b49\u624d\u6b63\u786e\u8fd4\u56de"),(0,i.kt)("li",{parentName:"ol"},"ASSERT_STRNE(str1, str2)\uff0c\u4e24\u4e2aC\u98ce\u683c\u7684\u5b57\u7b26\u4e32\u4e0d\u76f8\u7b49\u65f6\u624d\u6b63\u786e\u8fd4\u56de"),(0,i.kt)("li",{parentName:"ol"},"ASSERT_STRCASEEQ(expected_str,actual_str)")),(0,i.kt)("h2",{id:"haizei_test\u81ea\u5236\u5355\u5143\u6d4b\u8bd5"},"haizei_test\u81ea\u5236\u5355\u5143\u6d4b\u8bd5"),(0,i.kt)("h3",{id:"gnu\u7684\u5c5e\u6027\uff08attribute\uff09"},"GNU\u7684\u5c5e\u6027\uff08attribute\uff09"),(0,i.kt)("p",null,"\u5c5e\u6027\u7684\u771f\u6b63\u5f3a\u5927\u4e4b\u5904\u5728\u4e8e\u5b83\u4eec\u80fd\u591f\u8ba9\u7f16\u8bd1\u5668\u4f9b\u5e94\u5546\u521b\u5efa\u4ed6\u4eec\u81ea\u5df1\u7684\u8bed\u8a00\u6269\u5c55\uff0c\u540c\u65f6\u4e0d\u4f1a\u5e72\u6270\u8bed\u8a00\u6216\u7b49\u5f85\u7279\u6027\u7684\u6807\u51c6\u5316\u3002\n\u6240\u6709\u7684\u7f16\u8bd1\u5668\u90fd\u5728\u5c1d\u8bd5\u652f\u6301\u5b83\uff0c\u4ee5\u7528\u4e8e\u4fee\u9970\u7c7b\u578b\u3001\u53d8\u91cf\u548c\u51fd\u6570\u7b49\n",(0,i.kt)("inlineCode",{parentName:"p"},"__attribute__((attribute-name))"),"\u8fd9\u6837\u7684\u5199\u6cd5\uff0c\u6bcf\u4e00\u4e2a\u7f16\u8bd1\u5668\u53ef\u80fd\u8fd8\u90fd\u6709\u53d8\u79cd"),(0,i.kt)("h3",{id:"1\u521d\u7248\u6d4b\u8bd5\u6846\u67b6"},"1.\u521d\u7248\u6d4b\u8bd5\u6846\u67b6"),(0,i.kt)("p",null,"cmake\u6839\u636e\u672c\u673a\u73af\u5883\u751f\u6210\u76f8\u5e94\u7684makefile\u6587\u4ef6"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u9700\u6c42\u4f18\u5148\uff0c\u5148\u8bbe\u8ba1\u600e\u4e48\u7528")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"add(3, 5) == 8 ? True\nadd(22, 1) != 71 ? True\nadd(12, 1) < 71 ? True\nadd(4, 1) > 5 ? False\nadd(56, 1) <= 57.4 ? True\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"__attribute__((constructor))"),"\u53ef\u4ee5\u4fee\u9970\u51fd\u6570,\u4f7f\u4fee\u9970\u7684\u51fd\u6570\u5148\u4e8e\u4e3b\u51fd\u6570\u6267\u884c"),(0,i.kt)("p",null,"\u8bbe\u7f6e\u76f8\u5173\u5c5e\u6027   \u5bf9\u4e8e\u7a0b\u5e8f\u7684\u67d0\u4e9b\u91cf\u5148\u4e8e\u4e3b\u51fd\u6570\u6267\u884c"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"RUN _ ALLTESTS "),":\u83b7\u5f97\u7a0b\u5e8f\u4e2d\u6240\u6709\u518c\u8bd5\u7528\u4f8b\u7684\u51fd\u6570\u4fe1\u606f,\u901a\u8fc7\u6ce8\u518c\u51fd\u6570",(0,i.kt)("inlineCode",{parentName:"p"},"add_function()"),":\u5c06\u6d4b\u8bd5\u7528\u4f8b\u51fd\u6570\u8bb0\u5f55\u4e0b\u6765"),(0,i.kt)("p",null,"\u5b8f\u53ef\u4ee5\u5c06\u539f\u672c\u770b\u4f3c\u4e0d\u5408\u7406\u7684\u4ee3\u7801,\u53d8\u5f97\u5408\u7406\u3002",(0,i.kt)("inlineCode",{parentName:"p"},"EXPECT_EQ"),",",(0,i.kt)("inlineCode",{parentName:"p"},"TEST"),"\u5747\u4e3a\u5b8f"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"TEST"),"\u5b8f\u8981\u5b9e\u73b0\u51fd\u6570\u7684\u5b9a\u4e49,(\u51fd\u6570\u540d\u79f0\u901a\u8fc7\u4e24\u4e2a\u53c2\u6570\u62fc\u63a5,\u9632\u6b62\u91cd\u5b9a\u4e49)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#define TEST(a, b)\\\nvoid a##_test_##b();\\\n__attribute__((constructor))\\\nvoid add_##a##_test_##b() {\\\n    add_function(a##_test_##b, #a "_test_" #b);\\\n}\\\nvoid a##_test_##b()\\\n')),(0,i.kt)("p",null,"\u6ce8\u518c\u51fd\u6570(\u7528\u6765\u5b58\u50a8\u6d4b\u8bd5\u7528\u4f8b\u51fd\u6570\u7684\u5730\u5740)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"int function_cnt = 0;\nstruct Function function_arr[100];\n/* \u5934\u6587\u4ef6\u58f0\u660eFunction\ntypedef void (*TestFuncT)();\nstruct Function {\n    TestFuncT func;\n    const char *str;\n};\n*/\nvoid add_function(TestFuncT func, const char *str) {\n    function_arr[function_cnt].func = func;\n    function_arr[function_cnt].str = strdup(str);\n    function_cnt++;\n    return ;\n}\n")),(0,i.kt)("h3",{id:"2\u8f93\u51fa\u989c\u8272\u4e0e\u683c\u5f0f\u4fe1\u606f"},"2.\u8f93\u51fa\u989c\u8272\u4e0e\u683c\u5f0f\u4fe1\u606f"),(0,i.kt)("p",null,"\u901a\u8fc7\u5b8f\u4ee5\u53ca",(0,i.kt)("inlineCode",{parentName:"p"},"printf"),"\u6253\u5370\u7684\u989c\u8272\u7684\u8bed\u6cd5(\u89c1\u96f6\u788e\u77e5\u8bc6\u70b9)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#define COLOR(a, b) "\\033[" #b "m" a "\\033[0m"\n#define COLOR_HL(a, b) "\\033[" #b ";1m" a "\\033[0m"\n\n#define GREEN(a) COLOR(a, 32)\n#define GREEN_HL(a) COLOR_HL(a, 32)\n')),(0,i.kt)("h3",{id:"3\u8f93\u51fa\u7edf\u8ba1\u4fe1\u606f"},"3.\u8f93\u51fa\u7edf\u8ba1\u4fe1\u606f"),(0,i.kt)("p",null,"\u51fd\u6570\u7684\u58f0\u660e\u4e0e\u5b9a\u4e49\u5206\u653e\u5934\u6587\u4ef6,\u6e90\u6587\u4ef6"),(0,i.kt)("p",null,"\u53d8\u91cf\u7684\u58f0\u660e\u4e0e\u5b9a\u4e49:",(0,i.kt)("inlineCode",{parentName:"p"},".c"),"\u6587\u4ef6\u4e2d\u5b9a\u4e49",(0,i.kt)("inlineCode",{parentName:"p"},"int a = 5;"),"\uff0c\u5728",(0,i.kt)("inlineCode",{parentName:"p"},"a.h"),"\u91cc\u5199",(0,i.kt)("inlineCode",{parentName:"p"},"extern int a;"),"\uff0c"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"extern int a;"),"\u8bf4\u660e\u4e86a\u7684\u5b58\u50a8\u7a7a\u95f4\u662f\u5728\u7a0b\u5e8f\u7684\u5176\u4ed6\u5730\u65b9\u5206\u914d\u7684\uff0c\u5728\u6587\u4ef6\u4e2d\u5176\u4ed6\u4f4d\u7f6e\u6216\u8005\u5176\u4ed6\u6587\u4ef6\u4e2d\u5bfb\u627ea\u8fd9\u4e2a\u53d8\u91cf\u3002"),(0,i.kt)("p",null,"==.h\u5934\u6587\u4ef6\u4e2d\u4e0d\u5e94\u8be5\u5b9a\u4e49\u53d8\u91cf(\u91cd\u590d\u5b9a\u4e49)=="),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"//test.c \u6e90\u6587\u4ef6\u4e2d\nstruct FunctionInfo test_info;\n//test.h \u5934\u6587\u4ef6\nstruct FunctionInfo {\n    int total, success;\n};\nextern struct FunctionInfo test_info;\n")),(0,i.kt)("h3",{id:"4\u8f93\u51fa\u9519\u8bef\u4fe1\u606f"},"4.\u8f93\u51fa\u9519\u8bef\u4fe1\u606f"),(0,i.kt)("p",null,"\u5728==C11== \u6807\u51c6\u4e2d\uff0c_Generic \u5173\u952e\u5b57\u4f7f\u5176\u652f\u6301\u8f7b\u91cf\u7ea7\u7684\u6cdb\u578b\u7f16\u7a0b\u8bbe\u8ba1\u3002"),(0,i.kt)("p",null,"Linux\u4e2d\u4e25\u683c\u533a\u5206C\u8bed\u8a00\u548ccpp\u8bed\u8a00,\u6240\u4ee5\u540e\u7f00\u8981\u4e3a.c"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#define TYPE_STR(a) _Generic((a), \\\n    int : "%d", \\\n    double : "%lf", \\\n    float : "%f", \\\n    long long : "%lld",\\\n    char : "%c", \\\n    const char * : "%s",\\\n    default : "others"\\\n)\n\n#define P(a, color) {\\\n    char frm[1000];\\\n    sprintf(frm, color("%s"), TYPE_STR(a));\\\n    printf(frm, a);\\\n}\nprintf(YELLOW_HL("\\n\\t%s:%d: Failure\\n"), __FILE__, __LINE__);\\\n            printf(YELLOW_HL("\\t\\texpect : " #a " " #comp " " #b "\\n\\t\\t" "actual : "));\\\n            P(_a, YELLOW_HL);\\\n            printf(YELLOW_HL(" vs "));\\\n            P(_b, YELLOW_HL);\\\n            printf("\\n\\n");\\\n')),(0,i.kt)("h3",{id:"5\u94fe\u8868\u5916\u9aa8\u9abc"},"5.\u94fe\u8868\u5916\u9aa8\u9abc"),(0,i.kt)("p",null,"\u901a\u8fc7LinkNode\u5c06\u6bcf\u4e2aFuntion\u7ed3\u6784(\u5b58\u6709func,str,p\u4e0b\u4e00\u8282\u70b9\u7684\u5730\u5740)\u8fde\u63a5\u8d77\u6765"),(0,i.kt)("p",null,"\u901a\u8fc7\u7ed3\u6784\u4f53\u4e2d\u7684\u5730\u5740\u504f\u79fb\u91cf\u6c42\u5f97\u8282\u70b9\u9996\u5730\u5740"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"//func_head\u662f\u4e2a\u865a\u62df\u5934\u8282\u70b9    \n//p\u6307\u5411\u4e3a\u9996\u4e2a\u5e26\u6709\u5b58\u6709\u4fe1\u606f\u7684\u8282\u70b9\nfor (struct LinkNode *p = func_head.pointer.next; p != NULL; p = p->next) {\n        struct Function *func = Head(p, struct Function, pointer);\n    }\n")),(0,i.kt)("p",null,"\u89e3\u91ca:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"\u4e3a\u6c42\u5f53\u524dfunc\u7684\u5730\u5740"),(0,i.kt)("th",{parentName:"tr",align:null},"func"),(0,i.kt)("th",{parentName:"tr",align:null},"offset(T,pointer)\u5c31\u53ef\u6c42\u51fafunc\u4e0estr\u603b\u5171\u5360\u7528\u7a7a\u95f4,\u5373\u5730\u5740\u504f\u79fb\u91cf"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"^"),(0,i.kt)("td",{parentName:"tr",align:null},"func"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"|"),(0,i.kt)("td",{parentName:"tr",align:null},"str"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"\u5df2\u77e5\u5f53\u524dpointer\u5730\u5740"),(0,i.kt)("td",{parentName:"tr",align:null},"pointer"),(0,i.kt)("td",{parentName:"tr",align:null},"p\u5c31\u662f\u5f53\u524d\u7ed3\u6784\u4f53\u6210\u5458pointer\u7684\u5730\u5740")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"\u6240\u4ee5p\u51cf\u53bbsizeof(str+func)\u5c31\u662f\u5f53\u524d\u7ed3\u6784\u4f53\u7684\u5730\u5740")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"//linklist.h\n\n#define offset(T, name) (long long)(&((T *)(0))->name)\n//offset() T\u7ed3\u6784\u4f53name\u5b57\u6bb5\u7684\u5730\u5740\u504f\u79fb\u91cf\n#define Head(p, T, name) ((T *)(((char *)p) - offset(T, name)))\n//p:\u8282\u70b9\u7684pointer\u5730\u5740,T:\u5f53\u524d\u7ed3\u6784\u4f53\u7c7b\u578b,name:\u7ed3\u6784\u4f53\u7684\u6210\u5458\u540dname;\n//\u6c42\u5f97\u8282\u70b9\u7684\u9996\u5730\u5740\nstruct LinkNode {\n    struct LinkNode *next;  \n};\n\n")),(0,i.kt)("h3",{id:"makefile\u6587\u4ef6"},"makefile\u6587\u4ef6"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-makefile"},"CC = gcc\nCFLAGS = -g -Wall\nMAINOBJS = main.o haizei/test.o\n\n.PHONY: clean\n\nall: $(MAINOBJS)\n    $(CC) $(CFLAGS) $(MAINOBJS) -o ./bin/main\n\nhaizei/test.o: haizei/test.c haizei/test.h\n    $(CC) $(CFLAGS) -I./ -c -o haizei/test.o haizei/test.c\nmain.o: main.c  \n    $(CC) $(CFLAGS) -I./ -c -o main.o main.c\nclean:\n    rm -f $(MAINOBJS) bin/main\n")),(0,i.kt)("h3",{id:"testh"},"test.h"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#ifndef _TEST_H\n#define _TEST_H\n\n#include <haizei/linklist.h>\n#define Name(a, b) a##_test_##b\n#define Str(a, b)  #a "_test_" #b\n\n#define TEST(a, b)\\\nvoid a##_test_##b();\\\n__attribute__((constructor))\\\nvoid add_##a##__test__##b() {\\\n    add_function(Name(a,b), Str(a, b));\\\n}\\\nvoid a##_test_##b()\\\n\n#define COLOR(a, b) "\\033[" #b "m" a "\\033[0m"\n#define COLOR_HL(a, b) "\\033[" #b ";1m" a "\\033[0m"\n\n#define GREEN(a) COLOR(a, 32)\n#define RED(a) COLOR(a, 31)\n#define BLUE(a) COLOR(a, 34)\n#define YELLOW(a) COLOR(a, 33)\n\n#define GREEN_HL(a) COLOR_HL(a, 32)\n#define RED_HL(a) COLOR_HL(a, 31)\n#define BLUE_HL(a) COLOR_HL(a, 34)\n#define YELLOW_HL(a) COLOR_HL(a, 33)\n#define TYPE_STR(a) _Generic((a), \\\n    int : "%d", \\\n    double : "%lf", \\\n    float : "%f", \\\n    long long : "%lld",\\\n    char : "%c", \\#ifndef _LINKLIST_H\n#define _LINKLIST_H\n\n#define offset(T, name) (long long)(&((T *)(0))->name)\n\n#define Head(p, T, name) ((T *)(((char *)p) - offset(T, name)))\n\n//offset() T\u7ed3\u6784\u4f53name\u5b57\u6bb5\u7684\u5730\u5740\u504f\u79fb\u91cf\n//\n//\n//Head() \u8282\u70b9\u7684next\u5730\u5740,\u5f53\u524d\u7ed3\u6784\u4f53\u7c7b\u578b,\u4e0b\u4e00\u8282\u70b9\u7684name\u5b57\u6bb5;\n\nstruct LinkNode {\n    struct LinkNode *next;\n};\n\n#endif\n\n    const char * : "%s",\\\n    default : "others"\\\n)\n\n#define P(a, color) {\\\n    char frm[1000];\\\n    sprintf(frm, color("%s"), TYPE_STR(a));\\\n    printf(frm, a);\\\n}\n\n#define EXPECT(a, b, comp) {\\\n        __typeof(a) _a = (a);\\  \n        __typeof(b) _b = (b);\\\n        test_info.total += 1;\\\n        if (_a comp _b) test_info.success += 1;\\\n        else {\\\n            printf(YELLOW_HL("\\n\\t%s:%d: Failure\\n"), __FILE__, __LINE__);\\\n            printf(YELLOW_HL("\\t\\texpect : " #a " " #comp " " #b "\\n\\t\\t" "actual : "));\\\n            P(_a, YELLOW_HL);\\\n            printf(YELLOW_HL(" vs "));\\\n            P(_b, YELLOW_HL);\\\n            printf("\\n\\n");\\\n        }\\\n        printf(GREEN("[-----------] ") #a " " #comp " " #b);\\\n        printf(" %s\\n", (_a comp _b ? GREEN_HL("True") : RED_HL("False")));\\\n}\n\n#define EXPECT_EQ(a, b) EXPECT(a, b, ==)\n#define EXPECT_NE(a, b) EXPECT(a, b, !=)\n#define EXPECT_LT(a, b) EXPECT(a, b, <)\n#define EXPECT_GT(a, b) EXPECT(a, b, >)\n#define EXPECT_LE(a, b) EXPECT(a, b, <=)\n#define EXPECT_GE(a, b) EXPECT(a, b, >=)\n\ntypedef void (*TestFuncT)();\nstruct Function {\n    TestFuncT func;\n    const char *str;\n    struct LinkNode pointer;\n};\nstruct FunctionInfo {\n    int total, success;\n};\nextern struct FunctionInfo test_info;\n\nint RUN_ALL_TESTS();\nvoid add_function(TestFuncT, const char *);\n#endif\n')),(0,i.kt)("h3",{id:"testc"},"test.c"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n#include <haizei/test.h>\n#include <haizei/linklist.h>\nstruct Function func_head, *func_tail = &func_head;\n\nint function_cnt = 0;\nstruct FunctionInfo test_info;\n\nint RUN_ALL_TESTS() {\n    for (struct LinkNode *p = func_head.pointer.next; p != NULL; p = p->next) {\n        struct Function *func = Head(p, struct Function, pointer);\n        test_info.total = test_info.success = 0;\n        printf(GREEN_HL("[====RUN====]") YELLOW_HL(" %s\\n"), func->str);\n        func->func();\n        double rate = 100.0 * test_info.success / test_info.total;\n        printf(GREEN("[  "));\n        if (fabs(rate - 100) < 1e-6) {\n            printf(BLUE_HL("%6.2lf%%"), rate);\n        } else {\n            printf(RED_HL("%6.2lf%%"), rate);\n        }\n        printf(GREEN("  ]") \n            " total : %d success : %d\\n", \n            test_info.total, \n            test_info.success \n            );\n    }\n    return 0;\n}\n\nvoid add_function(TestFuncT func, const char *str) {\n    struct Function *temp = (struct Function *)calloc(1, sizeof(struct Function)); \n    temp->func = func;\n    temp->str = strdup(str);\n    func_tail->pointer.next = &(temp->pointer);\n    func_tail = temp;\n    return ;\n}\n\n')),(0,i.kt)("h3",{id:"linklisth"},"linklist.h"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#ifndef _LINKLIST_H\n#define _LINKLIST_H\n\n#define offset(T, name) (long long)(&((T *)(0))->name)\n\n#define Head(p, T, name) ((T *)(((char *)p) - offset(T, name)))\n\n//offset() T\u7ed3\u6784\u4f53name\u5b57\u6bb5\u7684\u5730\u5740\u504f\u79fb\u91cf\n//\n//\n//Head() \u8282\u70b9\u7684next\u5730\u5740,\u5f53\u524d\u7ed3\u6784\u4f53\u7c7b\u578b,\u4e0b\u4e00\u8282\u70b9\u7684name\u5b57\u6bb5;\n\nstruct LinkNode {\n    struct LinkNode *next;\n};\n\n#endif\n\n")))}p.isMDXComponent=!0}}]);