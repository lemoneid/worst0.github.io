"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[3142],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),u=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(t),m=a,g=d["".concat(p,".").concat(m)]||d[m]||s[m]||l;return t?r.createElement(g,o(o({ref:n},c),{},{components:t})):r.createElement(g,o({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=d;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},29595:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var r=t(87462),a=t(63366),l=(t(67294),t(3905)),o=["components"],i={id:"A3.Hython",title:"A3.Hython","typora-root-url":"../"},p=void 0,u={unversionedId:"Project/A3.Hython",id:"Project/A3.Hython",isDocsHomePage:!1,title:"A3.Hython",description:"1.Antlr \u7684\u57fa\u7840\u4f7f\u7528",source:"@site/docs/13.Project/A3.Hython.md",sourceDirName:"13.Project",slug:"/Project/A3.Hython",permalink:"/Project/A3.Hython",editUrl:"https://github.com/worst0/wiki_note/edit/main/docs/13.Project/A3.Hython.md",version:"current",lastUpdatedAt:1633869865,formattedLastUpdatedAt:"10/10/2021",frontMatter:{id:"A3.Hython",title:"A3.Hython","typora-root-url":"../"},sidebar:"Document\ud83d\udcbb",previous:{title:"A2.udp-football",permalink:"/Project/A2.udp-football"},next:{title:"B1.\u9879\u76ee\u9762\u8bd5",permalink:"/Project/B1.\u9879\u76ee\u9762\u8bd5"}},c=[{value:"1.Antlr \u7684\u57fa\u7840\u4f7f\u7528",id:"1antlr-\u7684\u57fa\u7840\u4f7f\u7528",children:[]},{value:"2.\u7b80\u5355\u7684\u6d41\u7a0b\u63a7\u5236",id:"2\u7b80\u5355\u7684\u6d41\u7a0b\u63a7\u5236",children:[]},{value:"3.\u589e\u52a0\u5f31\u7c7b\u578b\u7cfb\u7edf",id:"3\u589e\u52a0\u5f31\u7c7b\u578b\u7cfb\u7edf",children:[{value:"\u4f7f\u7528Antlr\u7684C\u63a5\u53e3",id:"\u4f7f\u7528antlr\u7684c\u63a5\u53e3",children:[]}]}],s={toc:c};function d(e){var n=e.components,i=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},s,i,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"1antlr-\u7684\u57fa\u7840\u4f7f\u7528"},"1.Antlr \u7684\u57fa\u7840\u4f7f\u7528"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"1. \u589e\u52a0\u9664\u6cd5\u8868\u8fbe\u5f0f\u7684\u652f\u6301\uff08\u589e\u52a0\u6587\u672c\u3010\u6e90\u4ee3\u7801\u3011\u4e2d\u7684\u5173\u952e\u5b57\uff09\n2. \u589e\u52a0\u53d6\u4f59\u8868\u8fbe\u5f0f\u7684\u652f\u6301\uff08\u589e\u52a0\u6587\u672c\u3010\u6e90\u4ee3\u7801\u3011\u4e2d\u7684\u5173\u952e\u5b57\uff09\n3. \u4fee\u6539\u89e3\u91ca\u5668\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u884c\u5185\u5bb9\uff0c\u90fd\u8f93\u51fa\u5176\u8868\u8fbe\u5f0f\u7684\u503c\uff08\u4fee\u6539\u89e3\u91ca\u5668\u7684\u529f\u80fd\uff09\n4. \u589e\u52a0\u53d8\u91cf\u5b9a\u4e49\u7684\u8bed\u6cd5\u7ed3\u6784\n5. \u589e\u52a0\u4f5c\u7528\u57df\u7684\u529f\u80fd\n")),(0,l.kt)("h2",{id:"2\u7b80\u5355\u7684\u6d41\u7a0b\u63a7\u5236"},"2.\u7b80\u5355\u7684\u6d41\u7a0b\u63a7\u5236"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"1.\u6574\u7406\u5de5\u7a0b\u76ee\u5f55\uff0cinclude/lib/bin/src/...\n2.\u6574\u7406 main.cpp \u5185\u5bb9\uff0c\u5206\u6210\u5934\u6587\u4ef6\u548c\u539f\u6587\u4ef6\uff0cmain.cpp \u5c3d\u91cf\u7b80\u5355\n3.print \u5b50\u53e5\n4.\u589e\u52a0\u6761\u4ef6\u8868\u8fbe\u5f0f(==,<=, >=, && , ||)\n5.if \u7ed3\u6784\u7684\u589e\u52a0\n6.for \u7ed3\u6784\u7684\u589e\u52a0\n7.while \u7ed3\u6784\u7684\u589e\u52a0\n8.do...while \u7ed3\u6784\u7684\u589e\u52a0\n\n*.\u5b58\u5728bug\n\u5faa\u73af\u4f5c\u7528\u57df\u7f3a\u5c11\u3002\n")),(0,l.kt)("h2",{id:"3\u589e\u52a0\u5f31\u7c7b\u578b\u7cfb\u7edf"},"3.\u589e\u52a0\u5f31\u7c7b\u578b\u7cfb\u7edf"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u7528\u8d23\u4efb\u94fe\u6a21\u5f0f\u6539\u5199\u6574\u4f53 ExprTreeEvaluator \u7c7b\u7684\u529f\u80fd"),(0,l.kt)("li",{parentName:"ol"},"\u589e\u52a0\u4e86\u8d23\u4efb\u94fe\u7684\u5355\u4f8b\u6a21\u5f0f\uff0cMasterChianSingle \u7c7b"),(0,l.kt)("li",{parentName:"ol"},"\u589e\u52a0\u4e86\u529f\u80fd master \u7c7b"),(0,l.kt)("li",{parentName:"ol"},"\u589e\u52a0\u4e86 \u4f5c\u7528\u57df parameter \u7c7b"),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"\u627e\u5230\u7a0b\u5e8f\u4e2d\u7684 BUG")),(0,l.kt)("li",{parentName:"ol"},"\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u5f31\u7c7b\u578b\u7cfb\u7edf")),(0,l.kt)("p",null,"\u6570\u636e\u7ed3\u6784\u5c31\u662f\u8ba1\u7b97\u673a\u6240\u80fd\u7406\u89e3\u7684\u6570\u636e\u8868\u793a\u5f62\u5f0f\u3002\u5176\u4e2d\u6811\u7c7b\u7684\u7406\u89e3\u4e0e\u4eba\u7c7b\u7684\u601d\u8003\u65b9\u5f0f\u76f8\u540c\u3002"),(0,l.kt)("p",null,"\u7a0b\u5e8f = \u6587\u672c\u4fe1\u606f(\u5b57\u7b26\u4e32) + \u4eba\u4e3a\u5b9a\u4e49\u7684\u89c4\u5219\u3002"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"1",src:t(3297).Z})),(0,l.kt)("h3",{id:"\u4f7f\u7528antlr\u7684c\u63a5\u53e3"},"\u4f7f\u7528Antlr\u7684C\u63a5\u53e3"),(0,l.kt)("p",null,"Antlr 4\uff0c\u5b83\u662f\u4e00\u4e2a\u975e\u5e38\u5f3a\u5927\u7684\u8bcd\u6cd5\u3001\u8bed\u6cd5\u5206\u6790\ufa38\u8f85\u52a9\u751f\u6210\u5de5\u5177"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"wget http://www.antlr3.org/download/C/libantlr3c-3.4.tar.gz\ntar -xzvf ./libantlr3c-3.4.tar.gz\n./configure --enable-64bit\nmake\nsudo make install\nwget http://www.antlr3.org/download/antlr-3.4-complete.jar\n")),(0,l.kt)("p",null,"ExprCppTree.g "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"grammar ExprCppTree;\noptions {\n    language = C;\n    output = AST;\n    ASTLabelType=pANTLR3_BASE_TREE;\n}\n@header {\n    #include <assert.h>\n}\n// The suffix '^' means make it a root.\n// The suffix '!' means ignore it.\nexpr: multExpr ((PLUS^ | MINUS^) multExpr)*\n    ;\nPLUS: '+';\nMINUS: '-';\nmultExpr\n    : atom (TIMES^ atom)*\n    ;\nTIMES: '*';\natom: INT\n    | ID\n    | '('! expr ')'!\n    ;\nstmt: expr NEWLINE -> expr  // tree rewrite syntax\n    | ID ASSIGN expr NEWLINE -> ^(ASSIGN ID expr) // tree notation\n    | NEWLINE ->   // ignore\n    ;\nASSIGN: '=';\nprog\n    : (stmt {pANTLR3_STRING s = $stmt.tree->toStringTree($stmt.tree);\n             assert(s->chars);\n             printf(\" tree \\%s\\n\", s->chars);\n            }\n        )+\n    ;\nID: ('a'..'z'|'A'..'Z')+ ;\nINT: '~'? '0'..'9'+ ;\nNEWLINE: '\\r'? '\\n' ;\nWS : (' '|'\\t')+ {$channel = HIDDEN;};\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"lbh@lbh-PC:~/Desktop/ALL/1.haizei/19.hython/Hython/1.antlr_test/test1$ java -jar ../download/antlr-3.4-complete.jar ./ExprCppTree.g \n")),(0,l.kt)("p",null,"main.cpp"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "ExprCppTreeLexer.h"\n#include "ExprCppTreeParser.h"\n#include <cassert>\n#include <map>\n#include <string>\n#include <iostream>\nusing std::map;\nusing std::string;\nusing std::cout;\nclass ExprTreeEvaluator {\n    map<string,int> memory;\npublic:\n    int run(pANTLR3_BASE_TREE);\n};\npANTLR3_BASE_TREE getChild(pANTLR3_BASE_TREE, unsigned);\nconst char* getText(pANTLR3_BASE_TREE tree);\nint main(int argc, char* argv[])\n{\n  pANTLR3_INPUT_STREAM input;\n  pExprCppTreeLexer lex;\n  pANTLR3_COMMON_TOKEN_STREAM tokens;\n  pExprCppTreeParser parser;\n  assert(argc > 1);\n  input = antlr3FileStreamNew((pANTLR3_UINT8)argv[1],ANTLR3_ENC_8BIT);\n  lex = ExprCppTreeLexerNew(input);\n  tokens = antlr3CommonTokenStreamSourceNew(ANTLR3_SIZE_HINT,\n                                            TOKENSOURCE(lex));\n  parser = ExprCppTreeParserNew(tokens);\n  ExprCppTreeParser_prog_return r = parser->prog(parser);\n  pANTLR3_BASE_TREE tree = r.tree;\n  ExprTreeEvaluator eval;\n  int rr = eval.run(tree);\n  cout << "Evaluator result: " << rr << \'\\n\';\n  parser->free(parser);\n  tokens->free(tokens);\n  lex->free(lex);\n  input->close(input);\n  return 0;\n}\nint ExprTreeEvaluator::run(pANTLR3_BASE_TREE tree)\n{\n    pANTLR3_COMMON_TOKEN tok = tree->getToken(tree);\n    if(tok) {\n        switch(tok->type) {\n        case INT: {\n            const char* s = getText(tree);\n            if(s[0] == \'~\') {\n                return -atoi(s+1);\n            }\n            else {\n                return atoi(s);\n            }\n        }\n        case ID: {\n            string var(getText(tree));\n            return memory[var];\n        }\n        case PLUS:\n            return run(getChild(tree,0)) + run(getChild(tree,1));\n        case MINUS:\n            return run(getChild(tree,0)) - run(getChild(tree,1));\n        case TIMES:\n            return run(getChild(tree,0)) * run(getChild(tree,1));\n        case ASSIGN: {\n            string var(getText(getChild(tree,0)));\n            int val = run(getChild(tree,1));\n            memory[var] = val;\n            return val;\n        }\n        default:\n            cout << "Unhandled token: #" << tok->type << \'\\n\';\n            return -1;\n        }\n    }\n    else {\n        int k = tree->getChildCount(tree);\n        int r = 0;\n        for(int i = 0; i < k; i++) {\n            r = run(getChild(tree, i));\n        }\n        return r;\n    }\n}\npANTLR3_BASE_TREE getChild(pANTLR3_BASE_TREE tree, unsigned i)\n{\n    assert(i < tree->getChildCount(tree));\n    return (pANTLR3_BASE_TREE) tree->getChild(tree, i);\n}\nconst char* getText(pANTLR3_BASE_TREE tree)\n{\n    return (const char*) tree->getText(tree)->chars;\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"lbh@lbh-PC:~/Desktop/ALL/1.haizei/19.hython/Hython/1.antlr_test/test1$ g++ -g -Wall *.cpp *.c ../download/libantlr3c-3.4/.libs/libantlr3c.a -o test -I. -I ../download/libantlr3c-3.4/include/\n")),(0,l.kt)("p",null,"data"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"1+2*(3+4)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"lbh@lbh-PC:~/Desktop/ALL/1.haizei/19.hython/Hython/1.antlr_test/test1$ ./test data \n tree (+ 1 (* 2 (+ 3 4)))\nEvaluator result: 15\n\n")))}d.isMDXComponent=!0},3297:function(e,n,t){n.Z=t.p+"assets/images/1-a7873084f84a79ebc2f48b19832d5b6c.png"}}]);