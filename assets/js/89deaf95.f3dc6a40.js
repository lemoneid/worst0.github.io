"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[4540],{3905:function(n,e,t){t.d(e,{Zo:function(){return s},kt:function(){return u}});var i=t(67294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function p(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,i,a=function(n,e){if(null==n)return{};var t,i,a={},r=Object.keys(n);for(i=0;i<r.length;i++)t=r[i],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(i=0;i<r.length;i++)t=r[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var d=i.createContext({}),o=function(n){var e=i.useContext(d),t=e;return n&&(t="function"==typeof n?n(e):p(p({},e),n)),t},s=function(n){var e=o(n.components);return i.createElement(d.Provider,{value:e},n.children)},m={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},k=i.forwardRef((function(n,e){var t=n.components,a=n.mdxType,r=n.originalType,d=n.parentName,s=l(n,["components","mdxType","originalType","parentName"]),k=o(t),u=a,c=k["".concat(d,".").concat(u)]||k[u]||m[u]||r;return t?i.createElement(c,p(p({ref:e},s),{},{components:t})):i.createElement(c,p({ref:e},s))}));function u(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var r=t.length,p=new Array(r);p[0]=k;var l={};for(var d in e)hasOwnProperty.call(e,d)&&(l[d]=e[d]);l.originalType=n,l.mdxType="string"==typeof n?n:a,p[1]=l;for(var o=2;o<r;o++)p[o]=t[o];return i.createElement.apply(null,p)}return i.createElement.apply(null,t)}k.displayName="MDXCreateElement"},45102:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return o},toc:function(){return s},default:function(){return k}});var i=t(87462),a=t(63366),r=(t(67294),t(3905)),p=["components"],l={id:"B99.\u4e13\u9898",title:"B99.\u4e13\u9898","typora-root-url":"../"},d="\u4e13\u9898",o={unversionedId:"Algorithm/B99.\u4e13\u9898",id:"Algorithm/B99.\u4e13\u9898",isDocsHomePage:!1,title:"B99.\u4e13\u9898",description:"\u56de\u6587\u4e32\u4e2a\u6570",source:"@site/docs/2.Algorithm/B99.\u4e13\u9898.md",sourceDirName:"2.Algorithm",slug:"/Algorithm/B99.\u4e13\u9898",permalink:"/Algorithm/B99.\u4e13\u9898",editUrl:"https://github.com/worst0/wiki_note/edit/main/docs/2.Algorithm/B99.\u4e13\u9898.md",version:"current",lastUpdatedAt:1633869865,formattedLastUpdatedAt:"10/10/2021",frontMatter:{id:"B99.\u4e13\u9898",title:"B99.\u4e13\u9898","typora-root-url":"../"},sidebar:"Document\ud83d\udcbb",previous:{title:"B98.\u5b57\u7b26\u4e32",permalink:"/Algorithm/B98.\u5b57\u7b26\u4e32"},next:{title:"C1.Algorithm",permalink:"/Algorithm/C1.Algorithm"}},s=[{value:"\u56de\u6587\u4e32\u4e2a\u6570",id:"\u56de\u6587\u4e32\u4e2a\u6570",children:[]},{value:"\u6700\u957f\u56de\u6587\u5b50\u4e32",id:"\u6700\u957f\u56de\u6587\u5b50\u4e32",children:[{value:"\u66b4\u529b\u7b97\u6cd5",id:"\u66b4\u529b\u7b97\u6cd5",children:[]},{value:"\u9a6c\u62c9\u8f66\u7b97\u6cd5",id:"\u9a6c\u62c9\u8f66\u7b97\u6cd5",children:[]}]},{value:"\u6700\u77ed\u56de\u6587\u4e32",id:"\u6700\u77ed\u56de\u6587\u4e32",children:[]},{value:"\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217",id:"\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217",children:[]},{value:"\u7edf\u8ba1\u56de\u6587\u5b50\u5e8f\u5217\u4e2a\u6570",id:"\u7edf\u8ba1\u56de\u6587\u5b50\u5e8f\u5217\u4e2a\u6570",children:[]},{value:"\u5206\u5272\u56de\u6587\u4e32I",id:"\u5206\u5272\u56de\u6587\u4e32i",children:[{value:"\u9884\u5904\u7406",id:"\u9884\u5904\u7406",children:[]},{value:"\u4ee3\u7801\u53c2\u8003\u6765\u6e90",id:"\u4ee3\u7801\u53c2\u8003\u6765\u6e90",children:[]}]},{value:"\u5206\u5272\u56de\u6587\u4e32II",id:"\u5206\u5272\u56de\u6587\u4e32ii",children:[{value:"\u5b9a\u4e49\u72b6\u6001",id:"\u5b9a\u4e49\u72b6\u6001",children:[]},{value:"\u4ee3\u7801\u5b9e\u73b0",id:"\u4ee3\u7801\u5b9e\u73b0-1",children:[]}]},{value:"\u6700\u5c0f\u7684k\u4e2a\u6570",id:"\u6700\u5c0f\u7684k\u4e2a\u6570",children:[]},{value:"\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570",id:"\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570",children:[{value:"<code>topK</code>",id:"topk-1",children:[]}]},{value:"\u65e0\u5e8f\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570",id:"\u65e0\u5e8f\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570",children:[]},{value:"\u524dk\u4e2a\u9ad8\u9891\u6570",id:"\u524dk\u4e2a\u9ad8\u9891\u6570",children:[{value:"\u4e24\u6570\u4e4b\u548cII",id:"\u4e24\u6570\u4e4b\u548cii",children:[]},{value:"\u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c",id:"\u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c",children:[]},{value:"\u4e09\u6570\u4e4b\u548c",id:"\u4e09\u6570\u4e4b\u548c",children:[]},{value:"\u56db\u6570\u4e4b\u548c",id:"\u56db\u6570\u4e4b\u548c",children:[]}]},{value:"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673aI",id:"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673ai",children:[{value:"\u5355\u8c03\u6808\u89e3\u6cd5",id:"\u5355\u8c03\u6808\u89e3\u6cd5",children:[]},{value:"\u52a8\u6001\u89c4\u5212",id:"\u52a8\u6001\u89c4\u5212",children:[]}]},{value:"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673aII",id:"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673aii",children:[{value:"\u8d2a\u5fc3",id:"\u8d2a\u5fc3",children:[]},{value:"\u52a8\u6001\u89c4\u5212",id:"\u52a8\u6001\u89c4\u5212-1",children:[]}]},{value:"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673aIII",id:"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673aiii",children:[]},{value:"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673aIV",id:"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673aiv",children:[{value:"\u7a7a\u95f4\u538b\u7f29",id:"\u7a7a\u95f4\u538b\u7f29",children:[]}]},{value:"\u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f",id:"\u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f",children:[]},{value:"\u7f8e\u56e22020\u7cfb\u7edf\u5f00\u53d1\u9898\u76ee",id:"\u7f8e\u56e22020\u7cfb\u7edf\u5f00\u53d1\u9898\u76ee",children:[]},{value:"\u73af\u5f62\u5408\u5e76\u77f3\u5934",id:"\u73af\u5f62\u5408\u5e76\u77f3\u5934",children:[]},{value:"\u53c2\u8003\u8fde\u63a5",id:"\u53c2\u8003\u8fde\u63a5",children:[]}],m={toc:s};function k(n){var e=n.components,l=(0,a.Z)(n,p);return(0,r.kt)("wrapper",(0,i.Z)({},m,l,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u4e13\u9898"},"\u4e13\u9898"),(0,r.kt)("h1",{id:"\u56de\u6587"},"\u56de\u6587"),(0,r.kt)("h2",{id:"\u56de\u6587\u4e32\u4e2a\u6570"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/palindromic-substrings/description/"},"\u56de\u6587\u4e32\u4e2a\u6570")),(0,r.kt)("p",null,"\u76f4\u63a5\u9012\u5f52\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <string>\n#include <vector>\n\nclass Solution {\npublic:\n    int countSubstrings(std::string str) {\n      \n      int count=0;\n      for(int i=0; i < str.size(); ++i) { \n        __count(str, i, i, count);\n        __count(str, i, i+1, count);\n      }\n      return count;\n    }\n  private:\n    void __count(const std::string& str, int begin, int end, int& count) { \n      while(begin >=0 && end <= str.size() && str[begin] == str[end])\n      {\n        ++count;\n        --begin;\n        ++end;\n      }\n    }\n};\n")),(0,r.kt)("h2",{id:"\u6700\u957f\u56de\u6587\u5b50\u4e32"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/longest-palindromic-substring/solution/"},"\u6700\u957f\u56de\u6587\u5b50\u4e32")),(0,r.kt)("h3",{id:"\u66b4\u529b\u7b97\u6cd5"},"\u66b4\u529b\u7b97\u6cd5"),(0,r.kt)("p",null,"\u66b4\u529b\u7b97\u6cd5\u5373\u4ee5\u6bcf\u4e2a\u5b57\u7b26\u4e3a\u4e2d\u5fc3\u4e2d\uff0c\u770b\u6bcf\u4e2a\u5b57\u7b26\u7684\u80fd\u5916\u6269\u7684\u6700\u957f\u56de\u6587\u5b57\u4e32\u7684\u957f\u5ea6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"O(n^2)"),"\u3002\u4f46\u662f\u9700\u8981\u52a0\u5165\u989d\u5916\u7684\u5b57\u7b26\u5904\u7406 ",(0,r.kt)("inlineCode",{parentName:"p"},"#")," \uff0c\u5426\u5219\u65e0\u6cd5\u540c\u65f6\u5e94\u5bf9\u5947\u56de\u6587\u548c\u5076\u56de\u6587\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"  \u539f\u59cb\u4e32\uff1a0 1 2 1 3 1 2 1 0 \n\n  \u4e0b\u6807 \uff1a 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\n  \u586b\u5145\u540e\uff1a# 0 # 1 # 2 # 1 # 3  # 1  #  2  #  1  #  0  # \n")),(0,r.kt)("p",null,"\u586b\u5145\u7b97\u6cd5\u53ef\u5982\u4e0b\u5b8c\u6210\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  void __preProcess(std::string& str) { \n      int length = str.size();\n\n      std::string padding((length<<1) +1, '#');\n      \n      for(int i=0;  i<length; ++i) { \n          padding[(i<<1) +1]   = str[i];\n      }\n\n      str.swap(padding);\n  }\n")),(0,r.kt)("h3",{id:"\u9a6c\u62c9\u8f66\u7b97\u6cd5"},"\u9a6c\u62c9\u8f66\u7b97\u6cd5"),(0,r.kt)("p",null,"\u9a6c\u62c9\u8f66\u7b97\u6cd5\uff0c\u662f\u901a\u8fc7 ",(0,r.kt)("inlineCode",{parentName:"p"},"O(n)")," \u7684\u8f85\u52a9\u7a7a\u95f4\uff0c\u83b7\u53d6 ",(0,r.kt)("inlineCode",{parentName:"p"},"O(n)")," \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u9a6c\u62c9\u8f66\u7b97\u6cd5\u662f\u5728\u4e0a\u8ff0\u66b4\u529b\u7b97\u6cd5\u4e0a\u7684\u4e00\u70b9\u6539\u8fdb\uff0c\u6709\u51e0\u4e2a\u57fa\u672c\u6982\u5ff5\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u56de\u6587\u534a\u5f84",(0,r.kt)("inlineCode",{parentName:"li"},"r"),"\uff1a\u8868\u5f81\u4ee5\u6bcf\u4e2a\u5b57\u7b26 ",(0,r.kt)("inlineCode",{parentName:"li"},"i")," \u4e3a\u4e2d\u5fc3\u7684\u6269\u5145\u8303\u56f4 ",(0,r.kt)("inlineCode",{parentName:"li"},"[i-r, i+r]"),"\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u56de\u6587\u53f3\u8fb9\u754c\uff1a",(0,r.kt)("inlineCode",{parentName:"li"},"R =i+r")),(0,r.kt)("li",{parentName:"ul"},"\u56de\u6587\u53f3\u8fb9\u754c\u6700\u65e9\u4e2d\u5fc3",(0,r.kt)("inlineCode",{parentName:"li"},"C"),"\uff1a\u5373\u5230\u8fbe\u53f3\u8fb9\u754c",(0,r.kt)("inlineCode",{parentName:"li"},"R"),"\u6700\u65e9\u7684",(0,r.kt)("inlineCode",{parentName:"li"},"C=i"),"\u3002")),(0,r.kt)("p",null,"\u9700\u8981\u7528\u6cd5\u4e00\u4e2a\u6570\u7ec4",(0,r.kt)("inlineCode",{parentName:"p"},"radius"),"\u8bb0\u5f55\u6bcf\u4e2a\u4f4d\u7f6e ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," \u7684\u56de\u6587\u534a\u5f84\uff0c\u56e0\u6b64\u6bcf\u4e2a\u4f4d\u7f6e ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," \u5bf9\u5e94\u7684\u56de\u6587\u53f3\u8fb9\u754c ",(0,r.kt)("inlineCode",{parentName:"p"},"R = i + radius[i]"),"\u3002"),(0,r.kt)("h4",{id:"\u5206\u6790"},"\u5206\u6790"),(0,r.kt)("p",null,"\u5728\u5f53\u524d\u4f4d\u7f6e ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," \u4e4b\u524d\u5df2\u7ecf\u5b58\u50a8\u4e86\u4e00\u90e8\u5206 ",(0,r.kt)("inlineCode",{parentName:"p"},"radius")," \u4fe1\u606f\u4e86\u3002\u5728\u5f53\u524d\u4f4d\u7f6e ",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u5f53\u524d\u5b57\u7b26 ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," \u4e0d\u5728\u5f53\u524d\u6700\u5927\u56de\u6587\u53f3\u8fb9\u754c ",(0,r.kt)("inlineCode",{parentName:"p"},"R")," \u5185\uff0c\u5373\u4f7f ",(0,r.kt)("inlineCode",{parentName:"p"},"R < i")," \u65f6\uff0c\u548c\u66b4\u529b\u65b9\u6cd5\u4e00\u6837\u66b4\u529b\u6269\u5145\uff0c\u83b7\u5f97 ",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\u7684\u56de\u6587\u534a\u5f84\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"    while(0 <= i - radius[i] && i + radius[i] < str.size()) { \n      if(str[i + radius[i]] != str[i - radius[i]]) \n          break;\n      ++radius[i];\n    }\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u5728\u56de\u6587\u53f3\u8fb9\u754c\u5185 ",(0,r.kt)("inlineCode",{parentName:"p"},"i <=R"),"\u3002\u8bbe",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\u5173\u4e8e",(0,r.kt)("inlineCode",{parentName:"p"},"C"),"\u7684\u5bf9\u79f0\u70b9\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"i'"),"\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"R"),"\u5173\u4e8e",(0,r.kt)("inlineCode",{parentName:"p"},"C"),"\u7684\u5bf9\u79f0\u70b9\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"L"),"\u3002\u6839\u636e",(0,r.kt)("inlineCode",{parentName:"p"},"i'"),"\u7684\u56de\u6587\u534a\u5f84\u5927\u5c0f ",(0,r.kt)("inlineCode",{parentName:"p"},"radius[i']")," \u53ef\u4ee5\u60c5\u51b5\u7ec6\u5206\u4e3a3\u79cd\uff0c\uff1a"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"L < i-radius[i']'"),"\u65f6\uff0c\u53ef\u4ee5\u76f4\u63a5\u786e\u5b9a",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\u7684\u56de\u6587\u534a\u5f84 ",(0,r.kt)("inlineCode",{parentName:"p"},"radius[i]")),(0,r.kt)("p",{parentName:"li"},"\u56e0\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"[L,R]"),"\u533a\u95f4\u90fd\u662f\u56de\u6587\u4e32\uff0c\u800c\u4ee5",(0,r.kt)("inlineCode",{parentName:"p"},"i'"),"\u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u5b57\u4e32",(0,r.kt)("inlineCode",{parentName:"p"},"[i'-radius[i'], radius[i'] + i']"),"\u4e5f\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"[L, R]"),"\u8303\u56f4\u5185\uff0c\u56e0\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," \u7684\u56de\u6587\u534a\u5f84\u4e5f\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"radius[i']"),"\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"  \u4e0b\u6807 : 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\n  \u5b57\u4e32 : # 0 # 1 # 2 # 0 # 3  # 0  #  2  #  1  #  1  # \n             ^ ^   ^   ^   ^    ^     ^     ^  ^\n             L a   i'  b   C    b'    i     a' R\n")),(0,r.kt)("p",{parentName:"li"},"\u6bd4\u5982\u4e0a\u56fe\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"a, b"),"\u5206\u522b\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"i'"),"\u56de\u6587\u534a\u5f84\u8303\u56f4\u5916\u524d\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"a', b'"),"\u662f\u5173\u4e8e",(0,r.kt)("inlineCode",{parentName:"p"},"C"),"\u7684\u5bf9\u79f0\u4f4d\u7f6e\u3002",(0,r.kt)("inlineCode",{parentName:"p"},"a!=b"),"\uff0c\u6240\u4ee5",(0,r.kt)("inlineCode",{parentName:"p"},"a'!=b'"),"\uff0c\u56e0\u6b64",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\u6240\u80fd\u6269\u7684\u6700\u5927\u8303\u56f4\u4e5f\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"[a'+1, b'-1]"),"\uff0c\u7531\u4e8e\u5bf9\u79f0\u6027\u53ef\u77e5\uff0c\u8fd9\u548c ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," \u7684\u56de\u6587\u533a\u57df ",(0,r.kt)("inlineCode",{parentName:"p"},"[a+1, b-1]"),"\u957f\u5ea6\u662f\u4e00\u6837\u7684\u3002"),(0,r.kt)("p",{parentName:"li"},"\u56e0\u6b64\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"i")," \u7684\u56de\u6587\u534a\u5f84 ",(0,r.kt)("inlineCode",{parentName:"p"},"radius[i] = radius[i']"),"\u3002\u5728 ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," \u65f6\u95f4\u5185\u5c31\u53ef\u4ee5\u786e\u5b9a\u3002")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"L > i-radius[i']"),"\uff0c\u4e5f\u80fd\u76f4\u63a5\u786e\u5b9a",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\u7684\u56de\u6587\u534a\u5f84 ",(0,r.kt)("inlineCode",{parentName:"p"},"RADIUS[i]")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"  \u4e0b\u6807 : 0 1 2 3 4 5 6 7 8 9 10  11 12 13 14  15 16 17 18\n  \u5b57\u4e32 : # 0 # 1 # 2 # 1 # 3  #  1  #  2  #   4  #  0  # \n               ^ ^ ^   ^   ^     ^     ^  ^   ^\n               a L i'  b   C     b'    i  R   a'\n")),(0,r.kt)("p",{parentName:"li"},"\u8bbe",(0,r.kt)("inlineCode",{parentName:"p"},"R+1"),"\u7684\u4f4d\u7f6e\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"a'")," \uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"L-1")," \u7684\u4f4d\u7f6e\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"a"),"\uff0c\u53ef\u77e5\u9053 ",(0,r.kt)("inlineCode",{parentName:"p"},"a"),"\u548c ",(0,r.kt)("inlineCode",{parentName:"p"},"a'"),"\u5173\u4e8e ",(0,r.kt)("inlineCode",{parentName:"p"},"C"),"\u5bf9\u79f0\u3002",(0,r.kt)("inlineCode",{parentName:"p"},"a"),"\u5173\u4e8e",(0,r.kt)("inlineCode",{parentName:"p"},"i'"),"\u7684\u5bf9\u79f0\u4f4d\u7f6e\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"b"),"\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"b"),"\u5173\u4e8e",(0,r.kt)("inlineCode",{parentName:"p"},"C"),"\u7684\u5bf9\u79f0\u70b9\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"b'"),"\u3002\u56e0\u6b64",(0,r.kt)("inlineCode",{parentName:"p"},"b'"),"\u548c",(0,r.kt)("inlineCode",{parentName:"p"},"a'"),"\u5173\u4e8e",(0,r.kt)("inlineCode",{parentName:"p"},"R"),"\u5bf9\u79f0\u3002"),(0,r.kt)("p",{parentName:"li"},"\u56e0\u4e3a\u5f53\u524d\u6700\u5927\u56de\u6587\u533a\u95f4\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"[L, R]"),"\uff0c\u4e5f\u5c31\u662f\u8bf4 ",(0,r.kt)("inlineCode",{parentName:"p"},"a != a'"),"\uff0c\u800c ",(0,r.kt)("inlineCode",{parentName:"p"},"a"),"\u548c",(0,r.kt)("inlineCode",{parentName:"p"},"b"),"\u540c\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"i'"),"\u7684\u56de\u6587\u533a\u95f4\u91cc\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"[a, b] < [i'-radius[i'] , i' + radius[i']]"),"\u3002\u56e0\u6b64 ",(0,r.kt)("inlineCode",{parentName:"p"},"a == b"),"\uff0c\u53c8\u56e0",(0,r.kt)("inlineCode",{parentName:"p"},"b == b'"),"\uff0c\u56e0\u6b64",(0,r.kt)("inlineCode",{parentName:"p"},"a = b'"),"\u3002\u53c8\u7531",(0,r.kt)("inlineCode",{parentName:"p"},"a != a'"),"\uff0c\u53ef\u5f97",(0,r.kt)("inlineCode",{parentName:"p"}," b' != a'"),"\u3002\u4e5f\u56e0\u6b64 ",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\u7684\u56de\u6587\u533a\u95f4",(0,r.kt)("inlineCode",{parentName:"p"},"[b'+1, a'-1]"),"\u3002",(0,r.kt)("inlineCode",{parentName:"p"},"radius[i] = R-i"),"\u3002\u6b64\u65f6\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\u7684\u56de\u6587\u53f3\u8fb9\u754c\u5c31\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"R"),"\u3002"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"\u524d\u9762\u4e24\u79cd\u76f4\u63a5\u786e\u5b9a\u7684\uff0c\u5c31\u770b ",(0,r.kt)("inlineCode",{parentName:"strong"},"L"),"\u5230",(0,r.kt)("inlineCode",{parentName:"strong"},"i"),"\u7684\u8ddd\u79bb\u548c ",(0,r.kt)("inlineCode",{parentName:"strong"},"radius[i]'"),"\u8c01\u66f4\u5c0f\uff0c\u66f4\u5c0f\u7684\u5c31\u662f\u4f5c\u4e3a ",(0,r.kt)("inlineCode",{parentName:"strong"},"i")," \u7684\u56de\u6587\u534a\u5f84"),"\u3002 \u56e0\u6b64\uff1a"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"   radius[i] =  R > i ? std::min(radius[2*C - i], R -i) : 1; \n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"L = i-radius[i']"),"\u65f6\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"radius[i]")," \u4e0d\u80fd\u76f4\u63a5\u786e\u5b9a\uff0c\u8fd8\u662f\u9700\u8981\u4ece ",(0,r.kt)("inlineCode",{parentName:"p"},"R"),"\u7684\u53f3\u8fb9\u5411\u5916\u6269\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"  \u4e0b\u6807 : 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\n  \u5b57\u4e32 : # 0 # 1 # 2 # 1 # 2  # 1  #  2  #  1  #  0  # \n             ^ ^   ^   ^ ^ ^\n             L i'  C   i R a'\n                   b'\n")),(0,r.kt)("p",{parentName:"li"},"\u5982\u56fe\uff0c\u4e0a\u9762",(0,r.kt)("inlineCode",{parentName:"p"},"i'=1"),"\uff0c\u5b83\u7684\u56de\u6587\u534a\u5f84\u65f61\uff0c\u5de6\u8fb9\u521a\u597d\u843d\u5728\u4e86",(0,r.kt)("inlineCode",{parentName:"p"},"L"),"\u3002\u6b64\u65f6\u662f\u4e0d\u80fd\u76f4\u63a5\u786e\u5b9a\u7684\u3002\u56e0\u4e3a\u6b64\u65f6\u4e0d\u80fd\u76f4\u63a5\u5224\u65ad",(0,r.kt)("inlineCode",{parentName:"p"},"a'==b'?"),"\uff0c\u4ecd\u7136\u9700\u8981\u7ee7\u7eed\u6269\uff0c\u6765\u5224\u65ad\u3002"))))),(0,r.kt)("h4",{id:"\u4ee3\u7801\u5b9e\u73b0"},"\u4ee3\u7801\u5b9e\u73b0"),(0,r.kt)("p",null,"\u5b9e\u73b0\u4e0a\uff0c\u6709\u51e0\u4e2a\u6ce8\u610f\u70b9\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u52a0\u5165\u586b\u5145\u540e\uff0c\u4ee5\u5b57\u7b26\u4e3a\u4e2d\u5fc3\u6240\u5f97\u7684\u56de\u6587\u534a\u5f84",(0,r.kt)("inlineCode",{parentName:"p"},"radius[i]"),"\u53ca\u6700\u5927\u56de\u6587\u534a\u5f84\u603b\u662f\u6bd4\u5b9e\u9645\u7684\u59271"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"  \u539f\u4e32\uff1ac b b d \n  \u586b\u5145\uff1a# c # b # b # d #\n          ^   ^ ^ ^   ^\n          2   2 3 2   2\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u600e\u4e48\u6839\u636e",(0,r.kt)("inlineCode",{parentName:"p"},"(i, radius[i])"),"\u8ba1\u7b97\u5f97\u5230\u6e90\u5b57\u7b26\u4e32\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e?"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u5728\u586b\u5145\u5b57\u7b26\u4e32\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"pos = i - [radius[i]-1]"))),"  "),(0,r.kt)("li",{parentName:"ul"},"\u5728\u6e90\u5b57\u7b26\u4e32\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"start = pos/2"))),"  ")))),(0,r.kt)("p",null,"\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    string longestPalindrome(string s) {\n      if(s.empty()) return s; \n\n      std::string str = __preProcess(s); // \u4e0a\u9762\u7684\u4ee3\u7801\n      int* radius = new int[str.size()]; \n\n      int C = -1, R = -1;\n      int maxLen = 0, maxPos =0;       \n\n      for(int i=0; i < str.size(); ++i) {  \n\n          radius[i] =  R > i ? std::min(radius[2*C - i], R -i) : 1;  \n      \n          while(0 <= i - radius[i] && i + radius[i] < str.size()) { \n              if(str[i + radius[i]] != str[i - radius[i]]) \n                  break;\n              ++radius[i];\n          }\n\n          if(i + radius[i] > R) { \n              R = i + radius[i];\n              C = i;\n          }\n\n          if(maxLen < radius[i]) { \n              maxLen = radius[i];\n              maxPos = (i - (maxLen-1))>>1;\n          }\n      }\n\n      delete[] radius;\n      return s.substr(maxPos, maxLen-1);\n  }\n};\n")),(0,r.kt)("h2",{id:"\u6700\u77ed\u56de\u6587\u4e32"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/shortest-palindrome/"},"\u6700\u77ed\u56de\u6587\u4e32")),(0,r.kt)("p",null,"\u4f7f\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"KMP"),"\u65b9\u6cd5\u8fdb\u884c\u6c42\u89e3\u3002"),(0,r.kt)("p",null,"\u56e0\u4e3a\u6c42\u7684\u662f\u4ee5\u9996\u5b57\u7b26\u5f00\u59cb\u7684\u6700\u5927\u56de\u6587\u4e32\uff0c\u90a3\u4e48\u5c06\u8be5\u5b57\u7b26\u4e32\u9006\u5e8f\u540e\u62fc\u63a5\u5728\u4e00\u8d77\uff0c\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"KMP"),"\u6c42\u4e00\u4e2a",(0,r.kt)("inlineCode",{parentName:"p"},"next"),"\u8868\uff0c\u90a3\u4e48",(0,r.kt)("inlineCode",{parentName:"p"},"next"),"\u7684\u6700\u540e\u4e00\u4e2a\u503c\u5c31\u662f\u4ee5\u9996\u5b57\u7b26\u7684\u5f00\u59cb\u7684\u6700\u5927\u56de\u6587\u4e32\u3002\u7136\u540e\u5c31\u540e\u9762\u7684\u53cd\u8f6c\u8d34\u5230\u9996\u5b57\u7b26\u524d\u9762\u7686\u53ef\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n  std::string shortestPalindrome(std::string str) {\n\n    std::string reverStr = str;\n    std::reverse(reverStr.begin(), reverStr.end());\n\n    std::string newStr(str + '#' + reverStr);\n    int M =newStr.size();\n    std::vector<int> next(M, -1);\n\n    for(int t=-1, j=0; j <M-1;) { \n      if(t <0 || newStr[t] == newStr[j]) \n      { \n        ++t;\n        ++j;\n        next[j] = t;\n      }\n      else \n      {\n        t =next[t];\n      }\n    } // for\n    return  reverStr.substr(0, str.size()-next.back()-1) + str;\n  }\n};\n")),(0,r.kt)("h2",{id:"\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217"},"\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u9898\u76ee\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32str1\uff0c\u6c42\u6700\u957f\u7684\u56de\u6587\u5b50\u5e8f\u5217\n")),(0,r.kt)("h4",{id:"\u95f4\u63a5\u6c42"},"\u95f4\u63a5\u6c42"),(0,r.kt)("p",null,"\u6c42\u51fa",(0,r.kt)("inlineCode",{parentName:"p"},"str1"),"\u7684\u9006\u5e8f",(0,r.kt)("inlineCode",{parentName:"p"},"str2"),"\u3002\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u6362\u4e3a\u6c42",(0,r.kt)("inlineCode",{parentName:"p"},"str1"),"\u548c",(0,r.kt)("inlineCode",{parentName:"p"},"str2"),"\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u3002"),(0,r.kt)("h4",{id:"\u76f4\u63a5\u6c42"},"\u76f4\u63a5\u6c42"),(0,r.kt)("p",null,"\u5b9a\u4e49\u72b6\u6001",(0,r.kt)("inlineCode",{parentName:"p"},"dp[i][j]")," \u8868\u793a",(0,r.kt)("inlineCode",{parentName:"p"},"i ~ j"),"\u533a\u95f4\u7684\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u3002 \u6700\u7ec8\u7684\u76ee\u6807\u662f\u6c42",(0,r.kt)("inlineCode",{parentName:"p"},"0 ~ str.length"),"\u5f97\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\uff0c\u5373\u5728\u8868\u683c\u7684\u53f3\u4e0a\u65b9\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"dp[0][0]"),"\u8868\u793a",(0,r.kt)("inlineCode",{parentName:"p"},"0~0"),"\u7684\u6700\u957f\u5b50\u5e8f\u5217\uff0c\u56e0\u6b64",(0,r.kt)("inlineCode",{parentName:"p"},"dp[0][0] =1"),"\u3002\u540c\u7406\uff0c\u7b2c\u4e00\u6761\u5bf9\u89d2\u7ebf\u4e0a\u7684\u90fd\u6ee1\u8db3",(0,r.kt)("inlineCode",{parentName:"p"},"dp[i][i]=1"),"\u3002\u7b2c\u4e8c\u6761\u5bf9\u89d2\u7ebf\u4e5f\u80fd\u4e0d\u4f9d\u8d56\u5c31\u586b\u5145\uff0c\u56e0\u6b64\u6b64\u65f6\u53ea\u6709\u4e24\u4e2a\u5b57\u7b26\uff0c\u76f8\u7b49\u5c31\u662f1\uff0c\u4e0d\u7b49\u5c31\u662f0\uff0c\u4e0b\u9762\u8868\u683c\u4e2d\u6807\u8bb0\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"a'")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"    0   1   2   3   \n   \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n 0| 1   a'     target  \n 1|     1   a'            \n 2|         1   a'\n 3|             1\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u800c\u5728\u5bf9\u89d2\u7ebf\u4e0b\u65b9\u7684\u70b9\u90fd\u7528\u4e0d\u5230\uff0c\u56e0\u4e3a\u5728\u4e0b\u65b9",(0,r.kt)("inlineCode",{parentName:"p"},"i < j"),"\uff0c\u90fd\u662f0.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u5728\u666e\u901a\u4f4d\u7f6e",(0,r.kt)("inlineCode",{parentName:"p"},"dp[i][j]"),"\u7684\u4f9d\u8d56\u5173\u7cfb\uff1a"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"str[i] != str[j]"),"\uff0c\u90a3\u4e48\u53ef\u80fd\uff1a",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dp[i][j] = dp[i+1][j]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dp[i][j] = dp[i][j-1]")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"str[i] == str[j]"),"\uff0c\u90a3\u4e48",(0,r.kt)("inlineCode",{parentName:"li"},"dp[i][j] = dp[i+1][j-1] +2"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"      0   1   2   3   \n    \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n  0|     \n  1|         b   a         \n  2|         c   d\n  3|             \n\n  dp[i][j]=a\u4f9d\u8d56\u7684\u662f dp[i+1][j-1]\u7684c\uff0cdp[i+1][j]\u7684d\u548cdp[i][j-1]\u7684b\u3002\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"dp[i][j]"),"\u5728\u4e09\u8005\u4e2d\u53d6\u6700\u5927\u3002"))),(0,r.kt)("p",null,"\u9012\u63a8\u65b9\u7a0b\u51fa\u6765\u540e\uff0c\u6700\u7ec8\u76ee\u6807\u662f\u53f3\u4e0a\u65b9\u56e0\u6b64\u8981\u4ece\u5bf9\u89d2\u7ebf\u4e0a\uff1a",(0,r.kt)("strong",{parentName:"p"},"\u4ece\u5de6\u5230\u53f3\u8fb9\uff0c\u4ece\u4e0b\u5230\u4e0a"),"\u4f9d\u6b21\u9012\u63a8\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  class Solution {\n  public:\n      int longestPalindromeSubseq(std::string str) {\n          if(str.empty()) return 0;\n\n          int length = str.size();\n          int dp[length ][length];  // \u6700\u7ec8\u76ee\u6807\u662f dp[0][length-1]\n          ::memset(dp, 0, sizeof(dp));\n\n          for(int i=0; i < length; ++i) { \n              dp[i][i] = 1;\n          }\n\n         for(int i=1, j=2; j < length; ++j, ++i) { \n            dp[i][j] = str[i] == str[j] ? 2 : 0;\n         }\n      \n         for(int i =length-2; i>=0; --i) { \n            for(int j =i+1; j < length; ++j) { \n                if(str[i] == str[j]) \n                    dp[i][j] = dp[i+1][j-1] + 2; \n                else \n                    dp[i][j] = std::max(dp[i][j-1], dp[i+1][j]);\n            }\n         }\n\n         return dp[0][length-1];\n      }\n  };\n")),(0,r.kt)("h2",{id:"\u7edf\u8ba1\u56de\u6587\u5b50\u5e8f\u5217\u4e2a\u6570"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/count-different-palindromic-subsequences/description/"},"\u7edf\u8ba1\u56de\u6587\u5b50\u5e8f\u5217\u4e2a\u6570")),(0,r.kt)("p",null,"\u8be6\u7ec6\u53ef\u89c1\u4ee3\u7801\u3002\n\u5b50\u5e8f\u5217\u95ee\u9898\uff0c\u5b9a\u4e49\u72b6\u6001\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"dp[i][j]"),"\u8868\u793a",(0,r.kt)("inlineCode",{parentName:"p"},"str[i...j]"),"\u7684\u56de\u6587\u5b50\u5e8f\u5217\u4e2a\u6570\uff0c\u90a3\u4e48\u5982\u4f55\u9012\u63a8\uff1f "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"str[i]==str[j]"),"\uff1a\u90a3\u4e48\u5c31\u67e5\u770b",(0,r.kt)("inlineCode",{parentName:"p"},"dp[i+1][j-1]"),"\u7684\u4fe1\u606f\u3002\u4f46\u662f\u8fd9\u4e2a\u5b50\u5e8f\u5217\u95ee\u9898\u6bd4\u8f83\u590d\u6742"),(0,r.kt)("p",{parentName:"li"},"\u5982\u679c",(0,r.kt)("inlineCode",{parentName:"p"},"str[i+1, j-1]"),"\u4e5f\u5b58\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"str[i]"),"\u90a3\u4e48\u80af\u5b9a\u4f1a\u589e\u52a0\u5b50\u5e8f\u5217\u4e2a\u6570\xb7"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"aba"'),"\u7c7b\u578b\uff1a\u5373\u4e2d\u95f4\u6ca1\u6709",(0,r.kt)("inlineCode",{parentName:"li"},"str[i]"),"\uff0c\u6b64\u5904\u5373\u6ca1\u6709",(0,r.kt)("inlineCode",{parentName:"li"},"a"),"\u3002\u90a3\u4e48 ",(0,r.kt)("inlineCode",{parentName:"li"},"dp[i][j] = dp[i+1][j-1]*2 + 2"),'\u30022\u8868\u793a "a " \u548c"aa"\u4e24\u79cd\u60c5\u51b5'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"abaca"),"\u7c7b\u578b\uff1a\u5373\u4e2d\u95f4\u5b58\u5728\u4e00\u4e2a",(0,r.kt)("inlineCode",{parentName:"li"},"str[i]"),"\uff0c\u90a3\u4e48\u6b64\u65f6 ",(0,r.kt)("inlineCode",{parentName:"li"},"dp[i][j] = dp[i+1][j-1]*2 + 1;")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"abacada"),"\u7c7b\u578b\uff0c\u5373\u5b58\u5728\u591a\u4e2a\uff0c",(0,r.kt)("inlineCode",{parentName:"li"},"dp[i][j] = dp[i+1][j-1]*2  - dp[left+1][right-1]"),"; ",(0,r.kt)("inlineCode",{parentName:"li"},"left")," \u548c ",(0,r.kt)("inlineCode",{parentName:"li"},"right"),"\u662f\u5185\u90e8",(0,r.kt)("inlineCode",{parentName:"li"},"a"),"\u7684\u5de6\u53f3\u8fb9\u754c"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"str[i]!=str[j]"),"\uff0c\u90a3\u4e48\u5c31\u7b80\u5355\u591a\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"dp[i][j] = dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1]"),"\u3002\u51cf\u53bb\u4e00\u90e8\u5206\u662f\u56e0\u4e3a\u8ba1\u7b97\u91cd\u590d\u3002"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    int countPalindromicSubsequences(std::string S) {\n      int N   = S.size();\n      int Mod = 1e9+7; \n      // dp[i][j]:i \u5230 j\u7684\u56de\u6587\u5b50\u5e8f\u5217\u4e2a\u6570\n      std::vector<std::vector<int>> dp(N, std::vector<int>(N));\n\n      for(int i=0; i <N; ++i) { \n        dp[i][i] = 1;  \n      }\n\n      for(int i=N-2; i >=0; --i) { \n        for(int j=i+1; j < N; ++j) { \n          \n          /// @brief:\n          //  \u5982\u679cstr[i] ==str[j]\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u67e5\u8be2 dp[i+1][j-1]\u7684\u4fe1\u606f\uff0c\u4f46\u662f\u56e0\u4e3a\u9898\u76ee\u662f\u56de\u6587\u5b50\u5e8f\u5217\uff0c\u5982\u679c\u5728str[i..j]\u4e2d\u8fd8\u5b58\u5728\n          /// str[i]\uff0c\u90a3\u4e48\u52bf\u5fc5\u4f1a\u589e\u52a0\u56de\u6587\u5b50\u5e8f\u5217\u4e2a\u6570\uff0c\u56e0\u6b64\u9700\u8981\u5982\u4e0b\u5224\u65ad\n          if(S[i] ==S[j]) {\n            int left=i+1, right = j-1;\n            while(left <= right && S[i] != S[left]) ++left;\n            while(left <= right && S[i] != S[right]) --right;\n            /// @biref:\n            /// \u4e3a\u4ec0\u4e48\u4e0b\u9762\u7684\u6c42\u503c\u4e2d\u90fdx2\u4e86?\n            /// \u6bd4\u5982\u8bf4 "abca"\uff0c\u5185\u90e8\u7684"bc"\u4f1a\u56de\u6587\u5b50\u5e8f\u5217 "b","c"\uff0c\u3002\u5185\u90e8\u53c8\u662f\u53ef\u4ee5\u548c\u5916\u9762\u7684"a"\u518d\u7ec4\u5408\uff1a"aba","aca"\uff0c\u56e0\u6b64\u9700\u8981x2\n            if(left > right) \n            { \n              dp[i][j] = dp[i+1][j-1]*2 + 2;\n            }\n            else if(left ==right) \n            { \n              dp[i][j] = dp[i+1][j-1]*2 + 1;\n            }\n            else \n            {\n              // abacada\n              // \u5185\u90e8\u7684 aca \u5df2\u7ecf\u5305\u542b\u4e86 a aa \u7684\u60c5\u51b5\u4e0d\u9700\u8981\u518d\u5355\u72ec\u52a0\u4e0a\n              // \u56e0\u4e3a\u8fd9\u4e2a\u90e8\u5206\u88ab\u8ba1\u7b97\u4e86\u4e24\u6b21\uff0c\u56e0\u6b64\u51cf\u53bb\n              dp[i][j] = dp[i+1][j-1]*2  - dp[left+1][right-1];\n            }\n          }\n          else \n          {\n            dp[i][j] = dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1];          \n          }\n\n          dp[i][j] = dp[i][j] < 0 ? dp[i][j] +Mod : dp[i][j] %Mod;\n        }\n      }\n\n      return dp[0][N-1];\n    }\n};\n')),(0,r.kt)("h2",{id:"\u5206\u5272\u56de\u6587\u4e32i"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/palindrome-partitioning/"},"\u5206\u5272\u56de\u6587\u4e32I")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/palindrome-partitioning/solution/hui-su-you-hua-jia-liao-dong-tai-gui-hua-by-liweiw/"},"\u5185\u5bb9\u6765\u81ea\u9898\u89e3")),(0,r.kt)("p",null,"\u4ee5 basecase \u4e3a\u4f8b\u5b50\uff0c\u753b\u51fa\u9012\u5f52\u6811\u3002 "),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"\u9012\u5f52\u6811",src:t(21798).Z})," "),(0,r.kt)("p",null,"\u601d\u8003\u5982\u4f55\u6839\u636e\u8fd9\u68f5\u9012\u5f52\u6811\u7f16\u7801\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u8868\u793a\u5269\u4f59\u6ca1\u6709\u626b\u63cf\u5230\u7684\u5b57\u7b26\u4e32\uff0c\u4ea7\u751f\u5206\u652f\u662f\u622a\u53d6\u4e86\u5269\u4f59\u5b57\u7b26\u4e32\u7684\u524d\u7f00\uff1b"),(0,r.kt)("li",{parentName:"ul"},"\u4ea7\u751f\u524d\u7f00\u5b57\u7b26\u4e32\u7684\u65f6\u5019\uff0c\u5224\u65ad\u524d\u7f00\u5b57\u7b26\u4e32\u662f\u5426\u662f\u56de\u6587\u3002(\u8fd9\u4e00\u6b65\u9700\u8981\u53ef\u4ee5\u9884\u5904\u7406\uff0c\u6765\u52a0\u901f\u5224\u65ad)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u5982\u679c\u524d\u7f00\u5b57\u7b26\u4e32\u662f\u56de\u6587\uff0c\u5219\u53ef\u4ee5\u4ea7\u751f\u5206\u652f\u548c\u7ed3\u70b9\uff1b\u4ece\u5f53\u524d\u4f4d\u7f6e\u4e0b\u4e00\u4e2a\u8fdb\u5165\u9012\u5f52\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u5982\u679c\u524d\u7f00\u5b57\u7b26\u4e32\u4e0d\u662f\u56de\u6587\uff0c\u5219\u4e0d\u4ea7\u751f\u5206\u652f\u548c\u7ed3\u70b9\uff0c ",(0,r.kt)("strong",{parentName:"li"},"\u8fd9\u4e00\u6b65\u662f\u526a\u679d\u64cd\u4f5c"),"\u3002"))),(0,r.kt)("li",{parentName:"ul"},"\u5728\u53f6\u5b50\u7ed3\u70b9\u662f\u7a7a\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u7ed3\u7b97\uff0c\u6b64\u65f6\u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u5b50\u7ed3\u70b9\u7684\u8def\u5f84\uff0c\u5c31\u662f\u7ed3\u679c\u96c6\u91cc\u7684\u4e00\u4e2a\u7ed3\u679c\u3002\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u8bb0\u5f55\u4e0b\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u3002")),(0,r.kt)("h3",{id:"\u9884\u5904\u7406"},"\u9884\u5904\u7406"),(0,r.kt)("p",null,"\u5982\u679c\u76f4\u63a5\u5224\u65ad\u4e00\u4e2a\u5b57\u4e32\u662f\u5426\u662f\u56de\u6587\u4e32\uff0c\u6bcf\u6b21\u68c0\u6d4b\u4e00\u4e2a\u524d\u7f00\u90fd\u8981\u6d88\u8017",(0,r.kt)("inlineCode",{parentName:"p"},"O(n)"),"\u65f6\u95f4\u590d\u6742\u5ea6\u3002",(0,r.kt)("strong",{parentName:"p"},"\u5f53\u53d1\u73b0\u67d0\u4e2a\u6280\u5de7\u7279\u522b\u9891\u7e41\u7684\u65f6\u5019\uff0c\u80fd\u4e0d\u80fd\u7528\u4e00\u4e2a\u77e9\u9635\u6216\u8005\u6570\u7ec4\u6765\u4ee3\u66ff\u5b83"),"\u3002\u5c06\u6bcf\u6bb5\u56de\u6587\u5b57\u4e32\u90fd\u5b58\u50a8\u5728\u4e00\u4e2a\u8868\u683c\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)"),"\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u67e5\u8be2\u3002\u8bbe\u7f6e\u4e00\u4e2a\u9884\u5904\u7406\u77e9\u9635 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"table[i][j]")))," \uff0c\u8868\u793a ",(0,r.kt)("inlineCode",{parentName:"p"},"i~j"),"\u662f\u5426\u662f\u56de\u6587\u3002"),(0,r.kt)("h3",{id:"\u4ee3\u7801\u53c2\u8003\u6765\u6e90"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/palindrome-partitioning/solution/hui-su-you-hua-jia-liao-dong-tai-gui-hua-by-liweiw/"},"\u4ee3\u7801\u53c2\u8003\u6765\u6e90")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic: \n    typedef  std::vector<std::vector<std::string>> vectorStringSet;\n\n    vectorStringSet partition(std::string str) {\n\n        if(str.empty()) return resultSet_;\n\n        int length = str.length(); \n        \n        std::vector<std::vector<bool>> table(length, std::vector<bool>(length, false));\n\n        for(int i=0; i < length; ++i) { \n            __prePocess(str, i, i,   table);\n            __prePocess(str, i, i+1, table);\n        }\n\n        __partition(str, 0, std::vector<std::string>{ }, table);\n\n        return resultSet_;\n    }\n\nprivate:\n    void __prePocess(std::string& str, int left, int right, std::vector<std::vector<bool>>& table) { \n\n        while( 0<= left && right < str.length() && str[left] == str[right]) { \n            table[left][right] = true;\n            --left;\n            ++right;\n        }\n    }\n\n    template<typename vectorString>\n    void __partition(std::string& str, int index, vectorString&& path ,std::vector<std::vector<bool>>& table) { \n        if(index == str.length()) { \n            resultSet_.push_back(path);\n            return;\n        }\n\n        for(int i=index; i < str.length(); ++i) { \n            if(!table[index][i]) continue;\n            \n            path.emplace_back(std::move(str.substr(index, i-index+1)));\n            // \u8fd9\u91cc\u8fdb\u5165\u4e0b\u4e00\u5c42\u7684\u662f\u4e0b\u4e2a\u4f4d\u7f6e\n            __partition(str, i+1, path, table);\n\n            path.pop_back(); // \u56de\u6eaf\n        }\n    }\n\n    vectorStringSet resultSet_;\n};\n")),(0,r.kt)("h2",{id:"\u5206\u5272\u56de\u6587\u4e32ii"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/palindrome-partitioning-ii/description/"},"\u5206\u5272\u56de\u6587\u4e32II")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32str\uff0c\u8fd4\u56de\u628astr\u5168\u90e8\u5207\u6210\u56de\u6587\u5b50\u4e32\u7684\u6700\u5c0f\u5206\u5272\u6570\u3002\n\n\u4e3e\u4f8b\uff1a\nstr="ABA"\u3002\u4e0d\u9700\u8981\u5207\u5272\uff0cstr\u672c\u8eab\u5c31\u662f\u56de\u6587\u4e32\uff0c\u6240\u4ee5\u8fd4\u56de0\u3002\nstr="ACDCDCDAD"\u3002\u6700\u5c11\u9700\u8981\u52072\u6b21\u53d8\u62103\u4e2a\u56de\u6587\u5b50\u4e32\uff0c\u6bd4\u5982"A"\u3001"CDCDC"\u548c"DAD"\uff0c\u6240\u4ee5\u8fd4\u56de2\u3002\n')),(0,r.kt)("h3",{id:"\u5b9a\u4e49\u72b6\u6001"},"\u5b9a\u4e49\u72b6\u6001"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"dp[i]")," \u8868\u793a\u5b57\u7b26\u4e32",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\u4f4d\u7f6e\u4ee5\u540e\u8981\u5207\u7684\u5200\u6570\u3002 "),(0,r.kt)("p",null,"\u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u524d\u7f00\u5c31\u662f\u4e00\u4e2a\u56de\u6587\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u5c31\u5207\u4e00\u5200\u8ba9\u8fd9\u4e2a\u524d\u7f00\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\uff0c\u7136\u540e\u53bb\u67e5\u770b\u540e\u7f00\u80fd\u5207\u51e0\u5200\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u5b57\u7b26\u4e32\uff1a aba3aba...\n\n1) a       ...   \u4ee5a\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u90e8\u5206\uff0c\u540e\u9762\u5269\u4f59\u90e8\u5206\u5207X\u5200\uff0c\u603b\u5171\u662f X+1\u5200\n2) aba     ...   \u4ee5aba\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u90e8\u5206\uff0c\u540e\u9762\u5269\u4f59\u90e8\u5206\u5207Y\u5200\uff0c \u603b\u5171\u662f b' +1\u5200\n3) aba3aba ...   \u4ee5aba3aba\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u90e8\u5206\uff0c\u540e\u9762\u5269\u4f59\u90e8\u5206\u5207Z\u5200\uff0c\u603b\u5171\u662f Z+1\u5200\n...\n\n\u7136\u540e\uff0c\u53d6\u53ef\u80fd\u6027\u4e2d\u6700\u5c0f\u503c\u3002\n")),(0,r.kt)("p",null,"\u8fd9\u4e2a\u7b97\u6cd5\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"O(n^2)"),"\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u56e0\u4e3a\u6bcf\u6b21\u4e00\u4e2a\u524d\u7f00\u8981\u9010\u6b21\u7684\u5c1d\u8bd5\u4ee5\u6bcf\u4e2a\u5b57\u7b26\u5f00\u59cb\u7684\u6700\u957f\u524d\u7f00\u4f4d\u7f6e\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u5e8f\u5217\uff1aaaaaaa\n\n1) a     ...\n2) a a   ...\n3) a a a ...\n")),(0,r.kt)("p",null,"\u4e3a\u4e86\u4e00\u6b21\u6027\u8d28\u5b9a\u4f4d ",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\u5f00\u59cb\u7684\u524d\u7f00\u4e2d\u7684\u6700\u957f\u56de\u6587\u3002\u91c7\u7528\u548c\u4e0a\u4e00\u9053\u9898\u4e00\u6837\u7684\u601d\u60f3\uff0c\u5efa\u7acb\u4e00\u4e2a",(0,r.kt)("inlineCode",{parentName:"p"},"table[i][j]"),"\uff0c\u8868\u793a\u4ee5",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\u5f00\u59cb\u7684\u6700\u957f\u56de\u6587\u524d\u7f00\u533a\u95f4\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"[i,j]"),"\u3002\u5c31\u76f4\u63a5\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)"),"\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u67e5\u8be2\u4ee5 ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," \u5f00\u59cb\u7684\u6700\u957f\u56de\u6587\u524d\u7f00\u4f4d\u7f6e\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"\u5bf9\u89d2\u7ebf\u90fd\u662f\u56de\u6587")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"\u6b21\u5bf9\u89d2\u7ebf\u6839\u636e\u4e24\u4e2a\u5b57\u7b26\u662f\u5426\u76f8\u7b49\u5c31\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"table[i][j]"),"\u662f\u5426\u662f\u56de\u6587\uff1a",(0,r.kt)("inlineCode",{parentName:"li"},"str[i]==str[j] & table[i+1][j-1]"),"\u3002\u5f53\u524d\u4f4d\u7f6e\u53ea\u662f\u4f9d\u8d56\u5de6\u4e0b\u89d2\u7684\u5143\u7d20\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u5b57\u7b26\u4e32\uff1a aba3aba...\n\naba3aba |  ...   \n        ^ \n        \u7b2c\u4e00\u5200\u5c31\u76f4\u63a5\u5207\u5728\u8fd9\uff0c\u800c\u4e0d\u662f\u5728a\u5904\n")),(0,r.kt)("p",null,"\u901a\u8fc7\u9884\u5904\u7406\u8868\u683c\u52a0\u901f\u6574\u4e2a\u8fc7\u7a0b\uff0c\u4f7f\u5f97\u53d8\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"O(n)"),"\u3002"),(0,r.kt)("h3",{id:"\u4ee3\u7801\u5b9e\u73b0-1"},"\u4ee3\u7801\u5b9e\u73b0"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int minCut(std::string str) {\n        if(str.empty()) return 0; \n\n        int length = str.length(); \n\n        std::vector<int> dp(length+1, INT_MAX); // dp[i] \u8868\u793a i~end \u6700\u5c11\u5207\u51e0\u5200 \n        dp[length] = -1;\n        \n        std::vector<std::vector<bool>> table(length, std::vector(length, false)); \n\n        for(int i=length-1; i>=0; --i) {\n            for(int j=i; j < length; ++j) {\n                // dp[i, j] \u662f\u56de\u6587\uff0c\u624d\u8ba1\u7b97\n                if(str[i] == str[j] && ( j -i < 2 || table[i + 1][j - 1])) { \n                    table[i][j] = true;\n                    dp[i] = std::min(dp[i], 1+dp[j+1]); \n                }\n            }\n        }\n\n        return dp[0];\n    }\n};\n")),(0,r.kt)("h1",{id:"topk"},"topK"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"topK"),"\u6ca1\u6709\u7b2c0\u5927\uff0c\u90fd\u662f\u7b2c\u4e00\u5927\u6216\u8005\u7b2c\u4e00\u5c0f\u5f00\u59cb\u3002 \u7b2c\u4e00\u5c0f/\u5927\u5c31\u662f\u5bf9\u5e94\u6709\u5e8f\u6570\u7ec4\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"arr[0]/arr[N-1]"),"\u3002"),(0,r.kt)("h2",{id:"\u6700\u5c0f\u7684k\u4e2a\u6570"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/"},"\u6700\u5c0f\u7684k\u4e2a\u6570")),(0,r.kt)("h4",{id:"\u57fa\u4e8e\u5feb\u6392\u7684\u65b9\u6cd5"},"\u57fa\u4e8e\u5feb\u6392\u7684\u65b9\u6cd5"),(0,r.kt)("p",null,"\u5148\u5c06\u6570\u7ec4\u6392\u5e8f\uff0c\u518d\u53d6\u51fa\u524dk\u4e2a\u6570\u3002\u8fd9\u4e2a\u65b9\u6cd5\u662f\u5c31\u5730\u6267\u884c\uff0c\u4f1a\u6539\u53d8\u6570\u7ec4\u672c\u8eab\u3002"),(0,r.kt)("p",null,"\u6ce8\u610f\uff1a\u9009\u62e9\u7b2cK\u5c0f\u7684\u5143\u7d20\uff0c\u4f7f\u7528\u5feb\u6392\u7684\u9009\u62e9\u7b97\u6cd5\uff0c\u800c\u8fd9\u9053\u9898\u662f\u6c42\u53d6\u6700\u5c0f\u7684k\u4e2a\u6570\uff0c\u9700\u8981\u5148\u5bf9\u4ed6\u4eec\u8fdb\u884c\u6392\u5e8f\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> getLeastNumbers(vector<int>& arr, int k) {\n        if(arr.empty() || k<=0 || arr.size() < k) \n            return resultSet_;\n         \n        for(int lo=0, hi=arr.size()-1;lo < hi;) {  \n            int L=lo, R=hi;\n            int pivot = arr[lo];\n\n            while(L < R) { \n                while(L < R && pivot <= arr[R]) --R; arr[L] = arr[R]; //\u5c06\u5927\u4e8e\u8f74\u70b9\u6570\u5b50\u6362\u5230\u5de6\u4fa7\n                while(L < R && arr[L]<= pivot)  ++L; arr[R] = arr[L];\n            } //L == R\n            // \u6bcf\u6b21\u7ecf\u8fc7\u4e00\u8f6e\u5faa\u73af\uff0cpivot\u5de6\u4fa7\u7684\u5143\u7d20\u90fd\u4e0d\u5927\u4e8e\u5b83\uff0c\u53f3\u4fa7\u7684\u5143\u7d20\u90fd\u4e0d\u5c0f\u4e8e\u5b83\n            arr[L] = pivot;\n            \n            if(L <= k) lo = L+1; // \u8fdb\u5165\u53f3\u4fa7\n            if(L >= k) hi = L-1; // \u8fdb\u5165\u5de6\u4fa7\n        } // lo == hi \u65f6 lo <=k<=hi\uff0c\u56e0\u6b64 lo == hi==k\n\n        while(k) \n        { \n            --k;\n            resultSet_.push_back(arr[k]);\n        }\n\n        return resultSet_;\n    }\n\nprivate:\n    std::vector<int> resultSet_;\n};\n")),(0,r.kt)("h4",{id:"\u57fa\u4e8e\u6700\u5927\u5806\u7684\u65b9\u6cd5"},"\u57fa\u4e8e\u6700\u5927\u5806\u7684\u65b9\u6cd5"),(0,r.kt)("p",null,"\u7ef4\u6301\u4e00\u4e2a\u5927\u5c0f\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"k"),"\u7684\u5927\u9876\u5806\uff0c\u4f7f\u5f97\u5806\u9876\u5143\u7d20\u6700\u5927\u3002\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3",(0,r.kt)("inlineCode",{parentName:"p"},"k"),"\u5c31\u76f4\u63a5\u653e\u5165\u5806\u4e2d\uff0c\u8d85\u8fc7k\u4e2a\u5143\u7d20\uff0c\u548c\u5806\u9876\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\uff0c\u5c0f\u4e8e\u5806\u9876\u5c31\u5f39\u5806\u9876\uff0c\u653e\u5165\u5f53\u524d\u5143\u7d20\u3002 "),(0,r.kt)("p",null,"\u65f6\u95f4\u590d\u6742\u5ea6\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"O(n*logk)"),"\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"O(k)"),"\u3002"),(0,r.kt)("p",null,"\u8fd9\u4e2a\u4f18\u70b9\u5728\u4e8e\uff1a\u4e0d\u7528\u4e00\u6b21\u6027\u7684\u5c06\u5168\u90e8\u6570\u636e\u52a0\u8f7d\u8fdb\u5165\u5185\u5b58\uff0c\u9002\u5408\u6d77\u91cf\u6570\u636e\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> getLeastNumbers(vector<int>& arr, int k) {\n        if(arr.empty() || k<=0 || arr.size() < k) return std::vector<int>{ };\n        std::vector<int> resultSet_(k);\n        std::priority_queue<int> big_;  // \u4f18\u5148\u7ea7\u961f\u5217\n        \n        for(int& num : arr) { \n            if(big_.size() < k) { \n                big_.push(num);\n            }\n            else { \n            // \u6ee1\u4e86 \n            // \u5c06\u5927\u7684\u5143\u7d20\u53d6\u51fa\u6765\uff0c\u5c06\u5c0f\u7684\u5143\u7d20\u538b\u5165\n                if(big_.top() > num) { \n                    big_.pop();\n                    big_.push(num);\n                }\n            }\n        }\n        \n        while(k) { \n            resultSet_[k-1] =big_.top();\n            big_.pop();\n            \n            --k;\n        }\n            \n        return resultSet_;\n    }\n};\n\n")),(0,r.kt)("p",null,"\u4e0a\u9762\u8fd9\u4e24\u79cd\u89e3\u6cd5\u5404\u6709\u4f18\u7f3a\u70b9\uff0c \u5404\u81ea\u9002\u7528\u4e8e\u4e0d\u540c\u7684\u573a\u5408\uff0c \u56e0\u6b64\u5e94\u8058\u8005\u4ef5\u52a8\u624b\u505a\u9898\u4e4b\u524d\u8981\u5148\u95ee\u6d88\u695a\u9898\u76ee\u7684\u8981\u6c42\uff0c \u5305\u62ec\u8f93\u5165\u7684\u6570\u636e\u63fd\u6709\u591a\u5927\u3001\u80fd\u5426\uff0d\u6b21\u6027\u8f7d\u5165\u5185\u5b58\u3001\u662f\u5426\u5141\u8bb8\u4ea4\u6362\u8f93\u5165\u6570\u636e\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\u7b49"),(0,r.kt)("h2",{id:"\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/median-of-two-sorted-arrays/"},"\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-\u9898\u76ee"},"\u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u4e3a m \u548c n \u7684\u6709\u5e8f\u6570\u7ec4\xa0nums1 \u548c\xa0nums2\u3002\u8bf7\u4f60\u627e\u51fa\u8fd9\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\uff0c\u5e76\u4e14\u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\xa0O(log(m + n))\u3002\n\n\u4f60\u53ef\u4ee5\u5047\u8bbe\xa0nums1\xa0\u548c\xa0nums2\xa0\u4e0d\u4f1a\u540c\u65f6\u4e3a\u7a7a\u3002 \n")),(0,r.kt)("h3",{id:"topk-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"topK")),(0,r.kt)("p",null,"\u5229\u7528\u6c42",(0,r.kt)("inlineCode",{parentName:"p"},"topK"),"\u95ee\u9898\u7684\u601d\u8def\u3002\u5047\u8bbe\u6709\u6570\u636e\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"A: 1, 3, 4, 9\nB: 1, 2, 3, 4, 5, 6, 7, 8\nk = 7 \n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"A"),"\u7684\u4e2d\u4f4d\u6570\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"k/2=3"),"\u3002\u8868\u793a\u7684\u662f\u7b2c3\u4e2a\uff0c\u5373\u4e0b\u6807\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"2 = k/2-1"),"\u3002",(0,r.kt)("inlineCode",{parentName:"p"},"A[2] > B[2]"),"\uff0c\u56e0\u6b64",(0,r.kt)("inlineCode",{parentName:"p"},"B[2]"),"\u524d\u9762\u9762\u7684\u5143\u7d20\u4e0d\u53ef\u80fd\u662f\u4e2d\u4f4d\u6570\uff0c\u6bd4\u5982",(0,r.kt)("inlineCode",{parentName:"p"},"B[1]"),"\u6700\u591a\u4e5f\u53ea\u662f\u7b2c4\u5927\u3002\n\u800c",(0,r.kt)("inlineCode",{parentName:"p"},"A"),"\u4e2d\u90fd\u662f\u6709\u53ef\u80fd\u7684\u3002\u6bd4\u5982",(0,r.kt)("inlineCode",{parentName:"p"},"A[0]"),"\u53ea\u8981\u6bd4",(0,r.kt)("inlineCode",{parentName:"p"},"B[5]"),"\u5927\uff0c\u90a3\u4e48\u5c31\u662f\u7b2c7\u5927\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"A[0]"),"\u53ea\u8981\u6bd4",(0,r.kt)("inlineCode",{parentName:"p"},"B[2]"),"\u5927\uff0c\u90a3\u4e48",(0,r.kt)("inlineCode",{parentName:"p"},"A[3]"),"\u5c31\u662f\u7b2c7\u5927\u3002\u4e0b\u4e00\u6b21\u6bd4\u8f83\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"A: 1, 3, 4, 9\nB: 4, 5, 6, 7, 8\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u5f15\u7406"),(0,r.kt)("p",{parentName:"blockquote"},"\u4e00\u822c\u5730\uff0c \u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"A[0], A[1], A[2] ... A[k/2-1], A[k/2] ... A[n]"))," \u548c ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"B[0], B[1], B[2] ... B[k/2-1], B[k/2]...B[m]"))," \u3002\u5982\u679c ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"em"},"A[k/2-1] < B[k/2-1]"))," \uff0c\u90a3\u4e48  ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"em"},"A[0], A[1], A[2] ... A[k/2-1]"))," \u90fd\u4e0d\u53ef\u80fd\u662f\u7b2c ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"em"},"k"))," \u5c0f\u7684\u6570\u5b57\u3002  "),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"A")," \u6570\u7ec4\u4e2d\u6bd4 ",(0,r.kt)("inlineCode",{parentName:"p"},"A[k/2-1]")," \u5c0f\u7684\u6570\u6709 ",(0,r.kt)("inlineCode",{parentName:"p"},"k/2-1"),"\u4e2a\u3002B\u6570\u7ec4\u4e2d\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"B[k/2-1]"),"\u524d\u9762\u6709",(0,r.kt)("inlineCode",{parentName:"p"},"k/2-1"),"\u3002\u5728\u6700\u597d\u7684\u60c5\u51b5\u4e0b",(0,r.kt)("inlineCode",{parentName:"p"},"B[k/2-1]"),"\u524d\u9762\u6700\u5927\u7684\u4e00\u4e2a\u5143\u7d20",(0,r.kt)("inlineCode",{parentName:"p"},"B[k/2-2] < A[0]"),"\uff0c\u90a3\u4e48\u6b64\u65f6",(0,r.kt)("inlineCode",{parentName:"p"},"A[k/2-1]"),"\u4e5f\u53ea\u662f\u7b2c",(0,r.kt)("inlineCode",{parentName:"p"},"k/2-1 + k/2"),"\u5c0f\uff0c\u5373\u6700\u597d\u7684\u60c5\u51b5\u4e0b\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"A[k/2-1]"),"\u4e5f\u662f\u53ea\u662f\u7b2c",(0,r.kt)("inlineCode",{parentName:"p"},"k-1"),"\u5c0f\u3002\u56e0\u6b64 ",(0,r.kt)("inlineCode",{parentName:"p"},"A[k/2-1]")," \u524d\u9762\u7684\u5143\u7d20\u90fd\u4e0d\u53ef\u80fd\u6ee1\u8db3\u6761\u4ef6\u3002")),(0,r.kt)("p",null,"\u56e0\u6b64\uff0c\u6839\u636e\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u53ef\u4ee5\u5728\u6bcf\u6b21\u4ece\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u4e2d\u9009\u51fa\u4e2d\u4f4d\u6570\uff0c\u4e14\u6bd4\u8f83\u51fa\u5927\u5c0f\u540e\uff0c",(0,r.kt)("strong",{parentName:"p"},"\u8f83\u5c0f\u7684\u4e2d\u4f4d\u6570\u53ca\u5176\u6240\u5728\u6570\u7ec4\u524d\u9762\u7684\u90e8\u5206\u90fd\u53ef\u4ee5\u629b\u5f03"),"\uff08\u51cf\u800c\u6cbb\u4e4b\uff09\u3002\u6bd4\u5982\uff0c\u4e0a\u9762",(0,r.kt)("inlineCode",{parentName:"p"},"A[0] ~ A[k/2-1]"),"\u90fd\u53ef\u4ee5\u629b\u5f03\u3002\u76f4\u63a5\u4ece",(0,r.kt)("inlineCode",{parentName:"p"},"A[k/2]"),"\u518d\u6b21\u5bfb\u627e\u3002\u6b64\u65f6",(0,r.kt)("inlineCode",{parentName:"p"},"k"),"\u5c06\u4f1a\u51cf\u5c11",(0,r.kt)("inlineCode",{parentName:"p"},"k/2"),"\uff0c\u5373\u4ece\u5269\u4f59\u7684\u6570\u7ec4\u4e2d\u67e5\u627e ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"k = k - k/2")))," \u5c0f\u7684\u5143\u7d20\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"A[k/2-1] = B[k/2-1]"),"\u65f6\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u4e86\uff0c\u6b64\u65f6\u4e24\u4e2a\u6570\u5c31\u662f\u539f\u95ee\u9898\u7684\u7b2cK\u5c0f\u7684\u6570\u3002")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u67d0\u4e2a\u6570\u7ec4\u5230\u5934\u4e86\u3002\u6bd4\u5982",(0,r.kt)("inlineCode",{parentName:"p"},"A"),"\u5e8f\u5217\u5230\u8fbe",(0,r.kt)("inlineCode",{parentName:"p"},"A[n]"),"\uff0c\u800c",(0,r.kt)("inlineCode",{parentName:"p"},"B"),"\u8fd8\u6ca1\u5230\u8fbe",(0,r.kt)("inlineCode",{parentName:"p"},"B[n]"),"\u3002"),(0,r.kt)("p",{parentName:"li"},"\u5982\u679c",(0,r.kt)("inlineCode",{parentName:"p"},"A[n] < B[k/2-1]"),"\uff0c\u90a3\u4e48\u6839\u636e\u4e0a\u9762\u7684\u7ed3\u8bba\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"A[n]"),"\u53ca\u5176\u524d\u9762\u53ef\u4ee5\u5168\u90e8\u629b\u5f03\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"A"),"\u5269\u4f59\u957f\u5ea6\u5c31\u662f0\u3002\u7136\u540e ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("inlineCode",{parentName:"em"},"k = k - k/2")))," \u90a3\u4e48\u6700\u7ec8\u7684\u7ed3\u679c\u80af\u5b9a\u5c31\u662f\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"B"),"\u4e2d\uff0c\u6b64\u65f6\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5f97\u5230",(0,r.kt)("inlineCode",{parentName:"p"},"B"),"\u5f97\u5230\u3002\n\u5982\u679c",(0,r.kt)("inlineCode",{parentName:"p"},"A[n] > B[k/2-1]"),"\uff0c\u81ea\u7136\u629b\u5f03",(0,r.kt)("inlineCode",{parentName:"p"},"B[k/2]"),"\u524d\u9762\u7684\u6240\u6709\u5143\u7d20\u3002\u4e0b\u6b21\u5bf9\u6bd4\u65f6:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"  A: A[n]\n  B: B[k/2], ..., B[m]\n")),(0,r.kt)("p",{parentName:"li"},"\u6ce8\u610f\uff1a\u6bcf\u6b21",(0,r.kt)("inlineCode",{parentName:"p"},"k"),"\u5728\u629b\u5f03\u4e00\u6bb5\u4e4b\u540e\u90fd\u662f\u4f1a\u51cf\u5c11\u4e00\u534a\u7684\u3002"))),(0,r.kt)("h4",{id:"\u6839\u636etopk\u6c42\u4e2d\u4f4d\u6570"},"\u6839\u636etopK\u6c42\u4e2d\u4f4d\u6570"),(0,r.kt)("p",null,"\u6709\u4e86\u6c42 ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"em"},"topK"))," \u7684\u7b97\u6cd5\u3002\u53ef\u4ee5\u5229\u7528 ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"em"},"topk"))," \u6765\u6c42\u89e3\u4e2d\u4f4d\u6570\uff0c\u7b2c",(0,r.kt)("inlineCode",{parentName:"p"},"k"),"\u5c0f\u7684\u5143\u7d20\u5bf9\u5e94\u7684\u4e0b\u6807\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"k-1"),"\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u5f53\u4e24\u4e2a\u6570\u7ec4\u957f\u5ea6\u548c\u662f\u5947\u6570\u65f6\uff0c ",(0,r.kt)("inlineCode",{parentName:"p"},"k = length /2 + 1 =(2 * n + 1) /2 + 1 = n + 1"),"\u3002")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u5f53\u4e24\u4e2a\u6570\u7ec4\u957f\u5ea6\u548c\u662f\u5076\u6570\u65f6\uff0c k \u662f\u4e0a\u4e2d\u4f4d\u6570\u548c\u4e0b\u4e2d\u4f4d\u6570\u548c\u7684\u5e73\u5747\u6570:",(0,r.kt)("br",{parentName:"p"}),"\n","\u4e0a\u4e2d\u4f4d\u6570\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"left  = length /2    = n"),(0,r.kt)("br",{parentName:"p"}),"\n","\u4e0b\u4e2d\u4f4d\u6570\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"right = length /2 +1 = n +1;")," "),(0,r.kt)("p",{parentName:"li"},"\u4e3a\u7edf\u4e00\u8fd9\u4e24\u4e2a\u5199\u6cd5:  "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"left  = (length +1) / 2"),"  "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"right = (length +2) / 2"))))),(0,r.kt)("h4",{id:"\u4ee3\u7801\u5b9e\u73b0-2"},"\u4ee3\u7801\u5b9e\u73b0"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n\n        int n = nums1.size(); \n        int m = nums2.size(); \n\n        int length = n + m;\n        int left  = (length +1) /2;\n        int right = (length +2) /2;   \n\n      return  static_cast<double>(__getTopK(nums1, 0, n, nums2, 0, m, left) + \n                                  __getTopK(nums1, 0, n, nums2, 0, m, right)) /2;\n    }\n\n    int __getTopK(std::vector<int>& nums1, int s1, int e1, \n                  std::vector<int>& nums2, int s2, int e2, \n                  int k) \n    { \n      int len1 = e1 - s1, len2 = e2- s2;\n\n      if(len1 ==0) { return nums2[s2 +k-1]; }\n      if(len2 ==0) { return nums1[s1 +k-1]; }\n\n      if(k==1) return std::min(nums1[s1], nums2[s2]);\n\n      // \u6c42\u53d6\u6b64\u65f6\u7684\u4e2d\u70b9\u7d22\u5f15\n      // \u6709\u53ef\u80fd s1 + k/2\u76f4\u63a5\u8d8a\u754c\u4e86\uff0c\u56e0\u6b64\u8981\u4e48\u5230\u8fbe nums1 \u7684\u4e2d\u70b9\uff0c\u8981\u4e48\u5230\u8fbe nums1 \u7684\u7ec8\u70b9\n      int i = s1 + std::min(len1, k/2)-1; \n      int j = s2 + std::min(len2, k/2)-1;\n      \n      int result = 0;\n      \n      if(nums1[i] < nums2[j]) \n      { \n        // \u8981\u629b\u5f03\u7684\u957f\u5ea6\u5c31\u662f [s1, i]\uff0c \u56e0\u6b64 k - (i+1 -s1)\n        result =__getTopK(nums1, i+1, e1, nums2, s2, e2, k - (i+1 - s1)); \n      }\n      else \n      {\n        result = __getTopK(nums1, s1, e1, nums2, j+1, e2, k-(j+1 - s2));\n      }\n\n      return result;\n    }\n};\n")),(0,r.kt)("h2",{id:"\u65e0\u5e8f\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/shu-ju-liu-zhong-de-zhong-wei-shu-lcof/"},"\u65e0\u5e8f\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\u5982\u4f55\u5f97\u5230\u4e00\u4e2a\u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570\uff1f\u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5947\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4f4d\u4e8e\u4e2d\u95f4\u7684\u6570\u503c\u3002\u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5076\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u3002\n")),(0,r.kt)("h4",{id:"\u5206\u6790-1"},"\u5206\u6790"),(0,r.kt)("p",null,"\u6574\u4e2a\u6570\u636e\u53ef\u4ee5\u770b\u4f5c\u88ab\u4e2d\u4f4d\u6570\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u5de6\u8fb9\u7684\u4e0d\u5927\u4e8e\u4e2d\u4f4d\u6570\uff0c\u53f3\u8fb9\u7684\u4e0d\u5c0f\u4e8e\u4e2d\u4f4d\u6570\u3002\u7528\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u4fdd\u5b58\u4e2d\u4f4d\u6570\u4e24\u8fb9\u7684\u6570\u636e\uff0c",(0,r.kt)("strong",{parentName:"p"},"\u4f7f\u5f97\u5de6\u8fb9\u7684\u6570\u636e\u90fd\u5c0f\u4e8e\u53f3\u8fb9\u7684\u6570\u636e"),"\u3002"),(0,r.kt)("p",null,"\u5927\u9876\u5806\u548c\u5c0f\u9876\u5806\uff1a\u56e0\u4e3a\u5927\u9876\u5806\u5934\u90e8\u6700\u5927\uff0c\u5c3e\u90e8\u6700\u5c0f\uff0c\u56e0\u4e3a\u53ef\u4ee5\u8ba9\u5c0f\u4e8e\u4e2d\u4f4d\u6570\u7684\u5b58\u5728\u5927\u9876\u5806\uff0c\u53cd\u4e4b\u5927\u4e8e\u4e2d\u4f4d\u6570\u7684\u4f4d\u4e8e\u5c0f\u9876\u5806\u3002\u4f7f\u5f97\u6570\u636e\u6d41\u4e2d\u7684\u6570\u636e\u5747\u5300\u5206\u5e03\u5728\u4e24\u4e2a\u5806\u4e2d\u3002"),(0,r.kt)("p",null,"\u95ee\u9898\u662f\u600e\u4e48\u5206\u5e03\u5747\u5300\uff0c\u4e24\u961f\u6570\u636e\u4e2a\u6570\u4e4b\u5dee\u4e0d\u8d85\u8fc71\uff1f \u8ba9\u6570\u636e\u6d41\u4e2d\u7684\u6570\uff0c\u5148\u8fdb\u5165\u5927\u9876\u5806\uff0c\u7136\u540e\u5c06\u5927\u9876\u5806\u9996\u90e8\u7684\u5143\u7d20\u79fb\u5230\u5c0f\u9876\u5806\uff0c\u5c31\u80fd\u4f7f\u5f97\u5de6\u8fb9\u7684\u6c38\u8fdc\u4e0d\u5927\u4e8e\u53f3\u8fb9\u7684\u3002\u5982\u679c\u5bfc\u81f4\u5c0f\u9876\u5806\u5143\u7d20\u4e2a\u6570\u591a\u4e8e\u5927\u9876\u5806\uff0c\u5c31\u4ece\u5c0f\u9876\u5806\u9876\u53d6\u51fa\u4e00\u4e2a\u7ed9\u5927\u9876\u5806\uff0c\u4ecd\u4fdd\u6301\u603b\u4f53\u7684\u6709\u5e8f\u6027\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5982\u679c\u603b\u6570\u4e2a\u6570\u662f\u5947\u6570\uff0c\u5927\u9876\u5806\u4e2a\u6570\u662fm\uff0c\u90a3\u4e48\u5c0f\u9876\u5806\u4e2a\u6570\u662fm-1\u3002\u5927\u9876\u5806\u9876\u5373\u4e2d\u4f4d\u6570\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u5982\u679c\u603b\u6570\u4e2a\u6570\u662f\u5076\u6570\uff0c\u5927\u9876\u5806\u4e2a\u6570\u662fm\uff0c\u90a3\u4e48\u5c0f\u9876\u5806\u4e2a\u6570\u662fm\u3002\u4e24\u5806\u9876\u548c\u7684\u5e73\u5747\u6570\u5c31\u662f\u4e2d\u4f4d\u6570\u3002")),(0,r.kt)("h4",{id:"\u4ee3\u7801\u5b9e\u73b0-3"},"\u4ee3\u7801\u5b9e\u73b0"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class MedianFinder {\npublic:    \n    void addNum(int num) {\n        //\u6bcf\u6b21\u90fd\u5148\u52a0\u5165\u5927\u9876\u5806\n        big.push(num);\n\n        small.push(big.top());\n        big.pop();\n\n        if(big.size() < small.size()) {  \n            big.push(small.top());\n            small.pop();\n        }\n    }\n    \n    double findMedian() {\n        return big.size() > small.size() ? \n                    static_cast<double>(big.top()) :\n                    static_cast<double>(big.top() + small.top()) /2 ;\n    }\nprivate:\n    std::priority_queue<int> big;\n    std::priority_queue<int, std::vector<int>, std::greater<int>> small;\n};\n")),(0,r.kt)("h2",{id:"\u524dk\u4e2a\u9ad8\u9891\u6570"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/top-k-frequent-words/submissions/"},"\u524dk\u4e2a\u9ad8\u9891\u6570")),(0,r.kt)("p",null,"\u8fd8\u662f\u5229\u7528\u5806\u5b9e\u73b0\uff1a\u8fbe\u5230 ",(0,r.kt)("inlineCode",{parentName:"p"},"O(n*log(k))")," \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5e76\u5728\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"O(n)"),"\uff0c\u56e0\u4e3a\u8fd8\u6709\u4e2amap\u4f7f\u7528\u4e86\u7a7a\u95f4\u3002"),(0,r.kt)("p",null,"\u6bd4\u8f83\u65e0\u8bed\u7684\u662f\u6bd4\u8f83\u5668\uff1a\u5148\u6bd4\u8f83\u9891\u7387\uff0c\u9891\u7387\u76f8\u540c\u65f6\uff0c\u5b57\u7b26\u5c0f\u7684\u4f18\u5148\u7ea7\u522b\u9ad8\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    typedef std::vector<std::string> vectorStr;\n\n    vectorStr topKFrequent(vectorStr& words, int k) {\n        if(words.empty() || k<=0) return resultSet_; \n       \n        for(const auto& word : words) ++map_[word];\n\n        for(const auto& entry: map_) { \n            if(heap_.size() < k) \n            { \n              heap_.push({entry.second, entry.first});\n            }\n            else \n            {   \n              if(entry.second < heap_.top().first || \n                (entry.second == heap_.top().first && entry.first > heap_.top().second)) \n                continue;\n\n              heap_.pop();\n              heap_.push({entry.second, entry.first});\n            }\n        }\n\n        resultSet_.resize(k);\n        while(k--) \n        { \n            resultSet_[k] = heap_.top().second;\n            heap_.pop();\n        }\n        return resultSet_;\n    }\nprivate:\n    struct Comparator { \n      bool operator()(const std::pair<int, std::string>& lhs, \n                      const std::pair<int, std::string>& rhs) const\n      { \n        return lhs.first == rhs.first ? \n               lhs.second < rhs.second:   // \u9891\u7387\u4e00\u81f4\uff0c\u5b57\u6bcd\u987a\u5e8f\u5c0f\u7684 \u4f18\u5148\u7ea7\u66f4\u9ad8\n               lhs.first  > rhs.first;    // \u5148\u6309\u7167\u9891\u7387\u6bd4\u8f83\n      }  \n   };\n\n    std::priority_queue<std::pair<int, std::string>,\n                        std::vector<std::pair<int, std::string>>,\n                        Comparator> heap_;\n    std::unordered_map<std::string, int> map_;\n    vectorStr resultSet_;\n};\n")),(0,r.kt)("h1",{id:"\u4e24\u6570\u4e4b\u548c\u7cfb\u5217"},"\u4e24\u6570\u4e4b\u548c\u7cfb\u5217"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u9488\u5bf9\u7684\u90fd\u662f\u6709\u5e8f\u6570\u7ec4\uff0c\u5982\u679c\u7ed9\u5b9a\u7684\u6570\u7ec4\u662f\u65e0\u5e8f\u7684\uff0c\u90a3\u4e48\u5148\u6392\u5e8f\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u4e24\u6570\u4e4b\u548c\u7cfb\u7c7b\u90fd\u662f\u53cc\u6307\u9488\u7684\u4f7f\u7528\uff0c\u4e00\u4e2a\u6307\u5411\u5f00\u5934\uff0c\u4e00\u4e2a\u6307\u5411\u7ed3\u5c3e\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u6839\u636e ",(0,r.kt)("inlineCode",{parentName:"li"},"nums[L] + nums[R]")," \u4e0e ",(0,r.kt)("inlineCode",{parentName:"li"},"target")," \u7684\u5927\u5c0f\u6765\u5224\u65ad\u662f ",(0,r.kt)("inlineCode",{parentName:"li"},"++L")," \u8fd8\u662f ",(0,r.kt)("inlineCode",{parentName:"li"},"--R")," \u3002")),(0,r.kt)("h3",{id:"\u4e24\u6570\u4e4b\u548cii"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/"},"\u4e24\u6570\u4e4b\u548cII")),(0,r.kt)("p",null,"\u53ea\u6709\u4e00\u5bf9\u7b54\u6848\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u4e00\u524d\u4e00\u540e\u9760\u8fd1\u3002\n\u6570\u7ec4\u5df2\u7ecf\u6392\u5e8f\u8fd9\u70b9\u5f88\u91cd\u8981"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"nums[L] + nums[R] < target")," \uff1a\u5c0f\u4e8e",(0,r.kt)("inlineCode",{parentName:"li"},"target"),"\uff0c",(0,r.kt)("inlineCode",{parentName:"li"},"++L")," \u6765\u589e\u5927\u533a\u95f4\u548c"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"nums[L] + nums[R] > target")," \uff1a\u5927\u4e8e",(0,r.kt)("inlineCode",{parentName:"li"},"target"),"\uff0c",(0,r.kt)("inlineCode",{parentName:"li"},"--R")," \u51cf\u5c11\u533a\u95f4\u548c"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"nums[L] + nums[R] == target")," \uff1a\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u7ed3\u679c\u8fd4\u56de")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  class Solution {\n  public:\n      std::vector<int> twoSum(const std::vector<int>& nums, int target) {\n        int L=0, R =nums.size()-1;\n        std::vector<int> result(2);\n\n        while(L < R) { \n          \n          if(nums[L] + nums[R] == target) \n          { \n            result[0] = L+1;\n            result[1] = R+1;\n            return result;\n          }\n          else if(nums[L] + nums[R] < target) \n          { \n            ++L;\n          }\n          else \n          {\n            --R;\n          }\n        }\n\n        return result;\n      }\n  };\n")),(0,r.kt)("h3",{id:"\u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/3sum-closest/"},"\u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c")),(0,r.kt)("p",null,"\u5bf9\u4e8e",(0,r.kt)("inlineCode",{parentName:"p"},"nums"),"\u4e2d\u6bcf\u4e2a\u6570\uff0c\u4ece\u5176\u4f4d\u7f6e\u53f3\u8fb9\u5f00\u59cb\u9009\u51fa\u6765\u4e24\u4e2a\u6570\uff0c\u4f7f\u5f97\u4e09\u6570\u4e4b\u548c\u6700\u63a5\u8fd1",(0,r.kt)("inlineCode",{parentName:"p"},"target"),"\u3002\u4e8e\u662f\u4f7f\u7528\u4e09\u4e2a\u6307\u9488\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"cur"),"\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"L=cur+1"),"\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"R=length-1"),"\u3002\u9700\u8981\u5148\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u6839\u636e\u4e09\u4e2a\u6307\u9488\u7684\u548c\uff0c\u6765\u8c03\u6574\u6307\u9488\u4f4d\u7f6e\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5982\u679c ",(0,r.kt)("inlineCode",{parentName:"li"},"sum = nums[cur] + nums[L] +nums[R] > target"),"\uff0c\u9700\u8981 ",(0,r.kt)("inlineCode",{parentName:"li"},"--R")," \u6765\u7f29\u5c0f\uff0c"),(0,r.kt)("li",{parentName:"ul"},"\u5982\u679c ",(0,r.kt)("inlineCode",{parentName:"li"},"sum = nums[cur] + nums[L] +nums[R] < target"),"\uff0c\u9700\u8981 ",(0,r.kt)("inlineCode",{parentName:"li"},"++L")," \u6765\u6269\u5927\uff0c"),(0,r.kt)("li",{parentName:"ul"},"\u5982\u679c ",(0,r.kt)("inlineCode",{parentName:"li"},"sum == target")," \u627e\u5230\u7b54\u6848\uff0c\u76f4\u63a5\u8fd4\u56de\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  class Solution {\n  public:\n      int threeSumClosest(std::vector<int>& nums, int target) {\n        std::sort(nums.begin(), nums.end());\n\n        int64_t result = INT_MAX;\n\n        for(int cur=0, length = nums.size(); cur < length; ++cur) { \n          for(int L =cur+1, R =length-1; L < R;) { \n            int64_t sum = nums[cur] + nums[L] + nums[R];\n            if(std::abs(target - sum) < std::abs(target - result))\n            {\n              result = sum;\n            }  \n\n            // \u66f4\u65b0\u6307\u9488\n            if(sum < target) \n            {\n                ++L;\n            }\n            else if(sum > target) \n            { \n                --R;\n            }\n            else \n            { \n                // sum == target\n                return static_cast<int>(result);\n            }\n          }  // inside-for -end\n        }  // outside-for -end\n\n        return static_cast<int>(result);\n      }\n  };\n")),(0,r.kt)("p",null,"\u8fd9\u4e2a\u95ee\u9898\u7684\u89e3\u6cd5\u601d\u60f3\uff0c\u7c7b\u4f3c\u4e8e",(0,r.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/container-with-most-water/"},"\u76db\u6c34\u6700\u591a\u7684\u5bb9\u5668"),"\uff0c\u6216\u8005\u8bf4\u662f\u4e00\u79cd\u6ed1\u52a8\u7a97\u53e3\u7684\u601d\u60f3\uff1a\u79fb\u52a8\u5de6\u6307\u9488\u53d8\u5927\uff0c\u79fb\u52a8\u53f3\u6307\u9488\u53d8\u5c0f\u3002"),(0,r.kt)("h3",{id:"\u4e09\u6570\u4e4b\u548c"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/3sum/"},"\u4e09\u6570\u4e4b\u548c")),(0,r.kt)("p",null,"\u8fd9\u9053\u9898\u548c\u4e0a\u4e00\u9053\u51e0\u4e4e\u5f02\u66f2\u540c\u5de5\u3002\u53ea\u662f\u8fd9\u9053\u9898\u662f\u627e\u51fa\u6240\u6709\u4e0d\u91cd\u590d\u7684\u7b54\u6848\uff0c\u56e0\u6b64\u5728\u6bcf\u6b21\u627e\u5230\u7b54\u6848\u540e\u9700\u8981\u5254\u9664\u91cd\u590d\u7684\u5143\u7d20\u3002\u539f\u7406\u548c\u4e0a\u9898\u4e00\u6a21\u4e00\u6837\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  class Solution {\n  public:\n      std::vector<std::vector<int>> threeSum(std::vector<int>& nums) {\n        std::vector<std::vector<int>> result;\n        if(nums.size() <3) \n          return result;\n\n        std::sort(nums.begin(), nums.end());\n        \n        for(int curr =0, numsLen = nums.size(); curr < numsLen; ) { \n\n          for(int L=curr+1, R =numsLen-1; L <R; ) { \n            \n            int sum = nums[curr] + nums[L] + nums[R];\n            if(sum < 0) \n            { \n              ++L;\n            }\n            else if(sum >0) \n            { \n              --R;\n            }\n            else \n            { \n              result.emplace_back<std::vector<int>>({nums[curr], nums[L], nums[R]});\n              ++L;\n              while(L < R && nums[L-1] == nums[L]) ++L; // \u4e3a\u4e86\u5254\u9664\u91cd\u590d\u5143\u7d20\n              --R;\n              while(L < R && nums[R] == nums[R+1]) --R; // \u4e3a\u4e86\u5254\u9664\u91cd\u590d\u5143\u7d20\n            }\n          }\n\n          ++curr;\n          while(curr < numsLen && nums[curr-1] == nums[curr]) ++curr; // \u4e3a\u4e86\u5254\u9664\u91cd\u590d\u5143\u7d20   \n        }\n\n        return result;\n      }\n  };\n")),(0,r.kt)("h3",{id:"\u56db\u6570\u4e4b\u548c"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/4sum/"},"\u56db\u6570\u4e4b\u548c")),(0,r.kt)("p",null,"\u6700\u76f4\u63a5\u7684\u60f3\u6cd5\u5c31\u662f\u5728 ",(0,r.kt)("strong",{parentName:"p"},"\u4e09\u6570\u4e4b\u548c")," \u5916\u9762\u518d\u5957\u4e00\u5c42\u5faa\u73af\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  class Solution {\n  public:\n      vector<vector<int>> fourSum(vector<int>& nums, int target) {  \n        std:vector<std::vector<int>> result;\n        if(nums.size() < 4) \n          return result;\n        \n        std::sort(nums.begin(), nums.end());\n\n        for(int curr=0, numsLen =nums.size(); curr < numsLen; ) { \n          M_threeSum(nums, curr, target-nums[curr], result);\n\n          ++curr;\n          while(curr < numsLen && nums[curr-1] == nums[curr]) ++curr; // \u4e3a\u4e86\u5254\u9664\u91cd\u590d\u5143\u7d20   \n        }\n\n        return result;\n      }\n\n  private:\n      void M_threeSum(const std::vector<int>& nums, \n                      int start, \n                      int target, \n                      std::vector<std::vector<int>>& result) {\n        \n        for(int curr =start+1, numsLen = nums.size(); curr < numsLen; ) { \n\n          for(int L=curr+1, R =numsLen-1; L <R; ) { \n            \n            int sum = nums[curr] + nums[L] + nums[R];\n            if(sum < target) \n            { \n              ++L;\n            }\n            else if(sum > target) \n            { \n              --R;\n            }\n            else \n            { \n              result.emplace_back<std::vector<int>>({nums[start], \n                                                     nums[curr], \n                                                     nums[L], \n                                                     nums[R]});\n              ++L;\n              while(L < R && nums[L-1] == nums[L]) ++L; // \u4e3a\u4e86\u5254\u9664\u91cd\u590d\u5143\u7d20\n              --R;\n              while(L < R && nums[R] == nums[R+1]) --R; // \u4e3a\u4e86\u5254\u9664\u91cd\u590d\u5143\u7d20\n            }\n          }\n\n          ++curr;\n          while(curr < numsLen && nums[curr-1] == nums[curr]) ++curr; // \u4e3a\u4e86\u5254\u9664\u91cd\u590d\u5143\u7d20   \n        }\n      }\n  };\n")),(0,r.kt)("p",null,"\u81f3\u6b64\uff0c\u4e24\u6570\u4e4b\u548c\u7cfb\u5217\u5df2\u7ecf\u5168\u6570\u89e3\u51b3\uff0c\u90fd\u662f\u4e00\u4e2a\u53cc\u6307\u9488\u6a21\u677f\u3002"),(0,r.kt)("h1",{id:"\u80a1\u7968\u95ee\u9898"},"\u80a1\u7968\u95ee\u9898"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Leetcode"),"\u4e0a\u4e70\u5356\u80a1\u7968\u76846\u9053\u9898\u76ee "),(0,r.kt)("h2",{id:"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673ai"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/"},"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673aI")),(0,r.kt)("p",null,"\u8fd9\u4e2a\u95ee\u9898\u5c31\u662f\u6c42\u5f53\u524d\u5143\u7d20",(0,r.kt)("inlineCode",{parentName:"p"},"j"),"\u5de6\u4fa7\u6700\u5c0f\u7684\u5143\u7d20",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\uff0c\u90a3\u4e48\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"j"),"\u5929\u5356\u51fa\u7684\u65f6\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5229\u6da6\u5c31\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"j-i"),"\u3002\u5982\u679c\u83b7\u5f97\u5de6\u4fa7\u6700\u5c0f\u7684\u5143\u7d20\uff1f"),(0,r.kt)("h3",{id:"\u5355\u8c03\u6808\u89e3\u6cd5"},"\u5355\u8c03\u6808\u89e3\u6cd5"),(0,r.kt)("p",null,"\u4f7f\u5f97\u5355\u8c03\u6808\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u5165\u6808\uff0c\u7528\u6808\u5e95\u4e00\u76f4\u4fdd\u6301\u4e3a\u5f53\u524d\u5143\u7d20",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\u4e4b\u524d\u7684\u6700\u5c0f\u503c\u3002\u5f53\u6709\u66f4\u5927\u7684\u5143\u7d20\u5165\u6808\u65f6\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u4e00\u76f4\u5f39\u5230\u6ee1\u8db3\u6709\u5e8f\u6027\uff0c\u5728\u5f39\u51fa\u6808\u9876\u5143\u7d20\u65f6\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u6808\u9876\u5143\u7d20\u7684\u6700\u5927\u5229\u6da6\uff0c\u5373\u6808\u9876-\u6808\u5e95\uff0c\u5c31\u662f\u8be5\u5929\u80a1\u7968\u5356\u51fa\u65f6\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5229\u6da6\u3002"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/c-li-yong-shao-bing-wei-hu-yi-ge-dan-diao-zhan-tu-/"},"\u4ee3\u7801")," \u5f15\u5165\u4e86\u4e24\u4e2a\u5c0f\u6280\u5de7\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u8fd9\u91cc\u76f4\u63a5\u4f7f\u7528\u52a8\u6001\u6570\u7ec4\u6765\u6a21\u62df\u6808\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7684\u8bbf\u95ee\u6808\u5e95\u5143\u7d20\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u52a0\u5165\u54e8\u5175\uff0c\u4e00\u6b21\u904d\u5386\u5b8c\u6210\u3002",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        int ans = 0;\n        vector<int> St;\n        prices.emplace_back(-1); \n        for (int i = 0; i < prices.size(); ++ i)  {\n\n            while (!St.empty() && St.back() > prices[i]) { \n                ans = std::max(ans, St.back() - St.front()); \n                St.pop_back();\n            }\n            St.emplace_back(prices[i]);\n        }\n\n        return ans;\n    }\n};\n")))),(0,r.kt)("h3",{id:"\u52a8\u6001\u89c4\u5212"},"\u52a8\u6001\u89c4\u5212"),(0,r.kt)("p",null,"\u76f4\u63a5\u7528\u4e00\u4e2a\u904d\u5386\u8bb0\u5f55\u4e0b\u5f53\u524d\u65e5\u671f ",(0,r.kt)("inlineCode",{parentName:"p"},"j")," \u524d\u7684\u6700\u5c0f\u503c",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\u3002\u4e00\u8fb9\u8ba1\u7b97\u5728 ",(0,r.kt)("inlineCode",{parentName:"p"},"j"),"\u5929\u5356\u51fa\uff0c\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\u4e70\u5165\u65f6\u83b7\u5f97\u7684\u5229\u6da6\uff0c\u4e00\u8fb9\u66f4\u65b0\u5386\u53f2\u6700\u5c0f\u503c\u3002\u4e00\u6b21\u904d\u5386\u5c31\u53ef\u4ee5\u5b8c\u6210\u3002",(0,r.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/121-mai-mai-gu-piao-de-zui-jia-shi-ji-by-leetcode-/"},"\u4ee3\u7801")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n\n        int minprice = INT_MAX;\n        int maxprofit = 0;\n\n        for (const int& price: prices) {\n            maxprofit = max(maxprofit, price - minprice);\n            minprice = min(price, minprice);\n        }\n\n        return maxprofit;\n    }\n};\n")),(0,r.kt)("h2",{id:"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673aii"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/"},"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673aII")),(0,r.kt)("h3",{id:"\u8d2a\u5fc3"},"\u8d2a\u5fc3"),(0,r.kt)("p",null,"\u5047\u8bbe\u7ed9\u5b9a\u7684\u80a1\u7968\u4ef7\u683c\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"[7, 1, 5, 3, 6, 4]")," "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    maxProfit = peek(i)-vally(j),  0 <= i < n\n")),(0,r.kt)("p",null,"\u5982\u56fe\uff0c\u5982\u679c\u5c06\u80a1\u7968\u4ef7\u683c\u753b\u5728\u56fe\u4e0a\uff0c\u53ef\u4ee5\u603b\u5229\u6da6\u6700\u5927\u503c\uff0c\u5c31\u662f\u4e2a\u5c0f\u5229\u6da6\u4e4b\u548c\uff1a\u53ea\u8981\u4f4d\u7f6e",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\u5904\u7684\u4ef7\u683c\u5c0f\u4e8e",(0,r.kt)("inlineCode",{parentName:"p"},"i+1"),"\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\u4f4d\u7f6e\u4e70\u5165",(0,r.kt)("inlineCode",{parentName:"p"},"i+1"),"\u4f4d\u7f6e\u5356\u51fa\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u83b7\u5f97\u5229\u6da6\u3002\u6240\u6709\u7684\u8fd9\u4e9b\u5c0f\u5229\u6da6\u52a0\u8d77\u6765\u5c31\u662f\u5927\u5229\u6da6\u3002\u8fd9\u5c31\u662f\u8d2a\u5fc3\u601d\u60f3\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  class Solution {\n  public:\n      int maxProfit(vector<int>& prices) {\n          if(prices.empty()) return 0; \n          int maxProfit_ =0; \n\n          for(int i=0; i < prices.size()-1; ++i) { \n              if(prices[i] < prices[i+ 1]) \n              { \n                  maxProfit_ += prices[i+1] - prices[i];\n              }\n          }\n\n          return maxProfit_;\n      }\n  };\n")),(0,r.kt)("h3",{id:"\u52a8\u6001\u89c4\u5212-1"},"\u52a8\u6001\u89c4\u5212"),(0,r.kt)("p",null,"\u80fd\u7528\u8d2a\u5fc3\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u4e00\u822c\u90fd\u662f\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u3002"),(0,r.kt)("h4",{id:"\u5b9a\u4e49\u72b6\u6001-1"},"\u5b9a\u4e49\u72b6\u6001"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"dp[i][j]")," "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"i"),"\uff1a\u8868\u793a\u5728 ",(0,r.kt)("inlineCode",{parentName:"li"},"i"),"\u5929\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5229\u6da6 "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"j"),"\uff1a\u53d6\u503c0/1\uff0c0\u8868\u793a\u6301\u6709\u73b0\u91d1\uff08\u4e0d\u4e70\u80a1\u7968\uff09\uff0c1\u8868\u793a\u6301\u6709\u80a1\u7968")),(0,r.kt)("p",null,"\u56e0\u6b64\uff0c\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\u80fd\u7684\u6700\u5927\u6536\u76ca\u6709\u4e24\u79cd\u53ef\u80fd\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\u5929\u6301\u6709\u73b0\u91d1\uff1a\u624b\u91cc\u6ca1\u6709\u80a1\u7968\uff0c\u53ea\u6709\u524d\u4e00\u5929\u7684\u73b0\u91d1\uff0c\u4eca\u5929\u6ca1\u6709\u6536\u76ca\uff1b\u6216\u8005\u624b\u673a\u6709\u80a1\u7968\uff0c\u4eca\u5929\u5356\u51fa\u80a1\u7968\u6536\u76ca\u5c31\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"prices[i]"),"\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"dp[i][0] = std::max(dp[i-1][0], dp[i-1][1] + prices[i])"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\u5929\u6301\u6709\u73b0\u91d1\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"i-1"),"\u5929\u5c31\u6709\u80a1\u7968\uff1b\u6216\u8005",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\u5929\u4e70\u5165\u80a1\u7968\uff0c\u6536\u76ca\u964d\u4f4e",(0,r.kt)("inlineCode",{parentName:"p"},"prices[i]"),"\uff1a ",(0,r.kt)("inlineCode",{parentName:"p"},"dp[i][1] = std::max(dp[i-1][1], dp[i-1][0] - prices[i]"),"  "),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/tan-xin-suan-fa-by-liweiwei1419-2/"},"\u4ee3\u7801"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class Solution {\n    public int maxProfit(int[] prices) {\n        int len = prices.length;\n        if (len < 2) {\n            return 0;\n        }\n\n        // 0\uff1a\u6301\u6709\u73b0\u91d1\n        // 1\uff1a\u6301\u6709\u80a1\u7968\n        // \u72b6\u6001\u8f6c\u79fb\uff1a0 \u2192 1 \u2192 0 \u2192 1 \u2192 0 \u2192 1 \u2192 0\n        int[][] dp = new int[len][2];\n        // \u521d\u59cb\u5316\u72b6\u6001\n        dp[0][0] = 0;\n        dp[0][1] = -prices[0];\n\n        for (int i = 1; i < len; i++) {\n            // \u8fd9\u4e24\u884c\u8c03\u6362\u987a\u5e8f\u4e5f\u662f\u53ef\u4ee5\u7684\n            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i]);\n            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]);\n        }\n        return dp[len - 1][0];\n    }\n}\n")),(0,r.kt)("p",{parentName:"li"},"  \u53ef\u4ee5\u7528\u6eda\u52a8\u66f4\u65b0\uff0c\u538b\u7f29\u7a7a\u95f4\u3002"))),(0,r.kt)("h2",{id:"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673aiii"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/"},"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673aIII")),(0,r.kt)("p",null,"\u5206\u6790\u53ef\u76f4\u63a5\u53c2\u8003",(0,r.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/solution/yi-ge-tong-yong-fang-fa-tuan-mie-6-dao-gu-piao-w-5/"},"\u80a1\u4efd\u95ee\u9898\u5206\u6790")),(0,r.kt)("p",null,"\u5728\u8fd9\u8bf4\u4e0b\u4ee3\u7801\u4e2d\u7684basecase\uff0c\u5c31\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"dp[0][k][0]"),"\u548c",(0,r.kt)("inlineCode",{parentName:"p"},"dp[0][k][1]"),"\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dp[0][k][0]"),"\uff1a\u7b2c0\u5929\u624b\u4e2d\u6301\u6709\u73b0\u91d1\uff0c\u672c\u8d28\u4e0a\u662f\u6ca1\u6709\u4ea7\u751f\u4ea4\u6613\uff0c\u5229\u6da6\u662f",(0,r.kt)("inlineCode",{parentName:"li"},"dp[0][k][0]=0"),"\u3002\u800c\u4ea4\u6613\u591a\u6b21",(0,r.kt)("inlineCode",{parentName:"li"},"k"),"\u662f\u4e0d\u53ef\u80fd\u53d1\u751f\u7684\u3002"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dp[0][k][1]"),"\uff1a\u7b2c0\u5929\u624b\u4e2d\u6301\u6709\u80a1\u7968\uff0c\u5373\u5c06\u624b\u4e2d\u73b0\u91d1\u6362\u6210\u4e86\u80a1\u7968\uff0c\u56e0\u6b64\u5229\u6da6\u51cf\u5c11\u4e86",(0,r.kt)("inlineCode",{parentName:"li"},"-prices[0]"),"\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maxProfit(std::vector<int>& prices) {\n        if(prices.empty()) return 0;\n        \n        int n = prices.size(); \n        int max_k = 2;\n        int dp[n][max_k+1][2]; ::memset(dp, 0, sizeof(dp));\n\n        for(int i=0; i < n; i++) { \n    \n            for(int k=1; k <= max_k; ++k) { \n                \n                if(i==0) { \n                    dp[0][k][0] =0;\n                    dp[0][k][1] =-prices[0];\n                    continue;\n                }\n\n                dp[i][k][0] = std::max(dp[i-1][k][0], dp[i-1][k][1]   + prices[i]);\n                dp[i][k][1] = std::max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);\n            }\n        }\n\n        return dp[n-1][max_k][0];\n    }\n};\n")),(0,r.kt)("p",null,"\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"k=2"),"\u53ea\u6709\u4e24\u4e2a\u72b6\u6001\uff0c\u56e0\u6b64\u53ef\u4ee5\u4e0d\u4f7f\u7528\u4e09\u7ef4\u6570\u7ec4\uff0c\u53ef\u4ee5\u76f4\u63a5\u679a\u4e3e\u51fa\u6bcf\u4e2a\u72b6\u6001\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"dp[i][2][0] = max(dp[i-1][2][0], dp[i-1][2][1] + prices[i])\ndp[i][2][1] = max(dp[i-1][2][1], dp[i-1][1][0] - prices[i])\ndp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])\ndp[i][1][1] = max(dp[i-1][1][1], dp[i-1][0][0] - prices[i]) = max(dp[i-1][1][1], -prices[i])\n\n dp[i-1][0][0]\uff1a\u4ea4\u66130\u6b21\uff0c\u4e14\u624b\u4e2d\u6301\u6709\u73b0\u91d1\uff0c\u56e0\u6b64\u5229\u6da6\u80af\u5b9a\u662f0\u3002\n")),(0,r.kt)("p",null,"\u6839\u636e\u8fd9\u4e2a\u679a\u4e3e\uff0c\u5c31\u53ef\u4ee5\u5199\u51fa\u725b\u903c\u53c8\u88c5\u903c\u7684\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"    class Solution {\n    public:\n    int maxProfit(std::vector<int>& prices) {\n        if(prices.empty()) return 0;\n        // i \u5f00\u59cb\u662f0\uff0c\u56e0\u4e3a dp_i11 / dp_i21 \u90fd\u662f\u521d\u59cb\u5316\u4e3a -prices[0]\n        int dp_i10 = 0, dp_i11 = -prices[0];\n        int dp_i20 = 0, dp_i21 = -prices[0];\n\n        for(int price : prices) { \n            dp_i20 = std::max(dp_i20, dp_i21 + price);\n            dp_i21 = std::max(dp_i21, dp_i10 - price);\n            dp_i10 = std::max(dp_i10, dp_i11 + price);\n            dp_i11 = std::max(dp_i11, - price);\n        }\n\n        return dp_i20;\n    }\n};\n")),(0,r.kt)("h2",{id:"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673aiv"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/"},"\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673aIV")),(0,r.kt)("p",null,"\u5728\u6b64\u65f6\uff0c\u5bf9\u4e8e\u4efb\u610f\u7ed9\u5b9a\u7684\u4ea4\u6613\u6b21\u6570K\uff0c\u6c42\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5229\u6da6\u662f\u591a\u5c11\u3002\u8fd9\u662f\u5bf9\u4e0a\u9762\u4e09\u4e2a\u95ee\u9898\u7684\u603b\u7ed3\u3002"),(0,r.kt)("p",null,"\u5f53 ",(0,r.kt)("inlineCode",{parentName:"p"},"k >= n/2"),"\u65f6\uff0c\u76f8\u5f53\u4e8e\u5c31\u662f\u5728\u7ed9\u5b9a\u7684\u5929\u6570\u5185\uff0c\u4e0d\u9650\u6b21\u6570\u7684\u4ea4\u6613\u3002\u56e0\u4e3a\u5b8c\u6574\u5730\u4ea4\u6613\u4e00\u6b21\u9700\u89812\u5929\u65f6\u95f4\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"k"),"\u6b21\u4ea4\u6613\u9700\u8981",(0,r.kt)("inlineCode",{parentName:"p"},"2*k"),"\u5929\u65f6\u95f4\uff0c\u5982\u679c",(0,r.kt)("inlineCode",{parentName:"p"},"k>=n/2"),"\uff0c\u90a3\u4e48\u5c31\u662f\u76f8\u5f53\u4e8e\u5728n\u5929\u5185\u4e0d\u9650\u6b21\u6570\u4ea4\u6613\uff0c\u6b64\u65f6\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u95ee\u9898II\u7684\u8d2a\u5fc3\u7b97\u6cd5\u3002\u5426\u5219\u4f7f\u7528\u95ee\u98983\u7684\u89e3\u6cd5\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maxProfit(int max_k, vector<int>& prices) {\n\n        if(prices.empty()) return 0 ;\n\n        int n = prices.size(); \n        if(max_k >= n/2) \n        { \n            return __greddy(prices);\n        }\n\n        int dp[n][max_k+1][2]; ::memset(dp, 0, sizeof(dp));\n\n        for(int i=0; i < n; i++) { \n    \n            for(int k=1; k <= max_k; ++k) { \n                \n                if(i==0) { \n                    // dp[0][k][0] =0;\n                    dp[0][k][1] =-prices[0];\n                    continue;\n                }\n\n                dp[i][k][0] = std::max(dp[i-1][k][0], dp[i-1][k][1]   + prices[i]);\n                dp[i][k][1] = std::max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i]);\n            }\n        }\n\n        return dp[n-1][max_k][0];\n    }\n\nprivate:\n    int __greddy(vector<int>& prices) {\n        if(prices.empty()) return 0; \n        int maxProfit_ =0; \n\n        for(int i=0; i < prices.size()-1; ++i) { \n            if(prices[i] < prices[i+ 1]) \n            { \n                maxProfit_ += prices[i+1] - prices[i];\n            }\n        }\n\n        return maxProfit_;\n    }\n};\n")),(0,r.kt)("h3",{id:"\u7a7a\u95f4\u538b\u7f29"},"\u7a7a\u95f4\u538b\u7f29"),(0,r.kt)("p",null,"\u4e0a\u9762\u7684\u4e09\u7ef4",(0,r.kt)("inlineCode",{parentName:"p"},"dp"),"\u6570\u7ec4\uff0c\u53ef\u4ee5\u538b\u7f29\u4e3a\u4e8c\u7ef4\u3002\u5982\u4f55\u538b\u7f29\uff1f\u4f60\u4f1a\u53d1\u73b0\uff0c\u6bcf\u5929",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"\u7684\u72b6\u6001\u90fd\u53ea\u662f\u4f9d\u8d56\u524d\u4e00\u5929",(0,r.kt)("inlineCode",{parentName:"p"},"i-1"),"\u7684\u72b6\u6001\uff0c\u56e0\u6b64\u53ef\u4ee5\u5b9e\u73b0\u6eda\u52a8\u66f4\u65b0\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maxProfit(int max_k, vector<int>& prices) {\n\n        if(prices.empty()) return 0 ;\n\n        int n = prices.size(); \n        if(max_k >= n/2) \n        { \n            return __greddy(prices);\n        }\n\n        int dp[max_k+1][2]; ::memset(dp, 0, sizeof(dp));\n\n        for (int j = 1; j <= max_k; j++) {\n            dp[j][1] = -prices[0];\n        }\n\n        for(int price : prices) { \n    \n            for(int k=1; k <= max_k; ++k) { \n                \n                dp[k][0] = std::max(dp[k][0], dp[k][1]   + price);\n                dp[k][1] = std::max(dp[k][1], dp[k-1][0] - price);\n            }\n        }\n\n        return dp[max_k][0];\n    }\n}\n")),(0,r.kt)("h2",{id:"\u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f"},(0,r.kt)("a",{parentName:"h2",href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/description/"},"\u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f")),(0,r.kt)("p",null,"\u8fd9\u662f\u7b2c\u4e8c\u9898\u7684\u53d8\u5f62\u3002",(0,r.kt)("inlineCode",{parentName:"p"},"k"),"\u4ecd\u7136\u4e0d\u53d7\u9650\u5236\uff0c\u4f46\u662f\u51b7\u51bb\u4e00\u5929\uff0c\u5c31\u662f\u8bf4`\u5f53\u6301\u6709\u80a1\u7968\u65f6\uff0c\u8981\u4e48\u662f\u524d\u4e8c\u5929\u7684\u5356\u51fa\uff0c\u73b0\u5728\u4e70\u5165\uff0c\u6216\u8005\u662f\u524d\u4e00\u5929\u5c31\u6301\u6709\u80a1\u7968\u3002\u800c\u4e0d\u6301\u6709\u80a1\u7968\uff0c\u53ef\u80fd\u6628\u5929\u5c31\u4e0d\u6301\u6709\uff0c\u6216\u8005\u6628\u5929\u6301\u6709\u80a1\u7968\u4eca\u5929\u5356\u51fa\u3002"),(0,r.kt)("p",null,"\u53ef\u5f97\u72b6\u6001\u65b9\u7a0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"  dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])\n  dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])\n")),(0,r.kt)("p",null,"\u56e0\u800c\u53ef\u5f97\u4ee3\u7801\uff0c\u7528\u6eda\u52a8\u66f4\u65b0\u538b\u7f29\u7a7a\u95f4\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        if(prices.empty()) return 0; \n\n        int dp_i0 = 0, dp_i1 = -prices[0];\n        int prev = 0;\n\n        for(const int& price : prices) { \n            int next = dp_i0;\n            dp_i0 = std::max(dp_i0, dp_i1 + price);\n            dp_i1 = std::max(dp_i1, prev - price);\n            prev = next;\n        }\n\n        return dp_i0;\n    }\n};\n")),(0,r.kt)("h1",{id:"\u77f3\u5934\u5408\u5e76\u95ee\u9898"},"\u77f3\u5934\u5408\u5e76\u95ee\u9898"),(0,r.kt)("h2",{id:"\u7f8e\u56e22020\u7cfb\u7edf\u5f00\u53d1\u9898\u76ee"},(0,r.kt)("a",{parentName:"h2",href:"https://www.nowcoder.com/questionTerminal/6d3ccbc5b6ad4f12b8fe4c97eaf969e0?toCommentId=6260901"},"\u7f8e\u56e22020\u7cfb\u7edf\u5f00\u53d1\u9898\u76ee")),(0,r.kt)("p",null,"\u8fd9\u662f\u4ee5\u6700\u5c0f\u7684\u4ee3\u4ef7\u4ece\u76f8\u90bb\u7684\u4e24\u5806\u4e2d\u9009\u62e9\u7684\u65b9\u5f0f\u3002\u7ed3\u5408\u4ee3\u7801\u548c\u4e0b\u9762\u7684\u53c2\u8003\u8fde\u63a5\u4e5f\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <algorithm>\n#include <limits.h>\n#include <iostream>\n#include <vector>\n\nclass Solution{ \npublic:\n  template<typename T> using Matrix = std::vector<std::vector<T>>;\n\n  static void solve(const std::vector<int>& data, int length) {\n    int N = length;\n    Matrix<int> dp(N+1, std::vector<int>(N+1, INT_MAX));\n    Matrix<int> sum(N+1, std::vector<int>(N+1));\n\n    // \u521d\u59cb\u5316,basecase\n    for(int i=1; i <= N; ++i) { \n      sum[i][i] = data[i];\n      dp[i][i] = 0;\n    }\n\n    for(int interval=1; interval < N; ++interval) {   // \u533a\u95f4\u957f\u5ea6\n      // \u5bf9\u4e8e\u540c\u4e00\u4e2a\u533a\u95f4\u957f\u5ea6\uff0c\u4e0d\u540c\u8d77\u70b9\uff0c\u5bfb\u627e\u6700\u5c0f\u7684\u76f8\u90bb\u7684\u4e24\u5806\n      // \u533a\u95f4\u6700\u5927\u7684\u7ec8\u70b9\u662f\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20 index\uff1aN\n      for(int begin=1; begin + interval <= N; ++begin) { // \u533a\u95f4\u8d77\u70b9\n        int end = begin + interval;                      // \u533a\u95f4\u7ec8\u70b9 \n\n        /*** @brief: \u601d\u8def\uff0c\u5728\u533a\u95f4[begin, end]\u627e\u5230\u548c\u6700\u5c0f\u7684\u4e24\u4e2a\uff0c\u52a0\u8d77\u6765\uff0c\u4f5c\u4e3a dp[begin][end]\u7684\u503c\n         * \u52a8\u6001\u65b9\u7a0b\u89e3\u91ca\uff1adp[begin][k] + dp[k+1][end] + sum[begin][end]\n         *     \u56e0\u4e3a\u4e4b\u524d\u5408\u5e76\u6210 [begin][k]\u3001[k+1][end]\u8fd9\u4e24\u5806\u6240\u9700\u7684\u4ee3\u4ef7\uff0c\n         *     \u5c06\u4ed6\u4eec\u5408\u5e76\u6210\u65b0\u7684\u5806\uff0c\u6240\u9700\u7684\u4ee3\u4ef7\uff0c\u5c31\u9700\u8981\u5728\u6b64\u57fa\u7840\u4e0a\u52a0\u4e0a\u65b0\u7684\u548c: sum[begin][end]\n         * \n         *  dp[begin][end] = std::min(dp[begin][end], \n                                      dp[begin][k] + dp[k+1][end] + sum[begin][end]);\n         * \n         * \u5c31\u662f\u4e3a\u4e86\u627e\u4e2a\u6700\u5c0f\u503c\uff1a\u76f8\u540c\u7684\u533a\u95f4\u957f\u5ea6\uff0c\u4e0d\u540c\u7684\u8d77\u70b9\u3002\n         * \n         */\n        \n        for(int k=begin; k < end; ++k) {\n          sum[begin][end] = sum[begin][k] + sum[k+1][end];\n          dp[begin][end] = std::min(dp[begin][end], \n                                    dp[begin][k] + dp[k+1][end] + sum[begin][end]);\n        }\n      }\n    }\n\n    std::cout<< dp[1][N]<<std::endl;\n  }\n};\n\nint main(int argc, char const *argv[]) {\n\n  int N;\n  std::cin>>N;\n  std::vector<int> data(N+1, 0);\n\n  for(int i =1; i <= N; ++i) { \n     std::cin>> data[i];\n  }\n\n  Solution::solve(data, N);\n  return 0;\n}\n")),(0,r.kt)("h2",{id:"\u73af\u5f62\u5408\u5e76\u77f3\u5934"},"\u73af\u5f62\u5408\u5e76\u77f3\u5934"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"\u5728\u4e00\u4e2a\u5706\u5f62\u64cd\u573a\u7684\u56db\u5468\u6446\u653e\u7740n\u5806\u77f3\u5b50\u3002\u73b0\u8981\u5c06\u77f3\u5b50\u6709\u6b21\u5e8f\u5730\u5408\u5e76\u6210\u4e00\u5806\u3002\n\u89c4\u5b9a\u6bcf\u6b21\u53ea\u80fd\u9009\u76f8\u90bb\u76842 \u5806\u77f3\u5b50\u5408\u5e76\u6210\u65b0\u7684\u4e00\u5806\uff0c\u5e76\u5c06\u65b0\u7684\u4e00\u5806\u77f3\u5b50\u6570\u8bb0\u4e3a\u8be5\u6b21\u5408\u5e76\u7684\u5f97\u5206\u3002\n\n\u8bd5\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u8ba1\u7b97\u51fa\u5c06n\u5806\u77f3\u5b50\u5408\u5e76\u6210\u4e00\u5806\u7684\u6700\u5c0f\u5f97\u5206\u548c\u6700\u5927\u5f97\u5206\u3002\u5bf9\u4e8e\u7ed9\u5b9an\u5806\u77f3\u5b50,\u8ba1\u7b97\u5408\u5e76\u6210\u4e00\u5806\u7684\u6700\u5c0f\u5f97\u5206\u548c\u6700\u5927\u5f97\u5206\u3002\n")),(0,r.kt)("p",null,"\u8fd9\u9898\u7684\u601d\u60f3\uff1a\u662f\u5c06\u73af\u5c55\u5f00\u6210\u4e0a\u9762\u7684\u76f4\u7ebf\u6765\u5904\u7406\u3002\u90a3\u4e48\u5143\u7d20\u4e2a\u6570\u5c31\u7531\u539f\u6765\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"N"),"\u7f16\u7a0b",(0,r.kt)("inlineCode",{parentName:"p"},"2N-1"),"\u3002\u6bd4\u5982",(0,r.kt)("inlineCode",{parentName:"p"},"[1,2,3,4]"),"\u56e0\u4e3a\u9996\u5c3e\u53ef\u4ee5\u76f8\u8fde\u53d8\u6210",(0,r.kt)("inlineCode",{parentName:"p"},"[1,2,3,4,3,2,1]"),"\u3002"),(0,r.kt)("h2",{id:"\u53c2\u8003\u8fde\u63a5"},"\u53c2\u8003\u8fde\u63a5"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://blog.csdn.net/weixin_43939593/article/details/105406704"},"\u77f3\u5934\u5408\u5e76\u95ee\u9898\u5927\u603b\u7ed3"))),(0,r.kt)("h1",{id:"\u73af\u5f62\u5355\u94fe\u8868\u7684\u7ea6\u745f\u592b\u95ee\u9898"},"\u73af\u5f62\u5355\u94fe\u8868\u7684\u7ea6\u745f\u592b\u95ee\u9898"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u9898\u76ee\uff1a\n\n\u636e\u8bf4\u8457\u540d\u72b9\u592a\u5386\u53f2\u5b66\u5bb6Josephus\u6709\u8fc7\u4ee5\u4e0b\u6545\u4e8b\uff1a\u5728\u7f57\u9a6c\u4eba\u5360\u9886\u4e54\u5854\u5e15\u7279\u540e\uff0c39\u4e2a\u72b9\u592a\u4eba\u4e0eJosephus\u53ca\u4ed6\u7684\u670b\u53cb\u8eb2\u5230\u4e00\u4e2a\u6d1e\u4e2d\uff0c39\u4e2a\u72b9\u592a\u4eba\u51b3\u5b9a\u5b81\u613f\u6b7b\u4e5f\u4e0d\u8981\u88ab\u654c\u4eba\u6293\u5230\uff0c\u4e8e\u662f\u51b3\u5b9a\u4e86\u4e00\u4e2a\u81ea\u6740\u65b9\u5f0f\uff0c41\u4e2a\u4eba\u6392\u6210\u4e00\u4e2a\u5706\u5708\uff0c\u7531\u7b2c1\u4e2a\u4eba\u5f00\u59cb\u62a5\u6570\uff0c\u62a5\u6570\u52303\u7684\u4eba\u5c31\u81ea\u6740\uff0c\u7136\u540e\u518d\u7531\u4e0b\u4e00\u4e2a\u4eba\u91cd\u65b0\u62a51\uff0c\u62a5\u6570\u52303\u7684\u4eba\u518d\u81ea\u6740\uff0c\u8fd9\u6837\u4f9d\u6b21\u4e0b\u53bb\uff0c\u76f4\u5230\u5269\u4e0b\u6700\u540e\u4e00\u4e2a\u4eba\u65f6\uff0c\u90a3\u4e2a\u4eba\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u81ea\u5df1\u7684\u547d\u8fd0\u3002\u8fd9\u5c31\u662f\u8457\u540d\u7684\u7ea6\u745f\u592b\u95ee\u9898\u3002\u73b0\u5728\u8bf7\u7528\u5355\u5411\u73af\u5f62\u94fe\u8868\u63cf\u8ff0\u8be5\u7ed3\u6784\u5e76\u5448\u73b0\u6574\u4e2a\u81ea\u6740\u8fc7\u7a0b\u3002\n\n\u8f93\u5165\uff1a\u4e00\u4e2a\u73af\u5f62\u5355\u5411\u94fe\u8868\u7684\u5934\u8282\u70b9head\u548c\u62a5\u6570\u7684\u503cm\u3002\n\u8fd4\u56de\uff1a\u6700\u540e\u751f\u5b58\u4e0b\u6765\u7684\u8282\u70b9\uff0c\u4e14\u8fd9\u4e2a\u8282\u70b9\u81ea\u5df1\u7ec4\u6210\u73af\u5f62\u5355\u5411\u94fe\u8868\uff0c\u5176\u4ed6\u8282\u70b9\u90fd\u5220\u6389\u3002\n\u8fdb\u9636\uff1a\u5982\u679c\u94fe\u8868\u8282\u70b9\u6570\u4e3aN\uff0c\u60f3\u5728\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N)\u65f6\u5b8c\u6210\u539f\u95ee\u9898\u7684\u8981\u6c42\uff0c\u8be5\u600e\u4e48\u5b9e\u73b0\uff1f\n")),(0,r.kt)("h4",{id:"\u952f\u9f7f\u51fd\u6570"},"\u952f\u9f7f\u51fd\u6570"),(0,r.kt)("p",null,"\u5229\u7528\u7684\u662f\u4e00\u4e2a\u51fd\u6570",(0,r.kt)("inlineCode",{parentName:"p"},"y = x % target"),"\uff0c\u5176\u4e2d",(0,r.kt)("inlineCode",{parentName:"p"},"target"),"\u662f\u4e00\u4e2a\u7ed9\u5b9a\u503c\uff0cy\u7684\u5f62\u72b6\u662f\u4e00\u4e2a\u952f\u9f7f\u5f62"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"\u952f\u9f7f",src:t(78893).Z})," "),(0,r.kt)("p",null,"\u6bcf\u6b21\u5220\u9664\u4e00\u4e2a\u8282\u70b9\u4e4b\u540e\u5c31\u91cd\u65b0\u7f16\u53f7\uff0c\u5f53\u53ea\u662f\u5269\u4e0b\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\uff0c\u552f\u4e00\u7684\u90a3\u4e2a\u8282\u70b9\u662f1\u3002\u601d\u8def\u662f\uff0c\u5982\u679c\u80fd\u5c06\u6700\u7ec8\u88ab\u5220\u9664\u7684\u90a3\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\uff0c\u5728\u539f\u59cb\u7684\u94fe\u8868\u4e2d\u7684\u7f16\u53f7\u76f4\u63a5\u7b97\u51fa\u6765\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u539f\u59cb\u7f16\u53f7\u5373\u53ef\u3002\u6574\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"O(N)"),"\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \u5269\u4f59\u8282\u70b9\u6570          \u5b58\u6d3b\u8282\u70b9\u7f16\u53f7\n        N                   ?\n        N-1                 ?\n        ...                 ...\n        1                   1\n")),(0,r.kt)("p",null,"\u90a3\uff0c\u8fd9\u4e2a\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u600e\u4e48\u7b97\u51fa\u6765\u7684\uff1f \u5047\u8bbe\u6709N\u4e2a\u8282\u70b9\u7684\u5355\u5411\u73af\u5f62\u94fe\u8868\uff0c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"        \u7f16\u53f7            \u62a5\u6570           \n        1                1\n        2                2\n       ...              ...\n        N                N\n        1                N+1\n        2                N+2\n       ...              ...\n        N                N+N\n")),(0,r.kt)("p",null,"\u56e0\u6b64\uff0c\u8282\u70b9\u548c\u62a5\u6570\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a\u4e5f\u662f\u952f\u9f7f\u6ce2\u5f62\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"y =( x-1) % N + 1"),"\uff0c\u5176\u4e2dx\u8868\u793a\u62a5\u6570\uff0cy\u8868\u793a\u7f16\u53f7\uff0cN\u8868\u793a\u8282\u70b9\u4e2a\u6570\u3002"),(0,r.kt)("h4",{id:"\u65b0\u53f7\u4e0e\u65e7\u53f7\u4e4b\u95f4\u5173\u7cfb"},"\u65b0\u53f7\u4e0e\u65e7\u53f7\u4e4b\u95f4\u5173\u7cfb"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u5e8f\u5217\uff1a[2, 10, 31,  4, 3, 7, 9, 1],  m =3 \n\u7f16\u53f7\uff1a 1   2   3   4  5  6  7  8\n\n\u7b2c\u4e00\u6b21\u5220\u9664\u540e\u91cd\u65b0\u7f16\u53f7\uff1a\n\u5e8f\u5217\uff1a[2, 10,     4, 3, 7, 9, 1]\n\u7f16\u53f7\uff1a[6,  7      1, 2, 3, 4, 5]\n\n\u7b2c\u4e8c\u6b21\u5220\u9664\u540e\u91cd\u65b0\u7f16\u53f7\uff1a\n\u5e8f\u5217\uff1a[2, 10, 4, 3, 9, 1]\n\u7f16\u53f7\uff1a[3, 4, 5\uff0c 6, 1, 2]\n...\n")),(0,r.kt)("p",null,"\u5047\u8bbe\u88ab\u5220\u9664\u7684\u8282\u70b9\u7f16\u53f7\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"S"),"\uff0c\u90a3\u4e48",(0,r.kt)("inlineCode",{parentName:"p"},"S = (m-1) % N + 1"),"\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"m"),"\u662f\u80af\u5b9a\u7684\u6b65\u6570\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"N"),"\u662f\u6bcf\u6b21\u7684\u94fe\u8868\u8282\u70b9\u4e2a\u6570\u3002 \u5220\u9664\u6307\u5b9a\u8282\u70b9\u4e4b\u540e\u548c\u539f\u6765\u8282\u70b9\u4e4b\u5bb6\u7684\u7f16\u53f7\u5173\u7cfb\uff1a"),(0,r.kt)("p",null,"\u4ee5\u7b2c\u4e00\u6b21\u5220\u9664\u4e3a\u4f8b\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"S"),"\u7f16\u53f7\u88ab\u5220\u9664\u540e\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"S+1"),"\u5c31\u662f\u65b0\u7f16\u53f7\u76841\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"S-1"),"\u5c31\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"N-1"),"\uff0c\u65b0\u65e7\u4e4b\u95f4\u7684\u7f16\u53f7\u5173\u7cfb\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u65e7\u7f16\u53f7      \u65b0\u7f16\u53f7\nS+1          1\nS+2          2 \n...         ...\nN           N - S\n1          N- S + 1\n2          N- s + 2\n...         ...\nS-1         N - 1 \n")),(0,r.kt)("p",null,"\u5982\u4f55\u6839\u636e\u65e7\u7f16\u53f7\u5173\u7cfb",(0,r.kt)("inlineCode",{parentName:"p"},"y = (x -1) % N + 1"),"\uff0c\u5f97\u5230\u65b0\u7f16\u53f7\u5173\u7cfb\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5728\u7b2c\u4e00\u6bb5\u66f2\u7ebf\u4e0a\u65e7\u5750\u6807",(0,r.kt)("inlineCode",{parentName:"li"},"[S+1, S+1]"),"\u53d8\u6210\u4e86\u65b0\u5750\u6807",(0,r.kt)("inlineCode",{parentName:"li"},"[1, S+1]"),"\uff0c\u662f\u901a\u8fc7\u65b0\u5750\u6807\u5411\u5de6\u5e73\u79fbS\u4e2a\u5355\u5143\uff0c"),(0,r.kt)("li",{parentName:"ul"},"\u5728\u7b2c\u4e8c\u6bb5\u66f2\u7ebf\u4e0a\u65e7\u5750\u6807",(0,r.kt)("inlineCode",{parentName:"li"},"[N+1, 1]"),"\u53d8\u6210\u4e86\u65b0\u5750\u6807\u4e2d\u7684",(0,r.kt)("inlineCode",{parentName:"li"},"[N-S+1, 1]"),"\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u65b0\u5750\u6807\u5411\u5de6\u79fb\u4e86S\u4e2a\u5355\u5143")),(0,r.kt)("p",null,"\u7efc\u4e0a\u53ef\u5f97\uff0c\u53ef\u4ee5\u5f97\u51fa",(0,r.kt)("inlineCode",{parentName:"p"},"\u65e7 = (\u65b0 - 1 + S) % N + 1")," "),(0,r.kt)("h4",{id:"\u63a8\u7406"},"\u63a8\u7406"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"S\u4e0em\u5173\u7cfb \uff1a S = (m-1) % N + 1           // 1\n\u65e7\u7f16\u53f7\u5173\u7cfb\uff1ay = (x -1) % N + 1          // 2\n\u7f16\u53f7\u5173\u7cfb \uff1a\u65e7 = (\u65b0 - 1 + S) % N + 1    // 3\n\n\u5176\u4e2d\uff0cx\u662f\u7b2c\u51e0\u4e2a\u6570\uff0cm\u662f\u6b65\u6570\uff0cS\u662f\u88ab\u5220\u9664\u8282\u70b9\u7f16\u53f7\uff0cN\u662f\u8282\u70b9\u6570\uff0cN\u662f\u4e0d\u65ad\u51cf\u5c11\u7684\n")),(0,r.kt)("p",null,"\u6839\u636e\u8fd9\u4e2a\u516c\u5f0f\uff0c\u4ece\u5220\u9664\u5230\u8282\u70b9\u53ea\u5269\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\u9006\u63a8\u5230\u539f\u59cb",(0,r.kt)("inlineCode",{parentName:"p"},"N"),"\u4e2a\u8282\u70b9\uff0c\u63a8\u7406\u51fa\u7559\u4e0b\u7684\u8282\u70b9\u5bf9\u5e94\u7684\u3002\u5c31\u53ef\u4ee5\u77e5\u9053\u662f\u54ea\u4e2a\u4e86\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u5047\u8bbe\uff1bm=3\uff0c\u90a3\u4e48\u53ea\u662f\u5269\u4e0b\u4e00\u4e2a\u8282\u70b9\u65f6\u7684\u9006\u63a8\uff0cN = 2\nN-1:\n  S  = (m-1) % i + 1 = 2 % 2 + 1 = 1\n  \u65e7 = (1 - 1 + 1) % 2 + 1 = 2     // \u53ea\u7559\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\u662f 1\uff0c \u5bf9\u5e94\u7684\u53ea\u5269\u4e24\u4e2a\u8282\u70b9\u65f6\uff0c\u8fd9\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\u662f2\nN-2: \n  S  = (m-1) % i + 1 = 2 % 3 + 1 = 3\n  \u65e7 = (2 - 1 + 3) % 3 + 1 =  2    // \u6b64\u65f6\u5f85\u8fd4\u56de\u7684\u8282\u70b9\u5728\u53ea\u5269\u4e09\u4e2a\u8282\u70b9\u65f6\uff0c\u8fd9\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\u662f2\nN-3:\n  S  = (m-1) % i + 1 = 2 % 4 + 1 = 3\n  \u65e7 = (2 - 1 + 3) % 4 + 1 = 1   // \u5f85\u8fd4\u56de\u7684\u8282\u70b9\u5728\u53ea\u5269\u56db\u4e2a\u8282\u70b9\u65f6\uff0c\u8fd9\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\u662f1\n\n...\n\n\u4e00\u76f4\u63a8\u7b97\u5230 i == N\u65f6\uff0c \u5373\u539f\u59cb\u94fe\u8868\uff0c\u5f85\u8fd4\u56de\u7684\u8282\u70b9\u5728\u539f\u59cb\u94fe\u8868\u4e2d\u7684\u7f16\u53f7\uff0c\u5c31\u53ef\u4ee5\u7b97\u51fa\u662f\u7b2c\u51e0\u4e2a\u8282\u70b9\u3002\n")),(0,r.kt)("p",null,"\u516c\u5f0f1\u548c3\uff0c\u53ef\u4ee5\u5316\u7b80\u4e3a ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"\u65e7 = (\u65b0  + m -1\uff09% i + 1")),"\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public calss Solution { \n    public static Node josephusKill(Node head, int m) {\n        if (head == null || head.next == head || m < 1) {\n            return head;\n        }\n        Node cur = head.next;\n        int numsOfNode = 1;     // numsOfNode -> list size\n        while (cur != head) {\n            numsOfNode++;\n            cur = cur.next;\n        }\n        \n        numsOfNode = getLive(numsOfNode, m); // numsOfNode -> service node position\n        while (--numsOfNode != 0) {\n            head = head.next;\n        }\n        head.next = head;\n        return head;\n    }\n\n    // i \u662f\u8282\u70b9\u6570\n    // getLive(i, m) \u8868\u793a\u7684\u5c31\u662f\u7f16\u53f7 \n    public static int getLive(int i, int m) {\n        if (i == 1) \n            return 1;\n        \n        return (getLive(i - 1, m) + m - 1) % i + 1; // \u8fd4\u56de\u65e7\u7684\u7f16\u53f7\n    }\n}\n")))}k.isMDXComponent=!0},21798:function(n,e,t){e.Z=t.p+"assets/images/\u5206\u5272\u56de\u6587\u4e32_\u9012\u5f52\u6811-a10e581d7e3650bb2e9bd7b157157fa1.png"},78893:function(n,e,t){e.Z=t.p+"assets/images/\u7ea6\u745f\u592b\u73af_\u51fd\u6570-7d017b041bf4a7678b6d6d73f68aff11.png"}}]);