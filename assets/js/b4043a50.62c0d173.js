(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[7041],{3905:function(n,t,e){"use strict";e.d(t,{Zo:function(){return u},kt:function(){return m}});var i=e(67294);function a(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function r(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,i)}return e}function l(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?r(Object(e),!0).forEach((function(t){a(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):r(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function s(n,t){if(null==n)return{};var e,i,a=function(n,t){if(null==n)return{};var e,i,a={},r=Object.keys(n);for(i=0;i<r.length;i++)e=r[i],t.indexOf(e)>=0||(a[e]=n[e]);return a}(n,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(i=0;i<r.length;i++)e=r[i],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(a[e]=n[e])}return a}var p=i.createContext({}),o=function(n){var t=i.useContext(p),e=t;return n&&(e="function"==typeof n?n(t):l(l({},t),n)),e},u=function(n){var t=o(n.components);return i.createElement(p.Provider,{value:t},n.children)},c={inlineCode:"code",wrapper:function(n){var t=n.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(n,t){var e=n.components,a=n.mdxType,r=n.originalType,p=n.parentName,u=s(n,["components","mdxType","originalType","parentName"]),d=o(e),m=a,k=d["".concat(p,".").concat(m)]||d[m]||c[m]||r;return e?i.createElement(k,l(l({ref:t},u),{},{components:e})):i.createElement(k,l({ref:t},u))}));function m(n,t){var e=arguments,a=t&&t.mdxType;if("string"==typeof n||a){var r=e.length,l=new Array(r);l[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=n,s.mdxType="string"==typeof n?n:a,l[1]=s;for(var o=2;o<r;o++)l[o]=e[o];return i.createElement.apply(null,l)}return i.createElement.apply(null,e)}d.displayName="MDXCreateElement"},80870:function(n,t,e){"use strict";e.r(t),e.d(t,{frontMatter:function(){return s},metadata:function(){return p},toc:function(){return o},default:function(){return c}});var i=e(22122),a=e(19756),r=(e(67294),e(3905)),l=["components"],s={id:"F1.\u6d77\u91cf\u6570\u636e\u5904\u7406",title:"F1.\u6d77\u91cf\u6570\u636e\u5904\u7406","typora-root-url":"../"},p={unversionedId:"Online_Judge/F1.\u6d77\u91cf\u6570\u636e\u5904\u7406",id:"Online_Judge/F1.\u6d77\u91cf\u6570\u636e\u5904\u7406",isDocsHomePage:!1,title:"\u6d77\u91cf\u6570\u636e\u5904\u7406",description:"\u6d77\u91cf\u6570\u636e\uff0c\u4e0d\u80fd\u4e00\u6b21\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d",source:"@site/docs/3.Online_Judge/F1.\u6d77\u91cf\u6570\u636e\u5904\u7406.md",sourceDirName:"3.Online_Judge",slug:"/Online_Judge/F1.\u6d77\u91cf\u6570\u636e\u5904\u7406",permalink:"/Online_Judge/F1.\u6d77\u91cf\u6570\u636e\u5904\u7406",editUrl:"https://github.com/worst0/wiki_note/edit/main/docs/3.Online_Judge/F1.\u6d77\u91cf\u6570\u636e\u5904\u7406.md",version:"current",frontMatter:{id:"F1.\u6d77\u91cf\u6570\u636e\u5904\u7406",title:"F1.\u6d77\u91cf\u6570\u636e\u5904\u7406","typora-root-url":"../"}},o=[{value:"\u6d77\u91cf\u6570\u636etopK",id:"\u6d77\u91cf\u6570\u636etopk",children:[]},{value:"\u627e\u51faA,B\u4e24\u4e2a\u6d77\u91cfurl\u6587\u4ef6\u4e2d\u5171\u540c\u7684url",id:"\u627e\u51faab\u4e24\u4e2a\u6d77\u91cfurl\u6587\u4ef6\u4e2d\u5171\u540c\u7684url",children:[]},{value:"bitmap",id:"bitmap",children:[]},{value:"\u6d77\u91cf\u6570\u636e\u5224\u65ad\u4e00\u4e2a\u6574\u6570\u662f\u5426\u5b58\u5728\u5176\u4e2d",id:"\u6d77\u91cf\u6570\u636e\u5224\u65ad\u4e00\u4e2a\u6574\u6570\u662f\u5426\u5b58\u5728\u5176\u4e2d",children:[]},{value:"\u6d77\u91cf\u6570\u636e\u627e\u51fa\u4e0d\u91cd\u590d\u7684\u6570\u5b57/\u4ec5\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u636e",id:"\u6d77\u91cf\u6570\u636e\u627e\u51fa\u4e0d\u91cd\u590d\u7684\u6570\u5b57\u4ec5\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u636e",children:[]}],u={toc:o};function c(n){var t=n.components,e=(0,a.Z)(n,l);return(0,r.kt)("wrapper",(0,i.Z)({},u,e,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\u6d77\u91cf\u6570\u636e\uff0c\u4e0d\u80fd\u4e00\u6b21\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d"),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"\u6d77\u91cf\u6570\u636etopK(\u6700\u5927\u548c\u6700\u5c0fk\u4e2a\u6570)\uff0c\u7b2ck\u5927\uff0c\u7b2ck\u5c0f\u7684\u6570"),(0,r.kt)("li",{parentName:"ul"},"\u6d77\u91cf\u6570\u636e\u5224\u65ad\u4e00\u4e2a\u6574\u6570\u662f\u5426\u5b58\u5728\u5176\u4e2d"),(0,r.kt)("li",{parentName:"ul"},"\u6d77\u91cf\u6570\u636e\u627e\u51fa\u4e0d\u91cd\u590d\u7684\u6570\u5b57"),(0,r.kt)("li",{parentName:"ul"},"\u627e\u51faA,B\u4e24\u4e2a\u6d77\u91cfurl\u6587\u4ef6\u4e2d\u5171\u540c\u7684url"))),(0,r.kt)("h2",{id:"\u6d77\u91cf\u6570\u636etopk"},"\u6d77\u91cf\u6570\u636etopK"),(0,r.kt)("p",null,"\u6700\u5927K\u4f7f\u7528\u6700\u5c0f\u5806\uff0c\u6700\u5c0fK\u4f7f\u7528\u6700\u5927\u5806\uff0c\u8fd9\u91cc\u4ee5\u6700\u5927K\u4e3a\u4f8b"),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"\u6d77\u91cf\u6570\u636ehash\u5206\u5757"),(0,r.kt)("li",{parentName:"ul"},"\u7ef4\u62a4\u6700\u5c0f\u5806\u7684K\u4e2a\u6570\u636e\u7684\u6570\u636e\u5bb9\u5668"),(0,r.kt)("li",{parentName:"ul"},"\u5806\u4e2d\u6570\u636e\u662ftopK\u5927\u7684\u6570\u636e\uff0c\u5806\u9876\u7684\u6570\u636e\u662f\u7b2cK\u5927\u6570\u636e"))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u5148\u5c06\u6d77\u91cf\u6570\u636ehash\u518d\u53d6\u6a21m\uff0c\u5206\u6210m\u4e2a\u5c0f\u6587\u4ef6\uff0chash(num)%m\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u53d6\u6a21"),(0,r.kt)("li",{parentName:"ol"},"\u5728\u6bcf\u4e2a\u5c0f\u6587\u4ef6\u4e2d\u7ef4\u62a4K\u4e2a\u6570\u636e\u7684\u6700\u5c0f\u5806\uff0c\u5806\u9876\u662f\u5f53\u524d\u5806\u4e2d\u7684\u6700\u5c0f\u503c"),(0,r.kt)("li",{parentName:"ol"},"\u904d\u5386\u6bcf\u4e2a\u5c0f\u6587\u4ef6\u4e2d\u5269\u4f59\u7684\u6570\u636e\uff0c\u4e0e\u5806\u9876\u7684\u6570\u636e\u8fdb\u884c\u6bd4\u8f83\uff0c\u66f4\u65b0\u6700\u5c0f\u5806\u4e2d\u7684\u6570\u636e"),(0,r.kt)("li",{parentName:"ol"},"\u751f\u6210m * K\u4e2a\u6570\u636e\uff0c\u7136\u540e\u5bf9\u8fd9\u4e9b\u6570\u636e\u518d\u8fdb\u884c\u6392\u5e8f\uff0c\u6216\u8005\u518d\u6b21\u901a\u8fc7\u7ef4\u62a4\u6700\u5c0f\u5806")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u53d8\u5f62")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u7b2cK\u5927\u4e0d\u53ea\u662ftopK\uff0c\u6b64\u65f6\u5806\u9876\u6570\u636e\u5373\u662f"),(0,r.kt)("li",{parentName:"ol"},"\u53ea\u6c42\u6700\u5927\u6216\u6700\u5c0f"),(0,r.kt)("li",{parentName:"ol"},"\u6d77\u91cf\u6570\u636e\u4e0d\u4ec5\u4ec5\u662f\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32"),(0,r.kt)("li",{parentName:"ol"},"\u6d77\u91cf\u6570\u636e\u6309\u7167\u51fa\u73b0\u7684\u6b21\u6570\u6216\u8005\u9891\u7387\u6392\u5e8f\uff0ctopK")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"\u6d77\u91cf\u6570\u636e\u6309\u7167\u51fa\u73b0\u7684\u6b21\u6570\u6216\u8005\u9891\u7387\u6392\u5e8f\uff0ctopK "))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u5148\u5c06\u6d77\u91cf\u6570\u636ehash\u518d\u53d6\u6a21m\uff0c\u5206\u6210m\u4e2a\u5c0f\u6587\u4ef6\uff0chash(num)%m"),(0,r.kt)("li",{parentName:"ol"},"\u626b\u63cf\u6bcf\u4e2a\u5c0f\u6587\u4ef6\u7684\u6570\u636e\uff0c\u901a\u8fc7hash_map\u5efa\u7acb\u503c\u548c\u9891\u7387\u7684\u952e\u503c\u5bf9"),(0,r.kt)("li",{parentName:"ol"},"\u4ee5\u51fa\u73b0\u7684\u9891\u7387\u7ef4\u62a4\u6700\u5c0f\u5806\u7684K\u4e2a\u6570\u636e\u7684\u6570\u636e\u5bb9\u5668"),(0,r.kt)("li",{parentName:"ol"},"\u904d\u5386\u6bcf\u4e2a\u5c0f\u6587\u4ef6\u4e2d\u5269\u4f59\u7684\u6570\u636e\uff0c\u4e0e\u5806\u9876\u7684\u6570\u636e\u8fdb\u884c\u6bd4\u8f83\uff0c\u66f4\u65b0\u6700\u5c0f\u5806\u4e2d\u7684\u6570\u636e"),(0,r.kt)("li",{parentName:"ol"},"\u751f\u6210m * K\u4e2a\u6570\u636e\uff0c\u7136\u540e\u5bf9\u8fd9\u4e9b\u6570\u636e\u518d\u8fdb\u884c\u6392\u5e8f\uff0c\u6216\u8005\u518d\u6b21\u901a\u8fc7\u7ef4\u62a4\u6700\u5c0f\u5806")),(0,r.kt)("h2",{id:"\u627e\u51faab\u4e24\u4e2a\u6d77\u91cfurl\u6587\u4ef6\u4e2d\u5171\u540c\u7684url"},"\u627e\u51faA,B\u4e24\u4e2a\u6d77\u91cfurl\u6587\u4ef6\u4e2d\u5171\u540c\u7684url"),(0,r.kt)("p",null,"\u9898\u76ee\uff1a\u4e24\u4e2a\u6587\u4ef6\u5404\u5b5850\u4ebf\u4e2aurl\uff0c\u6bcf\u4e2aurl64\u4e2a\u5b57\u8282\uff0c\u5185\u5b58\u9650\u52364G\uff0c\u627e\u51faA,B\u5171\u540c\u7684url"),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"\u5355\u4e2a\u6587\u4ef6\u8bfb\u53d6\u80af\u5b9a\u8d85\u51fa\u5185\u5b58\u5927\u5c0f\uff0c\u6240\u4ee5\u8fd8\u662f\u91c7\u53d6\u4e4b\u524d\u7684\u5206\u6cbb\u601d\u60f3\uff0c\u5927\u5316\u5c0f\uff0c\u5bf9A/B\u5206\u522b\u53d6\u6a21\u5206\u62101000\u4e2a\u6587\u4ef6\u5b58\u50a8\uff0c\u8fd9\u6837\u4e24\u4e2a\u6587\u4ef6\u4e2d\u76f8\u540c\u7684url\u90fd\u88ab\u5206\u5230\u76f8\u540c\u7684\u5c0f\u6587\u4ef6\u4e2d\uff0c\u82e5\u6709\u4e00\u65b9\u7684\u5c0f\u6587\u4ef6\u8fd8\u662f\u592a\u5927\uff0c\u5219\u53ef\u4ee5\u6269\u5927\u5206\u5757\u6216\u8005\u901a\u8fc7\u4e0d\u540chash\u51fd\u6570\u7ee7\u7eedhash\uff08\u82e5\u7ee7\u7eed\uff0c\u4e24\u65b9\u5e94\u8be5\u4e00\u8d77\uff09\uff0c50\u4ebfurl\u7b97\u4e0b\u6765\u6bcf\u4e2a\u6587\u4ef6300M\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u5bf9\u5c0f\u6587\u4ef6\u6c42\u516c\u5171url\u7684\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528hash_set\u53bb\u91cd\u3002A\u6587\u4ef6Set\u5efa\u7acb\u540e\u53e6\u5916\u4e00\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u904d\u5386\u8ddfSet\u4e2d\u5185\u5bb9\u6bd4\u5bf9\uff0c\u5982\u679c\u76f8\u7b49\u5219\u8bb0\u5f55"))),(0,r.kt)("h2",{id:"bitmap"},(0,r.kt)("a",{parentName:"h2",href:"https://blog.csdn.net/qq_22080999/article/details/81975889"},"bitmap")),(0,r.kt)("p",null,"bitmap\u4e00\u822c\u662ftotal/32 + 1\u4e2a\u6570\u7ec4\uff0c\u4ecea","[0]","\u5f00\u59cb\uff0c\u6bcf\u7ec4\u662f32bit\u8868\u793a\uff0c\u5bf9\u5e94\u4f4d\u76840\u62161\u8868\u793a\u5341\u8fdb\u5236\u76840-31\u662f\u5426\u5b58\u5728\uff0c\u53ef\u4ee5\u7528\u4e8e\u5feb\u901f\u6392\u5e8f\uff0c\u5feb\u901f\u53bb\u91cd\uff0c\u5feb\u901f\u67e5\u8be2"),(0,r.kt)("h2",{id:"\u6d77\u91cf\u6570\u636e\u5224\u65ad\u4e00\u4e2a\u6574\u6570\u662f\u5426\u5b58\u5728\u5176\u4e2d"},"\u6d77\u91cf\u6570\u636e\u5224\u65ad\u4e00\u4e2a\u6574\u6570\u662f\u5426\u5b58\u5728\u5176\u4e2d"),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"\u5206\u6cbb\u601d\u60f3\uff0c\u9996\u5148\u5206\u6210\u5c0f\u6587\u4ef6\uff0c\u7136\u540e\u5efa\u7acbHashTable\u8fdb\u884c\u7edf\u8ba1"),(0,r.kt)("li",{parentName:"ul"},"\u53ef\u4ee5\u4f7f\u7528BitMap\uff0c\u6bcf\u4e2a\u6570\u5206\u914d1Bit\uff0c0\u4e0d\u5b58\u5728\uff0c1\u5b58\u5728\u5efa\u7acb\u5b8c\u6bd5\u626b\u63cf\u6570\u636e\u628a\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6bd4\u7279\u4f4d\u63cf\u62100/1\uff0c\u6700\u540e\u67e5\u627e\u6574\u6570\u7684\u4f4d\u7f6e\u662f\u5426\u4e3a1\uff08\u901a\u8fc7\u5546\u5224\u65ad\u5728\u54ea\u4e2a\u6570\u7ec4\u4e2d\uff0c\u4f59\u6570\u5224\u65ad\u54ea\u4e00\u4f4d\uff09"))),(0,r.kt)("h2",{id:"\u6d77\u91cf\u6570\u636e\u627e\u51fa\u4e0d\u91cd\u590d\u7684\u6570\u5b57\u4ec5\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u636e"},"\u6d77\u91cf\u6570\u636e\u627e\u51fa\u4e0d\u91cd\u590d\u7684\u6570\u5b57/\u4ec5\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u636e"),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"\u53ef\u4ee5\u4f7f\u7528BitMap\uff0c\u6bcf\u4e2a\u6570\u5206\u914d\u4e24Bit\uff0c00\u4e0d\u5b58\u5728\uff0c01\u51fa\u73b0\u4e00\u6b21\uff0c10\u51fa\u73b0\u591a\u6b21\uff0c11\u6ca1\u610f\u4e49\u3002\u9700\u8981\u5185\u5b582^32 ",(0,r.kt)("em",{parentName:"li"}," 8 ")," 2bit\uff0c\u5efa\u7acb\u5b8c\u6bd5\u626b\u63cf\u6570\u636e\u628a\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6bd4\u7279\u4f4d\u63cf\u621000/01/10/11\uff0c\u6700\u540e\u67e5\u627e01"))),(0,r.kt)("h1",{id:"\u57fa\u672c\u624b\u5199\u4ee3\u7801"},(0,r.kt)("a",{parentName:"h1",href:"https://blog.csdn.net/qq_41572503/article/details/88542859"},"\u57fa\u672c\u624b\u5199\u4ee3\u7801")),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"\u4e8c\u5206\u67e5\u627e"),(0,r.kt)("li",{parentName:"ul"},"\u63d2\u5165\u6392\u5e8f"),(0,r.kt)("li",{parentName:"ul"},"\u5806\u6392\u5e8f"),(0,r.kt)("li",{parentName:"ul"},"\u5f52\u5e76\u6392\u5e8f"),(0,r.kt)("li",{parentName:"ul"},"\u5feb\u901f\u6392\u5e8f\uff08\u968f\u673a\u5355\u6392\uff0c\u53cc\u6392\uff09"),(0,r.kt)("li",{parentName:"ul"},"\u5355\u4f8b\u6a21\u5f0f"),(0,r.kt)("li",{parentName:"ul"},"\u975e\u9012\u5f52\u4e8c\u53c9\u6811\u904d\u5386"))),(0,r.kt)("h4",{id:"\u4e8c\u5206\u67e5\u627e"},"\u4e8c\u5206\u67e5\u627e"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'/**************************************************************************\n**  \u4e8c\u5206\u67e5\u627e\u6cd5\n**  \u5728\u6709\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627etarget\uff0c\u67e5\u627e\u5230\u8fd4\u56deindex\uff0c\u5426\u5219\u8fd4\u56de-1\n*************************************************************************/\n#include <iostream>\nusing namespace std;\n\nint binarySearch(int arr[], int n, int target){\n\n    //\u5728[l,r]\u4e2d\u67e5\u627etarget\n    //\u5305\u542b\u53f3\u8fb9\u754c\n    int l = 0, r = n - 1;\n    int res;\n    while (l <= r){\n        //int mid = (l + r) / 2;\n        //\u9632\u6b62\u6ea2\u51fa\n        int mid = l + (r - l) / 2;\n        if (arr[mid] == target){\n            res = mid;\n            break;\n        }\n        //\u5728[l,mid-1]\u4e2d\u67e5\u627etarget\n        else if (arr[mid] > target)\n            r = mid - 1;\n        //\u5728[mid+1,r]\u4e2d\u67e5\u627etarget\n        else\n            l = mid + 1;\n    }\n    return res;\n}\n\n\nint main(){\n\n    int a[6] = { 0, 1, 2, 3, 4, 5 };\n    int res = binarySearch(a, 6, 4);\n    cout << res << endl;\n    system("pause");\n    return 0;\n}\n')),(0,r.kt)("h4",{id:"\u63d2\u5165\u6392\u5e8f"},"\u63d2\u5165\u6392\u5e8f"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'//\u63d2\u5165\u6392\u5e8f\uff0c\u5e73\u5747\u60c5\u51b5O(n^2),\u6700\u597dO(n)\uff0c\u6700\u574fO(n^2),\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u7a33\u5b9a\n\n/*\n\u63d2\u5165\u6392\u5e8f\u601d\u60f3\na[5] = {2,1,3,4,5}\n\u5916\u5c42\u5faa\u73af\uff1aa[0]\u4e0d\u7528\u7ba1\uff0c\u9ed8\u8ba4\u6709\u5e8f\uff0c\u4ecea[1]\u5f00\u59cb\u5f80\u540e\u5faa\u73af\n\u5185\u5c42\u5faa\u73af\uff1a\u5c06\u9700\u8981\u79fb\u52a8\u7684\u5143\u7d20a[1]\u5b58\u5165\u4e34\u65f6\u53d8\u91cf\n        \u904d\u5386a[1]\u524d\u9762\u7684\u5143\u7d20\uff0c\u4e0e\u5f53\u524da[1]\u8fdb\u884c\u6bd4\u8f83\uff0c\u82e5\u904d\u5386\u7684\u5f53\u524d\u5143\u7d20\u5927\u4e8ea[1]\uff0c\u5143\u7d20\u540e\u79fba[j] = a[j - 1]\n        \u76f4\u5230\u6570\u636e\u5143\u7d20\u5c0f\u4e8e\u7b49\u4e8e\u4e34\u65f6\u53d8\u91cf\n        \u79fb\u52a8\u5b8c\u540e\uff0c\u5c06\u5f53\u524d\u4f4d\u7f6e\u8d4b\u503c\u4e3a\u4e34\u65f6\u53d8\u91cf\n*/\n#include <iostream>\nusing namespace std;\n\n//\u9891\u7e41\u4ea4\u6362\nvoid insertSortBad(int *a, int n){\n    int i, j;\n    for (i = 1; i < n; ++i){\n        for (j = i; a[j - 1] > a[j] && j > 0; --j){\n            swap(a[j - 1], a[j]);\n        }\n    }\n}\n//\u5c06\u9891\u7e41\u4ea4\u6362\u8f6c\u6362\u4e3a\u8d4b\u503c\nvoid insertSort(int *a, int n){\n    //\u4e34\u65f6\u53d8\u91cf,\u5b58\u653e\u9700\u8981\u79fb\u52a8\u7684\u5143\u7d20\n    int temp = 0;\n    int i, j;\n    for (i = 1; i < n; ++i){\n            temp = a[i];\n            for (j = i; a[j - 1] > temp && j > 0; --j){\n                a[j] = a[j - 1];\n            }\n        a[j] = temp;\n    }\n}\n\nint main(){\n    int a[7] = { 2, 1, 3, 4, 5, 9, 8 };\n    insertSortBad(a, 7);\n    for (int i = 0; i < 7; ++i)\n        cout << a[i] << endl;\n\n    system("pause");\n    return 0;\n}\n')),(0,r.kt)("h4",{id:"\u5806\u6392\u5e8f"},"\u5806\u6392\u5e8f"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'//\u5806\u6392\u5e8f\u601d\u60f3\uff1a\u5c06\u5f85\u6392\u5e8f\u5217\u5148\u6784\u9020\u4e00\u4e2a\u6700\u5927\u5806\uff0c\u5806\u9876\u5143\u7d20\u5373\u4e3a\u6700\u5927\u503c\uff0c\u7136\u540e\u79fb\u8d70\u5806\u9876\u5143\u7d20\uff0c\u8c03\u6574\u5269\u4f59\u5143\u7d20\u4e3a\u6700\u5927\u5806\uff0c\u5982\u6b64\u53cd\u590d\u6267\u884c\uff0c\u4fbf\u5f97\u5230\u6709\u5e8f\u5e8f\u5217\n//\u82e5\u4ece\u5c0f\u5230\u5927\u6392\u5217\uff0c\u5efa\u7acb\u6700\u5927\u5806\n//\u82e5\u4ece\u5927\u5230\u5c0f\u6392\u5217\uff0c\u5efa\u7acb\u6700\u5c0f\u5806\n\n//\u5806\u6392\u5e8f\uff0c\u5e73\u5747\u60c5\u51b5O(nlogn),\u6700\u597dO(nlogn)\uff0c\u6700\u574fO(nlogn),\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u4e0d\u7a33\u5b9a\n\n//\u89e3\u91ca\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\n//\u5efa\u7acb\u5806\u7684\u8fc7\u7a0b\u662fnlogn,\u904d\u5386\u6240\u6709\u975e\u53f6\u5b50\u7ed3\u70b9\uff0c\u5c06\u5176\u548c\u5b50\u6811\u8c03\u6574\u4e3a\u6700\u5927\u5806\n//\u8c03\u6574\u5806\u7684\u8fc7\u7a0b\u662flogn\uff0c\u6574\u4f53\u662fnlogn\n\n//\u7531\u6570\u7ec4\u53d8\u4e3a\u6700\u5927\u5806\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u4e00\u79cd\u662f\u9010\u4e2a\u63d2\u5165\uff08O(n)\uff09\uff0c\u4e00\u79cd\u662fheapify(\u4ece\u7b2c\u4e00\u4e2a\u975e\u53f6\u5b50\u7ed3\u70b9\u5f00\u59cb\u8c03\u6574\uff0cbottom to up)\uff08O(1)\uff09\n//\u5927\u8bdd\u6570\u636e\u7ed3\u6784\u4e66\u4e0a\u7684\u6392\u5e8f\u57fa\u672c\u90fd\u662f\u6570\u7ec4\u76840\u4f4d\u7f6e\u4e0d\u653e\u5143\u7d20\uff0c\u4ece1\u5f00\u59cb\n//\u8fd9\u91cc\u4ece0\u4f4d\u7f6e\u5f00\u59cb\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid build_max_heap(vector<int> &a, int len);\nvoid heapadjust(vector<int> &a, int i, int len);\n\nvoid heap_sort(vector<int> &a) {\n    int len = a.size();\n    build_max_heap(a, len);\n    for (int i = len - 1; i >= 1; i--) {\n        //\u5c06\u5806\u9876\u7684\u5143\u7d20\u548c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\u4f4d\u7f6e\n        swap(a[0], a[i]);\n        \n        //\u6bcf\u6b21\u5c06\u6570\u7ec4\u524d\u9762\u7684\u90e8\u5206\u518d\u8c03\u6574\u4e3a\u6700\u5927\u5806\uff0c\u540e\u7eed\u8c03\u6574\u7684\u65f6\u5019\u4f20\u8fdb\u53bb\u7684\u5c31\u662f\u5f53\u524d\u6570\u7ec4\u80fd\u53d6\u5230\u7684\u6700\u5927\u4e0b\u6807\u4e86\uff0c\u56e0\u4e3ai\u8d4b\u521d\u503c\u65f6\u5df2\u7ecf\u89e3\u51b3\n        heapadjust(a, 0, i - 1);    \n    }\n}\n//\u5efa\u5806\u7684\u610f\u601d\u662f\u5c06\u6570\u7ec4\u8f6c\u6362\u6210\u6700\u5927\u5806\n//\u672c\u8d28\uff1a\u4ece\u4e0b\u5f80\u4e0a\uff0c\u4ece\u53f3\u5f80\u5de6\uff0c\u5c06\u6bcf\u4e2a\u975e\u53f6\u5b50\u7ed3\u70b9\u5f53\u505a\u6839\u8282\u70b9\uff0c\u5c06\u5176\u548c\u5b50\u6811\u8c03\u6574\u6210\u6700\u5927\u5806\uff0c\u9996\u5148\u627e\u5230\u6700\u540e\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u7684\u7236\u8282\u70b9len / 2 - 1\n//\u6700\u5927\u5806\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u5927\u4e8e\u7b49\u4e8e\u5de6\u53f3\u5b69\u5b50\u7ed3\u70b9\u7684\u503c\nvoid build_max_heap(vector<int> &a, int len) {  //\u5efa\u5806\n    for (int i = len / 2 - 1; i >= 0; i--) {\n        heapadjust(a, i, len - 1);              //\u5efa\u5806\u7684\u65f6\u5019\u5e94\u8be5\u4f20\u8fdb\u53bblen-1\uff0c\u5373\u5f53\u524d\u6570\u7ec4\u80fd\u53d6\u5230\u7684\u6700\u5927\u4e0b\u6807\uff0c\u5373\u4fdd\u8bc1\u5806\u8c03\u6574\u8fc7\u7a0b\u4e2d\u5de6\u53f3\u5b69\u5b50\u4e0d\u4f1a\u6570\u7ec4\u8d8a\u754c\n    }\n}\n\n//\u4ee5i\u5f53\u505a\u6839\u8282\u70b9\uff0c\u8c03\u6574\u5176\u548c\u5176\u5b50\u6811\u4e3a\u6700\u5927\u5806\nvoid heapadjust(vector<int> &a, int i, int len){\n    int temp, j;\n    temp = a[i];\n    \n    //\u5f53\u524d\u7ed3\u70b9\u4e3aj\uff0c\u5de6\u5b69\u5b50\u5e8f\u53f7\u662f2*i\uff0c\u53f3\u5b69\u5b50\u5e8f\u53f7\u662f2*i+1\n    //\u8fd9\u91cc\u7684\u7ed3\u70b9\u4ece0\u5f00\u59cb\uff0c\u4e0d\u662f\u4ece1\u5f00\u59cb\uff0c\u56e0\u6b64\u5de6\u5b69\u5b50\u5e8f\u53f7\u662f2*i + 1\uff0c\u53f3\u5b69\u5b50\u5e8f\u53f7\u662f2*i+2\n    for (j = 2*i+1; j <= len; j *= 2){\n        //\u5148\u6bd4\u8f83\u5de6\u53f3\u5b69\u5b50,\u627e\u5230\u5de6\u53f3\u5b69\u5b50\u4e2d\u8f83\u5927\u7684\u90a3\u4e2a\n        if (j < len && a[j] < a[j+1])\n            ++j;\n\n        //\u5982\u679c\u5de6\u53f3\u5b69\u5b50\u4e2d\u6700\u5927\u503c\u5c0f\u4e8e\u5f53\u524d\u503c\uff0c\u5219\u4e0d\u9700\u8981\u79fb\u52a8\n        if (a[j] <= temp)\n            break;\n        //\u82e5\u6700\u5927\u503c\u5927\u4e8e\u5f53\u524d\u503c\uff0c\u9700\u8981\u5c06\u6700\u5927\u503c\u5f80\u524d\u79fb\u52a8\uff0c\u8d4b\u7ed9i\u4f4d\u7f6e\n        //\u6b64\u65f6\u4e0d\u8981\u52a8j\uff0c\u76f4\u5230\u627e\u5230j\u6240\u5728\u4f4d\u7f6e\u518d\u8d4b\u503c\n        a[i] = a[j];\n\n        //\u5c06\u5f53\u524d\u503c\u548c\u5de6\u53f3\u5b69\u5b50\u6bd4\u8f83\u540e\uff0c\u82e5\u79fb\u52a8\u4e86\uff0c\u5219\u7ee7\u7eed\u5f80\u4e0b\u6bd4\u8f83\uff0c\u5c06j\u5411\u4e0b\u79fb\u52a8\u5230\u521a\u624d\u8f83\u5927\u7684\u5b69\u5b50\u5904\n        i = j;\n    }\n    //\u76f4\u5230\u627e\u5230temp\u7684\u5408\u9002\u4f4d\u7f6e\n    a[i] = temp;\n}\n\nint main(){\n    vector<int>a;\n    a.push_back(7);\n    a.push_back(6);\n    a.push_back(5);\n    a.push_back(4);\n    a.push_back(1);\n    a.push_back(2);\n    a.push_back(3);\n    heap_sort(a);\n\n    for (int i = 0; i<7; ++i){\n        printf("%d ", a[i]);\n    }\n\n    system("pause");\n    return 0;\n}\n')),(0,r.kt)("h4",{id:"\u5f52\u5e76\u6392\u5e8f"},"\u5f52\u5e76\u6392\u5e8f"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'//\u4e24\u4e2a\u5e8f\u5217\u4ece\u76f8\u540c\u4f4d\u7f6e\u5f80\u53f3\u904d\u5386\u6bd4\u8f83\uff0c\u6839\u636e\u5927\u5c0f\u91cd\u65b0\u6392\u5217\u5728\u65b0\u6570\u7ec4\u4e2d\u7684\u524d\u63d0\u662f\uff0c\u5de6\u53f3\u4e24\u4e2a\u5e8f\u5217\u90fd\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5217\u7684\n\n//\u5f52\u5e76\u6392\u5e8f\u601d\u60f3\uff1a\u5148\u9012\u5f52\u518d\u5f52\u5e76\n//\u5148\u9012\u5f52\uff0c\u5c06\u5de6\u53f3\u5f52\u5e76\u4e3a\u6709\u5e8f\u5e8f\u5217\uff0c\u518d\u5c06\u5de6\u53f3\u8fdb\u884c\u5f52\u5e76\n//\u5c06\u5de6\u53f3\u6709\u5e8f\u5f52\u5e76\u65f6\uff0c\u4e24\u4e2a\u5e8f\u5217\u4ece\u76f8\u540c\u4f4d\u7f6e\u5f80\u53f3\u904d\u5386\u6bd4\u8f83\uff0c\u6839\u636e\u5927\u5c0f\u91cd\u65b0\u6392\u5217\u5728\u65b0\u6570\u7ec4\u4e2d\n//\u6838\u5fc3\u51fd\u6570\u662fmerge\uff0cMsort\u51fd\u6570\u662f\u9012\u5f52\u5206\u6cbb\u8c03\u7528merge\u7684\u8fc7\u7a0b\n\n//\u5f52\u5e76\u6392\u5e8f\uff0c\u5e73\u5747\u60c5\u51b5O(nlogn),\u6700\u597dO(nlogn)\uff0c\u6700\u574fO(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n + logn)\uff0c\u7a33\u5b9a\n\n//\u89e3\u91ca\u65f6\u95f4\u590d\u6742\u5ea6\u4e3anlogn\n//\u4e00\u8d9f\u5f52\u5e76\u8981\u5c06\u6574\u4e2a\u5e8f\u5217\u6240\u6709\u5143\u7d20\u904d\u5386\u4e00\u904d\uff0c\u590d\u6742\u5ea6\u4e3aO(n)\n//\u9012\u5f52\u6811\u7684\u9ad8\u5ea6\u4e3alogn\uff0c\u6bcf\u6b21\u9012\u5f52\u90fd\u8981\u4e00\u8d9f\u5f52\u5e76\n//nlogn\n\n//\u89e3\u91ca\u7a7a\u95f4\u590d\u6742\u5ea6O(n + logn)\n//\u4e3b\u8981\u662f\u9012\u5f52\u9020\u6210\u7684\u6808\u7a7a\u95f4\u7684\u4f7f\u7528logn\uff0c\u548c\u6bcf\u6b21\u5f52\u5e76\u90fd\u9700\u8981\u5c06\u539f\u6570\u7ec4\u5f52\u5e76\u5230\u65b0\u6570\u7ec4\uff0c\u518d\u62f7\u8d1d\u56de\u539f\u6570\u7ec4\uff0c\u548c\u6bcf\u6b21\u5f52\u5e76\u90fd\u9700\u8981\u5c06\u539f\u6570\u7ec4\u5f52\u5e76\u5230\u65b0\u6570\u7ec4\uff0c\u518d\u62f7\u8d1d\u56de\u539f\u6570\u7ec4O(n)\n//O(n + logn)\n\n\n#include <iostream>\n#include <vector>\nusing namespace std;\n\n//\u51fd\u6570\u662f\u5c06sr\u4e24\u4fa7\u5f52\u5e76\u7684\u6570\u636e\uff0c\u91cd\u65b0\u6392\u5217\u8fdbtr\u4e2d\n//sr[s...m, m+1...t]\n//int num = 0;\nvoid merge(int sr[], int s, int m, int t){\n    int length = t - s + 1;\n    int *tr = new int[length];\n\n    int i = s, j = m + 1, k = 0;\n\n    while(i <= m && j <= t){\n        if (sr[i] < sr[j])\n            tr[k++] = sr[i++];\n        else{\n            //num += m - i + 1;\n            tr[k++] = sr[j++];\n        }\n    }\n    //\u5f53\u4e24\u4fa7\u6570\u636e\u957f\u5ea6\u5e76\u975e\u5b8c\u5168\u76f8\u7b49\u65f6\uff0c\u53ea\u9700\u8981\u5c06\u5de6\u3001\u53f3\u4fa7\u4e24\u4fa7\u5269\u4f59\u6570\u636e\u62f7\u8d1d\u5373\u53ef\n    while (i <= m)\n        tr[k++] = sr[i++];\n    while (j <= t)\n        tr[k++] = sr[j++];\n\n    //\u5c06\u8f85\u52a9\u6570\u7ec4\u7684\u5143\u7d20\u62f7\u8d1d\u5230\u539f\u6570\u7ec4\u4e2d\n    for (k = 0; k < length; k++)\n        sr[s + k] = tr[k];\n}\n\n//sr[s, t]\u539f\u6570\u7ec4\nvoid msort(int sr[], int s, int t){\n\n    if (s >= t)\n        return;\n\n    //\u521b\u5efa\u5e73\u5206\u4e2d\u70b9\n    int m = s + (t - s) / 2;\n\n    msort(sr, s, m);\n    msort(sr, m+1, t);\n\n    //\u4f18\u5316\uff0c\u56e0\u4e3a\u5de6\u53f3\u4e24\u4fa7\u90fd\u662f\u6392\u5e8f\u597d\u7684\u6570\u7ec4\uff0c\u53ea\u6709\u5f53\u5de6\u4fa7\u6700\u5927\u5927\u4e8e\u53f3\u4fa7\u6700\u5c0f\u65f6\u624d\u5408\u5e76\uff0c\u56e0\u4e3a\u5408\u5e76\u610f\u5473\u7740\u6bd4\u8f83\uff0c\u4f1a\u6d6a\u8d39\u65f6\u95f4\n    if (sr[m] > sr[m+1])\n        merge(sr, s, m, t);\n\n}\n\nint main(){\n\n    int sr[10] = { 2, 1, 3, 78, 87, 53, 13, 20, 0, 10};\n    \n    msort(sr, 0, 9);\n\n    //std::cout << num << endl;\n\n    for (int i = 0; i < 10; i++){\n        std::cout << sr[i] << endl;\n    }\n    std::system("pause");\n    return 0;\n}\n')),(0,r.kt)("h4",{id:"\u5feb\u901f\u6392\u5e8f\uff08\u968f\u673a\u5355\u6392\uff0c\u53cc\u6392\uff09"},"\u5feb\u901f\u6392\u5e8f\uff08\u968f\u673a\u5355\u6392\uff0c\u53cc\u6392\uff09"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'//\u5feb\u901f\u6392\u5e8f\u601d\u60f3\uff1a\n//\u9009\u51fa\u4e00\u4e2a\u54e8\u5175\uff0c\u901a\u8fc7\u4e00\u8d9f\u6392\u5e8f\u5c06\u5f85\u6392\u5e8f\u5217\u5206\u5272\u6210\u4e24\u90e8\u5206\n//\u5176\u4e2d\u4e00\u90e8\u5206\u5c0f\u4e8e\u54e8\u5175\u503c\uff0c\u53e6\u5916\u4e00\u90e8\u5206\u5927\u4e8e\u54e8\u5175\u503c\n//\u7136\u540e\u518d\u5bf9\u4e24\u90e8\u5206\u5206\u522b\u8fdb\u884c\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u76f4\u5230\u6392\u5e8f\u5b8c\u6210\n\n\n//\u89e3\u91ca\u65f6\u95f4\u590d\u6742\u5ea6\u4e3anlogn\n//\u5206\u6cbb\u7b97\u6cd5\uff0c\u6bcf\u6b21\u9009\u51fa\u54e8\u5175\uff0c\u5c06\u5f85\u6392\u5e8f\u5217\u5206\u6210\u4e24\u90e8\u5206\uff0c\u4e00\u76f4\u5206\u4e0b\u53bb\uff0c\u76f4\u5230\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u5e73\u5747\u5206\u5f00\uff0c\u76f8\u5f53\u4e8en\u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\uff0c\u5171\u6709logn\u5c42\uff0c\u9012\u5f52\u6df1\u5ea6\u4e3alogn\n//\u6bcf\u4e00\u5c42\u90fd\u9700\u8981\u5bf9\u5f53\u524d\u5206\u7ec4\u7684\u5143\u7d20\u6392\u5e8f\uff0c\u95ee\u9898\u89c4\u6a21\u5927\u6982\u4e3an\uff0c\u7b2c\u4e00\u5c42\u904d\u5386n\u4e2a\u5143\u7d20\uff0c\u7b2c\u4e8c\u5c42\u904d\u5386n-1\u4e2a...\u76f4\u5230\u6700\u540e\u4e00\u5c42\u4e3a\u4e00\u4e2a\n//nlogn\n\n//\u89e3\u91ca\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)~O(n)\n//\u4e3b\u8981\u662f\u9012\u5f52\u9020\u6210\u7684\u6808\u7a7a\u95f4\u7684\u4f7f\u7528\n//\u6700\u597d\u60c5\u51b5\u9012\u5f52\u6811\u6df1\u5ea6\u4e3alogn\uff0c\u6700\u574f\u60c5\u51b5\u4e3an\n\n//\u5feb\u6392\u7684\u6700\u5dee\u60c5\u51b5\u4ec0\u4e48\u65f6\u5019\u53d1\u751f\uff1f\n//1. \u5df2\u6392\u5e8f\n//2. \u6570\u503c\u5168\u90e8\u76f8\u7b49\uff081\u7684\u7279\u6b8a\u60c5\u51b5\uff09\n//\u5728\u4e0a\u9762\u7684\u60c5\u51b5\u4e0b\u9009\u62e9\u7684\u6807\u5b9a\u5143\u7d20\u4e00\u76f4\u4e3a\u7b2c\u4e00\u4e2a\uff0c\u5219\u65f6\u95f4\u590d\u6742\u5ea6\u53d8\u4e3aO(n^2)\n\n//\u5feb\u901f\u6392\u5e8f\uff0c\u5e73\u5747\u60c5\u51b5O(nlogn),\u6700\u597dO(nlogn)\uff0c\u6700\u574fO(n^2)\uff08\u9009\u62e9\u6807\u5b9a\u5143\u7d20\u6709\u5173\uff09\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)~O(n)\uff0c\u4e0d\u7a33\u5b9a\n\n/**************************************************************************\n**  \u8981\u53d6\u5f97[a,b)\u7684\u968f\u673a\u6574\u6570\uff0c\u4f7f\u7528(rand() % (b-a))+ a;\n**  \u8981\u53d6\u5f97[a,b]\u7684\u968f\u673a\u6574\u6570\uff0c\u4f7f\u7528(rand() % (b-a+1))+ a;\n**  \u8981\u53d6\u5f97(a,b]\u7684\u968f\u673a\u6574\u6570\uff0c\u4f7f\u7528(rand() % (b-a))+ a + 1;\n**  \u901a\u7528\u516c\u5f0f:a + rand() % n\uff1b\u5176\u4e2d\u7684a\u662f\u8d77\u59cb\u503c\uff0cn\u662f\u6574\u6570\u7684\u8303\u56f4\u3002\n**  \u8981\u53d6\u5f97a\u5230b\u4e4b\u95f4\u7684\u968f\u673a\u6574\u6570\uff0c\u53e6\u4e00\u79cd\u8868\u793a\uff1aa + (int)b * rand() / (RAND_MAX + 1)\u3002\n**  \u8981\u53d6\u5f970\uff5e1\u4e4b\u95f4\u7684\u6d6e\u70b9\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528rand() / double(RAND_MAX)\u3002\n*************************************************************************/\n\n\n#include <iostream>\nusing namespace std;\n\n//\u53cc\u8def\u5feb\u6392\uff0c\u5c3d\u91cf\u5199\u8fd9\u79cd\n//begin,begin+1...i...j...end\nint partition2(int *data, int start, int end){\n    //\u4ea7\u751fstart\u548cend\u4e4b\u95f4\u7684\u968f\u673a\u6570\n    int index = (rand() % (end - start + 1)) + start;\n\n    //\u5c06\u9009\u4e2d\u7684\u6570\u5b57\u4ea4\u6362\u5230start\u4f4d\u7f6e\n    swap(data[index], data[start]);\n\n    int pivot = data[start];\n\n    //\u9009\u62e9\u7684pivot\u4e3astart\u4f4d\u7f6e\n    //data[start+1, i) <= pivot   i-1 \u4e3a\u5c0f\u4e8ev\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0ci\u4e3a\u5f53\u524d\u5de6\u8fb9\u8bbf\u95ee\u7684\u5143\u7d20\n    //data(j, end] >= pivot  j+1 \u4e3a\u5927\u4e8ev\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0cj\u4e3a\u5f53\u524d\u53f3\u8fb9\u8bbf\u95ee\u7684\u5143\u7d20\n    int i = start + 1, j = end;\n    while (true){\n        while (i <= end && data[i] <= pivot)\n            i++;\n        while (j >= start + 1 && data[j] >= pivot)\n            j--;\n        if (i > j)\n            break;\n        swap(data[i], data[j]);\n\n        //\u4e0b\u9762\u8fd9\u4e24\u884c\uff0cswap\u4ea4\u6362\u4e4b\u540e\uff0c\u53cc\u65b9\u9700\u8981\u79fb\u52a8\uff0c\u5426\u5219\u4f1a\u589e\u52a0\u4e00\u6b21\u65e0\u7528\u7684\u6bd4\u8f83\n        i++;\n        j--;\n    }\n    //\u6700\u540ej\u505c\u6b62\u5728<= v\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c i\u505c\u6b62\u5728>=pivot\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0cpivot\u4e0ej\u8fdb\u884c\u4ea4\u6362\n    swap(data[start], data[j]);\n    return j;\n}\n\nvoid swapOffer(int &a, int &b){\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\n//\u5355\u8def\u968f\u673a\u5feb\u6392\n//begin,begin+1...small,small+1...end\nint partition(int *data, int start, int end){\n    //\u4ea7\u751fstart\u548cend\u4e4b\u95f4\u7684\u968f\u673a\u6570\n    int index = (rand() % (end - start + 1)) + start;\n    \n    //\u5c06\u9009\u4e2d\u7684\u6570\u5b57\u4ea4\u6362\u5230start\u4f4d\u7f6e\n    swap(data[index], data[start]);\n\n    //\u9009\u62e9\u7684pivot\u4e3astart\u4f4d\u7f6e\n    int pivot = data[start];\n    \n    //\u6211\u4eec\u8981\u8fbe\u5230\u8fd9\u6837\u7684\u6548\u679c\n    //data[start+1, small] < v   small\u4e3a\u5c0f\u4e8epivot\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n    //data[small+1, i - 1] >= v   small+1\u4e3a\u5927\u4e8e\u7b49\u4e8epivot\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n    \n    //\u6ce8\u610fsmall\u7684\u53d6\u503c,small\u662f\u4e3a\u4e86\u6807\u8bc6\u5c0f\u4e8e\n    int small = start;\n    for (int i = start + 1; i <= end; ++i){\n        if (data[i] < pivot){\n            //\u82e5\u5f53\u524d\u7684\u5143\u7d20\u5c0f\u4e8epivot\uff0c\u9700\u8981\u5c06\u8be5\u5143\u7d20\u653e\u5230data[start+1, small]\u4e2d\u7d27\u6328\u7740small\u4f4d\u7f6e\n            //\u5c06small+1\u548ci\u8fdb\u884c\u4ea4\u6362\uff0c\u5e76\u5c06small\u7684\u957f\u5ea6\u52a0\u957f\n            swap(data[small + 1], data[i]);\n            ++small;\n        }\n    }\n    //\u6700\u540e\u5c06start\u653e\u5728\u5e94\u8be5\u7684\u4f4d\u7f6e\uff0c\u5373small\u548csmall+1\u4e4b\u95f4\uff0c\u56e0\u4e3a\u5de6\u4fa7\u5168\u662f\u5c0f\u4e8epivot\u7684\uff0c\u56e0\u6b64\u5c06small\u548cpivot\u4ea4\u6362\n    swap(data[small], data[start]);\n    return small;\n}\n\nvoid quickSortOffer(int *data,int start, int end){\n    if (start == end)\n        return;\n    if (start < end){\n        int index = partition2(data,  start, end);\n        quickSortOffer(data,  start, index - 1);\n        quickSortOffer(data, index + 1, end);\n    }\n}\n\nint main(){\n    int arr[8] = { 2, 1, 3, 78, 78,53, 13, 20 };\n    quickSortOffer(arr, 0, 7);  //0\u8868\u793a\u4ece\u6570\u7ec40\u4f4d\u7f6e\u5f00\u59cb\uff0c\u52304\u4f4d\u7f6e\u6392\u5e8f \n    int i;\n    for (i = 0; i<8; ++i){\n        printf("%d ", arr[i]);\n    }\n    system("pause");\n    return 0;\n}\n')),(0,r.kt)("h4",{id:"\u5355\u4f8b\u6a21\u5f0f"},"\u5355\u4f8b\u6a21\u5f0f"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'//\u5355\u4f8b\u601d\u8def\uff1a\u9759\u6001\u6210\u5458\u5efa\u8bae\u5728\u7c7b\u5916\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u4f46\u5728\u7c7b\u5185\u4e5f\u53ef\u4ee5\u521d\u59cb\u5316\uff0c\u53ea\u662f\u901a\u8fc7\u7c7b\u540d\u8bbf\u95ee\u9759\u6001\u6210\u5458\u7684\u5c5e\u6027\u65f6\uff0c\u8bbf\u95ee\u4e0d\u5230\n//\u6784\u9020\u51fd\u6570\u58f0\u660e\u4e3aprivate\u6216protect\u9632\u6b62\u88ab\u5916\u90e8\u51fd\u6570\u5b9e\u4f8b\u5316\n//\u5185\u90e8\u4fdd\u5b58\u4e00\u4e2aprivate static\u7684\u7c7b\u6307\u9488\u4fdd\u5b58\u552f\u4e00\u7684\u5b9e\u4f8b\n//\u5b9e\u4f8b\u7684\u52a8\u4f5c\u7531\u4e00\u4e2apublic\u7684\u7c7b\u65b9\u6cd5\u4ee3\u52b3\n\n//\u61d2\u6c49\u6a21\u5f0f\uff1a\u5728getinstance\u4e2d\u5b9e\u4f8b\u5316\n//\u997f\u6c49\u6a21\u5f0f\uff1a\u5728\u5355\u4f8b\u7c7b\u5b9a\u4e49\u65f6\u5b9e\u4f8b\u5316\n\n//**********************\n//\u61d2\u6c49\u6a21\u5f0f\u6700\u521d\u5b9e\u73b0\n//**********************\n//#include <iostream>\n//\n//using namespace std;\n//\n//class single{\n//private:\n//  static single *p;\n//  single(){}\n//  ~single(){}\n//\n//public:\n//  static single* getinstance();\n//};\n//\n//single* single::p = NULL;\n//single* single::getinstance(){\n//  if (NULL == p)\n//      p = new single;\n//\n//  return p;\n//}\n\n\n//**********************\n//\u61d2\u6c49\u6a21\u5f0f\u7ebf\u7a0b\u5b89\u5168\u7ecf\u5178\u5b9e\u73b0\n//**********************\n//#include <iostream>\n//#include <unistd.h>\n//#include <pthread.h>\n//\n//using namespace std;\n//\n//\n//class single{\n//private:\n//  static single *p;\n//  static pthread_mutex_t lock;\n//  single(){\n//      pthread_mutex_init(&lock, NULL);\n//  }\n//  ~single(){}\n//\n//public:\n//  static single* getinstance();\n//\n//};\n//pthread_mutex_t single::lock;\n//single* single::p = NULL;\n//single* single::getinstance(){\n//  if (NULL == p){\n//      pthread_mutex_lock(&lock);\n//      if (NULL == p)\n//          p = new single;\n//  }\n//  pthread_mutex_unlock(&lock);\n//  return p;\n//}\n\n//**************************************************\n//\u61d2\u6c49\u6a21\u5f0f\u7ebf\u7a0b\u5b89\u5168\u5185\u90e8\u9759\u6001\u53d8\u91cf\u5b9e\u73b0\n//\u5c06\u7ecf\u5178\u5b9e\u73b0\u4e2d\u7684\u79c1\u6709\u552f\u4e00\u5b9e\u4f8b\u5220\u6389\n//\u6539\u4e3a\u5728instance\u51fd\u6570\u91cc\u5b9a\u4e49\u4e00\u4e2a\u9759\u6001\u7684\u5b9e\u4f8b\n//\u4e5f\u53ef\u4ee5\u4fdd\u8bc1\u62e5\u6709\u552f\u4e00\u5b9e\u4f8b\uff0c\u5728\u8fd4\u56de\u65f6\u53ea\u9700\u8981\u8fd4\u56de\u5176\u6307\u9488\u5c31\u53ef\u4ee5\n//**************************************************\n//#include <iostream>\n//#include <unistd.h>\n//#include <pthread.h>\n//\n//using namespace std;\n//\n//\n//class single{\n//private:\n//  static pthread_mutex_t lock;\n//  single(){\n//      pthread_mutex_init(&lock, NULL);\n//  }\n//  ~single(){}\n//\n//public:\n//  static single* getinstance();\n//\n//};\n//pthread_mutex_t single::lock;\n//single* single::getinstance(){\n//  pthread_mutex_lock(&lock);\n//  static single obj;\n//  pthread_mutex_unlock(&lock);\n//  return &obj;\n//}\n\n//************************************************************\n//\u997f\u6c49\u6a21\u5f0f\uff0c\u5728\u5b9a\u4e49\u5355\u4f8b\u7c7b\u6700\u521d\u5c31\u5b9e\u4f8b\u5316\uff0c\u6b64\u540e\u8fd4\u56de\u7684\u5c31\u4e00\u4e2a\uff0c\u611f\u89c9\u76f8\u5f53\u4e8e\u5168\u5c40\u53d8\u91cf\n//\u5728\u997f\u6c49\u6a21\u5f0f\u4e0b\uff0c\u5728\u5355\u4f8b\u7c7b\u5b9a\u4e49\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5bf9\u7c7b\u8fdb\u884c\u4e86\u521d\u59cb\u5316\u3002\n//\u540e\u9762\u4e0d\u7ba1\u54ea\u4e2a\u7ebf\u7a0b\u8c03\u7528\u6210\u5458\u51fd\u6570getinstance()\uff0c\u90fd\u53ea\u4e0d\u8fc7\u662f\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u7684\u6307\u9488\u800c\u5df2\u3002\n//\u6240\u4ee5\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u4e0d\u9700\u8981\u5728\u6210\u5458\u51fd\u6570getinstance\u4e2d\u52a0\u9501\u3002\n//************************************************************\n#include <iostream>\n\nusing namespace std;\n\nclass single{\nprivate:\n    static single* p;\n    single(){}\n    ~single(){}\n\npublic:\n    static single* getinstance();\n\n};\nsingle* single::p = new single();\nsingle* single::getinstance(){\n    return p;\n}\n\nint main(){\n\n    single *p1 = single::getinstance();\n    single *p2 = single::getinstance();\n\n    if (p1 == p2)\n        cout << "same" << endl;\n\n    system("pause");\n    return 0;\n}\n')),(0,r.kt)("h4",{id:"\u975e\u9012\u5f52\u4e8c\u53c9\u6811\u904d\u5386"},"\u975e\u9012\u5f52\u4e8c\u53c9\u6811\u904d\u5386"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"//\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\uff0c\u4e2d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u662f\u6839\u636e\u6839\u7ed3\u70b9\u7684\u4f4d\u7f6e\u6765\u5224\u65ad\n//\u524d\u5e8f\uff1a\u6839\u5de6\u53f3\n//\u4e2d\u5e8f\uff1a\u5de6\u6839\u53f3\n//\u540e\u5e8f\uff1a\u5de6\u53f3\u6839\n//\u53f6\u5b50\u7ed3\u70b9\u4e5f\u9700\u8981\u5224\u65ad\u5de6\u53f3\u8282\u70b9\uff0c\u53ea\u4e0d\u8fc7\u5de6\u53f3\u8282\u70b9\u90fd\u662f\u7a7a\n\n\n//\u975e\u9012\u5f52\u524d\u5e8f\u904d\u5386\uff0c\u6839\u5de6\u53f3\n//(1) \u4ece\u6839\u7ed3\u70b9\u5f00\u59cb\uff0c\u5411\u5de6\u904d\u5386\u538b\u6808\u5e76\u8f93\u51fa\n//(2) \u4e00\u76f4\u627e\u5230\u4e8c\u53c9\u6811\u6700\u5de6\u8fb9\u7684\u7ed3\u70b9\uff0c\u5c06\u6700\u5de6\u4fa7\u7684\u53f6\u5b50\u7ed3\u70b9\u538b\u5165\u6808\n//(3) \u51fa\u6808\uff0c\u6307\u5411\u8be5\u7ed3\u70b9\u7684\u53f3\u5b69\u5b50\n//(4) \u5c06\u53f3\u5b69\u5b50\u4f5c\u4e3a\u6839\u8282\u70b9\u91cd\u590d(1)(2)(3)\nvoid Pretravel(BiNode* root)\n{\n    if (!root)\n    {\n        return;\n    }\n\n    stack<BiNode*> st;\n    BiNode* p = root;\n\n    while (p || !st.empty())\n    {\n        while (p){\n            cout << p->data;\n            st.push(p);\n            p = p->lchild;\n        }\n        \n\n        if (!st.empty())\n        {\n            p = st.top();\n            st.pop();\n            p = p->rchild;\n        }\n    }\n}\n\n//\u975e\u9012\u5f52\u4e2d\u5e8f\u904d\u5386\uff0c\u5de6\u6839\u53f3\n//\u5148\u8f93\u51fa\u6700\u5de6\u4fa7\u53f6\u5b50\u7ed3\u70b9\n//(1) \u4ece\u6839\u7ed3\u70b9\u5f00\u59cb\uff0c\u5f80\u5de6\u904d\u5386\u538b\u6808\n//(2) \u627e\u5230\u6700\u5de6\u4fa7\u7684\u53f6\u5b50\u7ed3\u70b9,\u4e5f\u5c06\u5176\u538b\u6808\n//(3) \u51fa\u6808\uff0c\u8f93\u51fa\u7ed3\u70b9\u503c\uff0c\u5e76\u6307\u5411\u8be5\u7ed3\u70b9\u7684\u53f3\u5b69\u5b50\n//(4) \u5c06\u53f3\u5b69\u5b50\u4f5c\u4e3a\u6839\u7ed3\u70b9\u7ee7\u7eed(1)(2)(3)\nvoid Intravel(BiNode* root){\n    if (root == NULL)\n        return;\n    stack<BiNode*>st;\n    BiNode *p = root;\n\n    while (!st.empty() || p){\n        while (p){\n            st.push(p);\n            p = p->lchild;\n        }\n\n        if (!st.empty()){\n            p = st.top();\n            st.pop();\n            cout << p->data;\n            p = p->rchild;\n        }\n    }\n}\n\n//\u975e\u9012\u5f52\u540e\u5e8f\u904d\u5386\uff0c\u5de6\u53f3\u6839\n// \u7ef4\u62a4\u4e00\u4e2apre\u7ed3\u70b9\n//(1) \u4ece\u6839\u7ed3\u70b9\u5f00\u59cb\uff0c\u5f80\u5de6\u904d\u5386\u538b\u6808\n//(2) \u627e\u5230\u6700\u5de6\u4fa7\u7684\u53f6\u5b50\u7ed3\u70b9,\u4e5f\u5c06\u5176\u538b\u6808\n//(3) \u51fa\u6808\uff0c\u5224\u65ad\u5f53\u524d\u7684\u7ed3\u70b9\u662f\u4e0d\u662f\u53f6\u5b50\u7ed3\u70b9\u6216\u662f\u4e0d\u662f\u6839\u7ed3\u70b9(\u4e0a\u4e00\u6b21\u8bbf\u95ee\u7684\u662f\u53f3\u5b69\u5b50)\n//(4) \u82e5\u662f\uff0c\u8f93\u51fa\u7ed3\u70b9\u503c\uff0c\u66f4\u65b0pre\u6307\u9488\n//(5) \u82e5\u4e0d\u662f\uff0c\u6307\u5411\u53f3\u5b69\u5b50\uff0c\u91cd\u590d(1)(2)(3)(4)\nvoid behtravel(BiNode* root){\n    if (NULL == root)\n        return;\n    stack<BiNode *> st;\n    BiNode * p = root;\n    BiNode * pre = NULL;\n    while (!st.empty || p){\n        while (p){\n            st.push(p);\n            p = p->lchild;\n        }\n        if (!st.empty()){\n            p = st.top();\n            st.pop();\n\n            //\u53f3\u5b69\u5b50\u4e3a\u7a7a(\u5de6\u53f6\u5b50\u7ed3\u70b9\u548c\u53f3\u53f6\u5b50\u7ed3\u70b9) \u6216 \u521a\u521a\u8bbf\u95ee\u7684\u662f\u8be5\u7ed3\u70b9\u7684\u53f3\u5b69\u5b50(\u6839\u7ed3\u70b9)\n            if (!p->rchild || pre == p->rchild){\n                cout << p->data;\n                pre = p;\n // \u6b64\u5904\u4e3a\u4e86\u8df3\u8fc7\u4e0b\u4e00\u6b21\u5faa\u73af\u7684\u8bbf\u95ee\u5de6\u5b50\u8282\u70b9\u7684\u8fc7\u7a0b\uff0c\u76f4\u63a5\u8fdb\u5165\u6808\u7684\u5f39\u51fa\u9636\u6bb5\uff0c\u56e0\u4e3a\u4f46\u51e1\u5728\u6808\u4e2d\u7684\u8282\u70b9\uff0c\u5b83\u4eec\u7684\u5de6\u5b50\u8282\u70b9\u90fd\u80af\u5b9a\u88ab\u7ecf\u8fc7\u4e14\u5df2\u653e\u5165\u6808\u4e2d\u3002\n                }\n            }\n            //\u53f3\u5b69\u5b50\u4e0d\u4e3a\u7a7a\uff0c\u5219\u5c06\u521a\u521a\u51fa\u6808\u7684\u7ed3\u70b9\u91cd\u65b0\u538b\u5165\uff0c\u6307\u5411\u7ed3\u70b9\u7684\u53f3\u5b69\u5b50\n            else{\n                st.push(p);\n                p = p->rchild;\n            }\n        }\n    }\n}\n")),(0,r.kt)("h4",{id:"\u667a\u80fd\u6307\u9488\u7684\u8bbe\u8ba1\u4e0e\u5b9e\u73b0"},"\u667a\u80fd\u6307\u9488\u7684\u8bbe\u8ba1\u4e0e\u5b9e\u73b0"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'//\u667a\u80fd\u6307\u9488\u7684\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\n//\u667a\u80fd\u6307\u9488\u7c7b\u5c06\u4e00\u4e2a\u8ba1\u6570\u5668\u4e0e\u7c7b\u6307\u5411\u7684\u5bf9\u8c61\u76f8\u5173\u8054\uff0c\u5f15\u7528\u8ba1\u6570\u8ddf\u8e2a\u8be5\u7c7b\u6709\u591a\u5c11\u4e2a\u5bf9\u8c61\u5171\u4eab\u540c\u4e00\u6307\u9488\u3002\n//\u6bcf\u6b21\u521b\u5efa\u7c7b\u7684\u65b0\u5bf9\u8c61\u65f6\uff0c\u521d\u59cb\u5316\u6307\u9488\u5e76\u5c06\u5f15\u7528\u8ba1\u6570\u7f6e\u4e3a1\uff1b\n//\u5f53\u5bf9\u8c61\u4f5c\u4e3a\u53e6\u4e00\u5bf9\u8c61\u7684\u526f\u672c\u800c\u521b\u5efa\u65f6\uff0c\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u62f7\u8d1d\u6307\u9488\u5e76\u589e\u52a0\u4e0e\u4e4b\u76f8\u5e94\u7684\u5f15\u7528\u8ba1\u6570\uff1b\n//\u5bf9\u4e00\u4e2a\u5bf9\u8c61\u8fdb\u884c\u8d4b\u503c\u65f6\uff0c\u8d4b\u503c\u64cd\u4f5c\u7b26\u51cf\u5c11\u5de6\u64cd\u4f5c\u6570\u6240\u6307\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\uff08\u5982\u679c\u5f15\u7528\u8ba1\u6570\u4e3a\u51cf\u81f30\uff0c\u5219\u5220\u9664\u5bf9\u8c61\uff09\uff0c\u5e76\u589e\u52a0\u53f3\u64cd\u4f5c\u6570\u6240\u6307\u5bf9\u8c61\u7684\u5f15\u7528\u8ba1\u6570\uff1b\n//\u8c03\u7528\u6790\u6784\u51fd\u6570\u65f6\uff0c\u6784\u9020\u51fd\u6570\u51cf\u5c11\u5f15\u7528\u8ba1\u6570\uff08\u5982\u679c\u5f15\u7528\u8ba1\u6570\u51cf\u81f30\uff0c\u5219\u5220\u9664\u57fa\u7840\u5bf9\u8c61\uff09\u3002\n//\u6240\u6709\u7684\u667a\u80fd\u6307\u9488\u90fd\u4f1a\u91cd\u8f7d -> \u548c * \u64cd\u4f5c\u7b26\u3002\u667a\u80fd\u6307\u9488\u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\u529f\u80fd\uff0c\u6bd4\u8f83\u6709\u7528\u7684\u662f\u81ea\u52a8\u9500\u6bc1\u3002\n\n#include <iostream>\n#include <memory>\n\ntemplate<typename T>\nclass SmartPointer {\nprivate:\n    T* _ptr;\n    //\u5728\u8d4b\u503c\u65f6\uff0c\u9700\u8981\u4fee\u6539\u8d4b\u503c\u540e\u6307\u9488\u7684\u5f15\u7528\u8ba1\u6570\n    size_t* _count;\npublic:\n    //\u521d\u59cb\u5316\n    SmartPointer(T* ptr = NULL) :\n        _ptr(ptr) {\n        if (_ptr) {\n            _count = new size_t(1);\n        }\n        else {\n            _count = new size_t(0);\n        }\n    }\n\n    //\u62f7\u8d1d\u6784\u9020\n    SmartPointer(const SmartPointer& ptr) {\n        if (this != &ptr) {\n            this->_ptr = ptr._ptr;\n            this->_count = ptr._count;\n            (*this->_count)++;\n        }\n    }\n\n    //\u91cd\u8f7d=\u8fd0\u7b97\u7b26\n    SmartPointer& operator=(const SmartPointer& ptr) {\n        if (this->_ptr == ptr._ptr) {\n            return *this;\n        }\n\n        if (this->_ptr) {\n            (*this->_count)--;\n            if (this->_count == 0) {\n                delete this->_ptr;\n                delete this->_count;\n            }\n        }\n\n        this->_ptr = ptr._ptr;\n        this->_count = ptr._count;\n        (*this->_count)++;\n        return *this;\n    }\n\n    //\u91cd\u8f7d*\n    T& operator*() {\n        assert(this->_ptr == nullptr);\n        return *(this->_ptr);\n\n    }\n\n    //\u91cd\u8f7d->\n    T* operator->() {\n        assert(this->_ptr == nullptr);\n        return this->_ptr;\n    }\n\n    ~SmartPointer() {\n        //\u56e0\u4e3a\u5f15\u7528\u8ba1\u6570\u662f\u6307\u9488\uff0c\u5f53\u667a\u80fd\u6307\u9488\u58f0\u660e\u4e3a\u7a7a\u65f6\uff0c\u4ecd\u9700\u91ca\u653e\n        if (*this->_count == 0) {\n            delete this->_ptr;\n            delete this->_count;\n            std::cout << "\u91ca\u653e" << std::endl;\n        }\n        else\n            (*this->_count)--;\n        if (*this->_count == 0) {\n            delete this->_ptr;\n            delete this->_count;\n            std::cout << "\u91ca\u653e" << std::endl;\n        }\n    }\n\n    size_t use_count(){\n        return *this->_count;\n    }\n};\n\nint main() {\n    {\n        //\u53ea\u521d\u59cb\u5316\u4e86\u4e24\u6b21\n        SmartPointer<int> sp(new int(10));\n        SmartPointer<int> sp2(sp);\n        SmartPointer<int> sp3(new int(20));\n        sp2 = sp3;\n        std::cout << sp.use_count() << std::endl;\n        std::cout << sp3.use_count() << std::endl;\n        \n        //SmartPointer<int> sp(NULL);\n        //std::cout << sp.use_count() << std::endl;\n    }\n    \n    system("pause");\n    return 0;\n}\n')))}c.isMDXComponent=!0}}]);