(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[6041],{3905:function(n,i,e){"use strict";e.d(i,{Zo:function(){return d},kt:function(){return p}});var t=e(67294);function r(n,i,e){return i in n?Object.defineProperty(n,i,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[i]=e,n}function a(n,i){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);i&&(t=t.filter((function(i){return Object.getOwnPropertyDescriptor(n,i).enumerable}))),e.push.apply(e,t)}return e}function u(n){for(var i=1;i<arguments.length;i++){var e=null!=arguments[i]?arguments[i]:{};i%2?a(Object(e),!0).forEach((function(i){r(n,i,e[i])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(i){Object.defineProperty(n,i,Object.getOwnPropertyDescriptor(e,i))}))}return n}function o(n,i){if(null==n)return{};var e,t,r=function(n,i){if(null==n)return{};var e,t,r={},a=Object.keys(n);for(t=0;t<a.length;t++)e=a[t],i.indexOf(e)>=0||(r[e]=n[e]);return r}(n,i);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(t=0;t<a.length;t++)e=a[t],i.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}return r}var c=t.createContext({}),l=function(n){var i=t.useContext(c),e=i;return n&&(e="function"==typeof n?n(i):u(u({},i),n)),e},d=function(n){var i=l(n.components);return t.createElement(c.Provider,{value:i},n.children)},s={inlineCode:"code",wrapper:function(n){var i=n.children;return t.createElement(t.Fragment,{},i)}},f=t.forwardRef((function(n,i){var e=n.components,r=n.mdxType,a=n.originalType,c=n.parentName,d=o(n,["components","mdxType","originalType","parentName"]),f=l(e),p=r,m=f["".concat(c,".").concat(p)]||f[p]||s[p]||a;return e?t.createElement(m,u(u({ref:i},d),{},{components:e})):t.createElement(m,u({ref:i},d))}));function p(n,i){var e=arguments,r=i&&i.mdxType;if("string"==typeof n||r){var a=e.length,u=new Array(a);u[0]=f;var o={};for(var c in i)hasOwnProperty.call(i,c)&&(o[c]=i[c]);o.originalType=n,o.mdxType="string"==typeof n?n:r,u[1]=o;for(var l=2;l<a;l++)u[l]=e[l];return t.createElement.apply(null,u)}return t.createElement.apply(null,e)}f.displayName="MDXCreateElement"},81099:function(n,i,e){"use strict";e.r(i),e.d(i,{frontMatter:function(){return o},metadata:function(){return c},toc:function(){return l},default:function(){return s}});var t=e(22122),r=e(19756),a=(e(67294),e(3905)),u=["components"],o={id:"A11.\u5e76\u67e5\u96c6",title:"A11.\u5e76\u67e5\u96c6","typora-root-url":"../"},c={unversionedId:"Algorithm/A11.\u5e76\u67e5\u96c6",id:"Algorithm/A11.\u5e76\u67e5\u96c6",isDocsHomePage:!1,title:"==\u5e76\u67e5\u96c6==",description:"\u6839\u8282\u70b9\uff1a\u5168\u96c6",source:"@site/docs/2.Algorithm/A11.\u5e76\u67e5\u96c6.md",sourceDirName:"2.Algorithm",slug:"/Algorithm/A11.\u5e76\u67e5\u96c6",permalink:"/Algorithm/A11.\u5e76\u67e5\u96c6",editUrl:"https://github.com/worst0/wiki_note/edit/main/docs/2.Algorithm/A11.\u5e76\u67e5\u96c6.md",version:"current",frontMatter:{id:"A11.\u5e76\u67e5\u96c6",title:"A11.\u5e76\u67e5\u96c6","typora-root-url":"../"},sidebar:"Document\ud83d\udcbb",previous:{title:"==\u4e8c\u53c9\u6392\u5e8f\u6811==",permalink:"/Algorithm/A11.\u5e73\u8861\u6811"},next:{title:"\u56fe",permalink:"/Algorithm/A12.\u56fe\u8bba"}},l=[{value:"quick-union",id:"quick-union",children:[]},{value:"8.0.5. HZOJ-72-\u731c\u62f3.cpp",id:"805-hzoj-72-\u731c\u62f3cpp",children:[]},{value:"8.0.6. HZOJ-73-\u6e56\u6cca.cpp",id:"806-hzoj-73-\u6e56\u6ccacpp",children:[]},{value:"8.0.7. \u7a0b\u5e8f\u81ea\u52a8\u5206\u6790",id:"807-\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790",children:[]},{value:"8.0.8. Supermarket",id:"808-supermarket",children:[]},{value:"8.0.9. \u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4",id:"809-\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4",children:[]},{value:"8.0.10. HZOJ-325-\u4ee3\u7801\u6f14\u793a",id:"8010-hzoj-325-\u4ee3\u7801\u6f14\u793a",children:[]},{value:"8.0.11. HZOJ-326-\u98df\u7269\u94fe",id:"8011-hzoj-326-\u98df\u7269\u94fe",children:[]},{value:"8.0.12. HZOJ-327-\u5173\u62bc\u7f6a\u72af.cpp",id:"8012-hzoj-327-\u5173\u62bc\u7f6a\u72afcpp",children:[]},{value:"8.0.13. 128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217",id:"8013-128-\u6700\u957f\u8fde\u7eed\u5e8f\u5217",children:[]},{value:"8.0.14. 130. \u88ab\u56f4\u7ed5\u7684\u533a\u57df",id:"8014-130-\u88ab\u56f4\u7ed5\u7684\u533a\u57df",children:[]},{value:"9.",id:"9",children:[]},{value:"9.0.15. Leetcode-200\u5c9b\u5c7f\u6570\u91cf",id:"9015-leetcode-200\u5c9b\u5c7f\u6570\u91cf",children:[]},{value:"9.0.16. LC-547",id:"9016-lc-547",children:[]},{value:"9.0.17. Leetcode-684",id:"9017-leetcode-684",children:[]},{value:"9.0.18. 685. \u5197\u4f59\u8fde\u63a5 II",id:"9018-685-\u5197\u4f59\u8fde\u63a5-ii",children:[]},{value:"9.0.19. \u9664\u6cd5\u6c42\u503c",id:"9019-\u9664\u6cd5\u6c42\u503c",children:[]}],d={toc:l};function s(n){var i=n.components,o=(0,r.Z)(n,u);return(0,a.kt)("wrapper",(0,t.Z)({},d,o,{components:i,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"\u6839\u8282\u70b9\uff1a\u5168\u96c6"),(0,a.kt)("p",null,"\u5b50\u8282\u70b9\uff1a\u5b50\u96c6"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"image-20201018110356663",src:e(34209).Z})),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"image-20201018110407696",src:e(78025).Z})),(0,a.kt)("p",null,"\u8f85\u4ee5\u8def\u5f84\u538b\u7f29\u540e\uff0c\u6811\u7ed3\u6784\u4f1a\u9ad8\u5ea6\u6241\u5e73\u5316\u3002"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"image-20201018110431340",src:e(65554).Z})),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"image-20201018110438419",src:e(59076).Z})),(0,a.kt)("p",null,"\u79bb\u6563\u5316--\u91cd\u6620\u5c04(map)"),(0,a.kt)("p",null,"\u6839\u8282\u70b9\u6709\u7279\u6b8a\u610f\u4e49\u7684\u5e76\u67e5\u96c6\uff0c\u5e26\u6743\u5e76\u67e5\u96c6"),(0,a.kt)("p",null,"\u7528\u5e76\u67e5\u96c6\u53bb\u7ef4\u62a4\u7f16\u53f7\uff0c\u4e00\u4e2a\u653e\u5728\u53e6\u4e00\u4e2a\u5efa\u7acb\u5173\u7cfb",(0,a.kt)("a",{parentName:"p",href:"http://oj.haizeix.com/problem/324"},"http://oj.haizeix.com/problem/324")),(0,a.kt)("p",null,"\u7528\u5e76\u67e5\u96c6\u53bb\u7ef4\u62a4\u6700\u8fd1\u7684\u4e00\u4e2a\u7a7a\u4f4d\u7f6e\uff0c",(0,a.kt)("a",{parentName:"p",href:"http://oj.haizeix.com/problem/323"},"http://oj.haizeix.com/problem/323")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'/*************************************************************************\n    > File Name: 16.UnionSet.cpp\n    > Author:\n    > Mail:\n    > Created Time: \u516d  2/22 20:18:45 2020\n ************************************************************************/\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct UnionSet {\n    int *color;\n    int n;\n} UnionSet;\n\nUnionSet *init(int n) {\n    UnionSet *u = (UnionSet *)malloc(sizeof(UnionSet));\n    u->color = (int *)malloc(sizeof(int) * (n + 1));\n    u->n = n;\n    for (int i = 1; i <= n; i++) {\n        u->color[i] = i;\n    }\n    return u;\n}\n\nint find(UnionSet *u, int x) {\n    return u->color[x];\n}\n\nint merge(UnionSet *u, int a, int b) {\n    if (find(u, a) == find(u, b)) return 0;\n    int color_a = u->color[a];\n    for (int i = 1; i <= u->n; i++) {\n        if (u->color[i] - color_a) continue;\n        u->color[i] = u->color[b];\n    }\n    return 1;\n}\n\nvoid clear(UnionSet *u) {\n    if (u == NULL) return ;\n    free(u->color);\n    free(u);\n    return ;\n}\n\nint main() {\n    int n, m;\n    scanf("%d%d", &n, &m);\n    UnionSet *u = init(n);\n    for (int i = 0; i < m; i++) {\n        int a, b, c;\n        scanf("%d%d%d", &a, &b, &c);\n        switch (a) {\n            case 1: merge(u, b, c); break;\n            case 2: printf("%s\\n", find(u, b) == find(u, c) ? "Yes" : "No"); break;\n        }\n    }\n    clear(u);\n    return 0;\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'/*************************************************************************\n    > File Name: 16.UnionSet.cpp\n    > Author:\n    > Mail:\n    > Created Time: \u516d  2/22 20:18:45 2020\n ************************************************************************/\n#include <stdio.h>\n#include <stdlib.h>\n\n#define swap(a, b) {\\\n    __typeof(a) __temp = a;\\\n    a = b; b = __temp;\\\n}\n\ntypedef struct UnionSet {\n    int *father, *size;\n    int n;\n} UnionSet;\n\nUnionSet *init(int n) {\n    UnionSet *u = (UnionSet *)malloc(sizeof(UnionSet));\n    u->father = (int *)malloc(sizeof(int) * (n + 1));\n    u->size = (int *)malloc(sizeof(int) * (n + 1));\n    u->n = n;\n    for (int i = 1; i <= n; i++) {\n        u->father[i] = i;\n        u->size[i] = 1;\n    }\n    return u;\n}\n\nint find(UnionSet *u, int x) {\n    return u->father[x] = (u->father[x] == x ? x : find(u, u->father[x]));\n}\n\nint merge(UnionSet *u, int a, int b) {\n    int fa = find(u, a), fb = find(u, b);\n    if (fa == fb) return 0;\n    //if (u->size[fa] < u->size[fb]) swap(fa, fb);\n    u->father[fb] = fa;\n    //u->size[fa] += u->size[fb];\n    return 1;\n}\n\nvoid clear(UnionSet *u) {\n    if (u == NULL) return ;\n    free(u->father);\n    free(u->size);\n    free(u);\n    return ;\n}\n\nint main() {\n    int n, m;\n    scanf("%d%d", &n, &m);\n    UnionSet *u = init(n);\n    for (int i = 0; i < m; i++) {\n        int a, b, c;\n        scanf("%d%d%d", &a, &b, &c);\n        switch (a) {\n            case 1: merge(u, b, c); break;\n            case 2: printf("%s\\n", find(u, b) == find(u, c) ? "Yes" : "No"); break;\n        }\n    }\n    clear(u);\n    return 0;\n}\n')),(0,a.kt)("h3",{id:"quick-union"},"quick-union"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <stdio.h>\n#include <stdlib.h>\n\n#define swap(a, b) {\\\n    __typeof(a) __temp = a;\\\n    a = b; b = __temp;\\\n}\n\ntypedef struct UnionSet {\n    int *father, *size;\n    int n;\n} UnionSet;\n\nUnionSet *init(int n) {\n    UnionSet *u = (UnionSet *)malloc(sizeof(UnionSet));\n    u->father = (int *)malloc(sizeof(int) * (n + 1));\n    u->size = (int *)malloc(sizeof(int) * (n + 1));\n    u->n = n;\n    for (int i = 1; i <= n; i++) {\n        u->father[i] = i;\n        u->size[i] = 1;\n    }\n    return u;\n}\n\nint find(UnionSet *u, int x) {\n    return u->father[x] = (u->father[x] == x ? x : find(u, u->father[x]));\n}\n\nint merge(UnionSet *u, int a, int b) {\n    int fa = find(u, a), fb = find(u, b);\n    if (fa == fb) return 0;\n    //if (u->size[fa] < u->size[fb]) swap(fa, fb);\n    u->father[fb] = fa;\n    //u->size[fa] += u->size[fb];\n    return 1;\n}\n\nvoid clear(UnionSet *u) {\n    if (u == NULL) return ;\n    free(u->father);\n    free(u->size);\n    free(u);\n    return ;\n}\n\nint main() {\n    int n, m;\n    scanf("%d%d", &n, &m);\n    UnionSet *u = init(n);\n    for (int i = 0; i < m; i++) {\n        int a, b, c;\n        scanf("%d%d%d", &a, &b, &c);\n        switch (a) {\n            case 1: merge(u, b, c); break;\n            case 2: printf("%s\\n", find(u, b) == find(u, c) ? "Yes" : "No"); break;\n        }\n    }\n    clear(u);\n    return 0;\n}\n\n')),(0,a.kt)("h3",{id:"805-hzoj-72-\u731c\u62f3cpp"},"8.0.5. HZOJ-72-\u731c\u62f3.cpp"),(0,a.kt)("p",null,"0:x\u4e0ey\u5e73\u624b"),(0,a.kt)("p",null,"1:x\u8f93\u7ed9y"),(0,a.kt)("p",null,"2:x\u8d62y"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'/*************************************************************************\n   > File Name: 72.cpp\n   > Author: hug\n   > Mail:   hug@haizeix.com\n   > Created Time: \u4e09  8/21 20:47:24 2019\n ************************************************************************/\n\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n#include <map>\n#include <cmath>\nusing namespace std;\n#define MAX_N 10000\n\nstruct UnionSet {\n    int fa[MAX_N + 5], val[MAX_N + 5];\n    void init(int n) {\n        for (int i = 1; i <= n; i++) fa[i] = i; \n    }\n    int get(int x) {\n        if (x == fa[x]) return x;\n        int root = get(fa[x]);\n        val[x] += val[fa[x]];\n        val[x] %= 3;\n        return fa[x] = root;\n    }\n    void merge(int a, int b, int c) {\n        int aa = get(a), bb = get(b);\n        if (aa == bb) return ;\n        fa[aa] = bb;\n        val[aa] = (c + val[b] - val[a] + 3) % 3;\n        return ;\n    }\n};\n\nUnionSet u;\n\nvoid read(int &n, int &m) {\n    cin >> n >> m;\n    u.init(n);\n    return ;\n}\n\nint main() {\n    int n, m;\n    read(n, m);\n    for (int i = 0; i < m; i++) {\n        int a, b, c;\n        cin >> a >> b >> c;\n        if (a == 1) {\n            u.merge(b, c, 2);\n        } else {\n            if (u.get(b) != u.get(c)) {\n                cout << "Unknown" << endl;\n            } else {\n                switch ((u.val[b] - u.val[c] + 3) % 3) {\n                    case 0: cout << "Tie" << endl; break;\n                    case 1: cout << "Loss" << endl; break;\n                    case 2: cout << "Win" << endl; break;\n                }\n            }\n        }\n    }\n    return 0;\n}\n')),(0,a.kt)("h3",{id:"806-hzoj-73-\u6e56\u6ccacpp"},"8.0.6. HZOJ-73-\u6e56\u6cca.cpp"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"}," \n/*************************************************************************\n   > File Name: 73.cpp\n   > Author: hug\n   > Mail:   hug@haizeix.com\n   > Created Time: \u56db  8/22 14:19:28 2019\n ************************************************************************/\n\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n#include <map>\n#include <cmath>\nusing namespace std;\n#define MAX_N 1000\n#define MAX_M 1000000\n#define ind(i, j) ((i) * (m) + (j) + 1)\nchar g[MAX_N + 5][MAX_N + 5];\n\nstruct UnionSet {\n    int fa[MAX_M + 5];\n    void init(int n) {\n        for (int i = 0; i <= n; i++) fa[i] = i;\n    }\n    int get(int x) {\n        return (fa[x] = (x - fa[x] ? get(fa[x]) : x));\n    }\n    void merge(int a, int b) {\n        fa[get(a)] = get(b);\n    }\n};\n\nUnionSet u;\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    u.init(n * m);\n    for (int i = 0; i < n; i++) {\n        cin >> g[i];\n        for (int j = 0; j < m; j++) {\n            if (g[i][j] == 'X') continue;\n            if (i && g[i - 1][j] == 'O') u.merge(ind(i, j), ind(i - 1, j));\n            if (j && g[i][j - 1] == 'O') u.merge(ind(i, j), ind(i, j - 1));\n            if (i == 0 || i == n - 1) u.merge(ind(i, j), 0);\n            if (j == 0 || j == m - 1) u.merge(ind(i, j), 0);\n        }\n    }\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (g[i][j] == 'X') continue;\n            if (u.get(ind(i, j)) - u.get(0)) ans += 1;\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}\n")),(0,a.kt)("h3",{id:"807-\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790"},"8.0.7. \u7a0b\u5e8f\u81ea\u52a8\u5206\u6790"),(0,a.kt)("p",null,"\u79bb\u6563\u505a\u6cd5\uff1a\u6839\u636e\u76f8\u7b49\u5efa\u7acb\u5e76\u67e5\u96c6\uff0c\u5224\u65ad\u4e0d\u7b49"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'#define MAX_N 1000000\nstruct UnionSet {\n    int fa[(MAX_N << 1) + 5];\n    void init(int n) {\n        while (n--) fa[n + 1] = n + 1;\n    }\n    int get(int x) {\n        return (fa[x] = (x - fa[x] ? get(fa[x]) : x));\n    }\n    void merge(int a, int b) {\n        fa[get(a)] = get(b);\n    }\n};\n\nUnionSet u;\n\nstruct Data {\n    int e, i, j;\n} arr[MAX_N + 5];\n\nvoid solve() {\n    map<int, int> ind;\n    int cnt = 0;\n    int n;\n    cin >> n;\n    u.init(2 * n);\n    for (int i = 0; i < n; i++) {\n        cin >> arr[i].i >> arr[i].j >> arr[i].e;\n        if (ind.find(arr[i].i) == ind.end()) ind[arr[i].i] = (++cnt);\n        if (ind.find(arr[i].j) == ind.end()) ind[arr[i].j] = (++cnt);\n        arr[i].i = ind[arr[i].i];\n        arr[i].j = ind[arr[i].j];\n    }\n    for (int i = 0; i < n; i++) {\n        if (arr[i].e == 0) continue;\n        u.merge(arr[i].i, arr[i].j);\n    }\n    int flag = 1;\n    for (int i = 0; i < n && flag; i++) {\n        if (arr[i].e == 1) continue;\n        flag = (u.get(arr[i].i) != u.get(arr[i].j));\n    }\n    cout << (flag ? "YES" : "NO") << endl;\n    return ;\n}\n\nint main() {\n    int tcase;\n    cin >> tcase;\n    while (tcase--) solve();\n    return 0;\n}\n')),(0,a.kt)("h3",{id:"808-supermarket"},"8.0.8. Supermarket"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"}," \u8d85\u5e02\u91cc\u6709NN\u4e2a\u5546\u54c1. \u7b2cii\u4e2a\u5546\u54c1\u5fc5\u987b\u5728\u4fdd\u8d28\u671f(\u7b2cdidi\u5929)\u4e4b\u524d\u5356\u6389, \u82e5\u5356\u6389\u53ef\u8ba9\u8d85\u5e02\u83b7\u5f97pipi\u7684\u5229\u6da6.\u6bcf\u5929\u53ea\u80fd\u5356\u4e00\u4e2a\u5546\u54c1.\u73b0\u5728\u4f60\u8981\u8ba9\u8d85\u5e02\u83b7\u5f97\u6700\u5927\u7684\u5229\u6da6.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cstring>\n#include <queue>\n#include <stack>\n#include <map>\nusing namespace std;\n#define MAX_N 10000\n\nstruct Data {\n    int p, d;\n} arr[MAX_N + 5];\n \nstruct UnionSet {\n    int fa[MAX_N + 5];\n    void init(int n) {\n        for (int i = 0; i <= n; ++i) fa[i] = i;\n    }\n    int get(int x) {\n        return (fa[x] = (x - fa[x] ? get(fa[x]) : x));\n    }\n    //\u6839\u8282\u70b9\u4ee3\u8868\u5f53\u524d\u8282\u70b9\u524d\u9762\u7b2c\u4e00\u4e2a\u7a7a\u4f4d\u7f6e\n    //\u524d\u9762\u505a\u513f\u5b50\n    void merge(int a, int b) {\n        fa[get(a)] = get(b);\n    }\n};\n\nbool cmp(const Data &a, const Data &b) {\n    return a.p > b.p;\n}\n\nUnionSet u;\n\nint solve(int n) {\n    for (int i = 0; i < n; ++i) {\n        cin >> arr[i].p >> arr[i].d;\n    }\n    sort(arr, arr + n, cmp);\n    u.init(MAX_N);\n    int ans = 0;\n    for (int i = 0; i < n; ++i) {\n        if (u.get(arr[i].d) == 0) continue;\n        ans += arr[i].p;\n        int day = u.get(arr[i].d);\n        //\u8ba9day\u4f5c\u4e3aday-1\u7684\u5b50\u96c6\uff0cday\u88ab\u5360\u7528\n        u.merge(day, day - 1);\n    }\n    cout << ans << endl;\n    return 0;\n}\n\nint main() {\n    int n;\n    while (cin >> n) solve(n);\n    return 0;\n}\n\n")),(0,a.kt)("h3",{id:"809-\u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4"},"8.0.9. \u94f6\u6cb3\u82f1\u96c4\u4f20\u8bf4"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"}," \u6709\u4e00\u4e2a\u5212\u5206\u6210NN\u5217\u7684\u661f\u9645\u6218\u573a\uff0c\u5404\u5217\u4f9d\u6b21\u7f16\u53f7\u4e3a1,2,\u2026,N1,2,\u2026,N\u3002\u6709NN\u8258\u6218\u8230\uff0c\u4e5f\u4f9d\u6b21\u7f16\u53f7\u4e3a1,2,\u2026,N1,2,\u2026,N, \u5176\u4e2d\u7b2cii\u53f7\u6218\u8230\u5904\u4e8e\u7b2cii\u5217\u3002"),(0,a.kt)("p",{parentName:"blockquote"}," \u6709M\u6761\u6307\u4ee4\uff0c\u6bcf\u6761\u6307\u4ee4\u683c\u5f0f\u4e3a\u4ee5\u4e0b\u4e24\u79cd\u4e4b\u4e00\uff1a"),(0,a.kt)("p",{parentName:"blockquote"}," M i j\uff0c\u8868\u793a\u7b2cii\u53f7\u6218\u8230\u6240\u5728\u5217\u7684\u5168\u90e8\u6218\u8230\u4fdd\u6301\u539f\u6709\u987a\u5e8f\uff0c\u63a5\u5728\u7b2cjj\u53f7\u6218\u8230\u6240\u5728\u5217\u7684\u5c3e\u90e8\u3002"),(0,a.kt)("p",{parentName:"blockquote"}," C i j\uff0c\u8868\u793a\u8be2\u95ee\u7b2cii\u53f7\u6218\u8230\u4e0e\u7b2cjj\u53f7\u6218\u8230\u5f53\u524d\u662f\u5426\u5904\u4e8e\u540c\u4e00\u5217\u4e2d\uff0c\u5982\u679c\u5728\u540c\u5217\u4e2d\uff0c\u4ed6\u4eec\u4e4b\u95f4\u95f4\u9694\u4e86\u591a\u5c11\u8258\u6218\u8230\u3002")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'/*************************************************************************\n    > File Name: oj-324.cpp\n    > Author: wei \n    > Mail: 1931248856@qq.com\n    > Created Time: 2020\u5e7410\u670821\u65e5 \u661f\u671f\u4e09 17\u65f653\u520612\u79d2\n ************************************************************************/\n\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cstring>\n#include <queue>\n#include <stack>\n#include <map>\nusing namespace std;\n#define MAX_N 500000\n\nstruct Unionset {\n    int fa[MAX_N + 5], size[MAX_N + 5], val[MAX_N + 5];\n    void init(int n) {\n        for (int i = 1; i <= n; ++i) {\n            fa[i] = i;\n            size[i] = 1;\n            val[i] = 0;\n        }\n        return ;\n    }\n    int get(int x) {\n        if (x == fa[x]) return x;\n        int root = get(fa[x]);\n        val[x] += val[fa[x]];\n        return fa[x] = root;\n    }\n    void merge(int a, int b) {\n        int aa = get(a), bb = get(b);\n        if (aa == bb) return ;\n        fa[aa] = bb;\n        val[aa] = size[bb];\n        size[bb] += size[aa];\n        return ;\n    }\n};\n\nUnionset u;\n\nint main() {\n    int n;\n    scanf("%d", &n);\n    u.init(n);\n    char str[10];\n    for (int i = 0; i < n; ++i) {\n        int a, b;\n        scanf("%s%d%d", str, &a, &b);\n        switch (str[0]) {\n            case \'M\' : u.merge(a, b); break;\n            case \'C\' : {\n                if (u.get(a) != u.get(b)) {\n                    printf("-1\\n");\n                } else {\n                    printf("%d\\n", abs(u.val[a] - u.val[b]) - 1);\n                }\n            } break;\n        }\n    }\n\n    return 0;\n}\n\n')),(0,a.kt)("h3",{id:"8010-hzoj-325-\u4ee3\u7801\u6f14\u793a"},"8.0.10. HZOJ-325-\u4ee3\u7801\u6f14\u793a"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"image-20210131134715524",src:e(25573).Z})),(0,a.kt)("p",null,"a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cstring>\n#include <string>\n#include <vector>\n#include <set>\n#include <map>\nusing namespace std;\n#define MAX_N 5000\n\nstruct Data {\n    int l, r;\n    string s;\n} arr[MAX_N + 5];\n\nset<int> ind_s;\nmap<int ,int> ind;\nint cnt = 0;\n\nstruct UnionSet {\n    int father[MAX_N << 1 + 5], val[MAX_N + 5];\n    void init(int n) {\n        for (int i = 1; i <= n; ++i) {\n            father[i] = i;\n            val[i] = 0;\n        }\n        return ;\n    }\n    \n    int get(int x) {\n        if (father[x] == x) return x;\n        int root = get(father[x]);\n        val[x] += val[father[x]];\n        val[x] %= 2;\n        return father[x] = root;\n    }\n    \n    int merge(int a, int b, int c) {\n        int fa = get(a), fb = get(b);\n        if (fa == fb) {\n            return (val[a] - val[b] - c) % 2 == 0;\n        }\n        father[fa] = father[fb];\n        val[fa] = (c + val[b] - val[a] + 2) % 2;\n        return 1;\n    }\n};\n\nUnionSet u;\n\nint main() {\n    int l, q;\n    cin >> l >> q;\n    for (int i = 0; i < q; ++i) {\n        cin >> arr[i].l >> arr[i].r >> arr[i].s;\n        arr[i].r += 1;\n        ind_s.insert(arr[i].l);\n        ind_s.insert(arr[i].r);\n    }\n\n    for (auto cur : ind_s) {\n        ind[cur] = ++cnt;\n    }\n\n    u.init(cnt);\n    for (int i = 0; i < q; ++i) {\n        arr[i].l = ind[arr[i].l];\n        arr[i].r = ind[arr[i].r];\n        if (u.merge(arr[i].l, arr[i].r, arr[i].s == "odd")) continue;\n        cout << i << endl;\n        return 0;\n    }\n    cout << q << endl;\n    return 0;\n}\n\n')),(0,a.kt)("h3",{id:"8011-hzoj-326-\u98df\u7269\u94fe"},"8.0.11. HZOJ-326-\u98df\u7269\u94fe"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"image-20210131145149668",src:e(58370).Z})),(0,a.kt)("p",null,"a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"using namespace std;\n#define MAX_N 50000\n\nstruct UnionSet {\n    int fa[MAX_N + 5], val[MAX_N + 5], n;\n    void init(int n) {\n        this->n = n;\n        for (int i = 1; i <= n; i++) {\n            fa[i] = i;\n            val[i] = 0;\n        }\n        return ;\n    }\n    int get(int x) {\n        if (fa[x] == x) return x;\n        int ret = get(fa[x]);\n        val[x] += val[fa[x]];\n        val[x] %= 3;\n        return fa[x] = ret;\n    }\n    int merge(int a, int b, int c) {\n        if (a > n || b > n) return 0;\n        int aa = get(a), bb = get(b);\n        if (aa == bb) {\n            return (val[a] - val[b] - c) % 3 == 0;\n        }\n        fa[aa] = bb;\n        val[aa] = ((c - val[a] + val[b]) % 3 + 3) % 3;\n        return 1;\n    }\n} u;\n\nint main() {\n    int n, m, a, b, c, ans = 0;\n    cin >> n >> m;\n    u.init(n);\n    while (m--) {\n        cin >> c >> a >> b;\n        c -= 1;\n        if (!u.merge(a, b, c)) ans += 1;\n    }\n    cout << ans << endl;\n    return 0;\n}\n")),(0,a.kt)("h3",{id:"8012-hzoj-327-\u5173\u62bc\u7f6a\u72afcpp"},"8.0.12. HZOJ-327-\u5173\u62bc\u7f6a\u72af.cpp"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"}," \n/*************************************************************************\n   > File Name: 327.cpp\n   > Author: hug\n   > Mail:   hug@haizeix.com\n   > Created Time: \u65e5 11/24 14:36:55 2019\n ************************************************************************/\n\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n#include <map>\n#include <cmath>\n#include <queue>\nusing namespace std;\n#define MAX_N 20000\n#define MAX_M 100000\n\nstruct UnionSet {\n    int fa[MAX_N + 5], val[MAX_N + 5];\n    void init(int n) {\n        for (int i = 1; i <= n; i++) fa[i] = i, val[i] = 0;\n    }\n    int get(int x) {\n        if (x == fa[x]) return x;\n        int root = get(fa[x]);\n        val[x] += val[fa[x]];\n        val[x] %= 2;\n        return fa[x] = root;\n    }\n    bool merge(int a, int b) {\n        int aa = get(a), bb = get(b);\n        if (aa == bb) {\n            return (val[a] + val[b]) % 2;\n        }\n        fa[aa] = bb;\n        val[aa] = (3 + val[b] - val[a]) % 2;\n        return true;\n    }\n};\n\nstruct Data {\n    int i, j, c;\n} arr[MAX_M + 5];\n\nUnionSet u;\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    u.init(n);\n    for (int i = 0; i < m; i++) {\n        cin >> arr[i].i >> arr[i].j >> arr[i].c;\n    }\n    sort(arr, arr + m, [](const Data &a, const Data &b) {\n        return a.c > b.c;\n    });\n    int ans = 0;\n    for (int i = 0; i < m; i++) {\n        if (!u.merge(arr[i].i, arr[i].j)) {\n            ans = arr[i].c;\n            break;\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}\n\n")),(0,a.kt)("h3",{id:"8013-128-\u6700\u957f\u8fde\u7eed\u5e8f\u5217"},"8.0.13. ",(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/longest-consecutive-sequence/"},"128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4 ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," \uff0c\u627e\u51fa\u6570\u5b57\u8fde\u7eed\u7684\u6700\u957f\u5e8f\u5217\uff08\u4e0d\u8981\u6c42\u5e8f\u5217\u5143\u7d20\u5728\u539f\u6570\u7ec4\u4e2d\u8fde\u7eed\uff09\u7684\u957f\u5ea6")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"/*************************************************************************\n   > File Name: 128.cpp\n   > Author: hug\n   > Mail:   hug@haizeix.com\n   > Created Time: \u65e5 11/24 18:46:05 2019\n ************************************************************************/\n\nclass UnionSet {\npublic :\n    vector<int> fa, size;\n    void init(int n) {\n        fa.clear();\n        for (int i = 0; i <= n; i++) {\n            fa.push_back(i);\n            size.push_back(1);\n        }\n        return ;\n    }\n    int get(int x) {\n        return (fa[x] = (fa[x] == x ? x : get(fa[x])));\n    }\n    void merge(int a, int b) {\n        int aa = get(a), bb = get(b);\n        if (aa == bb) return ;\n        fa[aa] = bb;\n        size[bb] += size[aa];\n        return ;\n    }\n};\n\nclass Solution {\npublic:\n    int longestConsecutive(vector<int>& nums) {\n        u.init(nums.size());\n        unordered_map<int, int> ht;\n        for (int i = 0; i < nums.size(); i++) {\n            int k = nums[i];\n            if (ht.find(k) != ht.end()) continue;\n            if (ht.find(k - 1) != ht.end()) {\n                u.merge(i, ht[k - 1]);\n            }\n            if (ht.find(k + 1) != ht.end()) {\n                u.merge(i, ht[k + 1]);\n            }\n            ht[k] = i;\n        }\n        int ans = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            ans = max(ans, u.size[i]);\n        }\n        return ans;\n    }\n    UnionSet u;\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution\n{\n    public:\n        //AC - 24ms - bottom-up method;\n        int longestConsecutive(vector<int>& nums) \n        {\n            int maxCount = 0, lCount = 0, rCount = 0;\n            unordered_map<int, int> count_map;\n            for(int i = 0; i < nums.size(); ++i)\n            {\n                if(!count_map[nums[i]])\n                {\n                    int lCount = count_map[nums[i]-1];\n                    int rCount = count_map[nums[i]+1];\n                    int sum = lCount+rCount+1;\n                    count_map[nums[i]] = count_map[nums[i]-lCount] = count_map[nums[i]+rCount] = sum;\n                    maxCount = max(maxCount, sum);\n                }\n            }\n            return maxCount;\n        }\n\n        //AC - 20ms - blood spreading into two directions;\n        int longestConsecutive(vector<int>& nums)\n        {\n            unordered_set<int> set(nums.begin(), nums.end());\n            int ret = 1;\n            for(auto &n: nums)\n            {\n                if(!set.count(n)) continue;\n                set.erase(n);\n                int pre=n-1, next=n+1;\n                while(set.count(pre)) set.erase(pre--);\n                while(set.count(next)) set.erase(next++);\n                ret = max(ret, next-pre-1);\n            }\n            return ret;\n        }\n};\n\n")),(0,a.kt)("h3",{id:"8014-130-\u88ab\u56f4\u7ed5\u7684\u533a\u57df"},"8.0.14. ",(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/surrounded-regions/"},"130. \u88ab\u56f4\u7ed5\u7684\u533a\u57df")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int dir[4][2] = {0,1 , 1, 0, 0, -1, -1, 0};\n    struct node {\n        int x, y;\n    };\n    void bfs(int sx, int sy, vector<vector<int>> &check, vector<vector<char>> &board) {\n                int n = board.size(), m = board[0].size();\n                queue<node> que;\n                que.push((node){sx, sy});\n                check[sx][sy] = 1;\n                while (!que.empty()) {\n                    node temp = que.front();\n                    que.pop();\n                    for (int i = 0; i < 4; ++i) {\n                        int x = temp.x + dir[i][0];\n                        int y = temp.y + dir[i][1];\n                        if (x < 0 || y < 0 || x >= n || y >= m || check[x][y] || board[x][y] == 'X') continue;\n                        check[x][y] = 1;\n                        que.push((node){x, y});\n                    }     \n                }\n    }\n    void solve(vector<vector<char>>& board) {\n        int n = board.size();\n        if (n == 0) return ;\n        int m = board[0].size();\n        vector<vector<int>> check(n, vector<int>(m, 0));\n        for (int i  = 0; i < m; ++i) {\n            if (board[0][i] == 'X' || check[0][i]) continue;\n            bfs(0, i, check, board);\n        }\n        for (int i  = 0; i < m; ++i) {\n            if (board[n - 1][i] == 'X' || check[n - 1][i]) continue;\n            bfs(n - 1, i, check, board);\n        }\n        for (int i  = 1; i < n - 1; ++i) {\n            if (board[i][0] == 'X' || check[i][0]) continue;\n            bfs(i,0, check, board);\n        }\n        for (int i  = 1; i < n - 1; ++i) {\n            if (board[i][m - 1] == 'X' || check[i][m - 1]) continue;\n            bfs(i,m - 1, check, board);\n        }\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                if (check[i][j]) board[i][j] = 'O';\n                else board[i][j] = 'X';\n            }\n        }\n        return ;\n\n    }\n")),(0,a.kt)("h3",{id:"9"},"9."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"/*************************************************************************\n   > File Name: 130.cpp\n   > Author: hug\n   > Mail:   hug@haizeix.com\n   > Created Time: \u65e5 11/24 19:46:48 2019\n ************************************************************************/\n\nclass UnionSet {\npublic:\n    vector<int> fa;\n    void init(int n) {\n        fa.clear();\n        for (int i = 0; i <= n; i++) fa.push_back(i);\n    }\n    int get(int x) {\n        return (fa[x] = (x == fa[x] ? x : get(fa[x])));\n    }\n    void merge(int a, int b) {\n        fa[get(a)] = get(b);\n    }\n};\n\nclass Solution {\npublic:\n    void solve(vector<vector<char>>& board) {\n        if (board.size() == 0) return ;\n        if (board[0].size() == 0) return ;\n        n = board.size();\n        m = board[0].size();\n        u.init(n * m);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (board[i][j] == 'X') continue;\n                if (i && board[i - 1][j] == 'O')\n                    u.merge(ind(i, j), ind(i - 1, j));\n                if (j && board[i][j - 1] == 'O')\n                    u.merge(ind(i, j), ind(i, j - 1));\n                if (i == 0 || i + 1 == n)\n                    u.merge(ind(i, j), 0);\n                if (j == 0 || j + 1 == m)\n                    u.merge(ind(i, j), 0);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (board[i][j] == 'X') continue;\n                if (u.get(ind(i, j)) == u.get(0)) continue;\n                board[i][j] = 'X';\n            }\n        }\n        return ;\n    }\n    int ind(int i, int j) {\n        return i * m + j + 1;\n    }\n    int n, m;\n    UnionSet u;\n};\n")),(0,a.kt)("h3",{id:"9015-leetcode-200\u5c9b\u5c7f\u6570\u91cf"},"9.0.15. Leetcode-200",(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/number-of-islands/description/"},"\u5c9b\u5c7f\u6570\u91cf")),(0,a.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u7531 ",(0,a.kt)("inlineCode",{parentName:"p"},"'1'"),"\uff08\u9646\u5730\uff09\u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"'0'"),"\uff08\u6c34\uff09\u7ec4\u6210\u7684\u7684\u4e8c\u7ef4\u7f51\u683c\uff0c\u8bf7\u4f60\u8ba1\u7b97\u7f51\u683c\u4e2d\u5c9b\u5c7f\u7684\u6570\u91cf\u3002"),(0,a.kt)("p",null,"\u5c9b\u5c7f\u603b\u662f\u88ab\u6c34\u5305\u56f4\uff0c\u5e76\u4e14\u6bcf\u5ea7\u5c9b\u5c7f\u53ea\u80fd\u7531\u6c34\u5e73\u65b9\u5411\u548c/\u6216\u7ad6\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u8fde\u63a5\u5f62\u6210\u3002"),(0,a.kt)("p",null,"\u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u5047\u8bbe\u8be5\u7f51\u683c\u7684\u56db\u6761\u8fb9\u5747\u88ab\u6c34\u5305\u56f4\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'\u8f93\u5165\uff1agrid = [\n  ["1","1","1","1","0"],\n  ["1","1","0","1","0"],\n  ["1","1","0","0","0"],\n  ["0","0","0","0","0"]\n]\n\u8f93\u51fa\uff1a1\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"/*************************************************************************\n   > File Name: 200.cpp\n   > Author: hug\n   > Mail:   hug@haizeix.com\n   > Created Time: \u56db  5/23 19:08:07 2019\n ************************************************************************/\n\n#define MC(T, n) (T *)malloc(sizeof(T) * (n))\n#define CC(T, n) (T *)calloc(sizeof(T), (n))\n\ntypedef struct UnionSet {\n    int *fa;\n    int n;\n} UnionSet;\n\nUnionSet *init(int n) {\n    UnionSet *u = MC(UnionSet, 1);\n    u->fa = MC(int, n + 1);\n    u->n = n;\n    for (int i = 1; i <= n; i++) u->fa[i] = i;\n    return u;\n}\n\nvoid clear(UnionSet *u) {\n    if (u == NULL) return ;\n    free(u->fa);\n    free(u);\n    return ;\n}\n\nint get(UnionSet *u, int x) {\n    if (u->fa[x] == x) return x;\n    return u->fa[x] = get(u, u->fa[x]);\n}\n\nvoid merge(UnionSet *u, int a, int b) {\n    u->fa[get(u, a)] = get(u, b);\n}\n\nint numIslands(char** grid, int n, int *M) {\n    if (n == 0) return 0;\n    int m = M[0];\n    #define ind(i, j) ((i) * (m) + (j) + 1)\n    UnionSet *u = init(n * m);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (grid[i][j] == '0') continue;\n            if (i - 1 >= 0 && grid[i - 1][j] == '1')\n                merge(u, ind(i, j), ind(i - 1, j));\n            if (j - 1 >= 0 && grid[i][j - 1] == '1')\n                merge(u, ind(i, j), ind(i, j - 1));\n        }\n    }\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (grid[i][j] == '0') continue;\n            ans += (get(u, ind(i, j)) == ind(i, j));\n        }\n    }\n    clear(u);\n    return ans;\n}\n")),(0,a.kt)("h3",{id:"9016-lc-547"},"9.0.16. LC-547"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class UnionSet {\npublic:\n    vector<int> fa;\n    void init(int n) {\n        fa.clear();\n        for (int i = 0; i <= n; i++) fa.push_back(i);\n    }\n    int get(int x) {\n        return (fa[x] = (x == fa[x] ? x : get(fa[x])));\n    }\n    void merge(int a, int b) {\n        fa[get(a)] = get(b);\n    }\n};\n\nclass Solution {\npublic:\n    int findCircleNum(vector<vector<int>>& M) {\n        int n = M.size();\n        u.init(n);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (M[i][j] == 0) continue;\n                u.merge(i, j);\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) ans += (u.get(i) == i);\n        return ans;\n    }\n    UnionSet u;\n};\n")),(0,a.kt)("h3",{id:"9017-leetcode-684"},"9.0.17. Leetcode-684"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class UnionSet {\npublic:\n    vector<int> fa;\n    void init(int n) {\n        fa.clear();\n        for (int i = 0; i <= n; i++) fa.push_back(i);\n    }\n    int get(int x) {\n        return (fa[x] = (x == fa[x] ? x : get(fa[x])));\n    }\n    void merge(int a, int b) {\n        fa[get(a)] = get(b);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> findRedundantConnection(vector<vector<int>>& edges) {\n        int n = edges.size();\n        u.init(n);\n        vector<int> ret;\n        for (int i = 0; i < n; i++) {\n            vector<int> &e = edges[i];\n            if (u.get(e[0]) == u.get(e[1])) {\n                ret = e;\n                break;\n            }\n            u.merge(e[0], e[1]);\n        }\n        return ret;\n    }\n    UnionSet u;\n};\n")),(0,a.kt)("h3",{id:"9018-685-\u5197\u4f59\u8fde\u63a5-ii"},"9.0.18. ",(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/redundant-connection-ii/"},"685. \u5197\u4f59\u8fde\u63a5 II")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"\u6709\u73af")," \uff1a\u6784\u6210\u73af\u5f62\u6570\u5b571\u8fde\u52302,2\u8fde\u52303,3\u8fde\u52301\u5c31\u662f\u4e2a\u73af"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"\u51b2\u7a81 "),"\uff1a\u4e00\u4e2a\u70b9\u6709\u4e24\u4e2a\u7236\u8282\u70b9")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u6709\u73af\u65e0\u51b2\u7a81 [","[1,2]",",","[2,3]",",","[3,1]","]"),(0,a.kt)("li",{parentName:"ul"},"\u6709\u73af\u6709\u51b2\u7a81 [","[1,2]",",","[2,3]",",","[3,1]",",","[4,2]","]"),(0,a.kt)("li",{parentName:"ul"},"\u65e0\u73af\u6709\u51b2\u7a81 [","[1,2]",",","[1,3]",",","[2,3]","]")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u5728\u672c\u95ee\u9898\u4e2d\uff0c\u6709\u6839\u6811\u6307\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u6709\u5411\u56fe\u3002\u8be5\u6811\u53ea\u6709\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u6240\u6709\u5176\u4ed6\u8282\u70b9\u90fd\u662f\u8be5\u6839\u8282\u70b9\u7684\u540e\u7ee7\u3002\u6bcf\u4e00\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u7236\u8282\u70b9\uff0c\u9664\u4e86\u6839\u8282\u70b9\u6ca1\u6709\u7236\u8282\u70b9\u3002"),(0,a.kt)("p",{parentName:"blockquote"},"\u8f93\u5165\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u8be5\u56fe\u7531\u4e00\u4e2a\u6709\u7740N\u4e2a\u8282\u70b9 (\u8282\u70b9\u503c\u4e0d\u91cd\u590d1, 2, ..., N) \u7684\u6811\u53ca\u4e00\u6761\u9644\u52a0\u7684\u8fb9\u6784\u6210\u3002\u9644\u52a0\u7684\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5305\u542b\u57281\u5230N\u4e2d\u95f4\uff0c\u8fd9\u6761\u9644\u52a0\u7684\u8fb9\u4e0d\u5c5e\u4e8e\u6811\u4e2d\u5df2\u5b58\u5728\u7684\u8fb9\u3002"),(0,a.kt)("p",{parentName:"blockquote"},"\u7ed3\u679c\u56fe\u662f\u4e00\u4e2a\u4ee5\u8fb9\u7ec4\u6210\u7684\u4e8c\u7ef4\u6570\u7ec4\u3002 \u6bcf\u4e00\u4e2a\u8fb9 \u7684\u5143\u7d20\u662f\u4e00\u5bf9 ","[u, v]","\uff0c\u7528\u4ee5\u8868\u793a\u6709\u5411\u56fe\u4e2d\u8fde\u63a5\u9876\u70b9 u \u548c\u9876\u70b9 v \u7684\u8fb9\uff0c\u5176\u4e2d u \u662f v \u7684\u4e00\u4e2a\u7236\u8282\u70b9")),(0,a.kt)("p",null,"\u8be5\u56fe\u7531\u4e00\u4e2a\u6709\u7740 N \u4e2a\u8282\u70b9 (\u8282\u70b9\u503c\u4e0d\u91cd\u590d 1, 2, ..., N) \u7684\u6811\u53ca\u4e00\u6761\u9644\u52a0\u7684\u8fb9\u6784\u6210\u3002\u9644\u52a0\u7684\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5305\u542b\u5728 1 \u5230 N \u4e2d\u95f4\uff0c\u8fd9\u6761\u9644\u52a0\u7684\u8fb9\u4e0d\u5c5e\u4e8e\u6811\u4e2d\u5df2\u5b58\u5728\u7684\u8fb9\u3002"),(0,a.kt)("p",null,"\u8fd9\u8bf4\u660e\u9898\u76ee\u4e2d\u7684\u56fe\u539f\u672c\u662f\u662f\u4e00\u68f5\u6811\uff0c\u53ea\u4e0d\u8fc7\u5728\u4e0d\u589e\u52a0\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\u591a\u52a0\u4e86\u4e00\u6761\u8fb9\uff01"),(0,a.kt)("p",null,"\u8fd8\u6709 \u82e5\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u8fd4\u56de\u6700\u540e\u51fa\u73b0\u5728\u7ed9\u5b9a\u4e8c\u7ef4\u6570\u7ec4\u7684\u7b54\u6848\u3002\u8fd9\u8bf4\u660e\u5728\u4e24\u5929\u8fb9\u90fd\u53ef\u4ee5\u5220\u9664\u7684\u60c5\u51b5\u4e0b\uff0c\u8981\u5220\u987a\u5e8f\u9760\u540e\u7684\uff01"),(0,a.kt)("p",null,"\u90a3\u4e48\u6709\u5982\u4e0b\u4e09\u79cd\u60c5\u51b5\uff0c\u524d\u4e24\u79cd\u60c5\u51b5\u662f\u51fa\u73b0\u5165\u5ea6\u4e3a 2 \u7684\u70b9\uff0c\u5982\u56fe\uff1a"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"685.\u5197\u4f59\u8fde\u63a5II1.png",src:e(8184).Z})),(0,a.kt)("p",null,"\u4e14\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u5165\u5ea6\u4e3a 2\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u770b\u51fa\u5ea6\u5462\uff0c\u51fa\u5ea6\u6ca1\u6709\u610f\u4e49\uff0c\u4e00\u9897\u6811\u4e2d\u968f\u4fbf\u4e00\u4e2a\u7236\u8282\u70b9\u5c31\u6709\u591a\u4e2a\u51fa\u5ea6\u3002"),(0,a.kt)("p",null,"\u7b2c\u4e09\u79cd\u60c5\u51b5\u662f\u6ca1\u6709\u5165\u5ea6\u4e3a 2 \u7684\u70b9\uff0c\u90a3\u4e48\u56fe\u4e2d\u4e00\u5b9a\u51fa\u73b0\u4e86\u6709\u5411\u73af\uff08\u6ce8\u610f\u8fd9\u91cc\u5f3a\u8c03\u662f\u6709\u5411\u73af\uff01\uff09"),(0,a.kt)("p",null,"\u5982\u56fe\uff1a"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"685.\u5197\u4f59\u8fde\u63a5II2.png",src:e(72415).Z})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\nprivate:\n    static const int N = 1010; // \u5982\u9898\uff1a\u4e8c\u7ef4\u6570\u7ec4\u5927\u5c0f\u7684\u57283\u52301000\u8303\u56f4\u5185\n    int father[N];\n    int n; // \u8fb9\u7684\u6570\u91cf\n    // \u5e76\u67e5\u96c6\u521d\u59cb\u5316\n    void init() {\n        for (int i = 1; i <= n; ++i) {\n            father[i] = i;\n        }\n    }\n    // \u5e76\u67e5\u96c6\u91cc\u5bfb\u6839\u7684\u8fc7\u7a0b\n    int find(int u) {\n        return u == father[u] ? u : father[u] = find(father[u]);\n    }\n    // \u5c06v->u \u8fd9\u6761\u8fb9\u52a0\u5165\u5e76\u67e5\u96c6\n    void join(int u, int v) {\n        u = find(u);\n        v = find(v);\n        if (u == v) return ;\n        father[v] = u;\n    }\n    // \u5224\u65ad u \u548c v\u662f\u5426\u627e\u5230\u540c\u4e00\u4e2a\u6839\n    bool same(int u, int v) {\n        u = find(u);\n        v = find(v);\n        return u == v;\n    }\n    // \u5728\u6709\u5411\u56fe\u91cc\u627e\u5230\u5220\u9664\u7684\u90a3\u6761\u8fb9\uff0c\u4f7f\u5176\u53d8\u6210\u6811\n    vector<int> getRemoveEdge(const vector<vector<int>>& edges) {\n        init(); // \u521d\u59cb\u5316\u5e76\u67e5\u96c6\n        for (int i = 0; i < n; i++) { // \u904d\u5386\u6240\u6709\u7684\u8fb9\n            if (same(edges[i][0], edges[i][1])) { // \u6784\u6210\u6709\u5411\u73af\u4e86\uff0c\u5c31\u662f\u8981\u5220\u9664\u7684\u8fb9\n                return edges[i];\n            }\n            join(edges[i][0], edges[i][1]);\n        }\n        return {};\n    }\n\n    // \u5220\u4e00\u6761\u8fb9\u4e4b\u540e\u5224\u65ad\u662f\u4e0d\u662f\u6811\n    bool isTreeAfterRemoveEdge(const vector<vector<int>>& edges, int deleteEdge) {\n        init(); // \u521d\u59cb\u5316\u5e76\u67e5\u96c6\n        for (int i = 0; i < n; i++) {\n            if (i == deleteEdge) continue;\n            if (same(edges[i][0], edges[i][1])) { // \u6784\u6210\u6709\u5411\u73af\u4e86\uff0c\u4e00\u5b9a\u4e0d\u662f\u6811\n                return false;\n            }\n            join(edges[i][0], edges[i][1]);\n        }\n        return true;\n    }\npublic:\n\n    vector<int> findRedundantDirectedConnection(vector<vector<int>>& edges) {\n        int inDegree[N] = {0}; // \u8bb0\u5f55\u8282\u70b9\u5165\u5ea6\n        n = edges.size(); // \u8fb9\u7684\u6570\u91cf\n        for (int i = 0; i < n; i++) {\n            inDegree[edges[i][1]]++; // \u7edf\u8ba1\u5165\u5ea6\n        }\n        vector<int> vec; // \u8bb0\u5f55\u5165\u5ea6\u4e3a2\u7684\u8fb9\uff08\u5982\u679c\u6709\u7684\u8bdd\u5c31\u4e24\u6761\u8fb9\uff09\n        // \u627e\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\u6240\u5bf9\u5e94\u7684\u8fb9\uff0c\u6ce8\u610f\u8981\u5012\u53d9\uff0c\u56e0\u4e3a\u4f18\u5148\u8fd4\u56de\u6700\u540e\u51fa\u73b0\u5728\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u7b54\u6848\n        for (int i = n - 1; i >= 0; i--) {\n            if (inDegree[edges[i][1]] == 2) {\n                vec.push_back(i);\n            }\n        }\n        // \u5904\u7406\u56fe\u4e2d\u60c5\u51b51 \u548c \u60c5\u51b52\n        // \u5982\u679c\u6709\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u4e24\u6761\u8fb9\u91cc\u5220\u4e00\u4e2a\uff0c\u770b\u5220\u54ea\u4e2a\u53ef\u4ee5\u6784\u6210\u6811\n        if (vec.size() > 0) {\n            if (isTreeAfterRemoveEdge(edges, vec[0])) {\n                return edges[vec[0]];\n            } else {\n                return edges[vec[1]];\n            }\n        }\n        // \u5904\u7406\u56fe\u4e2d\u60c5\u51b53\n        // \u660e\u786e\u6ca1\u6709\u5165\u5ea6\u4e3a2\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709\u6709\u5411\u73af\uff0c\u627e\u5230\u6784\u6210\u73af\u7684\u8fb9\u8fd4\u56de\u5c31\u53ef\u4ee5\u4e86\n        return getRemoveEdge(edges);\n\n    }\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"/*************************************************************************\n   > File Name: 685.cpp\n   > Author: hug\n   > Mail:   hug@haizeix.com\n   > Created Time: \u65e5 11/24 21:23:30 2019\n ************************************************************************/\n\nclass UnionSet {\npublic:\n    vector<int> fa;\n    int cnt;\n    void init(int n) {\n        fa.clear();\n        for (int i = 0; i <= n; i++) fa.push_back(i);\n        cnt = n;\n    }\n    int get(int x) {\n        return (fa[x] = (x == fa[x] ? x : get(fa[x])));\n    }\n    void merge(int a, int b) {\n        cnt -= (get(a) != get(b));\n        fa[get(a)] = get(b);\n    }\n};\n\nclass Solution {\npublic:\n\n    vector<int> findRedundantDirectedConnection(vector<vector<int>>& edges) {\n        int n = edges.size();\n        vector<int> indeg(n + 1), outdeg(n + 1), father(n + 1);\n        for (int i = 0; i < n; i++) {\n            indeg[edges[i][1]] += 1;\n            outdeg[edges[i][0]] += 1;\n            father[edges[i][1]] = edges[i][0];\n        }\n        int flag = 0;\n        for (int i = 1; i <= n; i++) {\n            if (indeg[i] <= 1) continue;\n            flag = i;\n            break;\n        }\n        if (flag) {\n            for (int i = n - 1; i >= 0; i--) {\n                if (edges[i][1] - flag) continue;\n                u.init(n);\n                for (int j = 0; j < n; j++) {\n                    if (i == j) continue;\n                    u.merge(edges[j][0], edges[j][1]);\n                }\n\n                if (u.cnt != 1) {\n                    continue;\n                }\n                return edges[i];\n            }\n        }\n        queue<int> q;\n        vector<int> ret;\n        for (int i = 1; i <= n; i++) {\n            if (outdeg[i]) continue;\n            q.push(i);\n        }\n        while (!q.empty()) {\n            int ind = q.front();\n            q.pop();\n            outdeg[father[ind]] -= 1;\n            if (outdeg[father[ind]] == 0) q.push(father[ind]);\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            if (outdeg[edges[i][0]] && outdeg[edges[i][1]]) {\n                ret = edges[i];\n                break;\n            }\n        }\n        return ret;\n    }\n    UnionSet u;\n};\n")),(0,a.kt)("h3",{id:"9019-\u9664\u6cd5\u6c42\u503c"},"9.0.19. ",(0,a.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/evaluate-division/description/"},"\u9664\u6cd5\u6c42\u503c")),(0,a.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u53d8\u91cf\u5bf9\u6570\u7ec4 ",(0,a.kt)("inlineCode",{parentName:"p"},"equations")," \u548c\u4e00\u4e2a\u5b9e\u6570\u503c\u6570\u7ec4 ",(0,a.kt)("inlineCode",{parentName:"p"},"values")," \u4f5c\u4e3a\u5df2\u77e5\u6761\u4ef6\uff0c\u5176\u4e2d ",(0,a.kt)("inlineCode",{parentName:"p"},"equations[i] = [Ai, Bi]")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"values[i]")," \u5171\u540c\u8868\u793a\u7b49\u5f0f ",(0,a.kt)("inlineCode",{parentName:"p"},"Ai / Bi = values[i]")," \u3002\u6bcf\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"Ai")," \u6216 ",(0,a.kt)("inlineCode",{parentName:"p"},"Bi")," \u662f\u4e00\u4e2a\u8868\u793a\u5355\u4e2a\u53d8\u91cf\u7684\u5b57\u7b26\u4e32\u3002"),(0,a.kt)("p",null,"\u53e6\u6709\u4e00\u4e9b\u4ee5\u6570\u7ec4 ",(0,a.kt)("inlineCode",{parentName:"p"},"queries")," \u8868\u793a\u7684\u95ee\u9898\uff0c\u5176\u4e2d ",(0,a.kt)("inlineCode",{parentName:"p"},"queries[j] = [Cj, Dj]")," \u8868\u793a\u7b2c ",(0,a.kt)("inlineCode",{parentName:"p"},"j")," \u4e2a\u95ee\u9898\uff0c\u8bf7\u4f60\u6839\u636e\u5df2\u77e5\u6761\u4ef6\u627e\u51fa ",(0,a.kt)("inlineCode",{parentName:"p"},"Cj / Dj = ?")," \u7684\u7ed3\u679c\u4f5c\u4e3a\u7b54\u6848\u3002"),(0,a.kt)("p",null,"\u8fd4\u56de ",(0,a.kt)("strong",{parentName:"p"},"\u6240\u6709\u95ee\u9898\u7684\u7b54\u6848")," \u3002\u5982\u679c\u5b58\u5728\u67d0\u4e2a\u65e0\u6cd5\u786e\u5b9a\u7684\u7b54\u6848\uff0c\u5219\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"-1.0")," \u66ff\u4ee3\u8fd9\u4e2a\u7b54\u6848\u3002\u5982\u679c\u95ee\u9898\u4e2d\u51fa\u73b0\u4e86\u7ed9\u5b9a\u7684\u5df2\u77e5\u6761\u4ef6\u4e2d\u6ca1\u6709\u51fa\u73b0\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u9700\u8981\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"-1.0")," \u66ff\u4ee3\u8fd9\u4e2a\u7b54\u6848\u3002"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u6ce8\u610f\uff1a"),"\u8f93\u5165\u603b\u662f\u6709\u6548\u7684\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u6cd5\u8fd0\u7b97\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u9664\u6570\u4e3a 0 \u7684\u60c5\u51b5\uff0c\u4e14\u4e0d\u5b58\u5728\u4efb\u4f55\u77db\u76fe\u7684\u7ed3\u679c\u3002"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1\uff1a")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'\u8f93\u5165\uff1aequations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]\n\u8f93\u51fa\uff1a[6.00000,0.50000,-1.00000,1.00000,-1.00000]\n\u89e3\u91ca\uff1a\n\u6761\u4ef6\uff1aa / b = 2.0, b / c = 3.0\n\u95ee\u9898\uff1aa / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?\n\u7ed3\u679c\uff1a[6.0, 0.5, -1.0, 1.0, -1.0 ]\n')),(0,a.kt)("h1",{id:""}))}s.isMDXComponent=!0},8184:function(n,i,e){"use strict";i.Z=e.p+"assets/images/1600316277-YhGBBy-685.\u5197\u4f59\u8fde\u63a5II1-89a69aa32aad754bbc4acfa3b6091c8f.png"},72415:function(n,i,e){"use strict";i.Z=e.p+"assets/images/1600316290-fCDJSg-685.\u5197\u4f59\u8fde\u63a5II2-82672abac30c09478733e72586545e45.png"},34209:function(n,i,e){"use strict";i.Z=e.p+"assets/images/image-20201018110356663-969cd9cdfee41ac987a1ac951737d60b.png"},78025:function(n,i,e){"use strict";i.Z=e.p+"assets/images/image-20201018110407696-12829b61a09f915a025231ed43aa984f.png"},65554:function(n,i,e){"use strict";i.Z=e.p+"assets/images/image-20201018110431340-2e94e0b992effa739ff5de9adb9e804c.png"},59076:function(n,i,e){"use strict";i.Z=e.p+"assets/images/image-20201018110438419-e36fa1280c0a43c5aa0bba7c049c36ed.png"},25573:function(n,i,e){"use strict";i.Z=e.p+"assets/images/image-20210131134715524-f4bca8f907a05fbe788232fea3c71726.png"},58370:function(n,i,e){"use strict";i.Z=e.p+"assets/images/image-20210131145149668-1a15373ee193c11389cf5d5ffbf69e2b.png"}}]);