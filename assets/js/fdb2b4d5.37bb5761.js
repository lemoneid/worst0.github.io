(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[6944],{3905:function(n,e,t){"use strict";t.d(e,{Zo:function(){return o},kt:function(){return d}});var a=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function l(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function m(n,e){if(null==n)return{};var t,a,i=function(n,e){if(null==n)return{};var t,a,i={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var p=a.createContext({}),s=function(n){var e=a.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):l(l({},e),n)),t},o=function(n){var e=s(n.components);return a.createElement(p.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(n,e){var t=n.components,i=n.mdxType,r=n.originalType,p=n.parentName,o=m(n,["components","mdxType","originalType","parentName"]),c=s(t),d=i,k=c["".concat(p,".").concat(d)]||c[d]||u[d]||r;return t?a.createElement(k,l(l({ref:e},o),{},{components:t})):a.createElement(k,l({ref:e},o))}));function d(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var r=t.length,l=new Array(r);l[0]=c;var m={};for(var p in e)hasOwnProperty.call(e,p)&&(m[p]=e[p]);m.originalType=n,m.mdxType="string"==typeof n?n:i,l[1]=m;for(var s=2;s<r;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},53784:function(n,e,t){"use strict";t.r(e),t.d(e,{frontMatter:function(){return m},metadata:function(){return p},toc:function(){return s},default:function(){return u}});var a=t(22122),i=t(19756),r=(t(67294),t(3905)),l=["components"],m={id:"A2.\u6570\u7ec4\u548c\u94fe\u8868",title:"A2.\u6570\u7ec4\u548c\u94fe\u8868","typora-root-url":"../"},p={unversionedId:"Algorithm/A2.\u6570\u7ec4\u548c\u94fe\u8868",id:"Algorithm/A2.\u6570\u7ec4\u548c\u94fe\u8868",isDocsHomePage:!1,title:"\u6570\u7ec4\u548c\u94fe\u8868",description:"\u6570\u7ec4\u548c\u94fe\u8868\u7684\u533a\u522b",source:"@site/docs/2.Algorithm/A2.\u6570\u7ec4\u548c\u94fe\u8868.md",sourceDirName:"2.Algorithm",slug:"/Algorithm/A2.\u6570\u7ec4\u548c\u94fe\u8868",permalink:"/Algorithm/A2.\u6570\u7ec4\u548c\u94fe\u8868",editUrl:"https://github.com/worst0/wiki_note/edit/main/docs/2.Algorithm/A2.\u6570\u7ec4\u548c\u94fe\u8868.md",version:"current",frontMatter:{id:"A2.\u6570\u7ec4\u548c\u94fe\u8868",title:"A2.\u6570\u7ec4\u548c\u94fe\u8868","typora-root-url":"../"},sidebar:"Document\ud83d\udcbb",previous:{title:"\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5",permalink:"/Algorithm/A1.DataStructure"},next:{title:"\u6808,\u961f\u5217",permalink:"/Algorithm/A3.\u6808\u548c\u961f\u5217"}},s=[{value:"\u6570\u7ec4\u548c\u94fe\u8868\u7684\u533a\u522b",id:"\u6570\u7ec4\u548c\u94fe\u8868\u7684\u533a\u522b",children:[{value:"\u4ec0\u4e48\u662f\u968f\u673a\u8bbf\u95ee",id:"\u4ec0\u4e48\u662f\u968f\u673a\u8bbf\u95ee",children:[]}]},{value:"\u524d\u7f00\u548c\u95ee\u9898",id:"\u524d\u7f00\u548c\u95ee\u9898",children:[{value:"\u548c\u4e3aK\u7684\u6700\u957f\u5b50\u6570\u7ec4",id:"\u548c\u4e3ak\u7684\u6700\u957f\u5b50\u6570\u7ec4",children:[]},{value:"\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4",id:"\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4",children:[]}]},{value:"\u6570\u636e\u4e0e\u6876\u6392\u5e8f",id:"\u6570\u636e\u4e0e\u6876\u6392\u5e8f",children:[{value:"\u6700\u5927\u95f4\u8ddd",id:"\u6700\u5927\u95f4\u8ddd",children:[]},{value:"\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20III",id:"\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20iii",children:[]}]},{value:"\u6570\u7ec4 \u4e0ehash",id:"\u6570\u7ec4-\u4e0ehash",children:[]},{value:"\u7a7a\u95f4\u590d\u6742\u5ea6<code>O(1)</code>",id:"\u7a7a\u95f4\u590d\u6742\u5ea6o1",children:[{value:"\u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570",id:"\u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570",children:[]},{value:"\u7f3a\u5931\u7684\u6570\u5b57",id:"\u7f3a\u5931\u7684\u6570\u5b57",children:[]},{value:"\u77e9\u9635\u65cb\u8f6c",id:"\u77e9\u9635\u65cb\u8f6c",children:[]},{value:"\u77e9\u9635\u7f6e\u96f6",id:"\u77e9\u9635\u7f6e\u96f6",children:[]},{value:"\u989c\u8272\u5206\u7c7b\u6392\u5e8f-\u8377\u5170\u56fd\u65d7\u95ee\u9898",id:"\u989c\u8272\u5206\u7c7b\u6392\u5e8f-\u8377\u5170\u56fd\u65d7\u95ee\u9898",children:[]},{value:"\u65cb\u8f6c\u6570\u7ec4",id:"\u65cb\u8f6c\u6570\u7ec4",children:[]},{value:"\u79fb\u9664\u5143\u7d20",id:"\u79fb\u9664\u5143\u7d20",children:[]},{value:"\u5220\u9664\u91cd\u590d\u5143\u7d20II",id:"\u5220\u9664\u91cd\u590d\u5143\u7d20ii",children:[]},{value:"\u6c42\u4f17\u6570II",id:"\u6c42\u4f17\u6570ii",children:[]}]},{value:"\u65f6\u95f4\u590d\u6742\u5ea6<code>O(N)</code>",id:"\u65f6\u95f4\u590d\u6742\u5ea6on",children:[{value:"\u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef",id:"\u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef",children:[]},{value:"\u6700\u957f\u8fde\u7eed\u5b50\u5e8f\u5217",id:"\u6700\u957f\u8fde\u7eed\u5b50\u5e8f\u5217",children:[]}]},{value:"\u533a\u95f4\u64cd\u4f5c",id:"\u533a\u95f4\u64cd\u4f5c",children:[{value:"\u5408\u5e76\u533a\u95f4",id:"\u5408\u5e76\u533a\u95f4",children:[]},{value:"\u63d2\u5165\u533a\u95f4",id:"\u63d2\u5165\u533a\u95f4",children:[]}]},{value:"\u87ba\u65cb\u77e9\u9635",id:"\u87ba\u65cb\u77e9\u9635",children:[]},{value:"\u641c\u7d22\u77e9\u9635",id:"\u641c\u7d22\u77e9\u9635",children:[{value:"\u5355\u94fe\u8868",id:"\u5355\u94fe\u8868",children:[]},{value:"\u53cc\u94fe\u8868",id:"\u53cc\u94fe\u8868",children:[]},{value:"\u5faa\u73af\u94fe\u8868",id:"\u5faa\u73af\u94fe\u8868",children:[]},{value:"\u94fe\u8868\u7684\u5b58\u50a8\u65b9\u5f0f",id:"\u94fe\u8868\u7684\u5b58\u50a8\u65b9\u5f0f",children:[]}]},{value:"\u6539\u53d8\u94fe\u8868",id:"\u6539\u53d8\u94fe\u8868",children:[{value:"\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",id:"\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",children:[]},{value:"k\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868",id:"k\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868",children:[]},{value:"\u5408\u5e76\u4e24\u4e2a\u94fe\u8868",id:"\u5408\u5e76\u4e24\u4e2a\u94fe\u8868",children:[]},{value:"\u5408\u5e76k\u4e2a\u94fe\u8868",id:"\u5408\u5e76k\u4e2a\u94fe\u8868",children:[]},{value:"\u94fe\u8868\u91cd\u65b0\u6392\u5e8f",id:"\u94fe\u8868\u91cd\u65b0\u6392\u5e8f",children:[]}]}],o={toc:s};function u(n){var e=n.components,m=(0,i.Z)(n,l);return(0,r.kt)("wrapper",(0,a.Z)({},o,m,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"\u6570\u7ec4\u548c\u94fe\u8868\u7684\u533a\u522b"},"\u6570\u7ec4\u548c\u94fe\u8868\u7684\u533a\u522b"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5b58\u50a8",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u6570\u7ec4\u65f6\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u94fe\u8868\u4e0d\u9700\u8981\u8fde\u7eed"))),(0,r.kt)("li",{parentName:"ul"},"\u957f\u5ea6",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u6570\u7ec4\u7684\u957f\u5ea6\u9700\u8981\u9884\u5148\u786e\u5b9a\uff0c\u82e5\u8d85\u51fa\u6570\u7ec4\u5219\u4f1a\u6ea2\u51fa"),(0,r.kt)("li",{parentName:"ul"},"\u94fe\u8868\u7684\u957f\u5ea6\u662f\u52a8\u6001\u6269\u5c55\u7684"))),(0,r.kt)("li",{parentName:"ul"},"\u968f\u673a\u8bbf\u95ee",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u6570\u7ec4\u53ef\u4ee5\u968f\u673a\u8bbf\u95ee\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)"),(0,r.kt)("li",{parentName:"ul"},"\u94fe\u8868\u4e0d\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff0c\u5e73\u5747\u9700\u8981O(n)"))),(0,r.kt)("li",{parentName:"ul"},"\u63d2\u5165\u3001\u5220\u9664",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u6570\u7ec4\u5176\u5b9e\u4f4d\u7f6e\u7684\u63d2\u5165\u548c\u5220\u9664\uff0c \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)"),(0,r.kt)("li",{parentName:"ul"},"\u94fe\u8868\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)")))),(0,r.kt)("h3",{id:"\u4ec0\u4e48\u662f\u968f\u673a\u8bbf\u95ee"},"\u4ec0\u4e48\u662f\u968f\u673a\u8bbf\u95ee"),(0,r.kt)("p",null,"\u6bd4\u5982first\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740\uff0c\u73b0\u5728\u60f3\u8bbf\u95ee\u7b2cN\u4e2a\u5143\u7d20\u3002 \u968f\u673a\u8bbf\u95ee\uff1a\u76f4\u63a5first+N\uff0c\u4fbf\u53ef\u4ee5\u5f97\u5230\u7b2cN\u4e2a\u5143\u7d20\u7684\u5730\u5740\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u76f8\u90bb\u5143\u7d20\u662f\u6309\u987a\u5e8f\u8fde\u7eed\u5b58\u50a8\u7684\u3002\u6bd4\u5982\u666e\u901a\u6570\u7ec4\u5c31\u662f\u53ef\u968f\u673a\u8bbf\u95ee\u7684\u3002"),(0,r.kt)("h1",{id:"\u6570\u7ec4"},"\u6570\u7ec4"),(0,r.kt)("h2",{id:"\u524d\u7f00\u548c\u95ee\u9898"},"\u524d\u7f00\u548c\u95ee\u9898"),(0,r.kt)("p",null,"\u5728\u6c42\u53d6",(0,r.kt)("strong",{parentName:"p"},"\u6570\u7ec4\u533a\u95f4"),"\u76f8\u5173\u95ee\u9898\uff0c\u524d\u7f00\u548c\u8fd9\u4e00\u6280\u5de7\u5f88\u6709\u7528\u3002\u524d\u7f00\u548c\u7684\u601d\u8def\u662f\u8fd9\u6837\u7684\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6570\u7ec4 nums\uff0c\u6211\u4eec ",(0,r.kt)("strong",{parentName:"p"},"\u989d\u5916\u5f00\u8f9f\u4e00\u4e2a\u524d\u7f00\u548c\u6570\u7ec4\u8fdb\u884c\u9884\u5904\u7406")," \uff1a"),(0,r.kt)("p",null,"\u6bd4\u5982\u6c42\u53d6",(0,r.kt)("inlineCode",{parentName:"p"},"nums[i..j]"),"\u7684\u548c\uff0c\u591a\u6b21\u8c03\u7528\u8fd9\u4e2a\u63a5\u53e3\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u4f1a\u5f88\u9ad8\u3002\u5982\u679c\u4f7f\u7528\u4e00\u4e2a\u524d\u7f00\u548c\u5904\u7406\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"    int n = nums.size();\n    // \u524d\u7f00\u548c\u6570\u7ec4\n    std::vector<int> preSum(n+1);\n    preSum[0] = 0;\n    for (int i = 0; i < n; i++)\n        preSum[i + 1] = preSum[i] + nums[i];\n")),(0,r.kt)("p",null,"\u90a3\u4e48\u8ba1\u7b97",(0,r.kt)("inlineCode",{parentName:"p"},"sum(i,j)"),"\u53ea\u662f\u9700\u8981 ",(0,r.kt)("inlineCode",{parentName:"p"},"preSum(j+1) - preSum(i)")," \u3002",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)"),"\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5b8c\u6210\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u65e2\u6709\u6b63\u6570\u4e5f\u6709\u8d1f\u6570\uff0c\u4f7f\u7528\u524d\u7f00\u548c"),(0,r.kt)("li",{parentName:"ul"},"\u5168\u662f\u6b63\u6570\uff0c\u4f7f\u7528\u53cc\u6307\u9488"),(0,r.kt)("li",{parentName:"ul"},"\u5728\u4f18\u5316\u51cf\u5c11\u5d4c\u5957\u5faa\u73af\u65f6\uff0c\u7ecf\u5e38\u53ef\u4ee5\u8003\u8651 ",(0,r.kt)("inlineCode",{parentName:"li"},"hashtable"),"\uff0c\u53ef\u4ee5\u51cf\u5c11\u4e00\u5c42",(0,r.kt)("inlineCode",{parentName:"li"},"for/while"),"\u5faa\u73af\u3002")),(0,r.kt)("h3",{id:"\u548c\u4e3ak\u7684\u6700\u957f\u5b50\u6570\u7ec4"},"\u548c\u4e3aK\u7684\u6700\u957f\u5b50\u6570\u7ec4"),(0,r.kt)("p",null,"\u524d\u7f00\u548c\uff1a\u6c42\u51fa\u4ee5\u6570\u5b57",(0,r.kt)("inlineCode",{parentName:"p"},"j (0 <= j < n)"),"\u4e3a\u7ed3\u675f\u7684\u4e14\u7d2f\u52a0\u548c ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," \u7684\u6700\u957f\u5b50\u6570\u7ec4\uff0c\u518d\u6c42\u5b8c\u6240\u6709\u7684\u4f4d\u7f6e\u7684\u6570\u5b57\u7684\u6700\u957f\u5b50\u6570\u7ec4\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u5728\u5176\u4e2d\u4e86\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("msup",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msup"},"n"),(0,r.kt)("mn",{parentName:"msup"},"2")),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n^2)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1.064108em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141079999999999em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"2")))))))),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"))))),"\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,r.kt)("p",null,"\u4f18\u5316\uff1a\u5047\u8bbe",(0,r.kt)("inlineCode",{parentName:"p"},"K =40"),"\uff0c\u4ee5\u4f4d\u7f6e ",(0,r.kt)("inlineCode",{parentName:"p"},"j")," \u7ed3\u5c3e\u7684\u5b50\u6570\u7ec4",(0,r.kt)("inlineCode",{parentName:"p"},"nums[i, j]"),"\u533a\u95f4\u548c\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"100")," \uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b50\u6570\u7ec4\u7684\u9996\u6570\u5b57",(0,r.kt)("inlineCode",{parentName:"p"},"nums[i]"),"\u7d2f\u52a0\u5230\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"60"),"\u7684\u5730\u65b9",(0,r.kt)("inlineCode",{parentName:"p"},"pos"),"\uff0c\u90a3\u4e48 ",(0,r.kt)("inlineCode",{parentName:"p"},"pos")," \u5230 ",(0,r.kt)("inlineCode",{parentName:"p"},"j")," \u7684\u8ddd\u79bb\uff0c\u5c31\u662f\u4ee5 ",(0,r.kt)("inlineCode",{parentName:"p"},"j")," \u7ed3\u5c3e\u7684\u6700\u957f\u5b50\u6570\u7ec4\u3002\u6839\u636e\u8fd9\u4e2a\u903b\u8f91\uff0c\u5c31\u53ef\u4ee5\u6c42\u51fa\u6700\u957f\u5b50\u6570\u7ec4\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution{\n     int maxLength(std::vector<int> arr,  int k) { \n        if(arr.empty()) return 0;\n\n        std::unordered_map<int, int> map_; // \u4f4d\u7f6e - \u7d22\u5f15\n        map_.emplace(0,-1);    // \u54e8\u5175\u8282\u70b9\n        int len =0;\n        int sum =0;\n        for(int j=0; j < arr.size(); ++j) { \n            sum += arr[j];    // \u4ee5j\u7ed3\u5c3e\u7684\u5b50\u6570\u7ec4\u548c\n\n            // \u6c42\u4ee5j\u7ed3\u5c3e\u7684\u5b50\u6570\u7ec4\u4e2d\u662f\u5426\u5305\u542b sum-k\n            // nums[i, j] --\x3e nums[i, t] U nums[t+1, j]\n            if(map_.find(sum-k) != map_.end()) \n            {\n                len = std::max(j - map_[sum -k], len);\n            }\n\n            // \u8bb0\u5f55\u4ee5 j \u4e3a\u7ed3\u5c3e\u7684\u5b50\u6570\u7ec4\u548c\n            // \u5982\u679c\u4e4b\u524d\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u5c31\u53ea\u8bb0\u5f55\u7b2c\u4e00\u6b21\n            if(map_.find(sum) == map_.end()) {\n                map_.emplace(sum, j);\n            }\n        }\n\n        return len;\n    }\n};\n")),(0,r.kt)("h4",{id:"\u6269\u5c55"},"\u6269\u5c55"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u4e00\u4e2a\u8fde\u7eed\u5b50\u6570\u7ec4\u4e2d\uff0c\u5947\u6570\u548c\u5076\u6570\u76f8\u7b49\u7684\u6700\u957f\u5b50\u6570\u7ec4\uff0c\u6216\u80051\u548c2\u76f8\u7b49\u7684\u6700\u957f\u7684\u5b50\u6570\u7ec4\u7b49\u7c7b\u4f3c\u95ee\u9898\uff0c\u90fd\u53ef\u4ee5\u5316\u4e3a\u8fd9\u4e2a\u95ee\u9898\uff1a\u5c06\u5947\u6570\u8bbe\u8ba1\u4e3a-1\uff0c\u5076\u6570\u8bbe\u8ba1\u4e3a1\uff0c\u90a3\u4e48\u5c31\u662f\u6c42\u548c\u4e3a0\u7684\u6700\u957f\u5b50\u6570\u7ec4\u3002\n")),(0,r.kt)("h3",{id:"\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/minimum-size-subarray-sum/"},"\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4")),(0,r.kt)("p",null,"\u8fd9\u9898\u6570\u7ec4\u91cc\u5168\u662f\u6b63\u6570\uff0c\u53ef\u4ee5\u7701\u53bb ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," \u4f7f\u7528\u53cc\u6307\u9488\uff1a\u5f00\u59cb\u65f6 ",(0,r.kt)("inlineCode",{parentName:"p"},"L, R")," \u90fd\u662f\u6307\u5411\u5f00\u5934"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sum[L, R] <  target"),"\u65f6\uff0c++R"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sum[L, R] >=  target"),"\u65f6\uff0c++L\uff0c\u5e76\u4e14\u66f4\u65b0\u6700\u77ed\u957f\u5ea6")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  class Solution {\n  public:\n      int minSubArrayLen(int target, const std::vector<int>& nums) {\n        if(nums.empty()) return 0; \n\n        int L=0, R=1, sum=nums[0];\n        int minLength =INT_MAX;\n        int len = nums.size();\n        while(R < len) { \n          if(sum < target) \n          { \n            sum += nums[R];\n            ++R;\n          } \n          else \n          {\n            minLength = std::min(minLength, R-L); \n            sum -= nums[L];\n            ++L;\n          }\n        }\n        // \u56e0\u4e3a L \u8fd8\u6ca1\u5230\u5934\uff0c\u4ecd\u7136\u53ef\u80fd\u6ee1\u8db3\u6761\u4ef6\n        while(L < len && sum >= target) { \n          minLength = std::min(minLength, len - L);\n          sum -= nums[L];\n          ++L;\n        }\n\n        return minLength == INT_MAX ? 0 : minLength;\n      }\n  };\n")),(0,r.kt)("h2",{id:"\u6570\u636e\u4e0e\u6876\u6392\u5e8f"},"\u6570\u636e\u4e0e\u6876\u6392\u5e8f"),(0,r.kt)("h3",{id:"\u6700\u5927\u95f4\u8ddd"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/maximum-gap/"},"\u6700\u5927\u95f4\u8ddd")),(0,r.kt)("p",null,"\u6876\u6392\u5e8f\uff1a "),(0,r.kt)("p",null,"\u6876\u7684\u6570\u91cf ",(0,r.kt)("inlineCode",{parentName:"p"},"N")," \u6bd4\u6570\u7ec4\u5143\u7d20\u4e2a\u6570\u591a1\u3002\u904d\u5386\u4e00\u6b21\u6570\u7ec4\uff0c\u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c",(0,r.kt)("inlineCode",{parentName:"p"},"max"),"\u548c\u6700\u5c0f\u503c",(0,r.kt)("inlineCode",{parentName:"p"},"min"),"\uff0c\u5e76\u4e14\u5c06\u6570\u7ec4\u5143\u7d20\u4ee5\u95f4\u9694 ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"m"),(0,r.kt)("mi",{parentName:"mrow"},"a"),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow"},"\u2212"),(0,r.kt)("mi",{parentName:"mrow"},"m"),(0,r.kt)("mi",{parentName:"mrow"},"i"),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"/"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"N"),(0,r.kt)("mo",{parentName:"mrow"},"+"),(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(max - min) /(N+1)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mord"},"/"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"1"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))," \u5206\u914d\u5230\u5404\u4e2a\u6876\u4e2d\u3002\u518d\u904d\u5386\u4e00\u6b21\uff0c\u5c06\u6570\u653e\u5230\u5404\u81ea\u7684\u6876\u4e2d\u30020\u53f7\u6876\u80af\u5b9a\u6709\u653e\u6700\u5c0f\u7684\u6570\uff0cN\u53f7\u6876\u80af\u5b9a\u6709\u653e\u6700\u5927\u7684\u6570\u3002"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u76f8\u90bb\u6570\uff1a\u5373\u6392\u5e8f\u597d\u4e4b\u540e\u76f8\u90bb\u4e24\u4e2a\u5dee\u503c\u6700\u5927\u7684\u5143\u7d20\u3002"),(0,r.kt)("p",{parentName:"blockquote"},"\u8981\u4e48\u6765\u81ea\u4e8e\u6876\u5185\u90e8\uff0c\u8981\u4e48\u6765\u81ea\u4e8e\u8de8\u6876\uff0c\u540e\u4e00\u4e2a\u975e\u7a7a\u6876\u7684\u6700\u5c0f\u503c\uff0c\u524d\u4e00\u4e2a\u975e\u7a7a\u6876\u7684\u6700\u5927\u503c\u3002\u800c\u8bbe\u7f6e\u4e00\u4e2a\u7a7a\u6876\u662f\u4e3a\u4e86\u4e0d\u8003\u8651\u6876\u5185\u7684\u76f8\u90bb\u6570\u3002\u56e0\u4e3a\u6876\u4e4b\u95f4\u7684\u95f4\u8ddd\u80af\u5b9a\u5927\u4e8e\u6876\u5185\u6570\u7684\u95f4\u8ddd\u3002"),(0,r.kt)("p",{parentName:"blockquote"},"\u56e0\u6b64\uff0c\u4e00\u4e2a\u6876\u5185\u53ea\u9700\u8981\u7559\u4e0b\u4e24\u4e2a\u6570\uff1a\u8fd9\u4e2a\u6876\u533a\u95f4\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002")),(0,r.kt)("p",null,"\u4ee3\u7801\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n  int maximumGap(const std::vector<int>& nums) {\n    if(nums.size() <2) return 0;\n\n    int n = nums.size();\n    auto pair = std::minmax_element(nums.begin(), nums.end());\n    int numsMax = *(pair.second);\n    int numsMin = *(pair.first);\n\n    if(numsMax == numsMin) return 0;\n\n    // \u5982\u679cnumsMax -numsMin \u7684\u5dee\u503c\u5c0f\u4e8e n-1\uff0c\u90a3\u4e48 intervl \u5c31\u7b49\u4e8e0.\n    int interval= std::max(1, (numsMax -numsMin) / (n-1)); // \u95f4\u8ddd \n    int buckNum = (numsMax -numsMin)/interval +1;          // \u591a\u4e00\u4e2a\u7a7a\u6876\u51fa\u6765\n    std::vector<Bucket> buckets(buckNum); \n\n    for(const auto& num : nums) { \n      int Id = (num - numsMin) / interval; // \u843d\u5728\u7b2c\u51e0\u4e2a\u6876\u91cc\n     \n      // \u66f4\u65b0\u6700\u503c\n      if(buckets[Id].minval > num) \n      {\n        buckets[Id].minval = num;\n        buckets[Id].used = true;\n      }\n      \n      if(buckets[Id].maxval < num)\n      {\n        buckets[Id].maxval = num;\n        buckets[Id].used = true;\n      } \n    }\n\n    // numsMin \u5c31\u662f\u7b2c\u4e00\u4e2a\u6876\u91cc\u6700\u5c0f\u5143\u7d20\n    int maxGap=0, prevBucketMax = numsMin;\n    for(const auto& bucket : buckets) { \n      if(!bucket.used) \n        continue;\n\n      maxGap = std::max(maxGap, bucket.minval - prevBucketMax);\n      prevBucketMax = bucket.maxval;\n    }\n\n    return maxGap;\n  }\n\nprivate:\n  struct Bucket { \n    int minval;\n    int maxval;\n    bool used;\n\n    constexpr Bucket()\n    : minval(std::numeric_limits<int>::max()),\n      maxval(std::numeric_limits<int>::min()),\n      used(false)\n    { }\n  };\n};\n")),(0,r.kt)("h3",{id:"\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20iii"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/contains-duplicate-iii/"},"\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20III")),(0,r.kt)("p",null,"\u8fd9\u4e5f\u662f\u4f7f\u7528\u6876\u6392\u5e8f\u89e3\u51b3\u7684\u4e00\u9053\u9898\u3002"),(0,r.kt)("p",null,"\u5c06\u6bcf\u4e2a\u6876\u7684\u5927\u5c0f\u8bbe\u7f6e\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"t+1"),"\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u6876\u7684\u4e4b\u95f4\u6570\u636e\u7684\u8ddd\u79bb\u90fd\u4e0d\u5927\u4e8e",(0,r.kt)("inlineCode",{parentName:"p"},"t"),"\u3002\u56e0\u6b64\u5982\u679c\u4e00\u4e2a\u6876\u7684\u5143\u7d20\u8d85\u8fc71\uff0c\u90a3\u4e48\u5c31\u662f\u6ee1\u8db3\u6761\u4ef6\u3002\u5426\u5219\u53bb\u76f8\u90bb\u7684\u4e24\u4e2a\u6876\u4e2d\u6392\u67e5\uff0c\u770b\u662f\u5426\u5b58\u5728\u8ddd\u79bb\u5c0f\u4e8e",(0,r.kt)("inlineCode",{parentName:"p"},"t"),"\u7684\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u6876\u7684\u6570\u76ee\u5c31\u8bbe\u7f6e\u4e3ak\u4e2a\uff0c\u4f7f\u5f97\u6240\u6709\u7684\u6876\u5728\u4f4d\u7f6e\u4e0a\u6ee1\u8db3\u6761\u4ef6\u3002\u5f53\u6876\u7684\u6570\u76ee\u8d85\u8fc7 ",(0,r.kt)("inlineCode",{parentName:"li"},"k")," \u4e2a\u5c31\u5220\u9664\u6700\u524d\u9762\u7684\u6876\uff0c\u56e0\u4e3a\u90a3\u4e2a\u4f4d\u7f6e\u7684\u6876\u5df2\u7ecf\u4e0d\u5728\u5f53\u524d\u4f4d\u7f6e\u7684\u6709\u6548\u7b54\u6848\u8303\u56f4\u5185\u3002",(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("inlineCode",{parentName:"li"}," if(i >=k) bucket.erase(getId(nums[i-k], width));")),(0,r.kt)("li",{parentName:"ul"},"\u5f53\u5b58\u5728\u8d1f\u6570\u65f6\uff0c\u4e3a\u83b7\u5f97\u6b63\u786e\u7684\u6876id\uff0c\u9700\u8981\u4e00\u70b9\u5c0f\u6280\u5de7\uff1a",(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("inlineCode",{parentName:"li"},"return x < 0 ? (x+1)/width-1 : x / width;")),(0,r.kt)("li",{parentName:"ul"},"\u4e3a\u4e86\u9632\u6b62\u6570\u636e\u6ea2\u51fa\uff0c\u589e\u52a0\u6570\u636e\u8303\u56f4 : ",(0,r.kt)("inlineCode",{parentName:"li"},"int -> int64_t"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  class Solution {\n  public:\n      bool containsNearbyAlmostDuplicate(std::vector<int>& nums, int k, int t) {\n          if(t <0) return false;\n\n          std::unordered_map<int64_t, int64_t> bucket; // id - \u5143\u7d20\n\n          int64_t width = static_cast<int64_t>(t) +1;\n          for(int i=0; i < nums.size(); ++i) {\n              int64_t num = nums[i];\n              int64_t id = getId(num, width);\n\n\n              if(bucket.count(id)                                         ||\n                bucket.count(id-1) && std::abs(num - bucket[id-1]) <width || \n                bucket.count(id+1) && std::abs(num - bucket[id+1]) <width )\n                return true;\n\n              // \u6876\u7684\u7f16\u53f7 - \u6570\n              bucket.emplace(id, static_cast<int64_t>(num));\n              \n              // \u8ba9bucket\u4e2d\u53ea\u6709k\u4e2a\u6876\uff0ci==k\u65f6\u8bf4\u660e\uff0c\u5df2\u7ecf\u6709k+1\u4e2a\u6876\n              if(i >=k) \n              {\n                  bucket.erase(getId(nums[i-k], width));\n              }\n          }\n\n          return false;\n      }\n  private:\n      inline int64_t getId(int64_t x, int64_t width) { \n          return x < 0 ? (x+1)/width-1 : x / width;\n      }\n  };\n")),(0,r.kt)("h2",{id:"\u6570\u7ec4-\u4e0ehash"},"\u6570\u7ec4 \u4e0ehash"),(0,r.kt)("p",null,"hash\u8868\u5c31\u662f\u7531\u4e8e\u6570\u7ec4\u5b9e\u73b0\u7684\uff0c\u5f88\u591a\u4e8b\u60c5\uff0c\u5728\u6570\u91cf\u91cf\u4e0d\u5927\u7684\u65f6\u5019\uff0c\u5e38\u7528\u6570\u7ec4\u6765\u5b9e\u73b0hash\u8868\uff1a\u6570\u7ec4\u4e0b\u6807\u4e3akey\uff0c\u5185\u5bb9\u4e3avalue\u3002\u5e38\u89c1\u7684\u662f\u5b57\u4e32\u6620\u5c04\u3002\u4e0d\u4ec5\u9ad8\u6548\uff0c\u4e14\u66f4\u80fd\u63d0\u9ad8\u5185\u5b58\u5229\u7528\u7387\u3002"),(0,r.kt)("h2",{id:"\u7a7a\u95f4\u590d\u6742\u5ea6o1"},"\u7a7a\u95f4\u590d\u6742\u5ea6",(0,r.kt)("inlineCode",{parentName:"h2"},"O(1)")),(0,r.kt)("p",null,"\u9650\u5236\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)"),"\uff0c\u4f7f\u5f97\u9898\u76ee\u8f83\u4e3a\u68d8\u624b\u3002"),(0,r.kt)("h3",{id:"\u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/first-missing-positive/"},"\u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570")),(0,r.kt)("p",null,"\u5982\u679c\u662f\u6709\u5e8f\u6ca1\u6709\u7f3a\u5931\u7684\u6570\u7ec4\uff0c\u90a3\u4e48\u6570\u5b57",(0,r.kt)("inlineCode",{parentName:"p"},"nums[i]"),"\u5e94\u8be5\u51fa\u73b0\u5728\u4f4d\u7f6e",(0,r.kt)("inlineCode",{parentName:"p"},"nums[i]-1"),"\u5904\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"array :  1 2 3 4 ...\nindex :  0 1 2 3 ...\n")),(0,r.kt)("p",null,"\u5bf9\u4e8e\u7ed9\u51fa\u7684\u65e0\u5e8f\u6570\u7ec4\u4e2d\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"nums[i]"),"\u5982\u679c\u4e0d\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"nums[i]-1"),"\u5904\uff0c\u90a3\u4e48\u5c31\u5c06\u5176\u653e\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u5904\u3002\u5f53\u5bf9\u6240\u6709\u7684\u5143\u7d20\u5904\u7406\u5b8c\uff0c\u904d\u5386\u4e00\u904d\u5c31\u53ef\u4ee5\u77e5\u9053\u7b54\u6848\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  class Solution {\n  public:\n      int firstMissingPositive(std::vector<int>& nums) {\n          int length = nums.size(); \n\n          for(int i=0; i < length; ++i) {  \n              /// @brief: \u5c06\u6570\u503c\u4e3a nums[i] \u7684\u6570\u6620\u5c04\u5230\u4e0b\u6807\u4e3a nums[i] - 1 \u7684\u4f4d\u7f6e\n              ///         \u5982\u679c\u662f0\u548c\u8d1f\u6570\uff0c \u76f4\u63a5\u5ffd\u7565\n              /// @b \u8fd9\u91cc\u662fwhile\u5faa\u73af\n              while(0 < nums[i] && nums[i] <= length && nums[nums[i] -1] != nums[i]) { \n                  std::swap(nums[nums[i] -1], nums[i]);\n              }\n          }\n\n          for(int i=0; i < length; ++i) { \n              if(nums[i] != i+1) \n                  return i+1;\n          }\n\n          return length +1;\n      }\n  };\n")),(0,r.kt)("h3",{id:"\u7f3a\u5931\u7684\u6570\u5b57"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/missing-number/"},"\u7f3a\u5931\u7684\u6570\u5b57")),(0,r.kt)("p",null,"\u4f7f\u7528\u4f4d\u8fd0\u7b97\uff1a\u5f02\u6216\u3002\u56e0\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"nums[i]"),"\u7684\u8303\u56f4\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"[0,n]"),"\uff0c\u5171",(0,r.kt)("inlineCode",{parentName:"p"},"n+1"),"\u4e2a\u6570\uff0c\u800c\u4e0b\u6807\u7684\u8303\u56f4\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"[0,n-1]"),"\uff0c\u5171n\u4e2a\u6570\u3002\u56e0\u6b64\u80af\u5b9a\u7f3a\u5931\u4e00\u4e2a\u6b63\u6570\u3002\u53ea\u9700\u8981\u5c06 ",(0,r.kt)("inlineCode",{parentName:"p"},"i ^ nums[i]"),"\u3002\u4f46\u662f\u6709\u53ef\u80fd\u6700\u540e\u7f3a\u5931\u7684\u662fn\uff0c\u56e0\u6b64\u9700\u8981\u5c06\u7ed3\u679c\u521d\u59cb\u5316\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"n"),"\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    // \u5982\u679c\u90fd\u51fa\u73b0\u4e86\uff0c\u90a3\u4e48\u6570\u5b57\u548c\u5176\u4e0b\u6807\u5e94\u8be5\u662f\u76f8\u7b49\u7684\n    // \u7b2c\u4e00\u4e2a\u4e0d\u7b49\u7684\uff0c\u5c31\u662f\u7f3a\u5931\u7684\n    int missingNumber(std::vector<int>& nums) {\n        int length = nums.size(); \n        int result = length; // \u56e0\u4e3a\u4e0b\u6807\u53ea\u80fd\u662f 0~n-1d\uff0c\u4e3a\u4e86\u5f25\u8865n\uff0c\u6240\u6709\u521d\u59cb\u5316\u4e3an\n\n        for(int i =0; i <length; ++i) { \n            result ^= i ^ nums[i]; \n        }\n\n        return result;\n    }\n};\n\n")),(0,r.kt)("h3",{id:"\u77e9\u9635\u65cb\u8f6c"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/rotate-image/"},"\u77e9\u9635\u65cb\u8f6c")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u4ece\u6700\u5916\u5c42\u5230\u6700\u91cc\u5c42\uff0c\u56db\u4e2a\u5750\u6807\u4e4b\u95f4\u7684\u4ea4\u6362\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u4e3a\u9632\u6b62\u65cb\u8f6c\u91cd\u590d\uff0c\u5373\u9700\u8981\u8003\u8651\u9650\u5236\u6761\u4ef6")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <vector>\n\nclass Solution {\npublic:\n    void rotate(std::vector<std::vector<int>>& matrix) {\n        \n      int length = matrix.size(); \n\n      for(int i=0; i < (length +1)>>1; ++i) {  \n        for(int j=0; j < length >>1; ++j) {  \n          int c1 = length-1 -j;\n          int c2 = length-1 -i;\n          // \u9006\u65f6\u9488\u65cb\u8f6c\n          // \u4ece matrix[i][j]\u7684 \u4e0a\u4e00\u4e2a \u4f4d\u7f6e\u5f00\u59cb\n          // \u5230 matrix[i][j] \u7ed3\u675f\n          // \u5177\u4f53\u9762\u8bd5\u7684\u65f6\u5019\uff0c\u60f3\u4e0d\u8d77\u5c31\u7528\u4e00\u4e2a\u70b9\u6765\u5177\u4f53\u5316\n          int start = matrix[c1][i];\n          matrix[c1][i]  = matrix[c2][c1];\n          matrix[c2][c1] = matrix[j][c2];\n          matrix[j][c2]  = matrix[i][j];\n          matrix[i][j]   = start;\n        }\n      }\n    }\n};\n")),(0,r.kt)("h3",{id:"\u77e9\u9635\u7f6e\u96f6"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/set-matrix-zeroes/"},"\u77e9\u9635\u7f6e\u96f6")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u7b2c\u4e00\u6b21\u904d\u5386\uff1a\u4f4d\u7f6e",(0,r.kt)("inlineCode",{parentName:"li"},"(i,j)")," \u4e3a0\uff0c\u90a3\u4e48\u4f7f\u5f97\u6b64\u4f4d\u7f6e\u7684\u884c\u9996",(0,r.kt)("inlineCode",{parentName:"li"},"(i,0)"),"\u548c\u5217\u9996",(0,r.kt)("inlineCode",{parentName:"li"},"(0,j)"),"\u90fd\u8bbe\u7f6e\u4e3a0 "),(0,r.kt)("li",{parentName:"ul"},"\u7b2c\u4e8c\u6b21\u904d\u5386\uff1a\u4f4d\u7f6e",(0,r.kt)("inlineCode",{parentName:"li"},"(i,j)")," \u662f\u5426\u4e3a0\uff0c\u53d6\u51b3\u4e8e\u5176\u884c\u9996\u548c\u884c\u5c3e\u662f\u5426\u662f0"),(0,r.kt)("li",{parentName:"ul"},"\u5bf9\u4e8e\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\u8981\u5355\u72ec\u5904\u7406\uff0c\u5426\u5219\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\u67090\uff0c\u8ba9\u7b2c\u4e00\u884c/\u7b2c\u4e00\u5217\u7f6e\u4e3a0\uff0c\u90a3\u4e48\u6240\u6709\u5143\u7d20\u7684\u884c\u548c\u9996\u90fd\u662f0\uff0c\u6574\u4e2a\u77e9\u9635\u90fd\u4f1a\u8bbe\u7f6e\u662f0")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  class Solution {\n  public:\n      void setZeroes(vector<vector<int>>& matrix) {\n          \n        int rows = matrix.size();\n        int cols = matrix[0].size();\n\n        bool firstCol =false;\n\n        // \u5148\u5355\u72ec\u5904\u7406\u7b2c\u4e00\u5217\n        for(int row=0; row < rows; ++row) {\n          if(matrix[row][0] ==0) { \n            firstCol =true;\n            break;\n          } \n        }\n\n        for(int row=0; row < rows; ++row) { \n          for(int col=1; col < cols; ++col) { \n\n            if(matrix[row][col] ==0) { \n              matrix[row][0] = 0; // \u884c\u9996\n              matrix[0][col] = 0; // \u5217\u9996\n            }\n          }\n        }\n\n        /// @brief: \u8bbe\u7f6e0\n        for(int row=1; row < rows; ++row) { \n          for(int col=1; col < cols; ++col) { \n\n            if(matrix[row][0]==0 || matrix[0][col]==0) \n              matrix[row][col] =0;\n          }\n        }\n        /// @biref: \u7b2c\u4e00\u884c\n        if(matrix[0][0] ==0) \n        { \n          std::fill_n(matrix[0].begin(), cols, 0);\n        }\n        /// @biref: \u7b2c\u4e00\u5217\n        if(firstCol) { \n          for(int row=0; row < rows; ++row) {\n            matrix[row][0] =0;\n          }\n        }\n        // return;\n      }\n  };\n")),(0,r.kt)("h3",{id:"\u989c\u8272\u5206\u7c7b\u6392\u5e8f-\u8377\u5170\u56fd\u65d7\u95ee\u9898"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/sort-colors/"},"\u989c\u8272\u5206\u7c7b\u6392\u5e8f-\u8377\u5170\u56fd\u65d7\u95ee\u9898")),(0,r.kt)("p",null,"\u4e09\u4e2a\u6307\u9488\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002 "),(0,r.kt)("p",null,"\u6211\u4eec\u7528\u4e09\u4e2a\u6307\u9488(",(0,r.kt)("inlineCode",{parentName:"p"},"p0"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"p2")," \u548c",(0,r.kt)("inlineCode",{parentName:"p"},"curr"),")\u5206\u522b\u6765\u8ffd\u8e2a ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," \u7684\u6700\u53f3\u8fb9\u754c\uff0c2\u7684\u6700\u5de6\u8fb9\u754c\u548c\u5f53\u524d\u8003\u8651\u7684\u5143\u7d20\u3002  "),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"\u989c\u8272\u5206\u7c7b_\u56fe\u793a",src:t(95401).Z})),(0,r.kt)("p",null,"\u8fc7\u7a0b"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u521d\u59cb\u53160\u7684\u6700\u53f3\u8fb9\u754c\uff1a",(0,r.kt)("inlineCode",{parentName:"li"},"p0 = 0"),"\u3002\u5728\u6574\u4e2a\u7b97\u6cd5\u6267\u884c\u8fc7\u7a0b\u4e2d ",(0,r.kt)("inlineCode",{parentName:"li"},"nums[idx < p0] = 0"),"."),(0,r.kt)("li",{parentName:"ul"},"\u521d\u59cb\u53162\u7684\u6700\u5de6\u8fb9\u754c\uff1a",(0,r.kt)("inlineCode",{parentName:"li"},"p2 = n - 1"),"\u3002\u5728\u6574\u4e2a\u7b97\u6cd5\u6267\u884c\u8fc7\u7a0b\u4e2d ",(0,r.kt)("inlineCode",{parentName:"li"},"nums[idx > p2] = 2"),"."),(0,r.kt)("li",{parentName:"ul"},"\u521d\u59cb\u5316\u5f53\u524d\u8003\u8651\u7684\u5143\u7d20\u5e8f\u53f7\uff1a",(0,r.kt)("inlineCode",{parentName:"li"},"curr = 0"),".")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"While curr <= p2 "),":  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u82e5 ",(0,r.kt)("inlineCode",{parentName:"li"}," nums[curr] = 0")," \uff1a\u4ea4\u6362\u7b2c ",(0,r.kt)("inlineCode",{parentName:"li"},"curr"),"\u4e2a \u548c \u7b2c",(0,r.kt)("inlineCode",{parentName:"li"},"p0"),"\u4e2a \u5143\u7d20\uff0c\u5e76\u5c06\u6307\u9488",(0,r.kt)("strong",{parentName:"li"},"\u90fd\u5411\u53f3\u79fb"),"\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u82e5 ",(0,r.kt)("inlineCode",{parentName:"li"},"nums[curr] = 2")," \uff1a\u4ea4\u6362\u7b2c ",(0,r.kt)("inlineCode",{parentName:"li"},"curr"),"\u4e2a\u548c\u7b2c ",(0,r.kt)("inlineCode",{parentName:"li"},"p2"),"\u4e2a\u5143\u7d20\uff0c\u5e76\u5c06 ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"p2")," \u6307\u9488\u5de6\u79fb"),"\u3002",(0,r.kt)("inlineCode",{parentName:"li"},"curr")," \u4e0e ",(0,r.kt)("inlineCode",{parentName:"li"},"p2")," \u4ea4\u6362\u7684\u503c\uff0c",(0,r.kt)("inlineCode",{parentName:"li"},"curr"),"\u672a\u626b\u63cf\uff0c\u8981\u505c\u4e0b\u6765\u626b\u63cf\u4e00\u4e0b\uff0c\u6240\u4ee5",(0,r.kt)("inlineCode",{parentName:"li"},"curr"),"\u4e0d\u7528",(0,r.kt)("inlineCode",{parentName:"li"},"++"),"\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u82e5 ",(0,r.kt)("inlineCode",{parentName:"li"},"nums[curr] = 1")," \uff1a\u5c06\u6307\u9488 ",(0,r.kt)("inlineCode",{parentName:"li"},"curr"),"\u53f3\u79fb\n\u56e0\u4e3a",(0,r.kt)("inlineCode",{parentName:"li"},"curr"),"\u5de6\u8fb9\u7684\u503c\u5df2\u7ecf\u626b\u63cf\u8fc7\u4e86\uff0c\u6240\u4ee5",(0,r.kt)("inlineCode",{parentName:"li"},"curr"),"\u8981",(0,r.kt)("inlineCode",{parentName:"li"},"++"),"\u7ee7\u7eed\u626b\u63cf\u4e0b\u4e00\u4f4d\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n        int p0 = 0;\n        int curr = 0;\n        int p2 = nums.size() - 1;\n\n        while (curr <= p2) {\n            if (nums[curr] ==0) \n            {\n                std::swap(nums[curr++], nums[p0++]);\n            }\n            else if (nums[curr] ==2) \n            {\n                std::swap(nums[curr], nums[p2--]);\n            }\n            else \n            {\n                curr++;\n            }\n        }\n  }\n};\n")),(0,r.kt)("h3",{id:"\u65cb\u8f6c\u6570\u7ec4"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/rotate-array/"},"\u65cb\u8f6c\u6570\u7ec4")),(0,r.kt)("h4",{id:"\u73af\u5f62"},"\u73af\u5f62"),(0,r.kt)("p",null,"\u5c06n\u4e2a\u6570\u636e\u5206\u6210 ",(0,r.kt)("inlineCode",{parentName:"p"},"n/k")," \u7ec4\uff0c\u6bcf\u6b21\u79fb\u52a8 ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," \u4e2a\u6570\u636e\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"start"),"\u7684\u8303\u56f4\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"[0, k-1]"),"\uff0c\u90a3\u4e48\u79fb\u52a8 ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," \u6b21\u5c31\u5b8c\u6210\u3002",(0,r.kt)("inlineCode",{parentName:"p"},"count = n/k * (start + 1)"),"\uff0c\u5f53 ",(0,r.kt)("inlineCode",{parentName:"p"},"start = k-1")," \u65f6\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"count=n"),"\u3002\u904d\u5386\u7ed3\u675f\u3002"),(0,r.kt)("p",null,"\u987a\u4fbf\uff0c\u4fee\u6539\u4e0b\u91cc\u9762\u7684\u904d\u5386\u540d\uff0c\u5c31\u5f88\u5bb9\u6613\u7406\u89e3\u4e86"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void rotate(std::vector<int>& nums, int k) {\n        int n = nums.size(); \n        k = k % n; // \u9632\u6b62 k > n\n        int count = 0;\n        for (int start = 0; count < n; start++) {\n            int cur_index = start;\n            int cur = nums[start]; // \n            // \u6bcf\u6b21\u79fb\u52a8 n/k \u4e2a\u5143\u7d20,start = 0~k-1, count = n/k * step = n\n            do {\n                int next_index = (cur_index + k) % n; // cur_index \u524d\u5f80\u7684\u5730\u65b9\n\n                int next = nums[next_index];\n                nums[next_index] = cur; // \u5c06\u5f53\u524d\u5143\u7d20\u7ed9\u4e0b\u4e00\u4e2a\u7d22\u5f15\n\n                cur = next;\n                cur_index = next_index;\n                count++;\n            } while (start != cur_index);\n        }\n    }\n};\n")),(0,r.kt)("h4",{id:"\u53cd\u8f6c\u6cd5"},(0,r.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/rotate-array/solution/xuan-zhuan-shu-zu-by-leetcode/"},"\u53cd\u8f6c\u6cd5")),(0,r.kt)("p",null,"\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u80fd\u66f4\u52a0\u6613\u4e8e\u7406\u89e3\u548c\u4e66\u5199\u3002"),(0,r.kt)("p",null,"\u8fd9\u4e2a\u65b9\u6cd5\u57fa\u4e8e\u8fd9\u4e2a\u4e8b\u5b9e\uff1a\u5f53\u6211\u4eec\u65cb\u8f6c\u6570\u7ec4 ",(0,r.kt)("inlineCode",{parentName:"p"},"k"),"\u6b21\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"k%n")," \u4e2a\u5c3e\u90e8\u5143\u7d20\u4f1a\u88ab\u79fb\u52a8\u5230\u5934\u90e8\uff0c\u5269\u4e0b\u7684\u5143\u7d20\u4f1a\u88ab\u5411\u540e\u79fb\u52a8\u3002\u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\uff0c"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u6211\u4eec\u9996\u5148\u5c06\u6240\u6709\u5143\u7d20\u53cd\u8f6c")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u7136\u540e\u53cd\u8f6c\u524d ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," \u4e2a\u5143\u7d20")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u518d\u53cd\u8f6c\u540e\u9762 ",(0,r.kt)("inlineCode",{parentName:"p"},"n-k")," \u4e2a\u5143\u7d20"),(0,r.kt)("p",{parentName:"li"},"\u5c31\u80fd\u5f97\u5230\u60f3\u8981\u7684\u7ed3\u679c"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"  n=7\uff0c k=3\n  \u539f\u59cb\u6570\u7ec4                  : 1 2 3 4 5 6 7\n  \u53cd\u8f6c\u6240\u6709\u6570\u5b57\u540e             : 7 6 5 4 3 2 1\n  \u53cd\u8f6c\u524d k \u4e2a\u6570\u5b57\u540e          : 5 6 7 4 3 2 1\n  \u53cd\u8f6c\u540e n-k \u4e2a\u6570\u5b57\u540e        : 5 6 7 1 2 3 4 --\x3e \u7ed3\u679c\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  class Solution {\n  public:\n      void rotate(vector<int>& nums, int k) {\n          \n          k %= nums.size();\n\n          std::reverse(nums.begin(), nums.end()); \n          std::reverse(nums.begin(), nums.begin() + k); \n          std::reverse(nums.begin() + k, nums.end()); \n      }\n  };\n")))),(0,r.kt)("h3",{id:"\u79fb\u9664\u5143\u7d20"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/remove-element/"},"\u79fb\u9664\u5143\u7d20")),(0,r.kt)("p",null,"\u5b9e\u73b0\u7a7a\u95f4\u590d\u6742\u5ea6",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)"),"\uff0c\u5728\u53bb\u91cd\u7684\u65f6\u5019\uff0c\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u601d\u60f3\uff1a\u8f6c\u6362\uff0c\u548c\u79fb\u52a8\u3002\u8fd9\u4e2a\u601d\u60f3\uff0c\u5728\u5f88\u591a\u9898\u76ee\u90fd\u80fd\u5e94\u7528\u3002",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"\u79fb\u52a8"),"\uff1a\u8fd9\u4e2a\u601d\u60f3\u548c\u4e0a\u9762\u7684\u8377\u5170\u56fd\u65d7\u7c7b\u4f3c\uff0c\u90fd\u662f\u7528\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5de6\u8fb9\u7684\u8fb9\u754c\u3002\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u628a\u540e\u9762\u7684\u5143\u7d20\u5411\u524d\u79fb\u52a8\uff0c\u5ffd\u7565\u6307\u5b9a\u7684\u5143\u7d20\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"  class Solution {\n  public:\n      int removeElement(vector<int>& nums, int val) {\n          int left = 0;\n          for(const auto & num : nums) { \n            if(num != val) { \n              nums[left] = num;\n              ++left;\n            }\n          }\n\n          return left;\n      }\n  };\n")),(0,r.kt)("h3",{id:"\u5220\u9664\u91cd\u590d\u5143\u7d20ii"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/"},"\u5220\u9664\u91cd\u590d\u5143\u7d20II")),(0,r.kt)("p",null,"\u8fd9\u9053\uff0c\u5141\u8bb8\u5b58\u5728\u4e24\u4e2a\u91cd\u590d\u5143\u7d20\uff0c\u5176\u4f59\u7684\u91cd\u590d\u8981\u5220\u9664\u3002\u4e5f\u662f\u8981\u6c42\u5c31\u5730\u5b8c\u6210\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)"),"\u3002"),(0,r.kt)("p",null,"\u8fd9\u4e2a\u95ee\u9898\u81ea\u7136\u4e5f\u60f3\u5230\u4e86\u53cc\u6307\u9488\uff1a\u4e00\u4e2a\u6307\u9488 ",(0,r.kt)("inlineCode",{parentName:"p"},"L")," \u6307\u5411\u524d\u9762\u8981\u8986\u76d6\u7684\u4f4d\u7f6e\uff0c\u4e00\u4e2a\u6307\u9488 ",(0,r.kt)("inlineCode",{parentName:"p"},"R")," \u6307\u5411\u5f53\u524d\u6b63\u5728\u904d\u5386\u7684\u5143\u7d20\uff0c\u5982\u679c",(0,r.kt)("inlineCode",{parentName:"p"},"R - L > 2")," \u5e76\u4e14",(0,r.kt)("inlineCode",{parentName:"p"},"nums[L] == nums[R]"),"\uff0c\u90a3\u4e48\u5c31\u5ffd\u7565\u5f53\u524d\u7684\u5143\u7d20\uff0c\u76f4\u5230\u9047\u5230\u65b0\u7684\u5143\u7d20\u3002\u7531\u4e8e\u6570\u7ec4\u662f\u6709\u5e8f\u7684\uff0c\u9047\u5230\u65b0\u7684\u5143\u7d20\uff0c\u5373\u5b58\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"nums[R] > nums[L]"),"\uff0c\u8fd9\u65f6\u628a",(0,r.kt)("inlineCode",{parentName:"p"},"nums[R]"),"\u7684\u5143\u7d20\u5411\u524d\u79fb\u52a8\u5230",(0,r.kt)("inlineCode",{parentName:"p"},"L"),"\u4f4d\u7f6e\u5373\u53ef\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"nums[L] = nums[R]"),"\u3002\u5982\u6b64\u4e0d\u4ec5\u5b9e\u73b0\u4e86\u7a7a\u95f4\u590d\u6742\u5ea6",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)"),"\uff0c\u4e5f\u662f\u5b9e\u73b0\u4e86\u65f6\u95f4\u590d\u6742\u5ea6",(0,r.kt)("inlineCode",{parentName:"p"},"O(n)"),"\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int removeDuplicates(std::vector<int>& nums) {\n      if(nums.empty()) return 0;\n\n      int L=0;\n      for(int R=0; R < nums.size(); ++R) {\n        // nums[L-2] < nums[R] \n        //    \u5982\u679c\u91cd\u590d\u6570\u5b57\u4e2a\u6570\u4e0d\u5927\u4e8e2\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5224\u65ad\u80af\u5b9a\u662f\u6210\u7acb\u7684\n        //    \u5982\u679c\u91cd\u590d\u4e2a\u6570\u5927\u4e8e2\uff0c\u90a3\u4e48nums[L-2] < nums[R]\u5c31\u662f\u4e0d\u6210\u7acb\u7684\n        //      \u5373 \u591a\u4f59\u91cd\u590d\u9879\u90fd\u88ab\u5ffd\u89c6\u4e86\uff0c\u76f4\u5230\u9047\u5230\u65b0\u7684\u6570\u5b57\u6216\u8005\u6570\u5b57\u7ed3\u675f\n        if(L < 2 || nums[L-2] < nums[R]) { \n          nums[L] = nums[R];\n          ++L;\n        }\n      }\n      return L;\n    }\n};\n")),(0,r.kt)("h3",{id:"\u6c42\u4f17\u6570ii"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/majority-element-ii/"},"\u6c42\u4f17\u6570II")),(0,r.kt)("p",null,"\u65b9\u6cd5\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/majority-element-ii/solution/liang-fu-dong-hua-yan-shi-mo-er-tou-piao-fa-zui-zh/"},"\u6469\u5c14\u6295\u7968\u6cd5"),"."),(0,r.kt)("p",null,"\u6ce8\u610f\uff1a\u8fd9\u4e2a\u9898\u76ee\u8bf4\u662f\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7 ",(0,r.kt)("inlineCode",{parentName:"p"},"n/3")," \u7684\u6570\u5b57\uff0c\u4e5f\u5c31\u8bf4\u6700\u591a\u53ea\u67092\u4e2a\u5143\u7d20\u3002\u56e0\u6b64\u6700\u540e\u8f93\u51fa\u7684\u6570\u7ec4\u53ea\u75282\u4e2a\u6570\u636e\u5373\u53ef\u3002\u5982\u679c\u662f\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7",(0,r.kt)("inlineCode",{parentName:"p"},"n/k"),"\u7684\u6570\uff0c\u90a3\u4e48\u5c31\u662f\u7ed3\u679c\u6700\u591a",(0,r.kt)("inlineCode",{parentName:"p"},"k-1"),"\u4e2a\u3002\u89e3\u6cd5\u901a\u7528\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    std::vector<int> majorityElement(std::vector<int>& nums) {\n        std::vector<int> result;\n\n        if(nums.empty()) return result;\n\n        int candidate_1 =nums[0], count1=0;\n        int candidate_2 =nums[0], count2=0;\n\n        for(const auto& num : nums) { \n            if(candidate_1 == num) { \n                ++count1;\n            }\n            else if(candidate_2 == num) { \n                ++count2;\n            }\n            else \n            { \n                if(count1 == 0) { \n                    candidate_1 = num;\n                    ++count1;\n                }\n                else if(count2 ==0) { \n                    candidate_2 = num;\n                    ++count2;\n                }\n                else { \n                    --count1;\n                    --count2;\n                }\n            }\n        } // for-end\n\n        count1=0;\n        count2=0;\n        for(const auto& num : nums) { \n            if(num == candidate_1) {++count1; continue;} \n            if(num == candidate_2) {++count2;}\n        }\n\n        int limits = nums.size() / 3;\n        result.reserve(2);\n        if(count1 > limits) result.push_back(candidate_1);\n        if(count2 > limits) result.push_back(candidate_2);\n        \n        return result;\n    }\n};\n")),(0,r.kt)("p",null,"\u5176\u5b9e\uff0c\u6c42\u4f17\u6570 I \u4e5f\u662f\u8fd9\u4e2a\u601d\u8def\u3002"),(0,r.kt)("h2",{id:"\u65f6\u95f4\u590d\u6742\u5ea6on"},"\u65f6\u95f4\u590d\u6742\u5ea6",(0,r.kt)("inlineCode",{parentName:"h2"},"O(N)")),(0,r.kt)("p",null,"\u5728\u60f3\u4e0d\u51fa\u6700\u4f18\u89e3\u65f6\uff0c\u5148\u8003\u8651\u66b4\u529b\u89e3\u6cd5\uff0c\u7136\u540e\u770b\u54ea\u91cc\u53ef\u4ee5\u6539\u8fdb\u3002"),(0,r.kt)("h3",{id:"\u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/product-of-array-except-self/"},"\u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef")),(0,r.kt)("h4",{id:"\u5de6\u53f3\u4e58\u79ef\u5217\u8868"},"\u5de6\u53f3\u4e58\u79ef\u5217\u8868"),(0,r.kt)("p",null,"\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u7b54\u6848\uff0c\u5c31\u662f\u5229\u7528\u7d22\u5f15\u5904\u5de6\u4fa7\u7684\u6240\u6709\u6570\u5b57\u4e58\u79ef\u548c\u53f3\u4fa7\u6240\u6709\u6570\u5b57\u7684\u4e58\u79ef\u76f8\u4e58\u5f97\u5230\u7b54\u6848\u3002\n",(0,r.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/product-of-array-except-self/solution/chu-zi-shen-yi-wai-shu-zu-de-cheng-ji-by-leetcode/"},"\u7b97\u6cd5\u8fc7\u7a0b"),"\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u521d\u59cb\u5316\u4e24\u4e2a\u7a7a\u6570\u7ec4 ",(0,r.kt)("inlineCode",{parentName:"li"},"L")," \u548c ",(0,r.kt)("inlineCode",{parentName:"li"},"R"),"\u3002\u5bf9\u4e8e\u7ed9\u5b9a\u7d22\u5f15 ",(0,r.kt)("inlineCode",{parentName:"li"},"i"),"\uff0c",(0,r.kt)("inlineCode",{parentName:"li"},"L[i]")," \u4ee3\u8868\u7684\u662f ",(0,r.kt)("inlineCode",{parentName:"li"},"i")," \u5de6\u4fa7\u6240\u6709\u6570\u5b57\u7684\u4e58\u79ef\uff0c",(0,r.kt)("inlineCode",{parentName:"li"},"R[i]")," \u4ee3\u8868\u7684\u662f ",(0,r.kt)("inlineCode",{parentName:"li"},"i")," \u53f3\u4fa7\u6240\u6709\u6570\u5b57\u7684\u4e58\u79ef\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u6211\u4eec\u9700\u8981\u7528\u4e24\u4e2a\u5faa\u73af\u6765\u586b\u5145 ",(0,r.kt)("inlineCode",{parentName:"li"},"L")," \u548c ",(0,r.kt)("inlineCode",{parentName:"li"},"R")," \u6570\u7ec4\u7684\u503c\u3002\u5bf9\u4e8e\u6570\u7ec4 ",(0,r.kt)("inlineCode",{parentName:"li"},"L"),"\uff0c",(0,r.kt)("inlineCode",{parentName:"li"},"L[0]")," \u5e94\u8be5\u662f ",(0,r.kt)("inlineCode",{parentName:"li"},"1"),"\uff0c\u56e0\u4e3a\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5de6\u8fb9\u6ca1\u6709\u5143\u7d20\u3002\u5bf9\u4e8e\u5176\u4ed6\u5143\u7d20\uff1a",(0,r.kt)("inlineCode",{parentName:"li"},"L[i]=L[i-1]*nums[i-1]"),"\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u540c\u7406\uff0c\u5bf9\u4e8e\u6570\u7ec4 ",(0,r.kt)("inlineCode",{parentName:"li"},"R"),"\uff0c",(0,r.kt)("inlineCode",{parentName:"li"},"R[length-1]")," \u5e94\u4e3a ",(0,r.kt)("inlineCode",{parentName:"li"},"1"),"\u3002",(0,r.kt)("inlineCode",{parentName:"li"},"length")," \u6307\u7684\u662f\u8f93\u5165\u6570\u7ec4\u7684\u5927\u5c0f\u3002\u5176\u4ed6\u5143\u7d20\uff1a",(0,r.kt)("inlineCode",{parentName:"li"},"R[i]=R[i+1] * nums[i+1]"),"\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u5f53 ",(0,r.kt)("inlineCode",{parentName:"li"},"R")," \u548c ",(0,r.kt)("inlineCode",{parentName:"li"},"L")," \u6570\u7ec4\u586b\u5145\u5b8c\u6210\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u8f93\u5165\u6570\u7ec4\u4e0a\u8fed\u4ee3\uff0c\u4e14\u7d22\u5f15 ",(0,r.kt)("inlineCode",{parentName:"li"},"i")," \u5904\u7684\u503c\u4e3a\uff1a",(0,r.kt)("inlineCode",{parentName:"li"},"L[i] * R[i]"),"\u3002")),(0,r.kt)("p",null,"\u5b9e\u73b0"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    std::vector<int> productExceptSelf(std::vector<int>& nums) {\n        int length = nums.size();\n\n        std::vector<int> L(length);\n        std::vector<int> R(length);\n\n        std::vector<int> product_(length);\n\n        L[0] = 1, R[length-1]=1;\n\n        for(int i=1; i <length; ++i) { \n            L[i] = nums[i-1] * L[i-1];\n        }\n\n        for(int i=length-2; i >=0; i--) { \n            R[i] = nums[i+1] * R[i+1];\n        }\n\n        for(int i=0; i < length; ++i) { \n            product_[i] = L[i] * R[i];\n        }\n\n        return product_;\n    }\n};\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a",(0,r.kt)("inlineCode",{parentName:"li"},"O(N)"),"\uff0c\u5176\u4e2d ",(0,r.kt)("inlineCode",{parentName:"li"},"N")," \u6307\u7684\u662f\u8f93\u5165\u6570\u7ec4\u7684\u5927\u5c0f\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a",(0,r.kt)("inlineCode",{parentName:"li"},"O(N)"),"\uff0c\u4f7f\u7528\u4e86 ",(0,r.kt)("inlineCode",{parentName:"li"},"L")," \u548c ",(0,r.kt)("inlineCode",{parentName:"li"},"R")," \u6570\u7ec4\u53bb\u6784\u9020\u7b54\u6848")),(0,r.kt)("h4",{id:"\u538b\u7f29\u7a7a\u95f4"},"\u538b\u7f29\u7a7a\u95f4"),(0,r.kt)("p",null,"\u5229\u7528\u8f93\u51fa\u6570\u7ec4 ",(0,r.kt)("inlineCode",{parentName:"p"},"product_")," \u6765\u4f5c\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"L"),"\u6216\u8005 ",(0,r.kt)("inlineCode",{parentName:"p"},"R"),"\uff0c\u53e6\u4e00\u4e2a\u4f7f\u7528\u53d8\u91cf\u6765\u6807\u8bb0\u3002\n\u8fc7\u7a0b\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u521d\u59cb\u5316 ",(0,r.kt)("inlineCode",{parentName:"li"},"product_")," \u6570\u7ec4\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7d22\u5f15 ",(0,r.kt)("inlineCode",{parentName:"li"},"i"),"\uff0c",(0,r.kt)("inlineCode",{parentName:"li"},"product_[i]")," \u4ee3\u8868\u7684\u662f ",(0,r.kt)("inlineCode",{parentName:"li"},"i")," \u5de6\u4fa7\u6240\u6709\u6570\u5b57\u7684\u4e58\u79ef\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u6784\u9020\u65b9\u5f0f\u4e0e\u4e4b\u524d\u76f8\u540c\uff0c\u53ea\u662f\u6211\u4eec\u89c6\u56fe\u8282\u7701\u7a7a\u95f4\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u8fd9\u79cd\u65b9\u6cd5\u7684\u552f\u4e00\u53d8\u5316\u5c31\u662f\u6211\u4eec\u6ca1\u6709\u6784\u9020 ",(0,r.kt)("inlineCode",{parentName:"li"},"R")," \u6570\u7ec4\u3002\u800c\u662f\u7528\u4e00\u4e2a\u904d\u5386\u6765\u8ddf\u8e2a\u53f3\u8fb9\u5143\u7d20\u7684\u4e58\u79ef\u3002\u5e76\u66f4\u65b0\u6570\u7ec4 ",(0,r.kt)("inlineCode",{parentName:"li"},"product_[i]=product_[i]*R"),"\u3002\u7136\u540e ",(0,r.kt)("inlineCode",{parentName:"li"},"R")," \u66f4\u65b0\u4e3a ",(0,r.kt)("inlineCode",{parentName:"li"},"R = R * nums[i]"),"\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    std::vector<int> productExceptSelf(std::vector<int>& nums) {\n        int length = nums.size();\n\n        std::vector<int> product_(length);\n        product_[0] =1;\n        \n        for(int i=1; i <length; ++i) { \n            product_[i] = nums[i-1] * product_[i-1];\n        }\n\n        int R =1;\n        for(int i=length-1; i >=0; --i) { \n            product_[i] = product_[i] * R;\n            R *= nums[i];\n        }\n\n        return product_;\n    }\n};\n")),(0,r.kt)("h3",{id:"\u6700\u957f\u8fde\u7eed\u5b50\u5e8f\u5217"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/longest-consecutive-sequence/"},"\u6700\u957f\u8fde\u7eed\u5b50\u5e8f\u5217")),(0,r.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u51fa\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u7684\u957f\u5ea6\u3002"),(0,r.kt)("h4",{id:"\u8fd9\u4e2a\u7b97\u6cd5\u662f\u6839\u636e\u66b4\u529b\u6cd5\u6539\u8fdb"},"\u8fd9\u4e2a\u7b97\u6cd5\u662f\u6839\u636e\u66b4\u529b\u6cd5\u6539\u8fdb"),(0,r.kt)("p",null,"\u56e0\u4e3a\u4e00\u4e2a\u5e8f\u5217\u53ef\u80fd\u5728 ",(0,r.kt)("inlineCode",{parentName:"p"},"nums")," \u6570\u7ec4\u7684\u4efb\u610f\u4e00\u4e2a\u6570\u5b57\u5f00\u59cb\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6bcf\u4e2a\u6570\u5b57\u4f5c\u4e3a\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\uff0c\u641c\u7d22\u6240\u6709\u7684\u53ef\u80fd\u6027\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int longestConsecutive(std::vector<int>& nums) {\n      std::unordered_set<int> set_(nums.begin(), nums.end());\n\n      int longest_=0; \n      for(const int& num : nums) {  \n          // num-1 \u5982\u679c\u5305\u542b\u5728\u5185\uff0c\n          // \u90a3\u4e48\u80af\u5b9a\u662f\u67d0\u4e2a\u6570\u5b57\u7684\u8fde\u7eed\u5e8f\u5217\uff0c\u4e4b\u524d\u5df2\u7ecf\u88ab\u6392\u67e5\u8fc7\n          if(set_.find(num-1) == set_.end()) { \n            int curr = num;\n            while(set.find(++curr) != set.end());\n            longest_ = std::max(longest_, curr - num); \n          }\n      }\n\n      return longest_;\n    }\n};\n")),(0,r.kt)("h2",{id:"\u533a\u95f4\u64cd\u4f5c"},"\u533a\u95f4\u64cd\u4f5c"),(0,r.kt)("h3",{id:"\u5408\u5e76\u533a\u95f4"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/merge-intervals/"},"\u5408\u5e76\u533a\u95f4")),(0,r.kt)("h3",{id:"\u63d2\u5165\u533a\u95f4"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/insert-interval/"},"\u63d2\u5165\u533a\u95f4")),(0,r.kt)("p",null,"\u63d2\u5165\u4e00\u4e2a\u533a\u95f4\uff0c\u7531\u4e8e\u539f\u6765\u7684\u662f\u6709\u5e8f\u7684\uff0c\u90a3\u4e48\u5c31\u662f\u53ef\u4ee5\u627e\u5230 ",(0,r.kt)("inlineCode",{parentName:"p"},"newInterval")," \u9996\u5c3e\u843d\u5165\u7684\u533a\u95f4\uff0c\u6216\u8005\u6ca1\u6709\u843d\u5165\u4efb\u4f55\u533a\u95f4\uff0c\u7136\u540e\u4e32\u8d77\u6765\u3002\u7531\u4e8e\u533a\u95f4\u672c\u8eab\u5c31\u662f\u6709\u6709\u5e8f\uff0c\u4e0d\u9700\u8981\u518d\u6392\u5e8f\uff0c\u53ef\u4ee5\u76f4\u63a5\u904d\u5386\u3002\u800c\u4e0a\u4e00\u9898\u7684\u662f\u65e0\u5e8f\u7684\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5148\u6709\u5e8f\uff0c\u518d\u5408\u5e76\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    template<typename T> using Matrix = std::vector<std::vector<T>>;\n\n    Matrix<int> insert(Matrix<int>& intervals, std::vector<int>& newInterval) {\n      Matrix<int> result; result.reserve(intervals.size()+1); // \u9884\u5206\u914d\u8fd9\u4e48\u5927\u7684\u5185\u5b58\n\n      int newStart =newInterval[0], newEnd =newInterval[1];\n      int idx=0;\n      int n = intervals.size(); \n\n      for(;idx <n && intervals[idx][0] < newStart; ++idx) \n      {\n        result.emplace_back(std::move(intervals[idx]));\n      }\n      // \u7b2c\u4e00\u4e2a intervals[idx][0] >= newStart \n    \n      auto& tail = result.back();\n      if(result.empty() || tail[1] < newStart) \n      { \n        // \u533a\u95f4\u6ca1\u6709\u91cd\u53e0\u90e8\u5206 \n        result.emplace_back(std::move(newInterval));\n      }\n      else \n      {\n        tail[1] = std::max(tail[1], newEnd);\n      }\n\n      // \u5bf9\u4e8e\u53e6\u4e00\u8fb9\n      for(;idx < n; ++idx) { \n        auto  interval = intervals[idx];\n        auto& tail = result.back();\n        int start =interval[0], end =interval[1]; \n        // \u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\u7684\u8d77\u70b9\u4e0e\u7ec8\u70b9\n        // \u90fd\u5224\u65ad\u4e00\u6b21\u4ed6\u4e0eresult.back()\u7684\u4ea4\u96c6\n        if(tail[1] < start) \n        { \n          // \u4ee5\u540e\u7684\u90fd\u662f\u5c0f\u4e8e,\n          result.emplace_back(std::move(interval));          \n        }\n        else \n        {\n          // tail[1] >= start\n          tail[1] = std::max(tail[1], end);\n        } \n      }\n\n      return result;\n    }\n};\n")),(0,r.kt)("h2",{id:"\u87ba\u65cb\u77e9\u9635"},"\u87ba\u65cb\u77e9\u9635"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode-cn.com/problems/spiral-matrix/"},"\u87ba\u65cb\u77e9\u9635I")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode-cn.com/problems/spiral-matrix-ii/"},"\u87ba\u65cb\u77e9\u9635II"),"\n\u95ee\u98981\u91c7\u7528\u7684\u662f\u9012\u5f52\u7684\u5199\u6cd5")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    typedef std::vector<std::vector<int>> vectorSet; \n\n    std::vector<int> spiralOrder(vectorSet& matrix) {\n        if(matrix.empty()) return resultSet_;\n        \n        int rows = matrix.size();\n        int cols = matrix[0].size();\n\n        resultSet_.resize(rows*cols);\n\n         __spiralOrder(matrix, 0, 0,rows, cols);\n\n        return resultSet_;\n    }\n\nprivate:\n\n    void __spiralOrder(vectorSet& matrix, int startx, int starty, int endx, int endy) {  \n        if(startx >= endx || starty >= endy) return;\n\n        for(int y=starty; y < endy; ++y) { \n            // resultSet_.push_back(matrix[startx][y]);\n            resultSet_[index_++] = matrix[startx][y];\n        }\n        \n        for(int x=startx+1; x < endx; ++x) { \n            // resultSet_.push_back(matrix[x][endy-1]);\n            resultSet_[index_++] = matrix[x][endy-1];\n        }\n        \n        // \u6700\u540e\u4e00\u884c \n        // \u5728\u53ea\u6709\u4e00\u884c\u65f6\uff0c\u8fd9\u4e2a\u4e0d\u5e94\u8be5\u6709\n        for(int y=endy-2; y >= starty && endy >=2 && (endx -startx) >1; --y) { \n            // resultSet_.push_back(matrix[endx-1][y]);\n            resultSet_[index_++] = matrix[endx-1][y];\n        }\n\n        // \u7b2c\u4e00\u5217\n        // \u5728\u53ea\u6709\u4e00\u5217\u65f6\uff0c\u4e0d\u5e94\u6709\n        for(int x=endx-2; x > startx && endx >=2 && (endy -starty) >1; --x) { \n            // resultSet_.push_back(matrix[x][starty]);\n            resultSet_[index_++] = matrix[x][starty];\n        }\n\n        __spiralOrder(matrix, startx+1, starty+1, endx-1, endy-1);\n    }\n\n    int index_=0;\n    std::vector<int> resultSet_;\n};\n")),(0,r.kt)("p",null,"\u95ee\u98982\u624d\u7528\u9012\u5f52\u5199\u6cd5\u6bd4\u8f83\u9ebb\u70e6\uff0c\u8f6c\u800c\u91c7\u7528\u8fed\u4ee3\u65f6\uff0c\u6bd4\u6211\u4e4b\u524d\u7684\u9012\u5f52\u7684\u5199\u6cd5\u8981\u7b80\u6d01\u3002\u4f46\u662f\u601d\u8def\u672c\u8d28\u4e0a\u4e00\u6837"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    template<typename T> using Matrix = std::vector<std::vector<T>>;\n\n    Matrix<int> generateMatrix(int n) {\n      Matrix<int> matrix(n, std::vector<int>(n));\n\n      int left=0, right  =n-1;\n      int top=0,  bottom =n-1;\n      int target =n*n; \n      int num=1;\n\n      while(num <= target) { \n        // \u4ece\u5de6\u8fb9\u5230\u53f3\u8fb9\n        // \u4e0b\u9762\u662ftop, \n        for(int i=left;   i <= right;  ++i)  matrix[top][i]    = num++; ++top; \n        for(int i=top;    i <= bottom; ++i)  matrix[i][right]  = num++; --right; \n        for(int i=right;  i >= left;   --i)  matrix[bottom][i] = num++; --bottom;\n        for(int i=bottom; i>= top;     --i)  matrix[i][left]   = num++; ++left;\n      }\n      \n      return matrix;\n    }\n};\n")),(0,r.kt)("h2",{id:"\u641c\u7d22\u77e9\u9635"},"\u641c\u7d22\u77e9\u9635"),(0,r.kt)("p",null,"\u8fd9\u9898\u6709\u4e24\u4e2a\u98ce\u683c\uff0c\u4e00\u4e2a\u662f",(0,r.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/"},"\u5251\u6307offer\u7684\u641c\u7d22"),"\uff0c\u4e00\u4e2a\u662f",(0,r.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/search-a-2d-matrix/"},"Leetcode\u7684\u641c\u7d22\u77e9\u9635"),"\u3002\u56e0\u540e\u8005\u6bd4\u524d\u8005\u6570\u636e\u5206\u5e03\u7279\u6b8a\u70b9\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u4f7f\u7528\u524d\u8005\u7684\u89e3\u6cd5\uff0c\u66f4\u52a0\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u6cd5\u3002\n\u524d\u8005\u7684\u6570\u636e\u5206\u5e03:"),(0,r.kt)("p",null,"\u901a\u7528\u89e3\u6cd5:\u8fd9\u662f\u56e0\u4e3a\uff0c\u90fd\u6ee1\u8db3\u201c\u4ece\u5de6\u8fb9\u5230\u53f3\u8fb9\u9012\u589e\uff0c\u4ece\u4e0a\u5230\u5c0f\u9012\u589e\u201d\u7684\u89c4\u5f8b\uff0c\u5229\u7528\u8fd9\u4e2a\u89c4\u5f8b\u53ef\u4ee5\u6c42\u89e3\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n      if(matrix.empty()) \n        return false;\n\n      for(int row=0, col=matrix[0].size()-1; row <matrix.size() && col >=0; ) { \n        int curr = matrix[row][col];\n        if(curr == target) \n          return true;\n          \n        target < curr? --col : ++row;\n      }\n\n      return false;\n    }\n};\n")),(0,r.kt)("p",null,"Leetcode\u95ee\u9898\u7684\u7279\u6b8a\u89e3\u6cd5\uff1a\u9664\u4e86\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u4e4b\u5916\uff0c\u6b64\u9898\u7684\u6570\u636e\u8fd8\u6ee1\u8db3\u201c\u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u5927\u4e8e\u524d\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6574\u6570\u201d\u3002\u4f7f\u5f97\u8fd9\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u5c55\u5f00\u6210\u4e00\u7ef4\u6570\u636e\u5448\u73b0\u5355\u8c03\u9012\u589e\u7684\u89c4\u5f8b\u3002\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u52a0\u901f\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n      if(matrix.empty()) \n        return false;\n\n      for(int row=0, col=matrix[0].size()-1; row <matrix.size() && col >=0; ) { \n        int curr = matrix[row][col];\n        if(curr == target) \n          return true;\n          \n        target < curr? --col : ++row;\n      }\n\n      return false;\n    }\n};\n")),(0,r.kt)("h4",{id:"48\u65cb\u8f6c\u56fe\u50cf"},(0,r.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/rotate-image/description/"},"48.\u65cb\u8f6c\u56fe\u50cf")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u7ed9\u5b9a\u4e00\u4e2a ",(0,r.kt)("em",{parentName:"p"},"n")," \xd7 ",(0,r.kt)("em",{parentName:"p"},"n")," \u7684\u4e8c\u7ef4\u77e9\u9635 ",(0,r.kt)("inlineCode",{parentName:"p"},"matrix")," \u8868\u793a\u4e00\u4e2a\u56fe\u50cf\u3002\u8bf7\u4f60\u5c06\u56fe\u50cf\u987a\u65f6\u9488\u65cb\u8f6c 90 \u5ea6\u3002"),(0,r.kt)("p",{parentName:"blockquote"},"\u4f60\u5fc5\u987b\u5728",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"}," \u539f\u5730"))," \u65cb\u8f6c\u56fe\u50cf\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u76f4\u63a5\u4fee\u6539\u8f93\u5165\u7684\u4e8c\u7ef4\u77e9\u9635\u3002",(0,r.kt)("strong",{parentName:"p"},"\u8bf7\u4e0d\u8981")," \u4f7f\u7528\u53e6\u4e00\u4e2a\u77e9\u9635\u6765\u65cb\u8f6c\u56fe\u50cf\u3002")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image-20211002195951010",src:t(69605).Z})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void rotate(vector<vector<int>>& matrix) {\n        vector<vector<int>> ans(matrix);\n        int row = matrix.size(), col = matrix[0].size();\n        for (int i = 0; i < row; i++) {\n            for (int j = 0; j < col; j++) {\n                matrix[j][col - i - 1] = ans[i][j];\n            }\n        }\n        return ;\n    }\n};\n`\nvoid rotate(vector<vector<int>>& matrix) {\n    int temp = 0, n = matrix.size()-1;\n    for (int i = 0; i <= n / 2; ++i) {\n        for (int j = i; j < n - i; ++j) {\n            temp = matrix[j][n-i];\n            matrix[j][n-i] = matrix[i][j];\n            matrix[i][j] = matrix[n-j][i];\n            matrix[n-j][i] = matrix[n-i][n-j];\n            matrix[n-i][n-j] = temp;\n        }\n    }\n}\n\n")),(0,r.kt)("h4",{id:"240\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635-ii"},(0,r.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/search-a-2d-matrix-ii/description/"},"240.\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u641c\u7d22 ",(0,r.kt)("inlineCode",{parentName:"p"},"*m* x *n*")," \u77e9\u9635 ",(0,r.kt)("inlineCode",{parentName:"p"},"matrix")," \u4e2d\u7684\u4e00\u4e2a\u76ee\u6807\u503c ",(0,r.kt)("inlineCode",{parentName:"p"},"target")," \u3002\u8be5\u77e9\u9635\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a"),(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"\u6bcf\u884c\u7684\u5143\u7d20\u4ece\u5de6\u5230\u53f3\u5347\u5e8f\u6392\u5217\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u6bcf\u5217\u7684\u5143\u7d20\u4ece\u4e0a\u5230\u4e0b\u5347\u5e8f\u6392\u5217\u3002")),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1\uff1a")),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/25/searchgrid2.jpg",alt:"img"})),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1amatrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\n\u8f93\u51fa\uff1atrue\n"))),(0,r.kt)("p",null,"\u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea6 O(M + N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\u3002\u5176\u4e2d M \u4e3a\u884c\u6570\uff0cN \u4e3a \u5217\u6570\u3002"),(0,r.kt)("p",null,"\u8be5\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u6570\uff0c\u5c0f\u4e8e\u5b83\u7684\u6570\u4e00\u5b9a\u5728\u5176\u5de6\u8fb9\uff0c\u5927\u4e8e\u5b83\u7684\u6570\u4e00\u5b9a\u5728\u5176\u4e0b\u8fb9\u3002\u56e0\u6b64\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u67e5\u627e\uff0c\u5c31\u53ef\u4ee5\u6839\u636e target \u548c\u5f53\u524d\u5143\u7d20\u7684\u5927\u5c0f\u5173\u7cfb\u6765\u5feb\u901f\u5730\u7f29\u5c0f\u67e5\u627e\u533a\u95f4\uff0c\u6bcf\u6b21\u51cf\u5c11\u4e00\u884c\u6216\u8005\u4e00\u5217\u7684\u5143\u7d20\u3002\u5f53\u524d\u5143\u7d20\u7684\u67e5\u627e\u533a\u95f4\u4e3a\u5de6\u4e0b\u89d2\u7684\u6240\u6709\u5143\u7d20\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        int row = matrix.size(), col = row ? matrix[0].size() : 0;\n        bool ans = false;\n        int i = 0, j = col - 1;\n        while (i < row && j >= 0) {\n            if (matrix[i][j] == target) {\n                ans = true;\n                break;\n            } else if (matrix[i][j] > target) {\n                j--;\n            } else {\n                i++;\n            }\n\n        }\n        return ans;\n        \n    }\n};\n")),(0,r.kt)("h4",{id:"769\u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757"},(0,r.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/max-chunks-to-make-sorted/description/"},"769.\u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u6570\u7ec4",(0,r.kt)("inlineCode",{parentName:"p"},"arr"),"\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"[0, 1, ..., arr.length - 1]"),"\u7684\u4e00\u79cd\u6392\u5217\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u51e0\u4e2a\u201c\u5757\u201d\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5757\u5206\u522b\u8fdb\u884c\u6392\u5e8f\u3002\u4e4b\u540e\u518d\u8fde\u63a5\u8d77\u6765\uff0c\u4f7f\u5f97\u8fde\u63a5\u7684\u7ed3\u679c\u548c\u6309\u5347\u5e8f\u6392\u5e8f\u540e\u7684\u539f\u6570\u7ec4\u76f8\u540c\u3002"),(0,r.kt)("p",{parentName:"blockquote"},"\u6211\u4eec\u6700\u591a\u80fd\u5c06\u6570\u7ec4\u5206\u6210\u591a\u5c11\u5757\uff1f"),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1:")),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"\u8f93\u5165: arr = [4,3,2,1,0]\n\u8f93\u51fa: 1\n\u89e3\u91ca:\n\u5c06\u6570\u7ec4\u5206\u62102\u5757\u6216\u8005\u66f4\u591a\u5757\uff0c\u90fd\u65e0\u6cd5\u5f97\u5230\u6240\u9700\u7684\u7ed3\u679c\u3002\n\u4f8b\u5982\uff0c\u5206\u6210 [4, 3], [2, 1, 0] \u7684\u7ed3\u679c\u662f [3, 4, 0, 1, 2]\uff0c\u8fd9\u4e0d\u662f\u6709\u5e8f\u7684\u6570\u7ec4\u3002\n"))),(0,r.kt)("p",null,"\u4ece\u5de6\u5f80\u53f3\u904d\u5386,\u540c\u65f6\u8bb0\u5f55\u5f53\u524d\u7684\u6700\u5927\u503c,\u6bcf\u5f53\u5f53\u524d\u6700\u5927\u503c\u7b49\u4e8e\u6570\u7ec4\u4f4d\u7f6e\u65f6,\u6211\u4eec\u53ef\u4ee5\u591a\u4e00\u6b21\u5206\u5272\u3002"),(0,r.kt)("p",null,"\u5982\u679c\u5f53\u524d\u6700\u5927\u503c\u5927\u4e8e\u6570\u7ec4\u4f4d\u7f6e,\u5219\u8bf4\u660e\u53f3\u8fb9\u4e00\u5b9a\u6709\u5c0f\u4e8e\u6570\u7ec4\u4f4d\u7f6e\u7684\u6570\u5b57,\u9700\u8981\u628a\u5b83\u4e5f\u52a0\u5165\u5f85\u6392\u5e8f\u7684\u5b50\u6570\u7ec4;\u53c8\u56e0\u4e3a\u6570\u7ec4\u53ea\u5305\u542b\u4e0d\u91cd\u590d\u7684 0 \u5230 n,\u6240\u4ee5\u5f53\u524d\u6700\u5927\u503c\u4e00\u5b9a\u4e0d\u4f1a\u5c0f\u4e8e\u6570\u7ec4\u4f4d\u7f6e\u3002\u6240\u4ee5\u6bcf\u5f53\u5f53\u524d\u6700\u5927\u503c\u7b49\u4e8e\u6570\u7ec4\u4f4d\u7f6e\u65f6,\u5047\u8bbe\u4e3a p,\u6211\u4eec\u53ef\u4ee5\u6210\u529f\u5b8c\u6210\u4e00\u6b21\u5206\u5272,\u5e76\u4e14\u5176\u4e0e\u4e0a\u4e00\u6b21\u5206\u5272\u4f4d\u7f6e q \u4e4b\u95f4\u7684\u503c\u4e00\u5b9a\u662f q + 1 \u5230 p \u7684\u6240\u6709\u6570\u5b57\u3002"),(0,r.kt)("h1",{id:"\u94fe\u8868"},"\u94fe\u8868"),(0,r.kt)("h3",{id:"\u5355\u94fe\u8868"},"\u5355\u94fe\u8868"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u94fe\u8868\u662f\u4e00\u79cd\u901a\u8fc7\u6307\u9488\u4e32\u8054\u5728\u4e00\u8d77\u7684\u7ebf\u6027\u7ed3\u6784\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u662f\u53c8\u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u4e00\u4e2a\u662f\u6570\u636e\u57df\u4e00\u4e2a\u662f\u6307\u9488\u57df\uff08\u5b58\u653e\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\uff09\uff0c\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\u57df\u6307\u5411null\uff08\u7a7a\u6307\u9488\u7684\u610f\u601d\uff09\u3002")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://img-blog.csdnimg.cn/20200806194529815.png",alt:"\u94fe\u88681"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"    public class Node {\n        public int value;\n        public Node next;\n        \n        public Node(int data) {\n            value = data;\n        }\n        \n    }\n")),(0,r.kt)("h3",{id:"\u53cc\u94fe\u8868"},"\u53cc\u94fe\u8868"),(0,r.kt)("p",null,"\u53cc\u94fe\u8868\uff1a\u6bcf\u4e00\u4e2a\u8282\u70b9\u6709\u4e24\u4e2a\u6307\u9488\u57df\uff0c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u4e00\u4e2a\u6307\u5411\u4e0a\u4e00\u4e2a\u8282\u70b9\u3002"),(0,r.kt)("p",null,"\u53cc\u94fe\u8868 \u65e2\u53ef\u4ee5\u5411\u524d\u67e5\u8be2\u4e5f\u53ef\u4ee5\u5411\u540e\u67e5\u8be2\u3002"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://img-blog.csdnimg.cn/20200806194559317.png",alt:"\u94fe\u88682"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public static class DoubleNode {\n    public int value;\n    public DoubleNode last;\n    public DoubleNode next;\n\n    public DoubleNode(int data) {\n        value = data;\n    }\n}\n")),(0,r.kt)("h3",{id:"\u5faa\u73af\u94fe\u8868"},"\u5faa\u73af\u94fe\u8868"),(0,r.kt)("p",null,"\u5faa\u73af\u94fe\u8868\u5c31\u662f\u94fe\u8868\u9996\u5c3e\u76f8\u8fde\u3002"),(0,r.kt)("p",null,"\u5faa\u73af\u94fe\u8868\u53ef\u4ee5\u7528\u6765\u89e3\u51b3\u7ea6\u745f\u592b\u73af\u95ee\u9898\u3002"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image-20210925213556461",src:t(50403).Z})),(0,r.kt)("h3",{id:"\u94fe\u8868\u7684\u5b58\u50a8\u65b9\u5f0f"},"\u94fe\u8868\u7684\u5b58\u50a8\u65b9\u5f0f"),(0,r.kt)("p",null,"\u6570\u7ec4\u662f\u5728\u5185\u5b58\u4e2d\u662f\u8fde\u7eed\u5206\u5e03\u7684\uff0c\u4f46\u662f\u94fe\u8868\u5728\u5185\u5b58\u4e2d\u53ef\u4e0d\u662f\u8fde\u7eed\u5206\u5e03\u7684\u3002\u5206\u914d\u673a\u5236\u53d6\u51b3\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7684\u5185\u5b58\u7ba1\u7406\u3002"),(0,r.kt)("p",null,"\u94fe\u8868\u662f\u901a\u8fc7\u6307\u9488\u57df\u7684\u6307\u9488\u94fe\u63a5\u5728\u5185\u5b58\u4e2d\u5404\u4e2a\u8282\u70b9\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// \u5355\u94fe\u8868\nstruct ListNode {\n    int val;  // \u8282\u70b9\u4e0a\u5b58\u50a8\u7684\u5143\u7d20\n    ListNode *next;  // \u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\n    ListNode(int x) : val(x), next(NULL) {}  // \u8282\u70b9\u7684\u6784\u9020\u51fd\u6570\n};\n")),(0,r.kt)("h2",{id:"\u6539\u53d8\u94fe\u8868"},"\u6539\u53d8\u94fe\u8868"),(0,r.kt)("h3",{id:"\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/swap-nodes-in-pairs/"},"\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9")),(0,r.kt)("p",null,"\u8fd9\u4e2a\u601d\u8def\u4e5f\u5f88\u7b80\u5355\uff0c\u4f7f\u7528\u6808\u5185\u5b58\u8bbe\u7f6e\u4e2a",(0,r.kt)("inlineCode",{parentName:"p"},"dummy")," \u8282\u70b9\uff0c\u907f\u514d ",(0,r.kt)("inlineCode",{parentName:"p"},"delete"),"\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u4f7f",(0,r.kt)("inlineCode",{parentName:"li"},"prev")," \u7684",(0,r.kt)("inlineCode",{parentName:"li"},"next"),"\u6307\u5411\u5076\u6570\u8282\u70b9"),(0,r.kt)("li",{parentName:"ul"},"\u4f7f\u5f97",(0,r.kt)("inlineCode",{parentName:"li"},"head"),"\u7684",(0,r.kt)("inlineCode",{parentName:"li"},"next"),"\u6307\u5411\u5947\u6570\u8282\u70b9"),(0,r.kt)("li",{parentName:"ul"},"\u6539\u53d8",(0,r.kt)("strong",{parentName:"li"},"\u5947\u6570\u8282->next = \u5076\u6570\u8282\u70b9"),"\u7684\u6307\u5411")),(0,r.kt)("p",null,"\u5b8c\u6210\u4e0a\u9762\u4e0a\u90e8\uff0c\u5c31\u5b8c\u6210\u4e00\u4e2a\u5c40\u90e8\u7684\u64cd\u4f5c\uff0c\u53cd\u590d\u8fdb\u884c\u5373\u53ef\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        if(head == nullptr) \n          return nullptr;\n\n        ListNode  dummy(0);\n        ListNode* prev    = &dummy;\n        ListNode* newHead = head->next;\n\n        while(head && head->next) { \n          prev->next = head->next;      // \u5076\u6570\u8282\u70b9\n          head->next = head->next->next;// \u5947\u6570\u8282\u70b9\n          prev->next->next = head;      // \u6539\u53d8\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb\n\n          prev = head;\n          head = head->next;\n        }\n        // \u907f\u514d\u5355\u4e2a\u8282\u70b9\u65f6\uff0c\u8fd4\u56de nullptr \n        return newHead ? newHead : head;\n    }\n};\n")),(0,r.kt)("h3",{id:"k\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/reverse-nodes-in-k-group/"},"k\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868")),(0,r.kt)("p",null,"\u6b64\u9898\u76ee\u662f\u4e0a\u4e00\u9053\u7684\u6cdb\u5316\u7248\u672c\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution { \npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) { \n        if(head ==nullptr) return head;\n\n        ListNode* prev =nullptr;\n        ListNode* curr =head;\n\n        int length=0;\n        while(curr) { \n            curr = curr->next;\n            ++length;\n        }\n        \n        curr = head;\n        __reverse(prev, curr, k);\n\n        head->next = curr;\n        std::swap(head, prev);\n        length -= k;\n\n        for(ListNode* oprev = prev, * ocurr = curr; length >= k; length -=k) { \n\n            __reverse(prev, curr, k);\n\n            ocurr->next = curr;\n            oprev->next = prev;\n\n            oprev = ocurr;\n            ocurr = curr;\n        }\n\n        return head;\n    } \n    // \u7ffb\u8f6c k \u4e2a\u8282\u70b9\n    void __reverse(ListNode*& prev,  ListNode*& curr, int k) { \n        while(k--) { \n            ListNode* next = curr->next;\n            curr->next = prev;\n            \n            prev = curr;\n            curr = next;\n        }\n        // \u6b64\u65f6 curr \u6307\u5411\u7684\u662f \u7b2c k\u4e2a\u8282\u70b9\u7684\u540e\u4e00\u4e2a\n    }\n};\n")),(0,r.kt)("h3",{id:"\u5408\u5e76\u4e24\u4e2a\u94fe\u8868"},"\u5408\u5e76\u4e24\u4e2a\u94fe\u8868"),(0,r.kt)("h3",{id:"\u5408\u5e76k\u4e2a\u94fe\u8868"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/merge-k-sorted-lists/"},"\u5408\u5e76k\u4e2a\u94fe\u8868")),(0,r.kt)("p",null,"\u4f7f\u7528\u5806\u6765\u6c42\u89e3\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    ListNode* mergeKLists(std::vector<ListNode*>& lists) {\n\n      std::vector<ListNode*> nodes; \n      for(ListNode* head : lists) {\n        while(head) { \n          nodes.push_back(head);\n          head = head->next;\n        } \n      }\n\n      auto compare = [](ListNode* lhs, ListNode* rhs) { return lhs->val > rhs->val; };\n      std::priority_queue<ListNode*, \n                          std::vector<ListNode*>, \n                          decltype(compare)> heap(compare, nodes);\n\n      ListNode  dummpy(0);\n      ListNode* head = &dummpy;\n\n      while(!heap.empty()) { \n        head->next = heap.top(); \n        heap.pop();\n\n        head = head->next;\n      }\n\n      head->next = nullptr;\n\n      return dummpy.next;\n    }\n};\n")),(0,r.kt)("h3",{id:"\u94fe\u8868\u91cd\u65b0\u6392\u5e8f"},(0,r.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/reorder-list/"},"\u94fe\u8868\u91cd\u65b0\u6392\u5e8f")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5c06\u94fe\u8868\u4ece\u94fe\u8868\u4e2d\u70b9\u4e00\u5206\u4e3a\u4e8c"),(0,r.kt)("li",{parentName:"ul"},"\u518d\u5c06\u540e\u534a\u90e8\u5206\u94fe\u8868\u53cd\u8f6c"),(0,r.kt)("li",{parentName:"ul"},"\u91cd\u6392\u94fe\u8868")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void reorderList(ListNode* head) {\n      if(head==nullptr || head->next==nullptr) \n        return;\n\n      ListNode* fast =head->next;\n      ListNode* slow =head; \n\n      while(fast && fast->next) { \n        fast = fast->next->next;\n        slow = slow->next;\n      }  \n\n      ListNode* later = slow->next; // \u540e\u534a\u90e8\u5206\u7684\u94fe\u8868\u5934\u8282\u70b9\n      slow->next = nullptr;         // \u65ad\u5f00\u4e0e\u540e\u534a\u90e8\u5206\u8fde\u63a5\n\n      reverseList(later);  // \u53cd\u8f6c\u540e\u534a\u90e8\u5206\u94fe\u8868\n      \n      ListNode* front = head;\n\n      while(front && later) { \n        // \u4fdd\u5b58\u4e0b\u6b21\u8fed\u4ee3\u7684\u503c\n        ListNode* frontNext = front->next;\n        ListNode* laterNext = later->next; \n        \n        // \u5efa\u7acb\u8054\u7cfb\n        front->next = later;\n        later->next = frontNext;\n\n        front = frontNext;\n        later = laterNext; \n      }\n    }\n    // \u53cd\u8f6c\u94fe\u8868\n    void reverseList(ListNode*& head) {\n      ListNode* dummy = nullptr;\n\n      while(head) { \n        ListNode* next = head->next;\n        \n        head->next = dummy;\n        dummy = head;\n\n        head = next;\n      }\n      head = dummy;\n    }\n};\n")))}u.isMDXComponent=!0},50403:function(n,e,t){"use strict";e.Z=t.p+"assets/images/image-20210925213556461-1164b9d6de6e49112daec68708fed2fc.png"},69605:function(n,e,t){"use strict";e.Z=t.p+"assets/images/image-20211002195951010-2a4ad83f6f9d074e460e6725a747bcf9.png"},95401:function(n,e,t){"use strict";e.Z=t.p+"assets/images/\u989c\u8272\u5206\u7c7b_\u56fe\u793a-1633657051545-1633657057576-7be23821ac0a4883b3dbea54066287a9.png"}}]);