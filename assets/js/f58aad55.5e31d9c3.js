"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[9233],{3905:function(n,e,t){t.d(e,{Zo:function(){return c},kt:function(){return m}});var r=t(67294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function l(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var p=r.createContext({}),u=function(n){var e=r.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):l(l({},e),n)),t},c=function(n){var e=u(n.components);return r.createElement(p.Provider,{value:e},n.children)},k={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},s=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,o=n.originalType,p=n.parentName,c=i(n,["components","mdxType","originalType","parentName"]),s=u(t),m=a,N=s["".concat(p,".").concat(m)]||s[m]||k[m]||o;return t?r.createElement(N,l(l({ref:e},c),{},{components:t})):r.createElement(N,l({ref:e},c))}));function m(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=t.length,l=new Array(o);l[0]=s;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=n,i.mdxType="string"==typeof n?n:a,l[1]=i;for(var u=2;u<o;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},73626:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return u},toc:function(){return c},default:function(){return s}});var r=t(87462),a=t(63366),o=(t(67294),t(3905)),l=["components"],i={id:"C3.JZ-nowcoer",title:"C3.JZ-nowcoer","typora-root-url":"../"},p=void 0,u={unversionedId:"Online_Judge/C3.JZ-nowcoer",id:"Online_Judge/C3.JZ-nowcoer",isDocsHomePage:!1,title:"C3.JZ-nowcoer",description:"\u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32",source:"@site/docs/3.Online_Judge/C3.JZ-nowcoer.md",sourceDirName:"3.Online_Judge",slug:"/Online_Judge/C3.JZ-nowcoer",permalink:"/Online_Judge/C3.JZ-nowcoer",editUrl:"https://github.com/worst0/wiki_note/edit/main/docs/3.Online_Judge/C3.JZ-nowcoer.md",version:"current",frontMatter:{id:"C3.JZ-nowcoer",title:"C3.JZ-nowcoer","typora-root-url":"../"},sidebar:"Document\ud83d\udcbb",previous:{title:"C2.CD-nowcoder",permalink:"/Online_Judge/C2.CD-nowcoder"},next:{title:"D1.EP",permalink:"/Online_Judge/D1.EP"}},c=[],k={toc:c};function s(n){var e=n.components,t=(0,a.Z)(n,l);return(0,o.kt)("wrapper",(0,r.Z)({},k,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"\u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32"},"\u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u89c4\u5219\u628a\u5b83\u7ffb\u8bd1\u4e3a\u5b57\u7b26\u4e32\uff1a"),(0,o.kt)("p",{parentName:"blockquote"},"0 \u7ffb\u8bd1\u6210 a\uff0c1 \u7ffb\u8bd1\u6210 b\uff0c\u2026\u2026\uff0c11 \u7ffb\u8bd1\u6210 l\uff0c\u2026\u2026\uff0c25 \u7ffb\u8bd1\u6210 z\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u4e00\u4e2a\u6570\u5b57\u53ef\u80fd\u6709\u591a\u4e2a\u7ffb\u8bd1\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u4f8b\u5982 12258 \u6709 5 \u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\uff0c\u5b83\u4eec\u5206\u522b\u662f bccfi\u3001bwfi\u3001bczi\u3001mcfi \u548c mzi\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u8bf7\u7f16\u7a0b\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u8ba1\u7b97\u4e00\u4e2a\u6570\u5b57\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\u65b9\u6cd5\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6837\u4f8b"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'\u8f93\u5165\uff1a"12258"\n\n\u8f93\u51fa\uff1a5\n'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * 1268\n * 1 2 6 8\n * 1 26 8\n * 12 6 8\n * \n */\nclass Solution {\npublic:\n    int getTranslationCount(string s) {\n        int n = s.size();\n        if(!n) return 0;\n        if(n==1) return 1;\n        vector<int> dp(n+1, 0);\n        dp[n-1] = 1;\n        for(int i=n-2;i>=0;i--){\n            dp[i] = dp[i+1];\n            if(s[i]=='1' || (s[i]=='2' && s[i+1]<'6')){\n                dp[i] += dp[i+2];\n            }\n        }\n        return dp[0];\n    }\n};\n\n")),(0,o.kt)("h4",{id:"\u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570"},"\u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4\uff0c\u628a\u6570\u7ec4\u91cc\u6240\u6709\u6570\u5b57\u62fc\u63a5\u8d77\u6765\u6392\u6210\u4e00\u4e2a\u6570\uff0c\u6253\u5370\u80fd\u62fc\u63a5\u51fa\u7684\u6240\u6709\u6570\u5b57\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u4f8b\u5982\u8f93\u5165\u6570\u7ec4 ","[3,32,321]","\uff0c\u5219\u6253\u5370\u51fa\u8fd9 3 \u4e2a\u6570\u5b57\u80fd\u6392\u6210\u7684\u6700\u5c0f\u6570\u5b57 321323\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6837\u4f8b"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"\u8f93\u5165\uff1a[3, 32, 321]\n\n\u8f93\u51fa\uff1a321323\n")),(0,o.kt)("p",{parentName:"blockquote"},"\u6ce8\u610f\uff1a\u8f93\u51fa\u6570\u5b57\u7684\u683c\u5f0f\u4e3a\u5b57\u7b26\u4e32\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    static bool myCmp(int &a, int &b) {\n        if (to_string(a) + to_string(b) < to_string(b) + to_string(a))\n        return true;\n        else return false;\n    }\n    string printMinNumber(vector<int>& nums) {\n        string str;\n        if(!nums.size()) return str;\n        sort(nums.begin(), nums.end(), myCmp);\n        for(int i = 0 ; i < nums.size(); i ++ ) {\n            str += to_string(nums[i]);\n        }\n    return str;    \n    }\n};\n")),(0,o.kt)("h4",{id:"\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570"},"\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u8bf7\u4f60\u5199\u4e00\u4e2a\u51fd\u6570 StrToInt\uff0c\u5b9e\u73b0\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u8fd9\u4e2a\u529f\u80fd\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u5f53\u7136\uff0c\u4e0d\u80fd\u4f7f\u7528 atoi \u6216\u8005\u5176\u4ed6\u7c7b\u4f3c\u7684\u5e93\u51fd\u6570\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6837\u4f8b"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'\u8f93\u5165\uff1a"123"\n\u8f93\u51fa\uff1a123\n')),(0,o.kt)("p",{parentName:"blockquote"},"\u6ce8\u610f:"),(0,o.kt)("p",{parentName:"blockquote"},"\u4f60\u7684\u51fd\u6570\u5e94\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\uff1a"),(0,o.kt)("ul",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ul"},"\u5ffd\u7565\u6240\u6709\u884c\u9996\u7a7a\u683c\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\uff0c\u53ef\u4ee5\u662f \u2018+/\u2212\u2019 \u8868\u793a\u662f\u6b63\u6570\u6216\u8005\u8d1f\u6570\uff0c\u7d27\u968f\u5176\u540e\u627e\u5230\u6700\u957f\u7684\u4e00\u4e32\u8fde\u7eed\u6570\u5b57\uff0c\u5c06\u5176\u89e3\u6790\u6210\u4e00\u4e2a\u6574\u6570\uff1b"),(0,o.kt)("li",{parentName:"ul"},"\u6574\u6570\u540e\u53ef\u80fd\u6709\u4efb\u610f\u975e\u6570\u5b57\u5b57\u7b26\uff0c\u8bf7\u5c06\u5176\u5ffd\u7565\uff1b"),(0,o.kt)("li",{parentName:"ul"},"\u5982\u679c\u6574\u6570\u957f\u5ea6\u4e3a 0\uff0c\u5219\u8fd4\u56de 0\uff1b"),(0,o.kt)("li",{parentName:"ul"},"\u5982\u679c\u6574\u6570\u5927\u4e8e INT_MAX(231\u22121)\uff0c\u8bf7\u8fd4\u56de INT_MAX\uff1b\u5982\u679c\u6574\u6570\u5c0f\u4e8eINT_MIN(\u2212231) \uff0c\u8bf7\u8fd4\u56de INT_MIN\uff1b"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int strToInt(string str) {\n        int k = 0; \n        //\u53bb\u7a7a\u683c\n        while(k < str.size() && str[k] == ' ') k++;\n        bool is_minus = false;\n        long long num = 0;\n        //\u5224\u6b63\u8d1f\n        if(str[k] == '+') k++;\n        else if(str[k] == '-') k++, is_minus = true;\n        //\u5b57\u7b26\u53d8\u6570\u5b57\n        while(k < str.size() && str[k] >= '0' && str[k] <= '9') {\n            num = num * 10 + str[k] - '0';\n            k++;\n        }\n        //\u5904\u7406\u7279\u4f8b\n        if(is_minus) num *= -1;\n        if(num > INT_MAX) num = INT_MAX;\n        if(num < INT_MIN) num = INT_MIN;\n        return (int) num;\n    }\n};\n\n")),(0,o.kt)("h4",{id:"\u5305\u542bmin\u51fd\u6570\u7684\u6808"},"\u5305\u542bmin\u51fd\u6570\u7684\u6808"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301push\uff0cpop\uff0ctop\u7b49\u64cd\u4f5c\u5e76\u4e14\u53ef\u4ee5\u5728O(1)\u65f6\u95f4\u5185\u68c0\u7d22\u51fa\u6700\u5c0f\u5143\u7d20\u7684\u5806\u6808\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"push(x)\u2013\u5c06\u5143\u7d20x\u63d2\u5165\u6808\u4e2d\npop()\u2013\u79fb\u9664\u6808\u9876\u5143\u7d20\ntop()\u2013\u5f97\u5230\u6808\u9876\u5143\u7d20\ngetMin()\u2013\u5f97\u5230\u6808\u4e2d\u6700\u5c0f\u5143\u7d20"),(0,o.kt)("p",{parentName:"blockquote"},"\u6837\u4f8b"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"MinStack minStack = new MinStack();\nminStack.push(-1);\nminStack.push(3);\nminStack.push(-4);\nminStack.getMin();   --\x3e Returns -4.\nminStack.pop();\nminStack.top();      --\x3e Returns 3.\nminStack.getMin();   --\x3e Returns -1.\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class MinStack {\npublic:\n    /** initialize your data structure here. */\n    stack<int> stackValue;\n    stack<int> stackMin;\n    MinStack() {\n\n    }\n\n    void push(int x) {\n        stackValue.push(x);\n        if (stackMin.empty() || stackMin.top() >= x)\n            stackMin.push(x);\n    }\n\n    void pop() {\n        if (stackMin.top() == stackValue.top()) stackMin.pop();\n        stackValue.pop();\n    }\n\n    int top() {\n        return stackValue.top();\n    }\n\n    int getMin() {\n        return stackMin.top();\n    }\n};\n\n")),(0,o.kt)("h4",{id:"\u80cc\u5305\u95ee\u9898"},"\u80cc\u5305\u95ee\u9898"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst int MAXN = 1005;\nint v[MAXN];    // \u4f53\u79ef\nint w[MAXN];    // \u4ef7\u503c \nint f[MAXN][MAXN];  // f[i][j], j\u4f53\u79ef\u4e0b\u524di\u4e2a\u7269\u54c1\u7684\u6700\u5927\u4ef7\u503c \n\nint main() \n{\n    int n, m;   \n    cin >> n >> m;\n    for(int i = 1; i <= n; i++) \n        cin >> v[i] >> w[i];\n\n    for(int i = 1; i <= n; i++) \n        for(int j = 1; j <= m; j++)\n        {\n            //  \u5f53\u524d\u80cc\u5305\u5bb9\u91cf\u88c5\u4e0d\u8fdb\u7b2ci\u4e2a\u7269\u54c1\uff0c\u5219\u4ef7\u503c\u7b49\u4e8e\u524di-1\u4e2a\u7269\u54c1\n            if(j < v[i]) \n                f[i][j] = f[i - 1][j];\n            // \u80fd\u88c5\uff0c\u9700\u8fdb\u884c\u51b3\u7b56\u662f\u5426\u9009\u62e9\u7b2ci\u4e2a\u7269\u54c1\n            else    \n                f[i][j] = max(f[i - 1][j], f[i - 1][j - v[i]] + w[i]);\n        }           \n\n    cout << f[n][m] << endl;\n    return 0;\n}\n")),(0,o.kt)("h4",{id:"\u80cc\u5305\u95ee\u9898\u6c42\u65b9\u6848\u6570"},"\u80cc\u5305\u95ee\u9898\u6c42\u65b9\u6848\u6570"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u6709 N \u4ef6\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f V \u7684\u80cc\u5305\u3002\u6bcf\u4ef6\u7269\u54c1\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u7b2c i \u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u662f v",(0,o.kt)("sub",null,"i"),"\uff0c\u4ef7\u503c\u662f w",(0,o.kt)("sub",null,"i"),"\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u8f93\u51fa \u6700\u4f18\u9009\u6cd5\u7684\u65b9\u6848\u6570\u3002\u6ce8\u610f\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c\u8bf7\u8f93\u51fa\u7b54\u6848\u6a21 10",(0,o.kt)("sup",null,"9"),"+7 \u7684\u7ed3\u679c\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u8f93\u5165\u683c\u5f0f"),(0,o.kt)("p",{parentName:"blockquote"},"\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570\uff0cN\uff0cV\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u7269\u54c1\u6570\u91cf\u548c\u80cc\u5305\u5bb9\u79ef\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u63a5\u4e0b\u6765\u6709 N \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 v",(0,o.kt)("sub",null,"i"),",w",(0,o.kt)("sub",null,"i"),"\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u7b2c i \u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u548c\u4ef7\u503c\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u8f93\u51fa\u683c\u5f0f"),(0,o.kt)("p",{parentName:"blockquote"},"\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a \u65b9\u6848\u6570 \u6a21 10",(0,o.kt)("sup",null,"9"),"+7 \u7684\u7ed3\u679c\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6570\u636e\u8303\u56f4\n0<N,V\u22641000\n0<v",(0,o.kt)("sub",null,"i"),",w",(0,o.kt)("sub",null,"i"),"\u22641000\n\u8f93\u5165\u6837\u4f8b"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre"},"4 5\n1 2\n2 4\n3 4\n4 6\n")),(0,o.kt)("p",{parentName:"blockquote"},"\u8f93\u51fa\u6837\u4f8b\uff1a"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre"},"2\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include<iostream>\n\nusing namespace std;\n\nconst int N = 1010;\nconst int mod = 1e9 + 7;\n\nint f[N], cnt[N];\nint main()\n{\n    int n, m;\n    scanf("%d%d", &n, &m);\n    for(int i = 0; i <= m; i ++)  cnt[i] = 1;\n\n    for(int i = 1; i <= n; i ++)\n    {\n        int v, w;\n        scanf("%d%d", &v, &w);\n        for(int j = m; j >= v; j --)\n        {\n            int value = f[j - v] + w;\n            if(value > f[j])\n            {\n                f[j] = value;\n                cnt[j] = cnt[j - v];\n            }else if(value == f[j]){\n                cnt[j] = (cnt[j] + cnt[j - v]) % mod;\n            }\n        }\n    }\n    printf("%d", cnt[m]);\n    return 0;\n}\n')),(0,o.kt)("h4",{id:"\u80cc\u5305\u95ee\u9898\u6c42\u5177\u4f53\u65b9\u6848"},"\u80cc\u5305\u95ee\u9898\u6c42\u5177\u4f53\u65b9\u6848"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u6709 N \u4ef6\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f V \u7684\u80cc\u5305\u3002\u6bcf\u4ef6\u7269\u54c1\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u7b2c i \u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u662f v",(0,o.kt)("sub",null,"i"),"\uff0c\u4ef7\u503c\u662f w",(0,o.kt)("sub",null,"i"),"\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u8f93\u51fa \u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u65b9\u6848\u3002\u8fd9\u91cc\u7684\u5b57\u5178\u5e8f\u662f\u6307\uff1a\u6240\u9009\u7269\u54c1\u7684\u7f16\u53f7\u6240\u6784\u6210\u7684\u5e8f\u5217\u3002\u7269\u54c1\u7684\u7f16\u53f7\u8303\u56f4\u662f 1\u2026N\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u8f93\u5165\u683c\u5f0f\n\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570\uff0cN\uff0cV\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u7269\u54c1\u6570\u91cf\u548c\u80cc\u5305\u5bb9\u79ef\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u63a5\u4e0b\u6765\u6709 N \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 v",(0,o.kt)("sub",null,"i"),",w",(0,o.kt)("sub",null,"i"),"\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u5206\u522b\u8868\u793a\u7b2c i \u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u548c\u4ef7\u503c\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u8f93\u51fa\u683c\u5f0f\n\u8f93\u51fa\u4e00\u884c\uff0c\u5305\u542b\u82e5\u5e72\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570\uff0c\u8868\u793a\u6700\u4f18\u89e3\u4e2d\u6240\u9009\u7269\u54c1\u7684\u7f16\u53f7\u5e8f\u5217\uff0c\u4e14\u8be5\u7f16\u53f7\u5e8f\u5217\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u7269\u54c1\u7f16\u53f7\u8303\u56f4\u662f 1\u2026N\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6570\u636e\u8303\u56f4"),(0,o.kt)("p",{parentName:"blockquote"},"0<N,V\u22641000\n0<v",(0,o.kt)("sub",null,"i"),",w",(0,o.kt)("sub",null,"i"),"\u22641000\n\u8f93\u5165\u6837\u4f8b"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre"},"4 5\n1 2\n2 4\n3 4\n4 6\n")),(0,o.kt)("p",{parentName:"blockquote"},"\u8f93\u51fa\u6837\u4f8b\uff1a")),(0,o.kt)("h4",{id:"\u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32"},"\u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u8868\u793a\u6570\u503c\uff08\u5305\u62ec\u6574\u6570\u548c\u5c0f\u6570\uff09\u3002"),(0,o.kt)("p",{parentName:"blockquote"},'\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32"+100","5e2","-123","3.1416"\u548c"-1E-16"\u90fd\u8868\u793a\u6570\u503c\u3002'),(0,o.kt)("p",{parentName:"blockquote"},'\u4f46\u662f"12e","1a3.14","1.2.3","+-5"\u548c"12e+4.3"\u90fd\u4e0d\u662f\u3002'),(0,o.kt)("p",{parentName:"blockquote"},"\u6ce8\u610f:"),(0,o.kt)("ul",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ul"},"\u5c0f\u6570\u53ef\u4ee5\u6ca1\u6709\u6574\u6570\u90e8\u5206\uff0c\u4f8b\u5982.123\u7b49\u4e8e0.123\uff1b"),(0,o.kt)("li",{parentName:"ul"},"\u5c0f\u6570\u70b9\u540e\u9762\u53ef\u4ee5\u6ca1\u6709\u6570\u5b57\uff0c\u4f8b\u5982233.\u7b49\u4e8e233.0\uff1b"),(0,o.kt)("li",{parentName:"ul"},"\u5c0f\u6570\u70b9\u524d\u9762\u548c\u540e\u9762\u53ef\u4ee5\u6709\u6570\u5b57\uff0c\u4f8b\u5982233.666;"),(0,o.kt)("li",{parentName:"ul"},"\u5f53e\u6216E\u524d\u9762\u6ca1\u6709\u6570\u5b57\u65f6\uff0c\u6574\u4e2a\u5b57\u7b26\u4e32\u4e0d\u80fd\u8868\u793a\u6570\u5b57\uff0c\u4f8b\u5982.e1\u3001e1\uff1b"),(0,o.kt)("li",{parentName:"ul"},"\u5f53e\u6216E\u540e\u9762\u6ca1\u6709\u6574\u6570\u65f6\uff0c\u6574\u4e2a\u5b57\u7b26\u4e32\u4e0d\u80fd\u8868\u793a\u6570\u5b57\uff0c\u4f8b\u598212e\u300112e+5.4;")),(0,o.kt)("p",{parentName:"blockquote"},"\u6837\u4f8b\uff1a"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'\u8f93\u5165: "0"\n\n\u8f93\u51fa: true\n'))),(0,o.kt)("h4",{id:"\u4e0d\u5206\u884c\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811"},"\u4e0d\u5206\u884c\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u4e0a\u5f80\u4e0b\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u540c\u4e00\u5c42\u7684\u7ed3\u70b9\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6837\u4f8b"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"\u8f93\u5165\u5982\u4e0b\u56fe\u6240\u793a\u4e8c\u53c9\u6811[8, 12, 2, null, null, 6, null, 4, null, null, null]\n    8\n   / \\\n  12  2\n     /\n    6\n   /\n  4\n\n\u8f93\u51fa\uff1a[8, 12, 2, 6, 4]\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> printFromTopToBottom(TreeNode* root) {\n        vector<int> res;\n        if (!root) return res;\n        queue<TreeNode*> q;\n        q.push(root);\n\n        while (q.size()) {\n            auto t = q.front();\n            q.pop();\n            res.push_back(t->val);\n            if (t->left) q.push(t->left);\n            if (t->right) q.push(t->right);\n        }\n\n        return res;\n    }\n};\n\n")),(0,o.kt)("h4",{id:"\u4e0d\u4fee\u6539\u6570\u7ec4\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57"},"\u4e0d\u4fee\u6539\u6570\u7ec4\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n+1 \u7684\u6570\u7ec4nums\uff0c\u6570\u7ec4\u4e2d\u6240\u6709\u7684\u6570\u5747\u5728 1\u223cn \u7684\u8303\u56f4\u5185\uff0c\u5176\u4e2d n\u22651\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\uff0c\u4f46\u4e0d\u80fd\u4fee\u6539\u8f93\u5165\u7684\u6570\u7ec4\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6837\u4f8b"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"\u7ed9\u5b9a nums = [2, 3, 5, 4, 3, 2, 6, 7]\u3002\n\n\u8fd4\u56de 2 \u6216 3\u3002\n")),(0,o.kt)("p",{parentName:"blockquote"},"\u601d\u8003\u9898\uff1a\u5982\u679c\u53ea\u80fd\u4f7f\u7528 O(1) \u7684\u989d\u5916\u7a7a\u95f4\uff0c\u8be5\u600e\u4e48\u505a\u5462\uff1f")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int duplicateInArray(vector<int>& nums) {\n        int l = 1, r = nums.size() - 1;\n        while (l < r) {\n            int mid = l + r >> 1; // \u5212\u5206\u7684\u533a\u95f4\uff1a[l, mid], [mid + 1, r]\n            int s = 0;\n            for (auto x : nums) s += x >= l && x <= mid;\n            if (s > mid - l + 1) r = mid;\n            else l = mid + 1;\n        }\n        return r;\n    }\n};\n")),(0,o.kt)("h4",{id:"\u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5"},"\u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6c42\u4e24\u4e2a\u6574\u6570\u4e4b\u548c\uff0c\u8981\u6c42\u5728\u51fd\u6570\u4f53\u5185\u4e0d\u5f97\u4f7f\u7528 \uff0b\u3001\uff0d\u3001\xd7\u3001\xf7 \u56db\u5219\u8fd0\u7b97\u7b26\u53f7\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6837\u4f8b"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1anum1 = 1 , num2 = 2\n\n\u8f93\u51fa\uff1a3\n"))),(0,o.kt)("h4",{id:""}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c++"},"class Solution {\npublic:\n    int add(int num1, int num2){\n        while(num2!=0){\n            int sum = num1 ^ num2;//\u4e0d\u8fdb\u4f4d\u7684\u52a0\u6cd5\n            int carry = (num1 & num2)<<1;//\u8fdb\u4f4d\n            num1 = sum;\n            num2 = carry;\n        }\n        return num1;\n    }\n};\n\n")),(0,o.kt)("h4",{id:"\u8d85\u5e02"},"\u8d85\u5e02"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u8d85\u5e02\u91cc\u6709 N \u4ef6\u5546\u54c1\uff0c\u6bcf\u4ef6\u5546\u54c1\u90fd\u6709\u5229\u6da6 p",(0,o.kt)("sub",null,"i")," \u548c\u8fc7\u671f\u65f6\u95f4 d",(0,o.kt)("sub",null,"i"),"\uff0c\u6bcf\u5929\u53ea\u80fd\u5356\u4e00\u4ef6\u5546\u54c1\uff0c\u8fc7\u671f\u5546\u54c1\u4e0d\u80fd\u518d\u5356\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6c42\u5408\u7406\u5b89\u6392\u6bcf\u5929\u5356\u7684\u5546\u54c1\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5f97\u5230\u7684\u6700\u5927\u6536\u76ca\u662f\u591a\u5c11\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u8f93\u5165\u6837\u4f8b\uff1a"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre"},"4  50 2  10 1   20 2   30 1\n\n7  20 1   2 1   10 3  100 2   8 2\n   5 20  50 10\n")),(0,o.kt)("p",{parentName:"blockquote"},"\u8f93\u51fa\u6837\u4f8b\uff1a"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre"},"80\n185\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1e4 + 233;\ntypedef pair<int,int> pii;\nvector<pii> a;\nint f[maxn];\nint ff(int x)\n{\n    if(f[x] == x) return x;\n    return f[x] = ff(f[x]);\n}\nint main()\n{\n    int n;\n    while(cin >> n)\n    {\n        int ans = 0;\n        a.clear();\n        int maxe = 0;\n\n        for(int i = 1; i <= n; i++)\n        {\n            int v,e;\n            scanf("%d%d", &v, &e);\n            a.push_back({-v, e});\n            maxe = max(maxe, e);\n        }\n        for(int i = 0; i <= maxe; i++) f[i] = i;\n        sort(a.begin(), a.end());\n        for(int i = 0; i < a.size(); i++)\n        {\n            int v = -a[i].first, e = a[i].second;\n            int pos = ff(e);\n            if(pos > 0)\n            {\n                ans += v;\n                f[pos] = pos - 1;\n            }\n        }\n        printf("%d\\n", ans);\n    }\n}\n')),(0,o.kt)("h4",{id:"\u4e11\u6570"},"\u4e11\u6570"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u6211\u4eec\u628a\u53ea\u5305\u542b\u8d28\u56e0\u5b50 2\u30013 \u548c 5 \u7684\u6570\u79f0\u4f5c\u4e11\u6570\uff08Ugly Number\uff09\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u4f8b\u5982 6\u30018 \u90fd\u662f\u4e11\u6570\uff0c\u4f46 14 \u4e0d\u662f\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u8d28\u56e0\u5b50 7\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6c42\u7b2c n \u4e2a\u4e11\u6570\u7684\u503c\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6837\u4f8b"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"\u8f93\u5165\uff1a5\n\n\u8f93\u51fa\uff1a5\n")),(0,o.kt)("p",{parentName:"blockquote"},"\u6ce8\u610f\uff1a\u4e60\u60ef\u4e0a\u6211\u4eec\u628a 1 \u5f53\u505a\u7b2c\u4e00\u4e2a\u4e11\u6570\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int getUglyNumber(int n) {\n        if(n <= 1) return n;\n        vector<int> f(1,1);\n        int i = 0, j = 0, k = 0;\n        long long t = 0;\n        while(--n)\n        {\n            t = min(f[i] * 2, min (f[j] * 3, f[k] * 5));\n            if(t == f[i] * 2) i++;\n            if(t == f[j] * 3) j++;\n            if(t == f[k] * 5) k++;\n            f.push_back(t);\n        }\n        return f.back();\n    }\n};\n\n")),(0,o.kt)("h4",{id:"\u755c\u680f\u9884\u5b9a"},"\u755c\u680f\u9884\u5b9a"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u6709 N \u5934\u725b\u5728\u755c\u680f\u4e2d\u5403\u8349\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6bcf\u4e2a\u755c\u680f\u5728\u540c\u4e00\u65f6\u95f4\u6bb5\u53ea\u80fd\u63d0\u4f9b\u7ed9\u4e00\u5934\u725b\u5403\u8349\uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a\u9700\u8981\u591a\u4e2a\u755c\u680f\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u7ed9\u5b9a N \u5934\u725b\u548c\u6bcf\u5934\u725b\u5f00\u59cb\u5403\u8349\u7684\u65f6\u95f4 A \u4ee5\u53ca\u7ed3\u675f\u5403\u8349\u7684\u65f6\u95f4 B\uff0c\u6bcf\u5934\u725b\u5728 ","[A,B]"," \u8fd9\u4e00\u65f6\u95f4\u6bb5\u5185\u90fd\u4f1a\u4e00\u76f4\u5403\u8349\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u5f53\u4e24\u5934\u725b\u7684\u5403\u8349\u533a\u95f4\u5b58\u5728\u4ea4\u96c6\u65f6\uff08\u5305\u62ec\u7aef\u70b9\uff09\uff0c\u8fd9\u4e24\u5934\u725b\u4e0d\u80fd\u88ab\u5b89\u6392\u5728\u540c\u4e00\u4e2a\u755c\u680f\u5403\u8349\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6c42\u9700\u8981\u7684\u6700\u5c0f\u755c\u680f\u6570\u76ee\u548c\u6bcf\u5934\u725b\u5bf9\u5e94\u7684\u755c\u680f\u65b9\u6848\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u7b2c 1 \u884c\uff1a\u8f93\u5165\u4e00\u4e2a\u6574\u6570 N\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u7b2c 2..N+1 \u884c\uff1a\u7b2c i+1 \u884c\u8f93\u5165\u7b2c i \u5934\u725b\u7684\u5f00\u59cb\u5403\u8349\u65f6\u95f4 A \u4ee5\u53ca\u7ed3\u675f\u5403\u8349\u65f6\u95f4 B\uff0c\u6570\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u8f93\u5165\u6837\u4f8b\uff1a"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre"},"5\n1 10\n2 4\n3 6\n5 8\n4 7\n")),(0,o.kt)("p",{parentName:"blockquote"},"\u8f93\u51fa\u6837\u4f8b\uff1a"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre"},"4\n1\n2\n3\n2\n4\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <vector>\n\nusing namespace std;\n\ntypedef pair<int,int> PII;\nconst int N = 50010;\n\nint n;\nint id[N];\npair<PII, int> cows[N];\n\nint main()\n{\n    cin >> n;\n    for (int i = 0; i < n; i ++ )\n    {\n        cin >> cows[i].first.first >> cows[i].first.second;\n        cows[i].second = i;\n    }\n\n    sort(cows, cows + n);\n\n    priority_queue<PII, vector<PII>, greater<PII>> heap;\n    for (int i = 0; i < n; i ++ )\n    {\n        if (heap.empty() || heap.top().first >= cows[i].first.first)\n        {\n            PII stall = {cows[i].first.second, heap.size()};\n            id[cows[i].second] = stall.second;\n            heap.push(stall);\n        }\n        else\n        {\n            auto stall = heap.top();\n            heap.pop();\n            stall.first = cows[i].first.second;\n            id[cows[i].second] = stall.second;\n            heap.push(stall);\n        }\n    }\n\n    cout << heap.size() << endl;\n    for (int i = 0; i < n; i ++ ) cout << id[i] + 1 << endl;\n    return 0;\n}\n")),(0,o.kt)("h4",{id:"\u4ece1\u5230n\u6574\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570"},"\u4ece1\u5230n\u6574\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u8f93\u5165\u4e00\u4e2a\u6574\u6570 n\uff0c\u6c42\u4ece 1 \u5230 n \u8fd9 n \u4e2a\u6574\u6570\u7684\u5341\u8fdb\u5236\u8868\u793a\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u4f8b\u5982\u8f93\u5165 12\uff0c\u4ece 1 \u5230 12 \u8fd9\u4e9b\u6574\u6570\u4e2d\u5305\u542b \u201c1\u201d \u7684\u6570\u5b57\u6709 1\uff0c10\uff0c11 \u548c 12\uff0c\u5176\u4e2d \u201c1\u201d \u4e00\u5171\u51fa\u73b0\u4e86 5 \u6b21\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6837\u4f8b"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"\u8f93\u5165\uff1a 12\n\u8f93\u51fa\uff1a 5\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int numberOf1Between1AndN_Solution(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i *= 10) {\n            int a = n / i,b = n % i;\n            //\u4e4b\u6240\u4ee5\u88658\uff0c\u662f\u56e0\u4e3a\u5f53\u767e\u4f4d\u4e3a0\uff0c\u5219a/10==(a+8)/10\uff0c\n            //\u5f53\u767e\u4f4d>=2\uff0c\u88658\u4f1a\u4ea7\u751f\u8fdb\u4f4d\u4f4d\uff0c\u6548\u679c\u7b49\u540c\u4e8e(a/10+1)\n         count += (a + 8) / 10 * i + ((a % 10 == 1) ? b + 1 : 0);\n        }\n        return count;\n    }\n};\n//\u603b\u7ed3\u4e00\u4e0b\u4ee5\u4e0a\u7684\u7b97\u6cd5\uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u5f53\u8ba1\u7b97\u53f3\u6570\u7b2c i \u4f4d\u5305\u542b\u7684 X \u7684\u4e2a\u6570\u65f6\uff1a\n\n//\u53d6\u7b2c i \u4f4d\u5de6\u8fb9\uff08\u9ad8\u4f4d\uff09\u7684\u6570\u5b57\uff0c\u4e58\u4ee5 10i\u22121\uff0c\u5f97\u5230\u57fa\u7840\u503c a\u3002\n//\u53d6\u7b2c i \u4f4d\u6570\u5b57\uff0c\u8ba1\u7b97\u4fee\u6b63\u503c\uff1a \n//\u5982\u679c\u5927\u4e8e X\uff0c\u5219\u7ed3\u679c\u4e3a a+10i\u22121\u3002\n//\u5982\u679c\u5c0f\u4e8e X\uff0c\u5219\u7ed3\u679c\u4e3a a\u3002\n//\u5982\u679c\u7b49 X\uff0c\u5219\u53d6\u7b2c i \u4f4d\u53f3\u8fb9\uff08\u4f4e\u4f4d\uff09\u6570\u5b57\uff0c\u8bbe\u4e3a b\uff0c\u6700\u540e\u7ed3\u679c\u4e3a a+b+1\u3002\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u6309\u7167 \u4ece\u5c3e\u5230\u5934 \u7684\u987a\u5e8f\u8fd4\u56de\u8282\u70b9\u7684\u503c\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u8fd4\u56de\u7684\u7ed3\u679c\u7528\u6570\u7ec4\u5b58\u50a8\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6837\u4f8b"),(0,o.kt)("p",{parentName:"blockquote"},"\u8f93\u5165\uff1a","[2, 3, 5]","\n\u8fd4\u56de\uff1a","[5, 3, 2]")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> printListReversingly(ListNode* head) {\n        vector<int> res;\n        while (head) {\n            res.push_back(head->val);\n            head = head->next;\n        }\n        return vector<int>(res.rbegin(), res.rend());\n    }\n};\n")),(0,o.kt)("h4",{id:"\u9012\u5f52\u5b9e\u73b0\u6392\u5217\u578b\u679a\u4e3e"},"\u9012\u5f52\u5b9e\u73b0\u6392\u5217\u578b\u679a\u4e3e"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u628a 1\u223cn \u8fd9 n \u4e2a\u6574\u6570\u6392\u6210\u4e00\u884c\u540e\u968f\u673a\u6253\u4e71\u987a\u5e8f\uff0c\u8f93\u51fa\u6240\u6709\u53ef\u80fd\u7684\u6b21\u5e8f\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include<iostream>\nusing namespace std;\nconst int N = 10;\nint path[N];//\u4fdd\u5b58\u5e8f\u5217\nint state[N];//\u6570\u5b57\u662f\u5426\u88ab\u7528\u8fc7\nint n;\nvoid dfs(int u)\n{\n    if(u > n)//\u6570\u5b57\u586b\u5b8c\u4e86\uff0c\u8f93\u51fa\n    {\n        for(int i = 1; i <= n; i++)//\u8f93\u51fa\u65b9\u6848\n            cout << path[i] << " ";\n        cout << endl;\n    }\n\n    for(int i = 1; i <= n; i++)//\u7a7a\u4f4d\u4e0a\u53ef\u4ee5\u9009\u62e9\u7684\u6570\u5b57\u4e3a:1 ~ n\n    {\n        if(!state[i])//\u5982\u679c\u6570\u5b57 i \u6ca1\u6709\u88ab\u7528\u8fc7\n        {\n            path[u] = i;//\u653e\u5165\u7a7a\u4f4d\n            state[i] = 1;//\u6570\u5b57\u88ab\u7528\uff0c\u4fee\u6539\u72b6\u6001\n            dfs(u + 1);//\u586b\u4e0b\u4e00\u4e2a\u4f4d\n            state[i] = 0;//\u56de\u6eaf\uff0c\u53d6\u51fa i\n        }\n    }\n}\n\nint main()\n{\n\n    cin >> n;\n    dfs(1);\n    return 0;\n}\n\n')),(0,o.kt)("h4",{id:"\u9012\u5f52\u5b9e\u73b0\u6307\u6570\u578b\u679a\u4e3e"},"\u9012\u5f52\u5b9e\u73b0\u6307\u6570\u578b\u679a\u4e3e"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u4ece 1\u223cn \u8fd9 n \u4e2a\u6574\u6570\u4e2d\u968f\u673a\u9009\u53d6\u4efb\u610f\u591a\u4e2a\uff0c\u8f93\u51fa\u6240\u6709\u53ef\u80fd\u7684\u9009\u62e9\u65b9\u6848\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u540c\u4e00\u884c\u5185\u7684\u6570\u5fc5\u987b\u5347\u5e8f\u6392\u5217\uff0c\u76f8\u90bb\u4e24\u4e2a\u6570\u7528\u6070\u597d 1 \u4e2a\u7a7a\u683c\u9694\u5f00\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\nusing namespace std;\n\nint n;\n\n// u\u662f\u5f53\u524d\u679a\u4e3e\u5230\u7684\u6570\uff0cstate\u662f\u4e8c\u8fdb\u5236\u6570\u8bb0\u5f55\u54ea\u4e9b\u6570\u88ab\u9009\nvoid dfs(int u, int state) {\n    if (u == n) {\n        for (int i = 0; i < n; i ++)\n            if (state >> i & 1)\n                cout << i + 1 << " ";\n            cout << endl;\n        return ;\n    }\n\n    dfs (u + 1, state);  // \u4e0d\u7528u\u8fd9\u4e2a\u6570\n    dfs (u + 1, state | (1 << u)); // \u7528u\u8fd9\u4e2a\u6570\n}\n\nint main() {\n    cin >> n;\n    dfs(0, 0);\n    return 0;\n}\n\n')),(0,o.kt)("h4",{id:"\u9012\u5f52\u5b9e\u73b0\u7ec4\u5408\u578b\u679a\u4e3e"},"\u9012\u5f52\u5b9e\u73b0\u7ec4\u5408\u578b\u679a\u4e3e"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u4ece 1\u223cn \u8fd9 n \u4e2a\u6574\u6570\u4e2d\u968f\u673a\u9009\u51fa m \u4e2a\uff0c\u8f93\u51fa\u6240\u6709\u53ef\u80fd\u7684\u9009\u62e9\u65b9\u6848\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include<bits/stdc++.h>\nusing namespace std;\n\nint n,m;\nvector<int> num;\n\nvoid dfs(int k)\n{\n    //\u5982\u9898\u89e3\u6240\u8ff0\n    if(num.size() > m || num.size() + (n - k + 1) < m)\n        return;\n    //\u5230\u8fbe\u679a\u4e3e\u8fb9\u754c\uff0c\u8f93\u51fa\u7ed3\u679c\u5e76\u7ed3\u675f\n    if(k == n + 1)\n    {\n        for(int i = 0;i < num.size();++i)\n            cout << num[i] << " ";\n\n        cout << endl;\n        return;\n    }\n    //\u9009\u62e9\u8fd9\u4e2a\u6570\n    num.push_back(k);\n    dfs(k+1);\n    //\u56de\u6eaf\n    num.pop_back();\n    //\u4e0d\u9009\u62e9\u8fd9\u4e2a\u6570\n    dfs(k+1);\n}\n\nint main(void)\n{\n    cin >> n >> m;\n    dfs(1);\n    return 0;\n}\n\n')),(0,o.kt)("h4",{id:"\u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762"},"\u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u6574\u8be5\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u4f7f\u5f97\u6240\u6709\u7684\u5947\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u7684\u5076\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u540e\u534a\u90e8\u5206\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6837\u4f8b"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"\u8f93\u5165\uff1a[1,2,3,4,5]\n\n\u8f93\u51fa: [1,3,5,2,4]\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void reOrderArray(vector<int> &array) {\n         int l = 0, r = array.size() - 1;\n         while (l < r) {\n             while (l < r && array[l] % 2 == 1) l ++ ;\n             while (l < r && array[r] % 2 == 0) r -- ;\n             if (l < r) swap(array[l], array[r]);\n         }\n    }\n};\n")),(0,o.kt)("h4",{id:"\u52a8\u6001\u4e2d\u4f4d\u6570"},"\u52a8\u6001\u4e2d\u4f4d\u6570"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u4f9d\u6b21\u8bfb\u5165\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u6bcf\u5f53\u5df2\u7ecf\u8bfb\u5165\u7684\u6574\u6570\u4e2a\u6570\u4e3a\u5947\u6570\u65f6\uff0c\u8f93\u51fa\u5df2\u8bfb\u5165\u7684\u6574\u6570\u6784\u6210\u7684\u5e8f\u5217\u7684\u4e2d\u4f4d\u6570\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#include <vector>\nusing namespace std;\nstruct cmp1\n{\n    bool operator ()(int &a,int &b)\n    {\n        return a>b;//\u5c0f\u6839\u5806\uff0c\u4e0d\u662f\u5927\u6839\u5806\n    }\n};\npriority_queue <int,vector<int>, cmp1> q1,kong1;\npriority_queue <int> q2,kong2;\nvoid init()\n{\n    int t,x,n,now;\n    cin>>t;\n    while(t--)\n    {\n        cin>>x>>n;\n        cout<<x<<" "<<(n+1)/2<<endl;\n        q1=kong1;\n        q2=kong2;\n        int cnt=0;\n        for (int i=1;i<=n;i++)\n        {\n            cin>>now;\n            if(q1.empty())\n                q1.push(now);\n            else\n            {\n                if(now>q1.top()) \n                    q1.push(now);\n                else \n                    q2.push(now);\n                while(q1.size()<q2.size())\n                {\n                    q1.push(q2.top());\n                    q2.pop();\n                }\n                while(q1.size()>q2.size()+1)\n                {\n                    q2.push(q1.top());\n                    q1.pop();\n                }\n            }\n            if (i&1)\n            {\n                cnt++;\n                cout<<q1.top()<<" ";\n                if (!(cnt%10))\n                    cout<<endl;\n            }\n        }\n        puts("");\n    }\n}\nint main()\n{\n    init();\n    return 0;\n}\n\n')),(0,o.kt)("h4",{id:"\u5bf9\u79f0\u7684\u4e8c\u53c9\u6811"},"\u5bf9\u79f0\u7684\u4e8c\u53c9\u6811"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u4e00\u68f5\u4e8c\u53c9\u6811\u662f\u4e0d\u662f\u5bf9\u79f0\u7684\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u5982\u679c\u4e00\u68f5\u4e8c\u53c9\u6811\u548c\u5b83\u7684\u955c\u50cf\u4e00\u6837\uff0c\u90a3\u4e48\u5b83\u662f\u5bf9\u79f0\u7684\u3002"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"\u5982\u4e0b\u56fe\u6240\u793a\u4e8c\u53c9\u6811[1,2,2,3,4,4,3,null,null,null,null,null,null,null,null]\u4e3a\u5bf9\u79f0\u4e8c\u53c9\u6811\uff1a\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n\n\u5982\u4e0b\u56fe\u6240\u793a\u4e8c\u53c9\u6811[1,2,2,null,4,4,3,null,null,null,null,null,null]\u4e0d\u662f\u5bf9\u79f0\u4e8c\u53c9\u6811\uff1a\n    1\n   / \\\n  2   2\n   \\ / \\\n   4 4  3\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n        if (!root) return true;\n        stack<TreeNode*> left, right;\n        TreeNode *lc = root->left;\n        TreeNode *rc = root->right;\n        while(lc || rc || left.size())\n        {\n            while (lc && rc)\n            {\n                left.push(lc), right.push(rc);\n                lc = lc->left, rc = rc->right;\n            }\n            if (lc || rc) return false;\n            lc = left.top(), rc = right.top();\n            left.pop(), right.pop();\n            if (lc->val != rc->val) return false;\n            lc = lc->right, rc = rc->left;\n        }\n        return true;\n    }\n\n};\n")),(0,o.kt)("h4",{id:"\u4e8c\u53c9\u6811\u7684\u955c\u50cf"},"\u4e8c\u53c9\u6811\u7684\u955c\u50cf"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u8f93\u5165\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5c06\u5b83\u53d8\u6362\u4e3a\u5b83\u7684\u955c\u50cf\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6837\u4f8b"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"\u8f93\u5165\u6811\uff1a\n      8\n     / \\\n    6  10\n   / \\ / \\\n  5  7 9 11\n\n [8,6,10,5,7,9,11,null,null,null,null,null,null,null,null] \n\u8f93\u51fa\u6811\uff1a\n      8\n     / \\\n    10  6\n   / \\ / \\\n  11 9 7  5\n\n [8,10,6,11,9,7,5,null,null,null,null,null,null,null,null]\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c++"},"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void mirror(TreeNode* root) {\n        if (!root) return;\n        swap(root->left, root->right);\n        mirror(root->left);\n        mirror(root->right);\n    }\n};\n\n")),(0,o.kt)("h4",{id:"\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6"},"\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9\uff0c\u6c42\u8be5\u6811\u7684\u6df1\u5ea6\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u4f9d\u6b21\u7ecf\u8fc7\u7684\u7ed3\u70b9\uff08\u542b\u6839\u3001\u53f6\u7ed3\u70b9\uff09\u5f62\u6210\u6811\u7684\u4e00\u6761\u8def\u5f84\uff0c\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u4e3a\u6811\u7684\u6df1\u5ea6\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6837\u4f8b"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"\u8f93\u5165\uff1a\u4e8c\u53c9\u6811[8, 12, 2, null, null, 6, 4, null, null, null, null]\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n    8\n   / \\\n  12  2\n     / \\\n    6   4\n\n\u8f93\u51fa\uff1a3\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c++"},"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n\n    void dfs(TreeNode* root, int d) {\n        if (root->left) dfs(root->left, d+1);\n        if (root->right) dfs(root->right, d+1);\n        ans = max(ans, d);\n    }\n\n    int treeDepth(TreeNode* root) {\n        if (root == NULL) return 0;\n        ans = 0;\n        dfs(root, 1);\n        return ans;\n    }\nprivate:\n    int ans;\n};\n\n")),(0,o.kt)("h4",{id:"\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9"},"\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u5176\u4e2d\u4e00\u4e2a\u8282\u70b9\uff0c\u8bf7\u627e\u51fa\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002"),(0,o.kt)("p",{parentName:"blockquote"},"\u6ce8\u610f\uff1a"),(0,o.kt)("ul",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ul"},"\u5982\u679c\u7ed9\u5b9a\u7684\u8282\u70b9\u662f\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u5219\u8fd4\u56de\u7a7a\u8282\u70b9;"),(0,o.kt)("li",{parentName:"ul"},"\u4e8c\u53c9\u6811\u4e00\u5b9a\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u7ed9\u5b9a\u7684\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u7a7a\u8282\u70b9\uff1b\n\u6837\u4f8b")),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"\u5047\u5b9a\u4e8c\u53c9\u6811\u662f\uff1a[2, 1, 3, null, null, null, null]\uff0c \u7ed9\u51fa\u7684\u662f\u503c\u7b49\u4e8e2\u7684\u8282\u70b9\u3002\n\n\u5219\u5e94\u8fd4\u56de\u503c\u7b49\u4e8e3\u7684\u8282\u70b9\u3002\n\n\u89e3\u91ca\uff1a\u8be5\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u5982\u4e0b\uff0c2\u7684\u540e\u7ee7\u8282\u70b9\u662f3\u3002\n  2\n / \\\n1   3\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c++"},"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode *father;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL), father(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* inorderSuccessor(TreeNode* p) {\n        if (p->right) {\n            p = p->right;\n            while (p->left) p = p->left;\n            return p;\n        }\n\n        while (p->father && p == p->father->right) p = p->father;\n        return p->father;\n    }\n};\n\n")))}s.isMDXComponent=!0}}]);