(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[5814],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return N}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),i=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},m=function(e){var t=i(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=i(n),N=r,d=c["".concat(l,".").concat(N)]||c[N]||u[N]||s;return n?a.createElement(d,p(p({ref:t},m),{},{components:n})):a.createElement(d,p({ref:t},m))}));function N(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,p=new Array(s);p[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,p[1]=o;for(var i=2;i<s;i++)p[i]=n[i];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},62286:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return i},default:function(){return u}});var a=n(22122),r=n(19756),s=(n(67294),n(3905)),p=["components"],o={id:"A7.\u6811",title:"A7.\u6811","typora-root-url":"../"},l={unversionedId:"Algorithm/A7.\u6811",id:"Algorithm/A7.\u6811",isDocsHomePage:!1,title:"\u6811",description:"\u6811\u53ef\u4ee5\u89e3\u51b3\u5b8c\u5168\u5305\u542b\u95ee\u9898",source:"@site/docs/2.Algorithm/A9.\u6811.md",sourceDirName:"2.Algorithm",slug:"/Algorithm/A7.\u6811",permalink:"/Algorithm/A7.\u6811",editUrl:"https://github.com/worst0/wiki_note/edit/main/docs/2.Algorithm/A9.\u6811.md",version:"current",frontMatter:{id:"A7.\u6811",title:"A7.\u6811","typora-root-url":"../"},sidebar:"Document\ud83d\udcbb",previous:{title:"\u6392\u5e8f",permalink:"/Algorithm/A7.\u6392\u5e8f"},next:{title:"\u5b57\u7b26\u4e32\u5339\u914d",permalink:"/Algorithm/A8.\u5b57\u7b26\u4e32\u5339\u914d"}},i=[{value:"\u4e8c\u53c9\u6811\u57fa\u7840",id:"\u4e8c\u53c9\u6811\u57fa\u7840",children:[{value:"xiti",id:"xiti",children:[]}]},{value:"\u4e8c\u53c9\u6811\u904d\u5386",id:"\u4e8c\u53c9\u6811\u904d\u5386",children:[]},{value:"\u8fed\u4ee3\u6cd5\u4e2d\u5e8f\u904d\u5386",id:"\u8fed\u4ee3\u6cd5\u4e2d\u5e8f\u904d\u5386",children:[]},{value:"\u4e2d\u5e8f\u904d\u5386\uff08\u8fed\u4ee3\u6cd5\uff09",id:"\u4e2d\u5e8f\u904d\u5386\uff08\u8fed\u4ee3\u6cd5\uff09",children:[]},{value:"\u8fed\u4ee3\u6cd5\u524d\u5e8f\u904d\u5386",id:"\u8fed\u4ee3\u6cd5\u524d\u5e8f\u904d\u5386",children:[]},{value:"\u524d\u5e8f\u904d\u5386\uff08\u8fed\u4ee3\u6cd5\uff09",id:"\u524d\u5e8f\u904d\u5386\uff08\u8fed\u4ee3\u6cd5\uff09",children:[]},{value:"\u8fed\u4ee3\u6cd5\u540e\u5e8f\u904d\u5386",id:"\u8fed\u4ee3\u6cd5\u540e\u5e8f\u904d\u5386",children:[]},{value:"\u540e\u5e8f\u904d\u5386\uff08\u8fed\u4ee3\u6cd5\uff09",id:"\u540e\u5e8f\u904d\u5386\uff08\u8fed\u4ee3\u6cd5\uff09",children:[]},{value:"\u4e8c\u53c9\u6811\u7684\u904d\u5386",id:"\u4e8c\u53c9\u6811\u7684\u904d\u5386",children:[]},{value:"\u4e8c\u53c9\u6811\u7684\u9012\u5f52\u76f8\u5173\u9898\u76ee",id:"\u4e8c\u53c9\u6811\u7684\u9012\u5f52\u76f8\u5173\u9898\u76ee",children:[{value:"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u641c\u7d22\u5b50\u6811",id:"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u641c\u7d22\u5b50\u6811",children:[]},{value:"\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316",id:"\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316",children:[]},{value:"\u4e8c\u53c9\u6811\u6811\u7684\u76f4\u5f84 / \u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u6700\u5927\u8ddd\u79bb",id:"\u4e8c\u53c9\u6811\u6811\u7684\u76f4\u5f84--\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u6700\u5927\u8ddd\u79bb",children:[]},{value:"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u8def\u5f84\u548c",id:"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u8def\u5f84\u548c",children:[]},{value:"\u4e8c\u53c9\u6811\u4e2d\u6240\u6709\u8ddd\u79bb\u4e3aK\u7684\u8282\u70b9",id:"\u4e8c\u53c9\u6811\u4e2d\u6240\u6709\u8ddd\u79bb\u4e3ak\u7684\u8282\u70b9",children:[]},{value:"\u5b8c\u5168\u4e8c\u53c9\u6811\u8282\u70b9\u4e2a\u6570",id:"\u5b8c\u5168\u4e8c\u53c9\u6811\u8282\u70b9\u4e2a\u6570",children:[]},{value:"\u8def\u5f84\u603b\u548c",id:"\u8def\u5f84\u603b\u548c",children:[]},{value:"\u8def\u5f84\u603b\u548cIII",id:"\u8def\u5f84\u603b\u548ciii",children:[]}]},{value:"\u5e8f\u5217\u751f\u6210\u4e8c\u53c9\u6811",id:"\u5e8f\u5217\u751f\u6210\u4e8c\u53c9\u6811",children:[{value:"\u4e8c\u53c9\u6811\u8f6c\u6362\u4e3a\u5355\u5411\u94fe\u8868",id:"\u4e8c\u53c9\u6811\u8f6c\u6362\u4e3a\u5355\u5411\u94fe\u8868",children:[]},{value:"\u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e3aBBST",id:"\u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e3abbst",children:[]},{value:"\u6700\u5c0f\u9ad8\u5ea6\u6811",id:"\u6700\u5c0f\u9ad8\u5ea6\u6811",children:[]},{value:"\u4e8c\u53c9\u6811\u8f6c\u6362\u4e3a\u53cc\u5411\u94fe\u8868",id:"\u4e8c\u53c9\u6811\u8f6c\u6362\u4e3a\u53cc\u5411\u94fe\u8868",children:[]},{value:"\u9a8c\u8bc1\u524d\u5e8f\u904d\u5386\u5e8f\u5217\u4e8c\u53c9\u6811",id:"\u9a8c\u8bc1\u524d\u5e8f\u904d\u5386\u5e8f\u5217\u4e8c\u53c9\u6811",children:[]},{value:"\u9a8c\u8bc1\u540e\u5e8f\u904d\u5386",id:"\u9a8c\u8bc1\u540e\u5e8f\u904d\u5386",children:[]},{value:"\u9a8c\u8bc1BST",id:"\u9a8c\u8bc1bst",children:[]},{value:"\u5148\u5e8f\u904d\u5386\u6784\u9020BST",id:"\u5148\u5e8f\u904d\u5386\u6784\u9020bst",children:[]},{value:"\u524d\u5e8f\u548c\u4e2d\u5e8f\u6784\u9020\u4e8c\u53c9\u6811",id:"\u524d\u5e8f\u548c\u4e2d\u5e8f\u6784\u9020\u4e8c\u53c9\u6811",children:[]},{value:"\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",id:"\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",children:[]},{value:"\u6062\u590d\u4e8c\u53c9\u6811",id:"\u6062\u590d\u4e8c\u53c9\u6811",children:[]}]},{value:"\u5e94\u7528",id:"\u5e94\u7528",children:[{value:"\u5929\u9645\u7ebf\u95ee\u9898",id:"\u5929\u9645\u7ebf\u95ee\u9898",children:[]}]}],m={toc:i};function u(e){var t=e.components,n=(0,r.Z)(e,p);return(0,s.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"}," \u6811\u53ef\u4ee5\u89e3\u51b3\u5b8c\u5168\u5305\u542b\u95ee\u9898")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"\u6811\u7684\u8282\u70b9\u4ee3\u8868:\u96c6\u5408;\t\u8fb9\u4ee3\u8868:\u5173\u7cfb;")),(0,s.kt)("h2",{id:"\u4e8c\u53c9\u6811\u57fa\u7840"},"\u4e8c\u53c9\u6811\u57fa\u7840"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"\u4e8c\u53c9\u6811\u5b9a\u4e49"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"n\u4e2a\u7ed3\u70b9\u7684\u6709\u9650\u96c6\u5408\uff0c\u8be5\u96c6\u5408\u4e3a\u7a7a\u96c6\uff0c\u6216\u8005\u4e00\u4e2a\u6839\u8282\u70b9\u548c\u4e24\u68f5\u4e92\u4e0d\u76f8\u4ea4\u7684\u3001\u5206\u522b\u79f0\u4e3a\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u4e8c\u53c9\u6811\u7ec4\u6210"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"\u6ee1\u4e8c\u53c9\u6811"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"\u4e00\u68f5\u4e8c\u53c9\u6811\u4e2d\u6240\u6709\u5206\u652f\u7ed3\u70b9\u90fd\u5b58\u5728\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\uff0c\u5e76\u4e14\u6240\u6709\u53f6\u5b50\u90fd\u5728\u540c\u4e00\u5c42\u4e0a"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"\u5b8c\u5168\u4e8c\u53c9\u6811"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"\u4e00\u68f5\u6709n\u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\u6309\u5c42\u5e8f\u7f16\u53f7\uff0c\u7f16\u53f7\u4e3ai\u7684\u7ed3\u70b9\u4e0e\u540c\u6837\u6df1\u5ea6\u7684\u6ee1\u4e8c\u53c9\u6811\u4e2d\u7f16\u53f7\u4e3ai\u7684\u7ed3\u70b9\u5728\u4e8c\u53c9\u6811\u4e2d\u4f4d\u7f6e\u5b8c\u5168\u76f8\u540c"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"\u4e8c\u53c9\u6811\u7684\u6027\u8d28"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"\u975e\u7a7a\u4e8c\u53c9\u6811\u7b2c i \u5c42\u6700\u591a ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mn",{parentName:"msup"},"2"),(0,s.kt)("mrow",{parentName:"msup"},(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"2^{(i-1)}")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8879999999999999em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"},"2"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8879999999999999em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mopen mtight"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i"),(0,s.kt)("span",{parentName:"span",className:"mbin mtight"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1"),(0,s.kt)("span",{parentName:"span",className:"mclose mtight"},")")))))))))))))," \u4e2a\u7ed3\u70b9 \uff08i >= 1\uff09"),(0,s.kt)("li",{parentName:"ul"},"\u6df1\u5ea6\u4e3a k \u7684\u4e8c\u53c9\u6811\u6700\u591a ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mn",{parentName:"msup"},"2"),(0,s.kt)("mi",{parentName:"msup"},"k")),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mn",{parentName:"mrow"},"1")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"2^k - 1")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.932438em",verticalAlign:"-0.08333em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"},"2"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.849108em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.03148em"}},"k")))))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"))))),"  \u4e2a\u7ed3\u70b9 \uff08k >= 1\uff09"),(0,s.kt)("li",{parentName:"ul"},"\u5ea6\u4e3a 0 \u7684\u7ed3\u70b9\u6570\u4e3a n0\uff0c\u5ea6\u4e3a 2 \u7684\u7ed3\u70b9\u6570\u4e3a n2\uff0c\u5219 n0 = n2 + 1\uff0c\u63a8\u5bfc\uff1a",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"n"),(0,s.kt)("mn",{parentName:"msub"},"0")),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"n"),(0,s.kt)("mn",{parentName:"msub"},"1")),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"n"),(0,s.kt)("mn",{parentName:"msub"},"2")),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mn",{parentName:"mrow"},"0"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"n"),(0,s.kt)("mn",{parentName:"msub"},"1")),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mn",{parentName:"mrow"},"2"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"n"),(0,s.kt)("mn",{parentName:"msub"},"2")),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mn",{parentName:"mrow"},"1")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n_0 + n_1 + n _ 2 = 0 + n_1 + 2n_2 + 1")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.73333em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"0")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.73333em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.58056em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.72777em",verticalAlign:"-0.08333em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"0"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.73333em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.79444em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"2"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1")))))),(0,s.kt)("li",{parentName:"ul"},"\u6709 n \u4e2a\u7ed3\u70b9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u6df1\u5ea6 ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"k"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"\u230a"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"g"),(0,s.kt)("mn",{parentName:"mrow"},"2"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"\u230b"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mn",{parentName:"mrow"},"1")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"k = \u230a log2(n) \u230b + 1")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"k"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"\u230a"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,s.kt)("span",{parentName:"span",className:"mord"},"2"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mclose"},"\u230b"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1")))))),(0,s.kt)("li",{parentName:"ul"},"\u5bf9\u4e8e\u542b n \u4e2a\u7ed3\u70b9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\u7f16\u53f7\u4e3a i \uff081 <= i <= n\uff09 \u7684\u7ed3\u70b9",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"\u82e5 i = 1\uff0c\u4e3a\u6839\uff0c\u5426\u5219\u53cc\u4eb2\u4e3a \u230a i / 2 \u230b"),(0,s.kt)("li",{parentName:"ul"},"\u82e5 2i > n\uff0c\u5219 i \u7ed3\u70b9\u6ca1\u6709\u5de6\u5b69\u5b50\uff0c\u5426\u5219\u5b69\u5b50\u7f16\u53f7\u4e3a 2i"),(0,s.kt)("li",{parentName:"ul"},"\u82e5 2i + 1 > n\uff0c\u5219 i \u7ed3\u70b9\u6ca1\u6709\u53f3\u5b69\u5b50\uff0c\u5426\u5219\u5b69\u5b50\u7f16\u53f7\u4e3a 2i + 1"))),(0,s.kt)("li",{parentName:"ul"},"\u6811\u7684\u9ad8\u5ea6,\u6df1\u5ea6,\u5ea6"),(0,s.kt)("li",{parentName:"ul"},"\u8282\u70b9= \u8fb9 +\uff11\uff1b"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"n"),(0,s.kt)("mn",{parentName:"msub"},"0")),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"n"),(0,s.kt)("mn",{parentName:"msub"},"2")),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mn",{parentName:"mrow"},"1")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n_0 = n_2 + 1")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.58056em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"0")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.73333em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"))))),"  \u6ee1\u4e8c\u53c9\u6811,\u5b8c\u5168\u4e8c\u53c9\u6811,\u5b8c\u7f8e\u4e8c\u53c9\u6811")),(0,s.kt)("p",{parentName:"li"},(0,s.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/worst0/picture/master/img/image-20200704141633912.png",alt:"image-20200704141633912"})))),(0,s.kt)("h3",{id:"xiti"},"xiti"),(0,s.kt)("h4",{id:"lc-102-\u5c42\u5e8f\u904d\u5386"},"LC-102-\u5c42\u5e8f\u904d\u5386"),(0,s.kt)("p",null,"\u4e8c\u53c9\u6811\uff1a","[3,9,20,null,null,15,7]",","),(0,s.kt)("p",null,"\u200b    3\n/ \\\n9  20\n\u200b    /  \\\n15   7\n\u8fd4\u56de\u5176\u5c42\u6b21\u904d\u5386\u7ed3\u679c\uff1a"),(0,s.kt)("p",null,"[\n","[3]",",\n","[9,20]",",\n","[15,7]","\n]"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"int getDepth(struct TreeNode *root) {\n    if (root == NULL) return 0;\n    int l = getDepth(root->left), r = getDepth(root->right);\n    return (l > r ? l : r) + 1;\n}\n\nvoid getCnt(struct TreeNode *root, int k, int *cnt) {\n    if (root == NULL) return ;\n    cnt[k] += 1;\n    getCnt(root->left, k + 1, cnt);\n    getCnt(root->right, k + 1, cnt);\n    return ;\n}\n\nvoid getResult(struct TreeNode *root, int k, int *cnt, int **ret) {\n    if (root == NULL) return ;\n    ret[k][cnt[k]++] = root->val;\n    getResult(root->left, k + 1, cnt, ret);\n    getResult(root->right, k + 1, cnt, ret);\n    return ;\n}\n\nint** levelOrder(struct TreeNode* root, int* returnSize, int** columnSizes) {\n    int depth = getDepth(root);\n    int *cnt = (int *)calloc(sizeof(int), depth);\n    int **ret = (int **)malloc(sizeof(int *) * depth);\n    getCnt(root, 0, cnt);\n    for (int i = 0; i < depth; i++) {\n        ret[i] = (int *)malloc(sizeof(int) * cnt[i]);\n        cnt[i] = 0;\n    }\n    getResult(root, 0, cnt, ret);\n    *returnSize = depth;\n    *columnSizes = cnt;\n    return ret;\n}\n")),(0,s.kt)("h4",{id:"1007-\u5224\u5e73\u8861\u4e8c\u53c9\u6811"},"1.0.0.7. \u5224\u5e73\u8861\u4e8c\u53c9\u6811"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c"},"int maxDepth(struct TreeNode* root) {\n    if (root == NULL) return 0;\n    int d1 = maxDepth(root->left);\n    int d2 = maxDepth(root->right);\n    if (d1 == -2 || d2 == -2 || abs(d1 - d2) > 1) return -2;\n    return fmax(d1, d2) + 1;\n}\n\nbool isBalanced(struct TreeNode* root) {\n    return maxDepth(root) >= 0;\n")),(0,s.kt)("h4",{id:"\u6c42\u8def\u5f84\u548c"},"\u6c42\u8def\u5f84\u548c"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c"},"bool hasPathSum(struct TreeNode* root, int sum) {\n    if (root == NULL) return false;\n    if (root->left == 0 && root->right == NULL) return root->val == sum;\n    return hasPathSum(root->left, sum - root->val) || hasPathSum(root->right, sum - root->val);\n}\n")),(0,s.kt)("h4",{id:"\u6700\u8fd1\u516c\u5171\u7956\u5148"},"\u6700\u8fd1\u516c\u5171\u7956\u5148"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c"},"struct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\n    if (root == NULL || root == p || root == q) {\n        return root;\n    }\n    struct TreeNode *left = lowestCommonAncestor(root->left, p, q);\n    struct TreeNode *right = lowestCommonAncestor(root->right, p, q);\n    if (left && right) {\n        return root;\n    }\n    return left ? left : right;\n}\n")),(0,s.kt)("h4",{id:"\u4e8c\u53c9\u6392\u5e8f\u641c\u7d22\u6811"},"\u4e8c\u53c9\u6392\u5e8f\u641c\u7d22\u6811"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"struct TreeNode* __lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\n    if (root->val == p->val) return p;\n    if (root->val == q->val) return q;\n    if (p->val < root->val && q->val > root->val) return root;\n    if (p->val > root->val) return __lowestCommonAncestor(root->right, p, q);\n    return __lowestCommonAncestor(root->left, p, q);\n}\n\nstruct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\n    if (root == NULL) return NULL;\n    if (p->val == q->val) return p;\n    if (p->val > q->val) {\n        struct TreeNode *temp = p;\n        p = q;\n        q = temp;\n    }\n    return __lowestCommonAncestor(root, p, q);\n}\n")),(0,s.kt)("h4",{id:"\u4e8c\u53c9\u6811\u6240\u6709\u8def\u5f84-haffman\u6811"},"\u4e8c\u53c9\u6811\u6240\u6709\u8def\u5f84-haffman\u6811"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-c"},'int getPathCnt(struct TreeNode *root) {\n    if (root == NULL) return 0;\n    if (root->left == NULL && root->right == NULL) return 1;\n    return getPathCnt(root->left) + getPathCnt(root->right);\n}\n\nint getResult(struct TreeNode *root, int len, int k, char **ret, char *buff) {\n    if (root == NULL) return 0;\n    len += sprintf(buff + len, "%d", root->val);\n    buff[len] = 0;\n    if (root->left == NULL && root->right == NULL) {\n        ret[k] = strdup(buff);\n        return 1;\n    }\n    len += sprintf(buff + len, "->");\n    int cnt = getResult(root->left, len, k, ret, buff);\n    cnt += getResult(root->right, len, k + cnt, ret, buff);\n    return cnt;\n}\n\nchar ** binaryTreePaths(struct TreeNode* root, int* returnSize){\n    int pathCnt = getPathCnt(root);\n    char **ret = (char **)malloc(sizeof(char *) * pathCnt);\n    int max_len = 10000;\n    char *buff = (char *)malloc(sizeof(char) * max_len);\n    getResult(root, 0, 0, ret, buff);\n    free(buff);\n    *returnSize = pathCnt;\n    return ret;\n}\n')),(0,s.kt)("h4",{id:"\u5e7f\u4e49\u8868\u8f6c\u4e8c\u53c9\u6811"},"\u5e7f\u4e49\u8868\u8f6c\u4e8c\u53c9\u6811"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"Node *build(char *str, int *node_num) {\n    Node *temp = NULL, *p = NULL;\n    Stack *s = init_stack(strlen(str));\n    int flag = 0;\n    while (str[0]) {\n        switch (str[0]) {\n            case '(':\n                push(s, temp);\n                flag = 0;\n                temp = NULL;\n                break;\n            case ')':\n                p = top(s);\n                pop(s);\n                break;\n            case ',':\n                flag = 1;\n                temp = NULL;\n                break;\n            case ' ':\n                break;\n            default:\n                temp = getNewNode(str[0]);\n                if (!empty(s) && flag == 0) {\n                    top(s)->lchild = temp;\n                } else if (!empty(s) && flag == 1) {\n                    top(s)->rchild = temp;\n                }\n                ++(*node_num);\n            break;\n        }\n        ++str;\n    }\n    clear_stack(s);\n    if (temp && !p) p = temp;\n    return p;\n}\n\n")),(0,s.kt)("h4",{id:"\u4e8c\u53c9\u6811\u4e2d\u5e8f\u7ebf\u7d22\u5316"},"\u4e8c\u53c9\u6811\u4e2d\u5e8f\u7ebf\u7d22\u5316"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'void build_thread(Node *root) {\n    if (root == NULL) return ;\n    static Node *pre = NULL;\n    build_thread(root->lchild);\n    if (root->lchild == NULL) {\n        root->lchild = pre;\n        root->ltag = THREAD;\n    }\n    if (pre != NULL && pre->rchild == NULL) {\n        pre->rchild = root;\n        pre->rtag = THREAD;\n    }\n    pre = root;\n    build_thread(root->rchild);\n    return ;\n}\n\nvoid clear(Node *root) {\n    if (root == NULL) return ;\n    if (root->ltag == NORMAL) clear(root->lchild);\n    if (root->rtag == NORMAL) clear(root->rchild);\n    free(root);\n    return ;\n}\n\nNode *leftMost(Node *p) {\n    while (p && p->ltag == NORMAL && p->lchild) p = p->lchild;\n    return p;\n}\n\nvoid output(Node *root) {\n    Node *p = leftMost(root);\n    while (p) {\n        printf("%d ", p->key);\n        if (p->rtag == THREAD) {\n            p = p->rchild;\n        } else {\n            p = leftMost(p->rchild);\n        }\n    }\n    printf("\\n");\n    return ;\n}\n')),(0,s.kt)("h4",{id:"\u4e8c\u53c9\u6811\u5148\u5e8f\u7ebf\u7d22\u5316"},"\u4e8c\u53c9\u6811\u5148\u5e8f\u7ebf\u7d22\u5316"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'void buildThead(Node *root) {\n    if (!root) return ;\n    static Node *pre = nullptr;\n    if (root->lchild == nullptr) {\n        root->lchild = pre;\n        root->ltag = THREAD;\n    }\n    \n    if (pre != nullptr && pre->rchild == nullptr) {\n        pre->rchild = root;\n        pre->rtag = THREAD;\n    }\n    pre = root;\n    if (root->ltag == NORMAL) buildThead(root->lchild);\n    if (root->rtag == NORMAL) buildThead(root->rchild);\n    return ;\n}\n\nvoid clear(Node *root) {\n    if (!root) return ;\n    if (root->ltag == NORMAL) clear(root->lchild);\n    if (root->rtag == NORMAL) clear(root->rchild);\n    free(root);\n    return ;\n}\n\nNode *leftMost(Node *p) {\n    while (p && p->ltag == NORMAL && p->lchild) p = p->lchild;\n    return p;\n}\n\nvoid output(Node *root) {\n    if (!root) return ;\n    //Node *p = leftMost(root);\n    Node *p = root;\n    while (p) {\n        printf("%d ", p->key);\n        if (p->ltag == NORMAL) {\n            p = p->lchild;\n        } else {\n            p = p->rchild;\n        }\n    }\n    printf("\\n");\n    return ;\n}\n\n')),(0,s.kt)("h4",{id:"morris\u904d\u5386"},"morris\u904d\u5386"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'void morrisPre(Node *root) {\n    if (!root) return ;\n    Node *cur = root, *mostRight = nullptr;\n    while (cur) {\n        mostRight = cur->lchild;\n        if (mostRight) {\n            while (mostRight->rchild && mostRight->rchild != cur) {\n                mostRight = mostRight->rchild;\n            }\n            if (mostRight->rchild == nullptr) {\n                mostRight->rchild = cur;\n                cout << cur->key << " ";\n                cur = cur->lchild;\n                continue;\n            } else {\n                mostRight->rchild =nullptr;\n            }\n        } else {\n            cout << cur->key << " ";\n        }\n        cur = cur->rchild;\n    }\n    cout << endl;\n}\n\nvoid morrisIn(Node *root) {\n    if (!root) return ;\n    Node *cur = root, *mostRight = nullptr;\n    while (cur) {\n        mostRight = cur->lchild;\n        if (mostRight) {\n            while (mostRight->rchild && mostRight->rchild != cur) {\n                mostRight = mostRight->rchild;\n            }\n            if (mostRight->rchild == nullptr) {\n                mostRight->rchild = cur;\n                cur = cur->lchild;\n                continue ;\n            } else {\n                mostRight->rchild = nullptr;\n            }\n        }\n        cout << cur->key << " ";\n        cur = cur->rchild;\n    }\n    return ;\n}\n\n')),(0,s.kt)("h4",{id:"\u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe"},(0,s.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/binary-tree-right-side-view/"},"\u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> rightSideView(TreeNode* root) {\n        vector<int> res;\n        queue<TreeNode*> que;\n        if(root!=NULL)\n            que.push(root);\n        while(!que.empty())\n        {\n            int size=que.size();\n            for(int i=0;i<size;i++)\n            {\n                TreeNode* p=que.front();\n                que.pop();\n                if(i==size-1)\n                    res.push_back(p->val);\n                if(p->left!=NULL)\n                    que.push(p->left);\n                if(p->right!=NULL)\n                    que.push(p->right);\n            }\n        }\n        return res;\n    }\n};\n")),(0,s.kt)("h4",{id:"lc-515-\u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c"},(0,s.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/find-largest-value-in-each-tree-row/"},"lc-515. \u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> largestValues(TreeNode* root) {\n        if(nullptr == root) return ans;\n        dfs(root, 0);\n        return ans;\n    }\nprivate:\n    vector<int> ans;\n    void dfs(TreeNode* root, int depth){\n        if(nullptr == root) return;\n        if(depth >= ans.size()) ans.push_back(root->val);\n        if(root->val > ans[depth]) ans[depth] = root->val;\n        dfs(root->left, depth + 1);\n        dfs(root->right, depth + 1);\n    }\n};\n")),(0,s.kt)("h1",{id:"\u4e8c\u53c9\u6811"},"\u4e8c\u53c9\u6811"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u6811\u7684\u6027\u8d28\u76f8\u5173\u6570\u9898\u76ee\uff0c\u7531\u9012\u5f52\u548c\u5c42\u6b21\u904d\u5386\u5c31\u80fd\u5b9e\u73b0\u3002"),(0,s.kt)("li",{parentName:"ul"},"\u5229\u7528BST\u7684\u6709\u5e8f\u6027\u548c\u641c\u7d22\u6027")),(0,s.kt)("h2",{id:"\u4e8c\u53c9\u6811\u904d\u5386"},"\u4e8c\u53c9\u6811\u904d\u5386"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"\u65e0\u6cd5\u540c\u65f6\u89e3\u51b3\u8bbf\u95ee\u8282\u70b9\uff08\u904d\u5386\u8282\u70b9\uff09\u548c\u5904\u7406\u8282\u70b9\uff08\u5c06\u5143\u7d20\u653e\u8fdb\u7ed3\u679c\u96c6\uff09\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5"),"\u3002"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"\u90a3\u6211\u4eec\u5c31\u5c06\u8bbf\u95ee\u7684\u8282\u70b9\u653e\u5165\u6808\u4e2d\uff0c\u628a\u8981\u5904\u7406\u7684\u8282\u70b9\u4e5f\u653e\u5165\u6808\u4e2d\u4f46\u662f\u8981\u505a\u6807\u8bb0\u3002")),(0,s.kt)("p",null,"\u5982\u4f55\u6807\u8bb0\u5462\uff0c",(0,s.kt)("strong",{parentName:"p"},"\u5c31\u662f\u8981\u5904\u7406\u7684\u8282\u70b9\u653e\u5165\u6808\u4e4b\u540e\uff0c\u7d27\u63a5\u7740\u653e\u5165\u4e00\u4e2a\u7a7a\u6307\u9488\u4f5c\u4e3a\u6807\u8bb0\u3002")," \u8fd9\u79cd\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u53eb\u505a\u6807\u8bb0\u6cd5\u3002"),(0,s.kt)("h2",{id:"\u8fed\u4ee3\u6cd5\u4e2d\u5e8f\u904d\u5386"},"\u8fed\u4ee3\u6cd5\u4e2d\u5e8f\u904d\u5386"),(0,s.kt)("p",null,"\u4e2d\u5e8f\u904d\u5386\u4ee3\u7801\u5982\u4e0b\uff1a\uff08\u8be6\u7ec6\u6ce8\u91ca\uff09"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-C++"},"class Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> result;\n        stack<TreeNode*> st;\n        if (root != NULL) st.push(root);\n        while (!st.empty()) {\n            TreeNode* node = st.top();\n            if (node != NULL) {\n                st.pop(); // \u5c06\u8be5\u8282\u70b9\u5f39\u51fa\uff0c\u907f\u514d\u91cd\u590d\u64cd\u4f5c\uff0c\u4e0b\u9762\u518d\u5c06\u53f3\u4e2d\u5de6\u8282\u70b9\u6dfb\u52a0\u5230\u6808\u4e2d\n                if (node->right) st.push(node->right);  // \u6dfb\u52a0\u53f3\u8282\u70b9\uff08\u7a7a\u8282\u70b9\u4e0d\u5165\u6808\uff09\n\n                st.push(node);                          // \u6dfb\u52a0\u4e2d\u8282\u70b9\n                st.push(NULL); // \u4e2d\u8282\u70b9\u8bbf\u95ee\u8fc7\uff0c\u4f46\u662f\u8fd8\u6ca1\u6709\u5904\u7406\uff0c\u52a0\u5165\u7a7a\u8282\u70b9\u505a\u4e3a\u6807\u8bb0\u3002\n\n                if (node->left) st.push(node->left);    // \u6dfb\u52a0\u5de6\u8282\u70b9\uff08\u7a7a\u8282\u70b9\u4e0d\u5165\u6808\uff09\n            } else { // \u53ea\u6709\u9047\u5230\u7a7a\u8282\u70b9\u7684\u65f6\u5019\uff0c\u624d\u5c06\u4e0b\u4e00\u4e2a\u8282\u70b9\u653e\u8fdb\u7ed3\u679c\u96c6\n                st.pop();           // \u5c06\u7a7a\u8282\u70b9\u5f39\u51fa\n                node = st.top();    // \u91cd\u65b0\u53d6\u51fa\u6808\u4e2d\u5143\u7d20\n                st.pop();\n                result.push_back(node->val); // \u52a0\u5165\u5230\u7ed3\u679c\u96c6\n            }\n        }\n        return result;\n    }\n};\n")),(0,s.kt)("p",null,"\u770b\u4ee3\u7801\u6709\u70b9\u62bd\u8c61\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u52a8\u753b(\u4e2d\u5e8f\u904d\u5386)\uff1a"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://tva1.sinaimg.cn/large/008eGmZEly1gnbmq3btubg30em09ue82.gif",alt:"\u4e2d\u5e8f\u904d\u5386\u8fed\u4ee3\uff08\u7edf\u4e00\u5199\u6cd5\uff09"})),(0,s.kt)("p",null,"\u52a8\u753b\u4e2d\uff0cresult\u6570\u7ec4\u5c31\u662f\u6700\u7ec8\u7ed3\u679c\u96c6\u3002"),(0,s.kt)("p",null,"\u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u5c06\u8bbf\u95ee\u7684\u8282\u70b9\u76f4\u63a5\u52a0\u5165\u5230\u6808\u4e2d\uff0c\u4f46\u5982\u679c\u662f\u5904\u7406\u7684\u8282\u70b9\u5219\u540e\u9762\u653e\u5165\u4e00\u4e2a\u7a7a\u8282\u70b9\uff0c \u8fd9\u6837\u53ea\u6709\u7a7a\u8282\u70b9\u5f39\u51fa\u7684\u65f6\u5019\uff0c\u624d\u5c06\u4e0b\u4e00\u4e2a\u8282\u70b9\u653e\u8fdb\u7ed3\u679c\u96c6\u3002"),(0,s.kt)("h2",{id:"\u4e2d\u5e8f\u904d\u5386\uff08\u8fed\u4ee3\u6cd5\uff09"},"\u4e2d\u5e8f\u904d\u5386\uff08\u8fed\u4ee3\u6cd5\uff09"),(0,s.kt)("p",null,"\u8fed\u4ee3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e24\u4e2a\u64cd\u4f5c\uff1a"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"\u5904\u7406\uff1a\u5c06\u5143\u7d20\u653e\u8fdbresult\u6570\u7ec4\u4e2d")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"\u8bbf\u95ee\uff1a\u904d\u5386\u8282\u70b9"))),(0,s.kt)("p",null,"\u5206\u6790\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u521a\u521a\u5199\u7684\u524d\u5e8f\u904d\u5386\u7684\u4ee3\u7801\uff0c\u4e0d\u80fd\u548c\u4e2d\u5e8f\u904d\u5386\u901a\u7528\u5462\uff0c\u56e0\u4e3a\u524d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u662f\u4e2d\u5de6\u53f3\uff0c\u5148\u8bbf\u95ee\u7684\u5143\u7d20\u662f\u4e2d\u95f4\u8282\u70b9\uff0c\u8981\u5904\u7406\u7684\u5143\u7d20\u4e5f\u662f\u4e2d\u95f4\u8282\u70b9\uff0c\u6240\u4ee5\u521a\u521a\u624d\u80fd\u5199\u51fa\u76f8\u5bf9\u7b80\u6d01\u7684\u4ee3\u7801\uff0c",(0,s.kt)("strong",{parentName:"p"},"\u56e0\u4e3a\u8981\u8bbf\u95ee\u7684\u5143\u7d20\u548c\u8981\u5904\u7406\u7684\u5143\u7d20\u987a\u5e8f\u662f\u4e00\u81f4\u7684\uff0c\u90fd\u662f\u4e2d\u95f4\u8282\u70b9\u3002")),(0,s.kt)("p",null,"\u90a3\u4e48\u518d\u770b\u770b\u4e2d\u5e8f\u904d\u5386\uff0c\u4e2d\u5e8f\u904d\u5386\u662f\u5de6\u4e2d\u53f3\uff0c\u5148\u8bbf\u95ee\u7684\u662f\u4e8c\u53c9\u6811\u9876\u90e8\u7684\u8282\u70b9\uff0c\u7136\u540e\u4e00\u5c42\u4e00\u5c42\u5411\u4e0b\u8bbf\u95ee\uff0c\u76f4\u5230\u5230\u8fbe\u6811\u5de6\u9762\u7684\u6700\u5e95\u90e8\uff0c\u518d\u5f00\u59cb\u5904\u7406\u8282\u70b9\uff08\u4e5f\u5c31\u662f\u5728\u628a\u8282\u70b9\u7684\u6570\u503c\u653e\u8fdbresult\u6570\u7ec4\u4e2d\uff09\uff0c\u8fd9\u5c31\u9020\u6210\u4e86",(0,s.kt)("strong",{parentName:"p"},"\u5904\u7406\u987a\u5e8f\u548c\u8bbf\u95ee\u987a\u5e8f\u662f\u4e0d\u4e00\u81f4\u7684\u3002")),(0,s.kt)("p",null,"\u90a3\u4e48",(0,s.kt)("strong",{parentName:"p"},"\u5728\u4f7f\u7528\u8fed\u4ee3\u6cd5\u5199\u4e2d\u5e8f\u904d\u5386\uff0c\u5c31\u9700\u8981\u501f\u7528\u6307\u9488\u7684\u904d\u5386\u6765\u5e2e\u52a9\u8bbf\u95ee\u8282\u70b9\uff0c\u6808\u5219\u7528\u6765\u5904\u7406\u8282\u70b9\u4e0a\u7684\u5143\u7d20\u3002")),(0,s.kt)("p",null,"\u52a8\u753b\u5982\u4e0b\uff1a"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://tva1.sinaimg.cn/large/008eGmZEly1gnbmuj244bg30eq0d4kjm.gif",alt:"\u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386\uff08\u8fed\u4ee3\u6cd5\uff09"})),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"\u4e2d\u5e8f\u904d\u5386\uff0c\u53ef\u4ee5\u5199\u51fa\u5982\u4e0b\u4ee3\u7801\uff1a")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-C++"},"class Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> result;\n        stack<TreeNode*> st;\n        TreeNode* cur = root;\n        while (cur != NULL || !st.empty()) {\n            if (cur != NULL) { // \u6307\u9488\u6765\u8bbf\u95ee\u8282\u70b9\uff0c\u8bbf\u95ee\u5230\u6700\u5e95\u5c42\n                st.push(cur); // \u5c06\u8bbf\u95ee\u7684\u8282\u70b9\u653e\u8fdb\u6808\n                cur = cur->left;                // \u5de6\n            } else {\n                cur = st.top(); // \u4ece\u6808\u91cc\u5f39\u51fa\u7684\u6570\u636e\uff0c\u5c31\u662f\u8981\u5904\u7406\u7684\u6570\u636e\uff08\u653e\u8fdbresult\u6570\u7ec4\u91cc\u7684\u6570\u636e\uff09\n                st.pop();\n                result.push_back(cur->val);     // \u4e2d\n                cur = cur->right;               // \u53f3\n            }\n        }\n        return result;\n    }\n};\n\n")),(0,s.kt)("h2",{id:"\u8fed\u4ee3\u6cd5\u524d\u5e8f\u904d\u5386"},"\u8fed\u4ee3\u6cd5\u524d\u5e8f\u904d\u5386"),(0,s.kt)("p",null,"\u8fed\u4ee3\u6cd5\u524d\u5e8f\u904d\u5386\u4ee3\u7801\u5982\u4e0b\uff1a (",(0,s.kt)("strong",{parentName:"p"},"\u6ce8\u610f\u6b64\u65f6\u6211\u4eec\u548c\u4e2d\u5e8f\u904d\u5386\u76f8\u6bd4\u4ec5\u4ec5\u6539\u53d8\u4e86\u4e24\u884c\u4ee3\u7801\u7684\u987a\u5e8f"),")"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-C++"},"class Solution {\npublic:\n    vector<int> preorderTraversal(TreeNode* root) {\n        vector<int> result;\n        stack<TreeNode*> st;\n        if (root != NULL) st.push(root);\n        while (!st.empty()) {\n            TreeNode* node = st.top();\n            if (node != NULL) {\n                st.pop();\n                if (node->right) st.push(node->right);  // \u53f3\n                if (node->left) st.push(node->left);    // \u5de6\n                st.push(node);                          // \u4e2d\n                st.push(NULL);\n            } else {\n                st.pop();\n                node = st.top();\n                st.pop();\n                result.push_back(node->val);\n            }\n        }\n        return result;\n    }\n};\n")),(0,s.kt)("h2",{id:"\u524d\u5e8f\u904d\u5386\uff08\u8fed\u4ee3\u6cd5\uff09"},"\u524d\u5e8f\u904d\u5386\uff08\u8fed\u4ee3\u6cd5\uff09"),(0,s.kt)("p",null,"\u6211\u4eec\u5148\u770b\u4e00\u4e0b\u524d\u5e8f\u904d\u5386\u3002"),(0,s.kt)("p",null,"\u524d\u5e8f\u904d\u5386\u662f\u4e2d\u5de6\u53f3\uff0c\u6bcf\u6b21\u5148\u5904\u7406\u7684\u662f\u4e2d\u95f4\u8282\u70b9\uff0c\u90a3\u4e48\u5148\u5c06\u8ddf\u8282\u70b9\u653e\u5165\u6808\u4e2d\uff0c\u7136\u540e\u5c06\u53f3\u5b69\u5b50\u52a0\u5165\u6808\uff0c\u518d\u52a0\u5165\u5de6\u5b69\u5b50\u3002"),(0,s.kt)("p",null,"\u4e3a\u4ec0\u4e48\u8981\u5148\u52a0\u5165 \u53f3\u5b69\u5b50\uff0c\u518d\u52a0\u5165\u5de6\u5b69\u5b50\u5462\uff1f \u56e0\u4e3a\u8fd9\u6837\u51fa\u6808\u7684\u65f6\u5019\u624d\u662f\u4e2d\u5de6\u53f3\u7684\u987a\u5e8f\u3002"),(0,s.kt)("p",null,"\u52a8\u753b\u5982\u4e0b\uff1a"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://tva1.sinaimg.cn/large/008eGmZEly1gnbmss7603g30eq0d4b2a.gif",alt:"\u4e8c\u53c9\u6811\u524d\u5e8f\u904d\u5386\uff08\u8fed\u4ee3\u6cd5\uff09"})),(0,s.kt)("p",null,"\u4e0d\u96be\u5199\u51fa\u5982\u4e0b\u4ee3\u7801: \uff08",(0,s.kt)("strong",{parentName:"p"},"\u6ce8\u610f\u4ee3\u7801\u4e2d\u7a7a\u8282\u70b9\u4e0d\u5165\u6808"),"\uff09"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-C++"},"class Solution {\npublic:\n    vector<int> preorderTraversal(TreeNode* root) {\n        stack<TreeNode*> st;\n        vector<int> result;\n        if (root == NULL) return result;\n        st.push(root);\n        while (!st.empty()) {\n            TreeNode* node = st.top();                       // \u4e2d\n            st.pop();\n            result.push_back(node->val);\n            if (node->right) st.push(node->right);           // \u53f3\uff08\u7a7a\u8282\u70b9\u4e0d\u5165\u6808\uff09\n            if (node->left) st.push(node->left);             // \u5de6\uff08\u7a7a\u8282\u70b9\u4e0d\u5165\u6808\uff09\n        }\n        return result;\n    }\n};\n")),(0,s.kt)("p",null,"\u6b64\u65f6\u4f1a\u53d1\u73b0\u8c8c\u4f3c\u4f7f\u7528\u8fed\u4ee3\u6cd5\u5199\u51fa\u524d\u5e8f\u904d\u5386\u5e76\u4e0d\u96be\uff0c\u786e\u5b9e\u4e0d\u96be\u3002"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"\u6b64\u65f6\u662f\u4e0d\u662f\u60f3\u6539\u4e00\u70b9\u524d\u5e8f\u904d\u5386\u4ee3\u7801\u987a\u5e8f\u5c31\u628a\u4e2d\u5e8f\u904d\u5386\u641e\u51fa\u6765\u4e86\uff1f")),(0,s.kt)("p",null,"\u5176\u5b9e\u8fd8\u771f\u4e0d\u884c\uff01"),(0,s.kt)("p",null,"\u4f46\u63a5\u4e0b\u6765\uff0c",(0,s.kt)("strong",{parentName:"p"},"\u518d\u7528\u8fed\u4ee3\u6cd5\u5199\u4e2d\u5e8f\u904d\u5386\u7684\u65f6\u5019\uff0c\u4f1a\u53d1\u73b0\u5957\u8def\u53c8\u4e0d\u4e00\u6837\u4e86\uff0c\u76ee\u524d\u7684\u524d\u5e8f\u904d\u5386\u7684\u903b\u8f91\u65e0\u6cd5\u76f4\u63a5\u5e94\u7528\u5230\u4e2d\u5e8f\u904d\u5386\u4e0a\u3002")),(0,s.kt)("h2",{id:"\u8fed\u4ee3\u6cd5\u540e\u5e8f\u904d\u5386"},"\u8fed\u4ee3\u6cd5\u540e\u5e8f\u904d\u5386"),(0,s.kt)("p",null,"\u540e\u7eed\u904d\u5386\u4ee3\u7801\u5982\u4e0b\uff1a (",(0,s.kt)("strong",{parentName:"p"},"\u6ce8\u610f\u6b64\u65f6\u6211\u4eec\u548c\u4e2d\u5e8f\u904d\u5386\u76f8\u6bd4\u4ec5\u4ec5\u6539\u53d8\u4e86\u4e24\u884c\u4ee3\u7801\u7684\u987a\u5e8f"),")"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-C++"},"class Solution {\npublic:\n    vector<int> postorderTraversal(TreeNode* root) {\n        vector<int> result;\n        stack<TreeNode*> st;\n        if (root != NULL) st.push(root);\n        while (!st.empty()) {\n            TreeNode* node = st.top();\n            if (node != NULL) {\n                st.pop();\n                st.push(node);                          // \u4e2d\n                st.push(NULL);\n\n                if (node->right) st.push(node->right);  // \u53f3\n                if (node->left) st.push(node->left);    // \u5de6\n\n            } else {\n                st.pop();\n                node = st.top();\n                st.pop();\n                result.push_back(node->val);\n            }\n        }\n        return result;\n    }\n};\n")),(0,s.kt)("h2",{id:"\u540e\u5e8f\u904d\u5386\uff08\u8fed\u4ee3\u6cd5\uff09"},"\u540e\u5e8f\u904d\u5386\uff08\u8fed\u4ee3\u6cd5\uff09"),(0,s.kt)("p",null,"\u518d\u6765\u770b\u540e\u5e8f\u904d\u5386\uff0c\u5148\u5e8f\u904d\u5386\u662f\u4e2d\u5de6\u53f3\uff0c\u540e\u7eed\u904d\u5386\u662f\u5de6\u53f3\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u8c03\u6574\u4e00\u4e0b\u5148\u5e8f\u904d\u5386\u7684\u4ee3\u7801\u987a\u5e8f\uff0c\u5c31\u53d8\u6210\u4e2d\u53f3\u5de6\u7684\u904d\u5386\u987a\u5e8f\uff0c\u7136\u540e\u5728\u53cd\u8f6cresult\u6570\u7ec4\uff0c\u8f93\u51fa\u7684\u7ed3\u679c\u987a\u5e8f\u5c31\u662f\u5de6\u53f3\u4e2d\u4e86\uff0c\u5982\u4e0b\u56fe\uff1a"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://img-blog.csdnimg.cn/20200808200338924.png",alt:"\u524d\u5e8f\u5230\u540e\u5e8f"})),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"\u6240\u4ee5\u540e\u5e8f\u904d\u5386\u53ea\u9700\u8981\u524d\u5e8f\u904d\u5386\u7684\u4ee3\u7801\u7a0d\u4f5c\u4fee\u6539\u5c31\u53ef\u4ee5\u4e86\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-C++"},"class Solution {\npublic:\n    vector<int> postorderTraversal(TreeNode* root) {\n        stack<TreeNode*> st;\n        vector<int> result;\n        if (root == NULL) return result;\n        st.push(root);\n        while (!st.empty()) {\n            TreeNode* node = st.top();\n            st.pop();\n            result.push_back(node->val);\n            if (node->left) st.push(node->left); // \u76f8\u5bf9\u4e8e\u524d\u5e8f\u904d\u5386\uff0c\u8fd9\u66f4\u6539\u4e00\u4e0b\u5165\u6808\u987a\u5e8f \uff08\u7a7a\u8282\u70b9\u4e0d\u5165\u6808\uff09\n            if (node->right) st.push(node->right); // \u7a7a\u8282\u70b9\u4e0d\u5165\u6808\n        }\n        reverse(result.begin(), result.end()); // \u5c06\u7ed3\u679c\u53cd\u8f6c\u4e4b\u540e\u5c31\u662f\u5de6\u53f3\u4e2d\u7684\u987a\u5e8f\u4e86\n        return result;\n    }\n};\n\n")),(0,s.kt)("h2",{id:""}),(0,s.kt)("h2",{id:"\u4e8c\u53c9\u6811\u7684\u904d\u5386"},"\u4e8c\u53c9\u6811\u7684\u904d\u5386"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"struct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\n \n//  \u5148\u5e8f\u904d\u5386\nstd::vector<int> preorderTraversal(TreeNode* root) {\n\n    std::vector<int> result;\n\n    if(root ==nullptr) return result;\n\n    std::stack<TreeNode*> path;\n    path.push(root);\n\n    while(!path.empty()) { \n        \n        root = path.top(); path.pop();\n\n        while(root) { \n            if(root->right)  \n            {\n                path.push(root->right);\n            } \n            result.push_back(root->val);\n            \n            root = root->left;\n        }\n    }\n\n    return result;\n}  \n\n// \u4e2d\u5e8f\u904d\u5386\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        std::vector<int> result;\n        std::stack<TreeNode*> path;\n\n        while(root != nullptr || !path.empty()) {\n            // \u4e00\u76f4\u6cbf\u7740\u5de6\u5b50\u6811\u4e0b\u53bb\n            while(root) \n            { \n                path.push(root);\n                root = root->left;\n            }\n            // assert(root == nullptr) \n            // root \u76ee\u524d\u662f\u6700\u5de6\u8fb9\u7684\u5b69\u5b50\u7684\u5de6\u5b50\u8282\u70b9\n            root = path.top(); path.pop();\n            result.emplace_back(root->val);\n\n            root = root->right; // \u7136\u540e\u8bbf\u95ee\u53f3\u5b50\u6811\n        }\n\n        return result;\n    }\n};\n\n// \u540e\u5e8f\u904d\u5386\nclass Solution {\npublic:\n    std::vector<int> postorderTraversal(TreeNode* root) {\n\n        std::stack<TreeNode*>         path;\n        std::vector<int>              result;\n        std::unordered_set<TreeNode*> set; // \u5224\u65ad\u8fd9\u4e2a\u8282\u70b9\u662f\u5426\u8bbf\u95ee\u8fc7\n\n        if(root) path.push(root);\n\n        while(!path.empty()) { \n            root = path.top();\n\n            bool leftVisited = true, rightVisited = true;\n\n            /// @biref: \u56e0\u4e3a\u662f\u5148\u8bbf\u95ee\u5de6\u8fb9\u7684\u8282\u70b9\uff0c\u518d\u8bbf\u95ee\u53f3\u8fb9\u7684\u8282\u70b9\uff0c\u56e0\u6b64\uff0c\u5165\u6808\u987a\u5e8f\u9700\u8981\u98a0\u5012\n            ///         \u5373\uff0c\u5148\u5165\u53f3\u5b50\u8282\u70b9\uff0c\u518d\u5de6\u5b50\u8282\u70b9\n\n            // \u5de6\u8fb9\u7684\u5b69\u5b50\u4e0d\u5b58\u5728\u6216\u8005 \u5b58\u5728 \u4f46\u662f\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\n            if(root->right && set.find(root->right) == set.end()) { \n                set.insert(root->right); \n                path.push(root->right);\n                rightVisited = false;\n            }\n\n            // \u53f3\u8fb9\u7684\u5b69\u5b50\u4e0d\u5b58\u5728\u6216\u8005 \u5b58\u5728 \u4f46\u662f\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\n            if(root->left && set.find(root->left) == set.end()) { \n                set.insert(root->left);\n                path.push(root->left);\n                leftVisited = false;\n            }\n\n            // \u5de6\u53f3\u90fd\u662f\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\n            if(leftVisited && rightVisited) { \n                result.push_back(root->val);\n                set.insert(root);            // \u6700\u540e\u8bbf\u95ee\u5f53\u524d\u8282\u70b9\n                path.pop();\n            }\n        }\n\n\n        return result;\n    }\n};\n")),(0,s.kt)("h2",{id:"\u4e8c\u53c9\u6811\u7684\u9012\u5f52\u76f8\u5173\u9898\u76ee"},"\u4e8c\u53c9\u6811\u7684\u9012\u5f52\u76f8\u5173\u9898\u76ee"),(0,s.kt)("p",null,"\u6811\u5f62\u52a8\u6001\u89c4\u5212\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"\u6a21\u677f\uff1a\u6c42\u6574\u68f5\u6811\u7684xxxx\uff0c\u90a3\u4e48\u6c42\u51fa\u8fd9\u4e2a\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u7684xxxx\uff0c\u7b54\u6848\u5c31\u662f\u5176\u4e2d\u3002\n\n+ \u5206\u6790\u6c42\u8fd9\u4e2axxxx\u9700\u8981\u7684\u4fe1\u606f\uff0c\u8bbe\u7f6e\u6d88\u606f\u4f53\n+ \u901a\u8fc7\u9012\u5f52\u6c42\u89e3\uff08\u9ed1\u76d2\uff09\n+ \u89e3\u9ed1\u76d2\n")),(0,s.kt)("h3",{id:"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u641c\u7d22\u5b50\u6811"},"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u641c\u7d22\u5b50\u6811"),(0,s.kt)("p",null,"\u9898\u76ee\uff1a\u6c42\u4e00\u9897\u6811\u7684\u6700\u5927\u4e8c\u53c9\u641c\u7d22\u5b50\u6811\u3002\u5982\u679c\u6c42\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684\u4e8c\u53c9\u641c\u7d22\u5b50\u6811\uff0c\u7b54\u6848\u5c31\u5728\u5176\u4e2d\u3002"),(0,s.kt)("p",null,"\u5206\u6790\u6700\u5927\u4e8c\u53c9\u641c\u7d22\u5b50\u6811\u7684\u53ef\u80fd\u6027\u8d28\uff1a"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u5de6\u5b50\u6811\u5b58\u5728BST"),(0,s.kt)("li",{parentName:"ul"},"\u53f3\u5b50\u6811\u5b58\u5728BST"),(0,s.kt)("li",{parentName:"ul"},"\u5de6\u53f3\u5b50\u6811\u90fd\u662fBST\uff0c\u4e14\u6839\u8282\u70b9\u4e5f\u6ee1\u8db3\u201c\u5de6\u5c0f\u53f3\u5927\u201d\uff1a\u4ee5\u8fd9\u4e2a\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u90fd\u662fBST")),(0,s.kt)("p",null,"\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u4f20\u9012\u9700\u8981\u7684\u4fe1\u606f\uff1a"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u5de6\u5b50\u6811",(0,s.kt)("inlineCode",{parentName:"li"},"BST"),"\u5927\u5c0f"),(0,s.kt)("li",{parentName:"ul"},"\u53f3\u5b50\u6811",(0,s.kt)("inlineCode",{parentName:"li"},"BST"),"\u5927\u5c0f"),(0,s.kt)("li",{parentName:"ul"},"\u5de6",(0,s.kt)("inlineCode",{parentName:"li"},"BST"),"\u6839\u8282\u70b9"),(0,s.kt)("li",{parentName:"ul"},"\u53f3",(0,s.kt)("inlineCode",{parentName:"li"},"BST"),"\u6839\u8282\u70b9\uff1a"),(0,s.kt)("li",{parentName:"ul"},"\u5de6\u5b50\u6811",(0,s.kt)("inlineCode",{parentName:"li"},"max"),"\uff1a\u4e0d\u662fBST\u7684\u6700\u5927\u503c"),(0,s.kt)("li",{parentName:"ul"},"\u53f3\u5b50\u6811",(0,s.kt)("inlineCode",{parentName:"li"},"min"),"\uff1a\u4e0d\u662fBST\u7684\u6700\u5c0f\u503c")),(0,s.kt)("p",null,"\u6700\u540e\u56db\u4e2a\u6761\u4ef6\uff0c\u662f\u7528\u6765\u5224\u65ad\u662f\u5426\u548c\u5f53\u524d\u8282\u70b9\u7ec4\u5408\u6210\u5927\u7684BST\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution { \nstruct Info {  \n    TreeNode* root;\n    int size;   \n    int max;\n    int min;\n\n    Info(TreeNode* root, int size, int max, int min)\n    : root(root), size(size), max(max), min(min) \n    { }\n};\n\nInfo biggestBST(TreeNode* root) { \n    // \u9012\u5f52\u57fa--\u89e3\u9ed1\u76d2\n    if(root == nullptr) \n        return Info(nullptr, 0, INT_MIN, INT_MAX);\n\n    TreeNode* left  = root->left;\n    TreeNode* right = root->right;\n\n    // \u9012\u5f52-\u9ed1\u76d2\n    Info leftSubtree  = biggestBST(left);\n    Info rightSubtree = biggestBST(right);\n    // \u5c06\u4fe1\u606f\u5148\u76f4\u63a5\u83b7\u53d6\u5230\uff0c\u7136\u540e\u5229\u7528\n    // \u4e0b\u9762\u662f\u89e3\u9ed1\u76d2\n    int connectrootSize = 0;\n    \n    if(leftSubtree.root  == left   && \n       rightSubtree.root == right  && \n       leftSubtree.max < root->val && root->val < rightSubtree.min)\n    { \n      connectrootSize = leftSubtree.size + leftSubtree.size + 1;\n    }\n\n    int maxsize = std::max(connectrootSize, std::max(leftSubtree.size, rightSubtree.size)); \n\n    TreeNode* maxroot =nullptr;\n\n    if(maxsize == connectrootSize) \n    {\n      maxroot = root;\n    }\n    else if(maxsize == leftSubtree.size)\n    {\n      maxroot = leftSubtree.root;\n    }\n    else\n    {\n      maxroot = rightSubtree.root;\n    }\n\n    return Info{maxroot, maxsize,\n                std::max(root->val, std::max(leftSubtree.max, rightSubtree.max)), \n                std::min(root->val, std::min(leftSubtree.min, rightSubtree.min))};\n}\n};\n")),(0,s.kt)("h3",{id:"\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316"},(0,s.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/description/"},"\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316")),(0,s.kt)("p",null,"\u601d\u8def\u4e5f\u662f\u6bd4\u8f83\u7b80\u5355\uff1a\u5148\u5e8f\u904d\u5386\u5e8f\u5217\u5316 + \u9012\u5f52\u53cd\u5e8f\u5217\u5316\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class Codec {\npublic:\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n      std::string result;\n      std::stack<TreeNode*> path;\n      path.push(root);\n\n      while(!path.empty()) { \n        root = path.top(); path.pop();\n\n        while(root) { \n          path.push(root->right);\n          result.append(std::to_string(root->val));\n          result.push_back(','); // \u6570\u5b57\u4e4b\u95f4\u52a0\u4e0a ','\u6765\u5206\u8fa8\n          root = root->left;\n        }\n\n        result.push_back('#');   // \u6700\u540e\u7684\u5916\u90e8\u8282\u70b9\u4f7f\u7528 '#'\n      }\n\n      result.pop_back();\n      return result;\n    }\n\n    TreeNode* deserialize(string data) {\n      return __deserialize(data, 0);\n    }\n\n    template<typename T>\n    TreeNode* __deserialize(const std::string& data, T&& currIdx) {\n      if(currIdx >= data.size() || data[currIdx] =='#')\n        return nullptr;\n\n      int  value=0;\n      bool negative=false;\n      if(data[currIdx] =='-') { \n        ++currIdx; \n        negative = true; \n      }\n\n      while(currIdx < data.size() && data[currIdx] != ',') {\n        value = value *10 + (data[currIdx] -'0');\n        ++currIdx;\n      } \n      \n      TreeNode* root = new TreeNode(negative ? -value : value);\n      root->left     = __deserialize(data, ++currIdx); // \u8df3\u8fc7 '#'\n      root->right    = __deserialize(data, ++currIdx); // \u8df3\u8fc7 '#'\n    \n      return root;\n    }\n};\n")),(0,s.kt)("h3",{id:"\u4e8c\u53c9\u6811\u6811\u7684\u76f4\u5f84--\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u6700\u5927\u8ddd\u79bb"},(0,s.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/diameter-of-binary-tree/"},"\u4e8c\u53c9\u6811\u6811\u7684\u76f4\u5f84 / \u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u6700\u5927\u8ddd\u79bb")),(0,s.kt)("p",null,"\u5229\u7528\u4e0a\u8ff0\u6a21\u677f\u8ba1\u7b97\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u6700\u5927\u8ddd\u79bb\uff0c\u8fd9\u4e2a\u8ddd\u79bb\u503c\u53ef\u80fd\u4f4d\u4e8e\u5de6\u5b50\u6811\uff0c\u4e5f\u53ef\u80fd\u662f\u5728\u53f3\u5b50\u6811\u4e2d\uff0c\u6700\u5927\u65f6\u8fde\u63a5\u4e86\u6839\u8282\u70b9\u3002\u53ef\u80fd\u6027\u5982\u4e0b\uff1a"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u5de6\u5b50\u6811\u4e2d\u6700\u5927\u8ddd\u79bb"),(0,s.kt)("li",{parentName:"ul"},"\u53f3\u5b50\u6811\u4e2d\u6700\u5927\u8ddd\u79bb"),(0,s.kt)("li",{parentName:"ul"},"\u5de6\u5b50\u6811\u9ad8\u5ea6 + \u6839\u8282\u70b9 + \u53f3\u5b50\u6811\u9ad8\u5ea6")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    struct Info { \n        int path;   // \u4ece\u5e95\u5c42\u4e0a\u5230\u5f53\u524d\u8282\u70b9\u7684\u6700\u957f\u7684\u8def\u5f84\n        int result; //  \u5f53\u524d\u8282\u70b9\u4e0b\u7684\u6700\u5927\u76f4\u5f84\n    };\n\n    int diameterOfBinaryTree(TreeNode* root) {\n        if(root ==nullptr) return 0;\n        return __diameterOfBinaryTree(root).result-1;\n    }\n\n\n    Info __diameterOfBinaryTree(TreeNode* root) { \n        if(root==nullptr) \n            return Info{0, 0};\n\n        Info left  = __diameterOfBinaryTree(root->left);\n        Info right = __diameterOfBinaryTree(root->right);\n\n        return Info { std::max(left.path, right.path) + 1,\n                      std::max(left.path + right.path + 1, std::max(left.result, right.result))};\n    }\n};\n\n")),(0,s.kt)("h3",{id:"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u8def\u5f84\u548c"},(0,s.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/"},"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u8def\u5f84\u548c")),(0,s.kt)("p",null,"\u548c\u4e0a\u4e00\u9898\u4e00\u6837\uff0c\u6700\u5927\u7684\u8def\u5f84\u548c\u53ef\u80fd\uff1a"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u5de6\u5b50\u6811"),(0,s.kt)("li",{parentName:"ul"},"\u53f3\u5b50\u6811"),(0,s.kt)("li",{parentName:"ul"},"\u5de6\u5b50\u6811\u7684\u6700\u5927\u8def\u5f84\u548c + \u53f3\u5b50\u6811\u7684\u6700\u5927\u8def\u5f84\u548c + \u5f53\u524d\u8282\u70b9")),(0,s.kt)("p",null,"\u5f53\u5de6\u5b50\u6811\u6216\u8005\u53f3\u5b50\u6811\u8def\u5f84\u548c\u5c0f\u4e8e0\u7684\u65f6\u5019\uff0c\u90a3\u4e48\u5de6/\u53f3\u5b50\u6811\u5c31\u53ef\u4ee5\u4e0d\u9009\uff0c\u629b\u5f03\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"  class Solution {\n  public:\n      int maxPathSum(TreeNode* root) {\n          int val = INT_MIN;\n          __maxPathSum(root, val);\n\n          return val;\n      }\n\n  private:\n      int __maxPathSum(TreeNode* root, int& val) { \n          if(root ==nullptr) return 0;\n\n          int left  = std::max(__maxPathSum(root->left,  val), 0); // \u5982\u679c\u5de6\u5b50\u6811\u7684\u8def\u5f84\u548c\u5c0f\u4e8e0\uff0c\u5c31\u4e0d\u9009\u5de6\u5b50\u6811\n          int right = std::max(__maxPathSum(root->right, val), 0); // \u540c\u7406\u53f3\u5b50\u6811\n\n          // \u4ee5\u5f53\u524droot\u4e3a\u6839\u8282\u70b9\u7684\u6811\u4e2d\u548c\u5b50\u6811\u4e2d\u7684\u6700\u5927\u503c\u8fdb\u884c\u6bd4\u8f83\n          val = std::max(val, left + right + root->val);          \n\n          // \u56e0\u4e3a\u8981\u6c42\u7684\u662f\u6700\u5927\u8def\u5f84\u548c\uff0c\u56e0\u6b64\u8981\u5c06\u6700\u5927\u7684\u5206\u652f\u8fd4\u56de\n        return root->val + std::max(left, right);                \n      }\n  };\n")),(0,s.kt)("h3",{id:"\u4e8c\u53c9\u6811\u4e2d\u6240\u6709\u8ddd\u79bb\u4e3ak\u7684\u8282\u70b9"},(0,s.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree/"},"\u4e8c\u53c9\u6811\u4e2d\u6240\u6709\u8ddd\u79bb\u4e3aK\u7684\u8282\u70b9")),(0,s.kt)("p",null,"\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u6240\u6709\u8282\u70b9\u3002\u5b9a\u4e49\u65b9\u6cd5 dfs(node)\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u8fd4\u56de node \u5230 target \u7684\u8ddd\u79bb\u3002\u5728 dfs(node) \u4e2d\u5904\u7406\u4e0b\u9762\u56db\u79cd\u60c5\u51b5\uff1a"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u5982\u679c ",(0,s.kt)("inlineCode",{parentName:"li"},"node == target"),"\uff0c\u628a\u5b50\u6811\u4e2d\u8ddd\u79bb ",(0,s.kt)("inlineCode",{parentName:"li"},"target "),"\u8282\u70b9\u8ddd\u79bb\u4e3a K \u7684\u6240\u6709\u8282\u70b9\u52a0\u5165\u7b54\u6848\u3002"),(0,s.kt)("li",{parentName:"ul"},"\u5982\u679c ",(0,s.kt)("inlineCode",{parentName:"li"},"target")," \u5728 ",(0,s.kt)("inlineCode",{parentName:"li"},"node")," \u5de6\u5b50\u6811\u4e2d\uff0c\u5047\u8bbe ",(0,s.kt)("inlineCode",{parentName:"li"},"target")," \u8ddd\u79bb node \u7684\u8ddd\u79bb\u4e3a L+1\uff0c\u627e\u51fa\u53f3\u5b50\u6811\u4e2d\u8ddd\u79bb target \u8282\u70b9 K - L - 1 \u8ddd\u79bb\u7684\u6240\u6709\u8282\u70b9\u52a0\u5165\u7b54\u6848\u3002"),(0,s.kt)("li",{parentName:"ul"},"\u5982\u679c target \u5728 node \u53f3\u5b50\u6811\u4e2d\uff0c\u8ddf\u5728\u5de6\u5b50\u6811\u4e2d\u4e00\u6837\u7684\u5904\u7406\u65b9\u6cd5\u3002"),(0,s.kt)("li",{parentName:"ul"},"\u5982\u679c target \u4e0d\u5728\u8282\u70b9\u7684\u5b50\u6811\u4e2d\uff0c\u4e0d\u7528\u5904\u7406\u3002")),(0,s.kt)("p",null,"\u5b9e\u73b0\u7684\u7b97\u6cd5\u4e2d\uff0c\u8fd8\u4f1a\u7528\u5230\u4e00\u4e2a\u8f85\u52a9\u65b9\u6cd5 ",(0,s.kt)("inlineCode",{parentName:"p"},"__nodeInSubstree(node, dist)"),"\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u5c06\u5b50\u6811\u4e2d\u8ddd\u79bb\u8282\u70b9 ",(0,s.kt)("inlineCode",{parentName:"p"},"dist")," \u8ddd\u79bb\u7684\u8282\u70b9\u52a0\u5165\u7b54\u6848\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"  class Solution {\n  public:\n      std::vector<int> distanceK(TreeNode* root, TreeNode* target, int K) {\n          target_ = target;\n          K_ = K;\n          __dfs(root);\n\n          return result_;\n      }\n  private:\n      int __dfs(TreeNode* root) { \n          if(root ==nullptr) return -1;\n\n          if(root == target_) { \n              __nodeInSubstree(root, K_); \n              return 1;\n          }\n\n          int left  = __dfs(root->left);      // root->left  \u5230 target \u7684\u8ddd\u79bb\n\n          if(left != -1) { \n              if(left == K_)\n              {\n                  result_.push_back(root->val);\n              }\n              else\n              {\n                  __nodeInSubstree(root->right, K_-left-1);\n              }\n              return left+1;\n          }\n\n          int right = __dfs(root->right);     // root->right \u5230 target \u7684\u8ddd\u79bb\n          if(right != -1) { \n              if(right == K_) \n              { \n                  result_.push_back(root->val);\n              }\n              else \n              {\n                  __nodeInSubstree(root->left, K_-right-1);\n              }\n              return right+1;\n          }\n\n          return -1;\n      }\n\n      void __nodeInSubstree(TreeNode* root, int dist) {\n          if(root ==nullptr) return;\n\n          if(dist ==0) { \n              result_.push_back(root->val);\n              return;\n          } \n\n          __nodeInSubstree(root->left, dist-1);\n          __nodeInSubstree(root->right, dist-1);\n      }\n\n      std::vector<int> result_;\n      TreeNode* target_;\n      int K_;\n  };\n")),(0,s.kt)("h3",{id:"\u5b8c\u5168\u4e8c\u53c9\u6811\u8282\u70b9\u4e2a\u6570"},(0,s.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/count-complete-tree-nodes/"},"\u5b8c\u5168\u4e8c\u53c9\u6811\u8282\u70b9\u4e2a\u6570")),(0,s.kt)("p",null,"\u5b8c\u5168\u4e8c\u53c9\u6811 \uff1a\u5728\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\uff0c\u9664\u4e86\u6700\u5e95\u5c42\u8282\u70b9\u53ef\u80fd\u6ca1\u586b\u6ee1\u5916\uff0c\u5176\u4f59\u6bcf\u5c42\u8282\u70b9\u6570\u90fd\u8fbe\u5230\u6700\u5927\u503c\uff0c\u5e76\u4e14\u6700\u4e0b\u9762\u4e00\u5c42\u7684\u8282\u70b9\u90fd\u96c6\u4e2d\u5728\u8be5\u5c42\u6700\u5de6\u8fb9\u7684\u82e5\u5e72\u4f4d\u7f6e\u3002\u82e5\u6700\u5e95\u5c42\u4e3a\u7b2c h \u5c42\uff0c\u5219\u8be5\u5c42\u5305\u542b 1~\xa02h\xa0\u4e2a\u8282\u70b9\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u9a8c\u8bc1\u5b8c\u5168\u4e8c\u53c9\u6811\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution { \npublic:\n    bool isCompleteBinaryTree(TreeNode* root) { \n        if(root ==nullptr) return true;\n\n        std::queue<TreeNode*> path_;\n        path_.push(root);\n\n        bool leaf = false;        // \u662f\u5426\u9047\u5230\u53f6\u5b50\u8282\u70b9\n        TreeNode* left  =nullptr;\n        TreeNode* right =nullptr;\n        \n        // \u5c42\u6b21\u904d\u5386\n        while(!path_.empty()) { \n          root = path_.front(); path_.pop();\n\n          left = root->left;\n          right = root->right;\n          // \u5728\u7b2c\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u4e4b\u540e\uff0c\u9047\u5230\u4e86\u975e\u53f6\u5b50\u8282\u70b9 or \u5de6\u8fb9\u662f\u7a7a\u7684 \u53f3\u8fb9\u5374\u4e0d\u662f\n          if((leaf && (left != nullptr || right != nullptr) || (left == nullptr && right != nullptr))) \n          { \n            return false;\n          }           \n\n          if(left) \n          { \n            path_.push(left); \n          }\n\n          if(right) \n          { \n            path_.push(right); \n          }\n          else \n          {\n            leaf = true;  // \u9047\u5230\u4e86\u53f6\u8282\u70b9\n          }\n        }\n\n        return true;\n    }\n};\n")),(0,s.kt)("p",null,"\u5982\u4e0b\u4ee3\u7801\uff0c\u53ef\u4ee5\u9ad8\u6548\u8ba1\u7b97\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"  class Solution {\n  public:\n      int countNodes(TreeNode* root) {\n          if(root ==nullptr) return 0;\n\n          int leftHeight  = currHeight(root->left);\n          int rightHeight = currHeight(root->right);\n\n          // \u8bf4\u660e\u5de6\u5b50\u6811\u7684\u6ee1\u7684\uff0c\u5230\u53f3\u8fb9\u7684\u5b50\u6811\u4e2d\u67e5\u627e\n          if(leftHeight == rightHeight) \n          {  \n              return ( 1<<leftHeight )+ countNodes(root->right);\n          }\n          else \n          {  // \u8bf4\u660e\u53f3\u5b50\u6811\u662f\u6ee1\u7684\n              return (1 << rightHeight) + countNodes(root->left);\n          }\n\n      }\n\n  private:\n      int currHeight(TreeNode* root) { \n          int height=0;\n          while(root) { \n              ++height;\n              root = root->left;\n          }\n\n          return height;\n      }\n  };\n")),(0,s.kt)("h3",{id:"\u8def\u5f84\u603b\u548c"},(0,s.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/path-sum-iii/"},"\u8def\u5f84\u603b\u548c")),(0,s.kt)("p",null,"\u601d\u8def\u4e0d\u96be\uff1a\u6c42\u53d6\u6bcf\u4e2a\u8282\u70b9\u5b58\u5728\u7684\u8def\u5f84\uff0c\u904d\u5386\u6240\u6709\u7684\u70b9\u5c31\u80fd\u627e\u5230\u7b54\u6848\t"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"    class Solution {\n    public:\n        int pathSum(TreeNode* root, int sum) {\n            if(root ==nullptr) return 0;\n\n            __countPath(root, sum);\n            pathSum(root->left,  sum);\n            pathSum(root->right, sum);\n\n            return pathNum;\n        }\n    private:\n        // \u6c42\u51fa\u4ee5\u8282\u70b9 root \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u627e\u5230\u548c\u4e3a sum \u7684\u60c5\u51b5\n        // \u6362\u4e2a\u601d\u8def\uff0c \u4e8c\u53c9\u6811\u7684\u9012\u5f52\u904d\u5386\u5c31\u662f\u4e00\u79cd\u56de\u6eaf\n        void __countPath(TreeNode* root, int sum) { \n            if(root ==nullptr) return;\n\n            sum -= root->val;\n            if(sum ==0)  \n                ++pathNum;\n\n            __countPath(root->left,  sum);\n            __countPath(root->right, sum);\n        }\n\n        int pathNum =0;\n    };\n")),(0,s.kt)("h3",{id:"\u8def\u5f84\u603b\u548ciii"},(0,s.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/path-sum-iii/"},"\u8def\u5f84\u603b\u548cIII")),(0,s.kt)("p",null,"\u8fd9\u4e2a\u95ee\u9898\uff0c\u672c\u8d28\u4e0a\u8fd8\u662f\u5bf9\u6bcf\u4e2a\u8282\u70b9",(0,s.kt)("inlineCode",{parentName:"p"},"node"),"\u8fdb\u884c\u8ba1\u7b97\uff1a\u4ece\u8fd9\u4e2a ",(0,s.kt)("inlineCode",{parentName:"p"},"node")," \u5f00\u59cb\u8ba1\u5411\u4e0b\u9012\u5f52\uff0c\u67e5\u627e\u662f\u5426\u5b58\u5728\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u5f97\u8fd9\u6761\u8def\u5f84\u7684\u548c\u4e3a",(0,s.kt)("inlineCode",{parentName:"p"},"target"),"\u3002"),(0,s.kt)("p",null,"\u90a3\u4e48\u5c31\u5b58\u5728\u4e24\u4e2a\u9012\u5f52\uff1a"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u5bf9\u8fd9\u4e2a\u6811\u7684\u8282\u70b9\u8fdb\u884c\u9012\u5f52"),(0,s.kt)("li",{parentName:"ul"},"\u5728\u9012\u5f52\u7684\u8fc7\u5145\u4e2d\u5bf9\u6bcf\u4e2a\u8282\u70b9\u8ba1\u7b97\u662f\u5426\u5b58\u5728\u548c\u4e3a",(0,s.kt)("inlineCode",{parentName:"li"},"target"),"\u7684\u8def\u5f84")),(0,s.kt)("p",null,"\u6574\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6",(0,s.kt)("inlineCode",{parentName:"p"}," O(N^2) = O(n*n)")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"  class Solution {\n  public:\n      int pathSum(TreeNode* root, int sum) {\n        if(root ==nullptr) return 0;\n    \n        __countPath(root,    sum); // \u5bf9\u6bcf\u4e2a\u8282\u70b9\u8fdb\u884c\u8ba1\u7b97\n        pathSum(root->left,  sum);\n        pathSum(root->right, sum);\n\n        return pathNum;\n      }\n  private:\n      void __countPath(TreeNode* root, int sum) { \n        if(root ==nullptr) return;\n\n        sum -= root->val;\n        if(sum ==0) \n        { \n          ++pathNum;\n        }\n\n        __countPath(root->left,  sum);\n        __countPath(root->right, sum);\n      }\n\n      int pathNum =0;\n  };\n")),(0,s.kt)("h2",{id:"\u5e8f\u5217\u751f\u6210\u4e8c\u53c9\u6811"},"\u5e8f\u5217\u751f\u6210\u4e8c\u53c9\u6811"),(0,s.kt)("h3",{id:"\u4e8c\u53c9\u6811\u8f6c\u6362\u4e3a\u5355\u5411\u94fe\u8868"},(0,s.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/"},"\u4e8c\u53c9\u6811\u8f6c\u6362\u4e3a\u5355\u5411\u94fe\u8868")),(0,s.kt)("p",null,"\u8981\u6c42\u662f\u539f\u5730\u8f6c\u6362\uff1a"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u5148\u627e\u5230 ",(0,s.kt)("inlineCode",{parentName:"li"},"root"),"\u7684\u5de6\u5b50\u6811\u4e2d\u6700\u53f3\u5b50\u8282\u70b9 ",(0,s.kt)("inlineCode",{parentName:"li"},"prev")),(0,s.kt)("li",{parentName:"ul"},"\u5c06",(0,s.kt)("inlineCode",{parentName:"li"},"root "),"\u7684\u53f3\u5b50\u6811\u63a5\u5230  ",(0,s.kt)("inlineCode",{parentName:"li"},"prev"),"\u7684\u53f3\u5b50\u8282\u70b9\u5904"),(0,s.kt)("li",{parentName:"ul"},"\u5c06 ",(0,s.kt)("inlineCode",{parentName:"li"},"root")," \u7684\u5de6\u5b50\u8282\u70b9\u63a5\u5230",(0,s.kt)("inlineCode",{parentName:"li"},"root"),"\u7684\u53f3\u5b50\u8282\u70b9"),(0,s.kt)("li",{parentName:"ul"},"\u4e0b\u4e00\u4e2a\u8282\u70b9")),(0,s.kt)("p",null,"\u6574\u4e2a\u8fc7\u7a0b\u80fd\u5c31\u5730\u4f7f\u5f97",(0,s.kt)("inlineCode",{parentName:"p"},"BST"),"\u53d8\u6210\u5355\u5411\u94fe\u8868\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"  class Solution {\n  public:\n      void flatten(TreeNode* root) {\n        while(root) {\n\n          if(root->left) {\n            TreeNode* prev = root->left; //\u5b58\u5728\u5de6\u5b50\u6811\n            while(prev->right) \n              prev = prev->right;        // \u627e\u5230\u5de6\u5b50\u6811\u6700\u53f3\u8fb9\u7684\u8282\u70b9\n           \n            prev->right = root->right;   // \u5c06\u539f\u6765\u7684\u53f3\u5b50\u6811\u63a5\u5230\u8be5\u5de6\u5b50\u6811\u6700\u53f3\u8282\u70b9\u5904\n            root->right = root->left;\n            root->left  = nullptr;\n          }\n\n          root = root->right;           // \u4e0b\u4e00\u4e2a\u8282\u70b9\n        }\n      }\n  };\n")),(0,s.kt)("h3",{id:"\u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e3abbst"},(0,s.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/"},"\u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e3aBBST")),(0,s.kt)("p",null,"\u8fd9\u9053\u9898\u4e5f\u5f88\u6b63\u5e38\uff0c\u901a\u8fc7\u6811\u5f62\u9012\u5f52\u5c31\u53ef\u4ee5\u5b9e\u73b0\u3002\u6bcf\u6b21\u627e\u5230\u94fe\u8868\u7684\u4e2d\u70b9\u4f5c\u4e3a\u5f53\u524d\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u9012\u5f52\u5b9e\u73b0\u5373\u53ef\u3002\u8fd9\u91cc\u7684\u6ce8\u610f\u4e8b\u9879\uff1a"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u9700\u8981\u521b\u5efa\u4e00\u4e2a",(0,s.kt)("inlineCode",{parentName:"li"},"prev"),"\u6307\u9488\uff0c\u6307\u5411\u4e2d\u70b9\uff0c\u65b9\u4fbf\u7684\u5207\u65ad\u4e2d\u70b9\u53ca\u5176\u4ee5\u540e"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"slow=nullptr"),"\u53ea\u662f\u5c06",(0,s.kt)("inlineCode",{parentName:"li"},"slow"),"\u672c\u8eab\u7f6e\u4e3a",(0,s.kt)("inlineCode",{parentName:"li"},"nullptr"),"\uff0c\u5e76\u672a\u5c06\u94fe\u8868\u5206\u5272\u5f00")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n  TreeNode* sortedListToBST(ListNode* root) {\n    if(root == nullptr) \n      return nullptr;\n    if(root->next == nullptr) \n      return new TreeNode(root->val);\n\n    ListNode* prev = root;\n    ListNode* slow = prev->next;  // root->next\n    ListNode* fast = slow->next;  // root->next->next\n\n    while(fast && fast->next) { \n      fast = fast->next->next;\n      slow = slow->next;\n      prev = prev->next;\n    }\n\n    prev->next = nullptr;\n\n    TreeNode* root = new TreeNode(slow->val);\n    root->left     = sortedListToBST(root);\n    root->right    = sortedListToBST(slow->next);\n   \n    return root;\n  }\n};\n")),(0,s.kt)("h3",{id:"\u6700\u5c0f\u9ad8\u5ea6\u6811"},(0,s.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/minimum-height-tree-lcci/"},"\u6700\u5c0f\u9ad8\u5ea6\u6811")),(0,s.kt)("p",null,"\u548c\u4e0a\u4e00\u9053\u9898\u76ee\u672c\u8d28\u4e00\u6837\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\n\n        return __sortedArrayToBST(nums, 0, nums.size());\n    }\nprivate:\n    TreeNode* __sortedArrayToBST(std::vector<int>& nums, int left, int right) {\n        if(left == right) \n            return nullptr;\n\n        int mid = (left + right) >>1;\n        \n        TreeNode* root = new TreeNode(nums[mid]); \n        root->left  = __sortedArrayToBST(nums, left,   mid);\n        root->right = __sortedArrayToBST(nums, mid +1, right);\n\n        return root;\n    }\n};\n")),(0,s.kt)("h3",{id:"\u4e8c\u53c9\u6811\u8f6c\u6362\u4e3a\u53cc\u5411\u94fe\u8868"},(0,s.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/"},"\u4e8c\u53c9\u6811\u8f6c\u6362\u4e3a\u53cc\u5411\u94fe\u8868")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"  class TreeNode {\n  public:\n    int       val;\n    TreeNode* left;\n    TreeNode* right;\n\n    TreeNode() {}\n\n    TreeNode(int _val) {\n      val = _val;\n      left = NULL;\n      right = NULL;\n    }\n\n    TreeNode(int _val, TreeNode* _left, TreeNode* _right) {\n      val = _val;\n      left = _left;\n      right = _right;\n    }\n  };\n\n  class Solution {\n  public:\n    TreeNode* treeToDoublyList(TreeNode* root) {\n        if(root ==nullptr) return root;\n      \n        TreeNode dummy(0, nullptr, root);\n        currNode = &dummy;\n        __inOrder(root);\n        currNode->right = dummy.right; // currNode->next = root;\n        dummy.right->left = currNode;  // dummpy.next->prev = cuur \n\n        return dummy.right;\n    }\nprivate:\n    void __inOrder(TreeNode *node) {\n      if(node) return;\n\n      __inOrder(node->left);\n      \n      currNode->right = node;   // right -- next\n      node->left = currNode;    // left  -- prev\n      currNode = node;          // \u5bf9\u4e8e\u4e0b\u4e00\u4e2a\u8282\u70b9\n      \n      __inOrder(node->right);\n    }\n\n    TreeNode *currNode;\n};\n")),(0,s.kt)("h3",{id:"\u9a8c\u8bc1\u524d\u5e8f\u904d\u5386\u5e8f\u5217\u4e8c\u53c9\u6811"},(0,s.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/verify-preorder-sequence-in-binary-search-tree/"},"\u9a8c\u8bc1\u524d\u5e8f\u904d\u5386\u5e8f\u5217\u4e8c\u53c9\u6811")),(0,s.kt)("p",null,"\u5355\u8c03\u6808\u7528\u6cd5\uff1a"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u4e00\u65e6\u51fa\u73b0\u4e86value\u5927\u4e8e\u6808\u9876\u5143\u7d20value\u7684\u65f6\u5019\uff0c\u5c31\u8868\u793a\u8981\u5f00\u59cb\u8fdb\u5165\u53f3\u5b50\u6811\u4e86"),(0,s.kt)("li",{parentName:"ul"},"\u521a\u51fa\u6808\u65f6\uff0cmin\u8bb0\u5f55\u5f53\u524d\u5b50\u6811\u7684\u6839\u8282\u70b9\uff0c\u6808\u9876\u5143\u7d20\u4e3a\u8be5\u6839\u8282\u70b9\u7684\u53f3\u5b50\u6811\u6839\u8282\u70b9")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"  class Solution {\n  public:\n    bool verifyPreorder(vector<int>& preorder) {\n        if(preorder.empty()) return true;\n\n        std::stack<int> path;   // \u5355\u8c03\u9012\u51cf\u6808\n        int currMin = INT_MIN;  // \u4fdd\u5b58\u7684\u5b50\u6811\u7684\u6839\u8282\u70b9\u503c\n\n        for(int idx=0; idx < preorder.size(); ++idx) { \n            int num = preorder[idx];\n            if(currMin > num) return false;\n          \n            // \u8868\u793a\u9047\u5230\u53f3\u5b50\u6811\u7684\u6839\u8282\u70b9\n            while(!path.empty() && path.top() < num) {  \n              // \u5f39\u51fa\u5de6\u5b50\u8282\u70b9\n               currMin = path.top(); \n               path.pop();\n            } \n\n            path.push(num);           \n        } \n\n        return true;\n    }\n};\n")),(0,s.kt)("h3",{id:"\u9a8c\u8bc1\u540e\u5e8f\u904d\u5386"},(0,s.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/"},"\u9a8c\u8bc1\u540e\u5e8f\u904d\u5386")),(0,s.kt)("p",null,"\u672c\u8d28\u4e0a\u548c\u524d\u5e8f\u7c7b\u4f3c\uff0c\u90fd\u662f\u4f7f\u7528\u5355\u8c03\u6808\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool verifyPostorder(vector<int>& postorder) {\n      std::stack<int> path;     // \u5355\u8c03\u9012\u589e\u6808\n      int  currMax = INT_MAX;\n\n      for(int i=postorder.size()-1; i >=0; --i) {\n        int num = postorder[i];\n        if(num > currMax) return false;\n\n        while(!path.empty() && path.top() > num) { \n          currMax = path.top();\n          path.pop();\n        }\n\n        path.push(num);\n      }\n\n      return true;\n    }\n};\n")),(0,s.kt)("h3",{id:"\u9a8c\u8bc1bst"},(0,s.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/validate-binary-search-tree/"},"\u9a8c\u8bc1BST")),(0,s.kt)("p",null,"\u5173\u952e\u5c31\u662f\u4e2d\u5e8f\u904d\u5386\u662f\u4e2a\u5355\u8c03\u9012\u5e8f\u5217\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        return __inOrderTravel(root);\n    }\n\nprivate: \n    bool __inOrderTravel(TreeNode* root) {\n        if(root ==nullptr) return true;\n\n        // \u5de6\u5b50\u6811\u4e5f\u8981\u662fBST\n        if(!__inOrderTravel(root->left)) \n            return false;\n        \n        // \u5355\u8c03\u9012\u589e\u5c5e\u6027\n        if(root->val <= prev)\n            return false;\n\n        prev = root->val;\n\n        // \u53f3\u5b50\u6811\u4e5f\u9700\u8981\u662fBST\n        return __inOrderTravel(root->right);\n    }\n\n    int64_t prev = LONG_MIN;\n};\n")),(0,s.kt)("h3",{id:"\u5148\u5e8f\u904d\u5386\u6784\u9020bst"},(0,s.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/construct-binary-search-tree-from-preorder-traversal/"},"\u5148\u5e8f\u904d\u5386\u6784\u9020BST")),(0,s.kt)("p",null,"\u5148\u5e8f\u5e8f\u5217\u7b2c\u4e00\u4e2a\u8282\u70b9\u4e00\u5b9a\u662f\u6839\uff0c\u5de6\u5b50\u6811\u6240\u6709\u7ed3\u70b9\u90fd\u5c0f\u4e8e\u6839\u8282\u70b9\uff0c\u53f3\u5b50\u6811\u6240\u6709\u7ed3\u70b9\u90fd\u5927\u4e8e\u6839\u8282\u70b9\uff0c\u4e14\u5148\u5e8f\u5e8f\u5217\u5e94\u8be5\u662f\u5f62\u5982 ",(0,s.kt)("strong",{parentName:"p"},"\u6839 + \u5de6\u5b50\u6811\u5148\u5e8f + \u53f3\u5b50\u6811\u5148\u5e8f")," \u7684\u7ed3\u6784\uff0c\u6545\u53ef\u4ee5\u4f7f\u7528lower_bound\u627e\u5230\u5de6\u53f3\u5b50\u6811\u5728\u5f53\u524d\u5148\u5e8f\u5e8f\u5217\u4e2d\u7684\u5212\u5206\u70b9\uff0c\u9012\u5f52\u5904\u7406\u5de6\u53f3\u5b50\u6811"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"  class Solution {\n  public:\n    TreeNode* bstFromPreorder(std::vector<int> preorder) {\n        if(preorder.empty()) \n          return nullptr;\n\n        TreeNode* root = new TreeNode(preorder[0]);\n        auto it = std::lower_bound(preorder.begin()+1, preorder.end(), preorder[0]);\n        \n        root->left  = bstFromPreorder(vector<int>(preorder.begin()+1, it)); // \u8fd8\u53ef\u4ee5\u4f18\u5316\n        root->right = bstFromPreorder(vector<int>(it, preorder.end()));\n        return root;\n    }\n};\n")),(0,s.kt)("p",null,"\u8fd9\u53ef\u4ee5\u7528\u6765\u8bbe\u8ba1\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u3002"),(0,s.kt)("h3",{id:"\u524d\u5e8f\u548c\u4e2d\u5e8f\u6784\u9020\u4e8c\u53c9\u6811"},(0,s.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/"},"\u524d\u5e8f\u548c\u4e2d\u5e8f\u6784\u9020\u4e8c\u53c9\u6811")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u524d\u5e8f\u904d\u5386\uff1a",(0,s.kt)("strong",{parentName:"li"},"\u6839\u8282\u70b9 + \u5de6\u5b50\u6811 + \u53f3\u5b50\u6811")),(0,s.kt)("li",{parentName:"ul"},"\u4e2d\u5e8f\u904d\u5386\uff1a",(0,s.kt)("strong",{parentName:"li"},"\u5de6\u5b50\u6811 + \u6839\u8282\u70b9 + \u53f3\u5b50\u6811"))),(0,s.kt)("p",null,"\u601d\u8def\u7531\u6b64\u800c\u751f\uff1a"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u901a\u8fc7 ",(0,s.kt)("inlineCode",{parentName:"li"},"preorder"),"\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u627e\u5230\u6839\u8282\u70b9",(0,s.kt)("inlineCode",{parentName:"li"},"root"),"\uff0c\u518d\u5728",(0,s.kt)("inlineCode",{parentName:"li"},"inorder")," \u4e2d\u627e\u5230\u6839\u8282\u70b9",(0,s.kt)("inlineCode",{parentName:"li"},"root")),(0,s.kt)("li",{parentName:"ul"},"\u627e\u5230root\u540e\uff0c\u5c06\u5de6\u53f3\u5b50\u6811\u5206\u5f00"),(0,s.kt)("li",{parentName:"ul"},"\u7136\u540e\u5728\u5de6\u53f3\u5b50\u6811\u4e2d\u9012\u5f52")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    TreeNode* buildTree(std::vector<int>& preorder, std::vector<int>& inorder) {\n        if(preorder.empty() || inorder.empty()) \n            return nullptr;\n\n        return __buildTree(preorder, inorder, 0, preorder.size(), 0, inorder.size());\n    }\n\n    // \u8fd4\u56de\u7684\u662f\u6839\u8282\u70b9\n    TreeNode* __buildTree(std::vector<int>& preorder, \n                          std::vector<int>& inorder, \n                          int pre_start, int pre_end,\n                          int in_start,  int in_end) \n    { \n        if(pre_start >= pre_end) return nullptr;\n\n        TreeNode* root = new TreeNode(preorder[pre_start]);\n        // \u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u67e5\u627e\n        size_t pos = in_start;\n        while(pos < in_end) {\n            if(inorder[pos] == preorder[pre_start]) break;\n            ++pos;\n        }\n        \n        int dist =  pos-in_start;\n        root->left  = __buildTree(preorder, inorder, \n                                  pre_start + 1, pre_start + dist + 1,  // \u524d\u5e8f\u904d\u5386\u7684\u5de6\u5b50\u6811\n                                  in_start,  pos);                    // \u4e2d\u5e8f\u904d\u5386\u7684\u5de6\u5b50\u6811\n        root->right = __buildTree(preorder, inorder, \n                                  pre_start + dist + 1, pre_end,        // \u524d\u5e8f\u904d\u5386\u7684\u53f3\u5b50\u6811\n                                  pos + 1, in_end);                    // \u4e2d\u5e8f\u904d\u5386\u7684\u53f3\u5b50\u6811\n        \n        return root;\n    }\n};\n")),(0,s.kt)("h3",{id:"\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"},(0,s.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/"},"\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811")),(0,s.kt)("p",null,"\u539f\u7406\u57fa\u672c\u548c\u4e0a\u4e00\u9053\u9898\u76ee\u7c7b\u4f3c\uff1a"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u540e\u5e8f\u904d\u5386\uff1a",(0,s.kt)("strong",{parentName:"li"},"\u5de6\u5b50\u6811 + \u53f3\u5b50\u6811 + \u6839\u8282\u70b9")),(0,s.kt)("li",{parentName:"ul"},"\u4e2d\u5e8f\u904d\u5386\uff1a",(0,s.kt)("strong",{parentName:"li"},"\u5de6\u5b50\u6811 + \u6839\u8282\u70b9 + \u53f3\u5b50\u6811"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    TreeNode* buildTree(std::vector<int>& inorder, std::vector<int>& postorder) {\n        if(postorder.empty() || inorder.empty()) return nullptr;\n        \n        return __buildTree(inorder, postorder, 0, inorder.size(), 0, postorder.size());\n    }\n\n\n    TreeNode* __buildTree(std::vector<int>& inorder, \n                          std::vector<int>& postorder,\n                          size_t in_start,   size_t in_end,\n                          size_t post_start, size_t post_end)\n    {\n        if(in_start >= in_end) \n            return nullptr;\n\n        TreeNode* root = new TreeNode(postorder[post_end-1]); // \u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f\u6839\u8282\u70b9\n\n        size_t pos = in_start;\n        // \u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u6839\u8282\u70b9\n        while(pos < in_end) {\n            if(inorder[pos] == root->val) break;\n            ++pos;\n        }\n\n        size_t toEndDist = in_end - pos;\n\n        root->left =  __buildTree(inorder, postorder, \n                                  in_start, pos,                        // \u524d\u5e8f\u904d\u5386\u7684\u5de6\u5b50\u6811\n                                  post_start, post_end - toEndDist);    // \u540e\u5e8f\u904d\u5386\u7684\u5de6\u5b50\u6811\n        root->right =  __buildTree(inorder, postorder, \n                                   pos+1,  in_end,                      // \u524d\u5e8f\u904d\u5386\u7684\u53f3\u5b50\u6811\n                                   post_end - toEndDist, post_end-1);   // \u540e\u5e8f\u904d\u5386\u7684\u53f3\u5b50\u6811\n\n        return root;\n    }\n};\n")),(0,s.kt)("h3",{id:"\u6062\u590d\u4e8c\u53c9\u6811"},(0,s.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/recover-binary-search-tree/"},"\u6062\u590d\u4e8c\u53c9\u6811")),(0,s.kt)("h2",{id:"\u5e94\u7528"},"\u5e94\u7528"),(0,s.kt)("h3",{id:"\u5929\u9645\u7ebf\u95ee\u9898"},(0,s.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/the-skyline-problem/"},"\u5929\u9645\u7ebf\u95ee\u9898")),(0,s.kt)("p",null,"\u4ea7\u751f\u8f6e\u5ed3\u5173\u952e\uff1a\u6700\u5927\u9ad8\u5ea6\u662f\u5426\u53d8\u5316\uff0c\u53d8\u5316\u4e86\u624d\u4f1a\u751f\u4ea7\u8f6e\u5ed3\u7684\u6539\u53d8\u3002"),(0,s.kt)("p",null,"\u5c06\u4e00\u4e2a\u5927\u697c\u7684\u4f4d\u7f6e\u548c\u9ad8\u5ea6\u4fe1\u606f\u5212\u5206\u4e3a\u4e24\u4e2a\u3002\u6bd4\u5982 ",(0,s.kt)("inlineCode",{parentName:"p"},"[2, 9, 10]"),"\uff0c\u5206\u4e3a ",(0,s.kt)("inlineCode",{parentName:"p"},"[2, 10, \u4e0a]"),"\u548c ",(0,s.kt)("inlineCode",{parentName:"p"},"[9,10, \u4e0b]"),"\uff0c\u542b\u4e49\u662f",(0,s.kt)("inlineCode",{parentName:"p"},"[\u4f4d\u7f6e\uff0c\u9ad8\u5ea6\uff0c\u4e0a/\u4e0b]"),"\uff0c\u201c\u4e0a\u201d\uff1a\u5bf9\u5e94\u7684\u662f\u8fd9\u4e2a\u9ad8\u5ea6\u7684\u5f00\u59cb\uff0c\u201c\u4e0b\u201d\uff1a\u5bf9\u5e94\u7684\u662f\u8fd9\u4e2a\u9ad8\u5ea6\u7684\u7ed3\u675f\u3002\u5927\u697c\u7684 ",(0,s.kt)("inlineCode",{parentName:"p"},"n")," \u4e2a\u4fe1\u606f\u6309\u7167\u8fd9\u4e2a\u65b9\u5f0f\u5212\u5206\u4e3a",(0,s.kt)("inlineCode",{parentName:"p"},"2 * n"),"\u4e2a\u3002 "),(0,s.kt)("p",null,"\u7528 ",(0,s.kt)("inlineCode",{parentName:"p"},"htMap_")," \uff08\u8bcd\u6761\u662f",(0,s.kt)("inlineCode",{parentName:"p"},"k-v:\u9ad8\u5ea6-\u6b21\u6570"),"\uff09\u6309\u7167\u4f4d\u7f6e\u4ece\u5c0f\u5230\u5927\u904d\u5386\u8282\u70b9\uff0c\u5e76\u4e14\u52a8\u6001\u4fdd\u5b58\u904d\u5386\u5230\u5f53\u524d\u4f4d\u7f6e\u7684\u6700\u5927\u9ad8\u5ea6\u3002\u7528",(0,s.kt)("inlineCode",{parentName:"p"},"phMap_"),"\u5b8c\u6574\u5730\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u6700\u5927\u9ad8\u5ea6\u4fe1\u606f\u3002\u6700\u540e\u6839\u636e\u8fd9\u4e2a\u6700\u5927\u9ad8\u5ea6\u7684\u4fe1\u606f\u662f\u5426\u6539\u53d8\u5c31\u53ef\u4ee5\u7ed8\u5236\u5927\u697c\u7684\u8f6e\u5ed3\u3002"),(0,s.kt)("p",null,"\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u6b21\u201c\u4e0a\u201d\u5c31\u662f\u4e00\u4e2a\u67d0\u4e2a\u9ad8\u5ea6\u6b21\u6570\u589e\u52a01\uff0c\u201c\u4e0b\u201d\u662f\u67d0\u4e2a\u9ad8\u5ea6\u7684\u6b21\u6570\u51cf\u5c111\uff0c\u5982\u679c\u51cf\u5c11\u4e3a0\uff0c\u8bf4\u660e\u8fd9\u4e2a\u9ad8\u5ea6\u5c31\u6ca1\u6709\u4e86\u3002\u901a\u8fc7\u4e24\u4e2a\u64cd\u4f5c\uff0c\u6765\u52a8\u6001\u7684\u6539\u53d8",(0,s.kt)("inlineCode",{parentName:"p"},"htMap_"),"\u4e2d\u6700\u5927\u9ad8\u5ea6\u3002\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u5728\u4ee3\u7801\u4e2d\u4e3a",(0,s.kt)("inlineCode",{parentName:"p"},"true/false"),"\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <algorithm>\n#include <vector>\n#include <map>\n\nclass Solution {\npublic:\n    template<typename T> \n    using vectorSet = std::vector<std::vector<T>> ;\n\n    vectorSet<int> getSkyline(vectorSet<int> & buildings) {\n        if(buildings.empty()) return resultSet_;\n        \n        std::vector<TreeNode*> nodes_(buildings.size() * 2);\n\n        for(int i=0; i < buildings.size(); ++i) { \n            nodes_[i*2]   = new TreeNode(true,  buildings[i][0], buildings[i][2]);\n            nodes_[i*2+1] = new TreeNode(false, buildings[i][1], buildings[i][2]);\n        }\n\n        // \u7ed9\u8282\u70b9\u6392\u5e8f\n        std::sort(nodes_.begin(), nodes_.end(), NodeCompator());\n        \n        std::map<int, int> htMap_; // \u9ad8\u5ea6-\u6b21\u6570\n        std::map<int, int> phMap_; // \u4f4d\u7f6e-\u9ad8\u5ea6\n\n        for(int i=0; i < nodes_.size(); ++i) { \n            int height = nodes_[i]->ht;\n\n            if(nodes_[i]->isUp) { \n                // \u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u9ad8\u5ea6\uff0c\u5c31\u63d2\u5165\u4e00\u6761\u8bb0\u5f55\n                if(htMap_.count(height) ==0) \n                { \n                    htMap_[height] = 1;\n                }\n                else\n                {  // \u5426\u5219\u5c31++\n                    ++htMap_[height];\n                }\n            }\n            else { \n                if(htMap_.count(height)) { \n                    if(htMap_[height] ==1)\n                    { \n                        htMap_.erase(height);\n                    }\n                    else \n                    {\n                        --htMap_[height];\n                    }\n                }\n            }\n            // \u6dfb\u52a0\u8f6e\u5ed3\u4fe1\u606f\n            if(htMap_.empty()) \n            {\n                phMap_[nodes_[i]->posi] =0;\n                \n            }\n            else \n            { \n                phMap_[nodes_[i]->posi] = htMap_.crbegin()->first; // \u8fd9\u4e2a\u4f4d\u7f6e - \u6700\u5927\u9ad8\u5ea6\n            }\n        }\n\n        // for(const auto& entry : phMap_) { \n        //     std::cout<<"["<<entry.first<<" "<<entry.second<<"]"<<std::endl;\n        // }\n\n        int start  =0; \n        int height =0;\n\n        for(const auto& entry : phMap_) { \n            int curPosition = entry.first;  // key\n            int curHeight   = entry.second; // value\n\n            if(height != curHeight) \n            { \n                resultSet_.emplace_back(std::vector<int>{curPosition, curHeight});\n            }\n\n            start  = curPosition;\n            height = curHeight;\n        }\n\n        // \u5728\u8fd4\u56de\u4e4b\u524d\u8981delete new\u51fa\u6765\u7684\u4fe1\u606f \n        for(TreeNode* node : nodes_) { delete node; }\n\n        return resultSet_;\n    }\n\nprivate:\n    struct TreeNode { \n        bool isUp;  // \u662f\u5426\u662f\u4e0a\n        int  posi;  // \u4f4d\u7f6e\n        int  ht;    // \u9ad8\u5ea6\n\n        TreeNode() = default;\n\n        TreeNode(bool up, int position, int height) \n        : isUp(up), \n          posi(position), \n          ht(height) \n        { }\n    };\n\n    struct NodeCompator { \n        bool operator()(const TreeNode* lhs, const TreeNode* rhs) const { \n            if(lhs->posi != rhs->posi) { \n                return lhs->posi < rhs->posi;  // \u4f4d\u7f6e\u5c0f\u7684\u6392\u5728\u524d\u9762\uff0c\n            }\n\n            // \u4f4d\u7f6e\u76f8\u7b49\u65f6\uff0c\n            if(lhs->isUp != rhs->isUp) { \n                return lhs->isUp;\n            }\n\n            return false;\n        } \n    };\n\n    vectorSet<int> resultSet_; //\u6700\u7ec8\u7684\u8f6e\u5ed3 \n};\n')))}u.isMDXComponent=!0}}]);