"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[6905],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return _}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),c=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(t),_=a,m=d["".concat(o,".").concat(_)]||d[_]||p[_]||l;return t?r.createElement(m,s(s({ref:n},u),{},{components:t})):r.createElement(m,s({ref:n},u))}));function _(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,s=new Array(l);s[0]=d;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<l;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},16420:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=t(87462),a=t(63366),l=(t(67294),t(3905)),s=["components"],i={id:"A2.udp-football",title:"A2.udp-football","typora-root-url":"../"},o=void 0,c={unversionedId:"Project/A2.udp-football",id:"Project/A2.udp-football",isDocsHomePage:!1,title:"A2.udp-football",description:"\u591a\u4eba\u5b9e\u65f6\u8db3\u7403\u9879\u76ee\u8bbe\u8ba1",source:"@site/docs/13.Project/A2.udp-football.md",sourceDirName:"13.Project",slug:"/Project/A2.udp-football",permalink:"/Project/A2.udp-football",editUrl:"https://github.com/worst0/wiki_note/edit/main/docs/13.Project/A2.udp-football.md",version:"current",lastUpdatedAt:1633869865,formattedLastUpdatedAt:"10/10/2021",frontMatter:{id:"A2.udp-football",title:"A2.udp-football","typora-root-url":"../"},sidebar:"Document\ud83d\udcbb",previous:{title:"A1.Gtest\u6d4b\u8bd5\u6846\u67b6",permalink:"/Project/A1.Gtest\u6d4b\u8bd5\u6846\u67b6"},next:{title:"A3.Hython",permalink:"/Project/A3.Hython"}},u=[{value:"\u591a\u4eba\u5b9e\u65f6\u8db3\u7403\u9879\u76ee\u8bbe\u8ba1",id:"\u591a\u4eba\u5b9e\u65f6\u8db3\u7403\u9879\u76ee\u8bbe\u8ba1",children:[{value:"\u6280\u672f\u70b9",id:"\u6280\u672f\u70b9",children:[]},{value:"\u754c\u9762",id:"\u754c\u9762",children:[]},{value:"\u6574\u4f53\u6846\u67b6",id:"\u6574\u4f53\u6846\u67b6",children:[]},{value:"\u529f\u80fd\u8bf4\u660e",id:"\u529f\u80fd\u8bf4\u660e",children:[]},{value:"\u8be6\u7ec6\u8bf4\u660e",id:"\u8be6\u7ec6\u8bf4\u660e",children:[]}]},{value:"\u63a5\u53e3\u96c6\u5408",id:"\u63a5\u53e3\u96c6\u5408",children:[{value:"\u6570\u636e\u63a5\u53e3",id:"\u6570\u636e\u63a5\u53e3",children:[]}]},{value:"\u901a\u7528\u63a5\u53e3",id:"\u901a\u7528\u63a5\u53e3",children:[]},{value:"Socket\u63a5\u53e3",id:"socket\u63a5\u53e3",children:[{value:"socket_create_udp",id:"socket_create_udp",children:[]}]},{value:"Epoll\u63a5\u53e3",id:"epoll\u63a5\u53e3",children:[]},{value:"\u5171\u7528\u63a5\u53e3",id:"\u5171\u7528\u63a5\u53e3",children:[]},{value:"\u5ba2\u6237\u7aef\u63a5\u53e3",id:"\u5ba2\u6237\u7aef\u63a5\u53e3",children:[]},{value:"\u4e3b\u7a0b\u5e8f",id:"\u4e3b\u7a0b\u5e8f",children:[{value:"client",id:"client",children:[]},{value:"server",id:"server",children:[]}]},{value:"1. UDP\u642d\u914dconnect",id:"1-udp\u642d\u914dconnect",children:[]},{value:"2. server\u7aefepoll\u7684\u4f18\u5316",id:"2-server\u7aefepoll\u7684\u4f18\u5316",children:[]}],p={toc:u};function d(e){var n=e.components,i=(0,a.Z)(e,s);return(0,l.kt)("wrapper",(0,r.Z)({},p,i,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"\u591a\u4eba\u5b9e\u65f6\u8db3\u7403\u9879\u76ee\u8bbe\u8ba1"},"\u591a\u4eba\u5b9e\u65f6\u8db3\u7403\u9879\u76ee\u8bbe\u8ba1"),(0,l.kt)("h3",{id:"\u6280\u672f\u70b9"},"\u6280\u672f\u70b9"),(0,l.kt)("p",null,"\u7ebf\u7a0b\uff1a\u591a\u7ebf\u7a0b\uff0c\u4e92\u65a5\u9501\uff0c\u6761\u4ef6\u53d8\u91cf\uff0c\u7ebf\u7a0b\u6c60"),(0,l.kt)("p",null,"\u4fe1\u53f7\uff1aSIGINT\uff0cSIGALARM\uff0c\u95f4\u9694\u5b9a\u65f6\u5668"),(0,l.kt)("p",null,"IO\uff1a\u6587\u4ef6\u6253\u5361\uff0c\u6587\u4ef6\u8bfb\u5199\uff0c\u975e\u963b\u585eIO\uff0cIO\u591a\u8def\u590d\u7528\uff0cSelect\uff0cEpoll"),(0,l.kt)("p",null,"\u7f51\u7edc\uff1aTCP\uff0cUDP\uff0cSOCKET"),(0,l.kt)("h3",{id:"\u754c\u9762"},"\u754c\u9762"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image-20210916103201059",src:t(61279).Z})),(0,l.kt)("h3",{id:"\u6574\u4f53\u6846\u67b6"},"\u6574\u4f53\u6846\u67b6"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u672c\u6e38\u620f\u662f\u4e00\u4e2a\u57fa\u4e8eUDP\u7f51\u7edc\u7f16\u7a0b\u7684C/S\u67b6\u6784\u7684\u5e94\u7528\uff0c\u9700\u8981\u72ec\u7acb\u5b8c\u6210 ",(0,l.kt)("inlineCode",{parentName:"li"},"server")," \u548c ",(0,l.kt)("inlineCode",{parentName:"li"},"client")," \u4e24\u7aef\uff1b"),(0,l.kt)("li",{parentName:"ol"},"\u73a9\u6e38\u620f\u65f6\uff0c\u73a9\u5bb6\u542f\u52a8 ",(0,l.kt)("inlineCode",{parentName:"li"},"cllent")," \u7aef\uff0c\u9009\u62e9\u81ea\u5df1\u7684\u961f\u4f0d\uff0c\u767b\u5f55 ",(0,l.kt)("inlineCode",{parentName:"li"},"server")," \u540e\uff0c\u5728\u7403\u573a\u5916\u7b49\u5f85\uff0c\u4e4b\u540e\u81ea\u4e3b\u8fdb\u5165\u7403\u573a\uff0c\u5f00\u59cb\u6e38\u620f\uff1b"),(0,l.kt)("li",{parentName:"ol"},"\u6e38\u620f\u8fc7\u7a0b\u4e2d\uff0c\u7531server\u7aef\u63a5\u6536 ",(0,l.kt)("inlineCode",{parentName:"li"},"client")," \u7684\u63a7\u5236\u4fe1\u606f\uff0c\u51b3\u5b9a\u73a9\u5bb6\u7684\u79fb\u52a8\uff0c\u8e22\u7403\uff0c\u5e26\u7403\u7b49\u6e38\u620f\u884c\u4e3a\uff0c\u518d\u5c06\u6e38\u620f\u5b9e\u65f6\u4fe1\u606f\u53d1\u9001\u7ed9\u6240\u6709\u5ba2\u6237\u7aef\uff1a"),(0,l.kt)("li",{parentName:"ol"},"\u73a9\u5bb6\u53ef\u4ee5\u5728\u6e38\u620f\u7aef\u53d1\u9001\u804a\u5929\u4fe1\u606f\u5230\u5ba2\u6237\u7aef\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u6536\u5230\u5176\u4ed6\u73a9\u5bb6\u7684\u4fe1\u606f\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u53d1\u9001\u79c1\u804a\u4fe1\u606f\u7ed9\u67d0\u4f4d\u73a9\u5bb6")),(0,l.kt)("h3",{id:"\u529f\u80fd\u8bf4\u660e"},"\u529f\u80fd\u8bf4\u660e"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"\u64cd\u4f5c\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"space")," \u6253\u5f00\u529b\u5ea6\u6761\uff0c\u518d\u6b21\u6309\u4e0b\u9009\u4e2d\u529b\u5ea6"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"j")," \u505c\u7403"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"k")," \u666e\u901a\u529b\u5ea6\u8e22\u7403"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"l")," \u5e26\u7403"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enter")," \u6253\u5f00\u8f93\u5165\u6846\uff0c\u8f93\u5165\u804a\u5929\u4fe1\u606f"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"\u79fb\u52a8\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"w")," \u5411\u4e0a\u79fb\u52a8"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"s")," \u5411\u4e0b\u79fb\u52a8 "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"a")," \u5411\u5de6\u79fb\u52a8"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"d")," \u5411\u53f3\u79fb\u52a8"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"\u89c4\u5219\u5224\u65ad\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u51fa\u754c\uff0c\u76f4\u63a5\u5728\u51fa\u754c\u4f4d\u7f6e\u7531\u5bf9\u65b9\u7403\u5458\u53d1\u7403"),(0,l.kt)("li",{parentName:"ul"},"\u8fdb\u7403\uff0c\u76f4\u63a5\u5728\u7403\u95e8\u524d\u7531\u5b88\u95e8\u5458\u5f00\u7403")))),(0,l.kt)("h3",{id:"\u8be6\u7ec6\u8bf4\u660e"},"\u8be6\u7ec6\u8bf4\u660e"),(0,l.kt)("h4",{id:"\u670d\u52a1\u7aef"},"\u670d\u52a1\u7aef"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"\u542f\u52a8"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u542f\u52a8\u65f6\u9ed8\u8ba4\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\uff0c\u83b7\u53d6\u7aef\u53e3 ",(0,l.kt)("inlineCode",{parentName:"li"},"port")," \uff0c\u6e38\u620f\u5730\u56fe\u5927\u5c0f\u7b49\u53c2\u6570"),(0,l.kt)("li",{parentName:"ul"},"\u540c\u6837\u4e5f\u53ef\u4ee5\u5728\u542f\u52a8\u65f6\uff0c\u901a\u8fc7\u6307\u5b9a\u9009\u9879\uff0c\u82e5\u6307\u5b9a\u9009\u9879\uff0c\u5219\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u4e0d\u751f\u6548\u3002"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"\u5e76\u53d1\u8bbe\u7f6e"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u4e3b\u7ebf\u7a0b"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u4e3b\u7ebf\u7a0b\u662f\u4e00\u4e2a ",(0,l.kt)("inlineCode",{parentName:"li"},"acceptor "),"\uff0c\u5faa\u73af\u7b49\u5f85\u7528\u6237",(0,l.kt)("strong",{parentName:"li"},"\u767b\u5f55"),"\uff0c\u767b\u5f55\u540e\u5c06\u7528\u6237\u6309\u7167\u961f\u4f0d\u4e0d\u540c\u52a0\u5230\u5404\u81ea\u4ece\u53cd\u5e94\u5806\u4e2d"),(0,l.kt)("li",{parentName:"ul"},"\u5728\u4e3b\u7ebf\u7a0b\u4e2d\uff0c\u5f00\u542f\u5b9a\u65f6\u5668\uff0c\u6ce8\u518c\u65f6\u949f\u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u6536\u5230\u65f6\u949f\u4fe1\u53f7\uff0c\u5411 ",(0,l.kt)("inlineCode",{parentName:"li"},"client")," \u53d1\u9001\u6e38\u620f\u6570\u636e"),(0,l.kt)("li",{parentName:"ul"},"\u4e3b\u7ebf\u7a0b\u4e2d\u6ce8\u518c ",(0,l.kt)("inlineCode",{parentName:"li"},"sigint")," \u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u6536\u5230 ",(0,l.kt)("inlineCode",{parentName:"li"},"ctrl + c")," \u65f6\uff0c\u544a\u77e5\u5ba2\u6237\u7aef\u4e0b\u7ebf\uff0c\u7ed3\u675f\u8fd0\u884c"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u5b50\u7ebf\u7a0b"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u4e24\u4e2a\u5b50\u7ebf\u7a0b\uff0c\u6bcf\u4e00\u4e2a\u5bf9\u5e94\u7740\u4e00\u4e2a\u961f\u4f0d"),(0,l.kt)("li",{parentName:"ul"},"\u8be5\u7ebf\u7a0b\u4e3a\u4ece\u53cd\u5e94\u5806\uff0c\u4f7f\u7528 ",(0,l.kt)("inlineCode",{parentName:"li"},"epoll")," \u7b49\u5f85\u7528\u6237\u63a7\u5236\u4fe1\u606f\uff0c\u6536\u5230\u63a7\u5236\u4fe1\u606f\u540e\uff0c\u66f4\u65b0\u6e38\u620f\u6570\u636e")))))),(0,l.kt)("p",null,"\u5ba2\u6237\u7aef "),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"\u542f\u52a8 "),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u542f\u52a8\u65f6\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\uff0c\u83b7\u53d6\u670d\u52a1\u7aef\u7684 ",(0,l.kt)("inlineCode",{parentName:"li"},"ip"),"\uff0c",(0,l.kt)("inlineCode",{parentName:"li"},"port")," \u7b49\u4fe1\u606f\uff0c\u83b7\u53d6\u73a9\u5bb6\u7528\u6237\u540d\uff0c\u961f\u4f0d"),(0,l.kt)("li",{parentName:"ul"},"\u542f\u52a8\u65f6\u4e5f\u53ef\u4ee5\u6307\u5b9a\u9009\u9879\uff0c\u82e5\u6307\u5b9a\u9009\u9879\uff0c\u5219\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u4e0d\u751f\u6548"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"\u5e76\u53d1\u8bbe\u7f6e "),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u4e3b\u7ebf\u7a0b",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u4e3b\u7ebf\u7a0b\u5411 ",(0,l.kt)("inlineCode",{parentName:"li"},"server")," \u53d1\u9001\u767b\u5f55\u4fe1\u606f\uff0c\u82e5\u6536\u5230\u54cd\u5e94\uff0c\u5219\u6210\u529f\u767b\u5f55\uff0c\u5426\u5219\u9000\u51fa\u8fd0\u884c"),(0,l.kt)("li",{parentName:"ul"},"\u4e3b\u7ebf\u7a0b\u4e2d\u6ce8\u518c ",(0,l.kt)("inlineCode",{parentName:"li"},"sigint ")," \u4fe1\u53f7\u5904\u7406\u51fd\u6570\uff0c\u6536\u5230 ",(0,l.kt)("inlineCode",{parentName:"li"},"ctrl\uff0bc")," \u65f6\uff0c\u544a\u77e5 ",(0,l.kt)("inlineCode",{parentName:"li"},"server")," \u4e0b\u7ebf\uff0c\u7ed3\u675f\u8fd0\u884c"),(0,l.kt)("li",{parentName:"ul"},"\u4e3b\u7ebf\u7a0b\u8d1f\u8d23\u63a5\u6536\u952e\u76d8\u8f93\u5165\uff0c\u5224\u65ad\u6e38\u620f\u884c\u4e3a\u3002\u5b50\u7ebf\u7a0b"))),(0,l.kt)("li",{parentName:"ul"},"\u5b50\u7ebf\u7a0b",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u5b50\u7ebf\u7a0b\u8d1f\u8d23\u6536\u670d\u52a1\u7aef\u5e7f\u64ad\u7684\u4fe1\u606f\uff0c\u5e76\u505a\u51fa\u89e3\u6790"),(0,l.kt)("li",{parentName:"ul"},"\u91cd\u7ed8\u6e38\u620f\u754c\u9762")))))),(0,l.kt)("h2",{id:"\u63a5\u53e3\u96c6\u5408"},"\u63a5\u53e3\u96c6\u5408"),(0,l.kt)("h3",{id:"\u6570\u636e\u63a5\u53e3"},"\u6570\u636e\u63a5\u53e3"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u5728 ",(0,l.kt)("inlineCode",{parentName:"p"},"common/datatype.h"))),(0,l.kt)("h4",{id:"\u7403\u76f8\u5173"},"\u7403\u76f8\u5173"),(0,l.kt)("p",null,"\u6587\u4ef6\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"datatype.h")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"\nstruct Bpoint{\n    double x;\n    double y;\n};\n\nstruct Aspeed{\n    double x;//x\u4e0a\u7684\u52a0\u901f\u5ea6\n    double y;//y\u4e0a\u7684\u52a0\u901f\u5ea6\n};\n\nstruct Speed{\n    double x;//x\u4e0a\u7684\u901f\u5ea6\n    double y;//y\u4e0a\u7684\u901f\u5ea6\n};\n\nstruct BallStatus {\n    struct Speed v;//\u901f\u5ea6\n    struct Aspeed a;//\u52a0\u901f\u5ea6\n    int t;//\u65f6\u95f4\n    int who;//\u8c01\n    char name[20];//\u540d\u5b57\n    int carry;\n    //pthread_mutex_t mutex;\n};\nstruct Score{\n    int red;\n    int blue;\n};\n")),(0,l.kt)("h4",{id:"\u7403\u5458\u76f8\u5173"},"\u7403\u5458\u76f8\u5173"),(0,l.kt)("p",null,"\u6587\u4ef6\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"datatype.h")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"\nstruct Point{\n    int x, y;\n};\n\n//#define MAX //\u6bcf\u961f\u7403\u5458\u6570\u91cf\n\nstruct User{/*\u7528\u6237*/\n    int team; //0 RED  1 BLUE\n    char name[20];//name\n    int fd; //\u5b58\u50a8\u8be5\u73a9\u5bb6\u7528\u6237\u5bf9\u5e94\u7684\u8fde\u63a5\n    int online; // 1 \u5728\u7ebf 0 \u4e0d\u5728\u7ebf\n    int flag; //\u672a\u54cd\u5e94\u7684\u6b21\u6570\n   // struct sockaddr_in addr;\n    struct Point loc;//position//\u4eba\u7684\u4f4d\u7f6e\n    int carry;\n};\n\n")),(0,l.kt)("h4",{id:"\u6570\u636e\u4ea4\u4e92\u76f8\u5173"},"\u6570\u636e\u4ea4\u4e92\u76f8\u5173"),(0,l.kt)("p",null,"\u6587\u4ef6\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"datatype.h")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#define MAXMSG 1024 //\u65e5\u5e38\u7684\u4fe1\u606f\u4ea4\u4e92\uff0c\u5982\u804a\u5929\u4fe1\u606f\uff0c\u7edf\u4e00\u4e3a512\u957f\u5ea6\n\n// \u767b\u5f55\u76f8\u5173\nstruct LogRequest{\n    char name[20];\n    int team;//0 RED 1 BLUE\n    char msg[512];\n};\n\nstruct LogResponse{\n    int type;//0 success 1 failed\n    char msg[512];\n};\n\n\n#define ACTION_KICK 0x01\n#define ACTION_CARRY 0x02\n#define ACTION_STOP 0x04\n\nstruct Ctrl {\n    //control\n    int action;\n    int kick;\n    int dirx;//\u65b9\u5411x\n    int diry;//\u65b9\u5411y\n    int strength;\n};\n\n#define FT_TEST 0x01 //\u670d\u52a1\u7aef\u5fc3\u8df3\u4fe1\u606f\n#define FT_WALL 0x02 //\u670d\u52a1\u7aef\u4ee5\u5b57\u7b26\u4e32\u65b9\u5f0f\u5e7f\u64ad\u6e38\u620f\u60c5\u51b5\n#define FT_MSG 0x04 //\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u4fe1\u606f\uff0c\u670d\u52a1\u7aef\u8f6c\u53d1\u7684\u4fe1\u606f\n#define FT_ACK 0x08 //\u5ba2\u6237\u7aef\u5bf9\u5fc3\u8df3ACK\u786e\u8ba4\n#define FT_FIN 0x10 //\u5ba2\u6237\u7aef\uff0c\u670d\u52a1\u7aef\u4e0b\u7ebf\u524d\uff0c\u5bf9\u5f7c\u6b64\u7684\u544a\u77e5\n#define FT_CTL 0x20 //\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u63a7\u5236\u4fe1\u606f\n#define FT_GAME 0x40 //\u670d\u52a1\u7aef\u5411\u5ba2\u6237\u7aef\u5e7f\u64ad\u7684\u6e38\u620f\u5b9e\u65f6\u56fe\u753bjson\u53d1\u9001\n#define FT_SCORE 0x80 //\u670d\u52a1\u7aef\u5bf9\u5ba2\u6237\u7aef\u5e7f\u64ad\u7684\u6e38\u620f\u6bd4\u5206\u53d8\u5316,json\u53d1\u9001(\u5305\u62ec\u8fdb\u7403\u4eba)\n#define FT_GAMEOVER 0x100 //\u6e38\u620f\u7ed3\u675f\n\nstruct FootBallMsg {\n    //\u767b\u9646\u540e\u7684\u4fe1\u606f\u4ea4\u4e92\n    int type; // type & FT_HEART\n    int size;\n    int team;//\u961f\n    char name[20];//\u540d\u5b57\n    struct Ctrl ctl;\n    char msg[MAXMSG];//\u4fe1\u606f\n};\n")),(0,l.kt)("h4",{id:"\u7403\u573a\u6570\u636e\u76f8\u5173"},"\u7403\u573a\u6570\u636e\u76f8\u5173"),(0,l.kt)("p",null,"\u6587\u4ef6\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"datatype.h")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"struct Map{\n    int width;\n    int height;\n    struct Point start; /*\u7403\u573a\u5f00\u59cb\u7684\u4f4d\u7f6e*/ // Starting Point\n    int gate_width;  // Goal size\n    int gate_height;\n};\n")),(0,l.kt)("h4",{id:"\u5168\u5c40\u53d8\u91cf"},"\u5168\u5c40\u53d8\u91cf"),(0,l.kt)("h4",{id:"\u670d\u52a1\u7aef-1"},"\u670d\u52a1\u7aef"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// struct Map court;\nstruct Bpoint ball;/*\u7403\u7684\u4f4d\u7f6e*/\nstruct BallStatus ball_status;/*\u7403\u7684\u72b6\u6001*/\nstruct Score score;/*\u6bd4\u5206*/\nint repollfd, bepollfd; //\u4ece\u53cd\u5e94\u5806 sub_reactor\nstruct Map court;/*\u7403\u573a*/\n")),(0,l.kt)("h2",{id:"\u901a\u7528\u63a5\u53e3"},"\u901a\u7528\u63a5\u53e3"),(0,l.kt)("h4",{id:"get_conf_value"},(0,l.kt)("inlineCode",{parentName:"h4"},"get_conf_value")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u4ece\u914d\u7f6e\u2f42\u4ef6\u4e2d\uff0c\u6839\u636ekey\u627e\u5230value")),(0,l.kt)("p",null,"\u2f42\u4ef6\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"common.c")," \u3001",(0,l.kt)("inlineCode",{parentName:"p"},"common.h")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'//\u5224\u65adpath\u548ckey\u7684\u5408\u6cd5\u6027\n//fopen(path, "r")\n//while (getline(&line, &size, fp))\n//      if strstr(line, key) != NULL\n//\u5224\u65ad\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u662f\u4e0d\u662f\u7b49\u4e8e\u53f7\n//strncpy()\n\nchar *get_value(char *path, char *key) {\n    FILE *fp = NULL;\n    ssize_t nrd;\n    char *line = NULL, *sub = NULL;\n//    extern char conf_ans[50];\n    size_t linecap;\n    if(path == NULL || key == NULL) {\n         fprintf(stderr, "Error in argument!\\n");\n        return NULL;\n    }\n    if((fp = fopen(path, "r")) == NULL) {\n        perror("fopen");\n        return NULL;\n    }\n    while((nrd = getline(&line, &linecap, fp))!= -1) {\n        if((sub = strstr(line, key)) == NULL) {\n            continue;\n        } else {\n             if (line[strlen(key)] == \'=\') {\n             strncpy(conf_ans, sub + strlen(key) + 1, nrd - strlen(key) - 2);\n             *(conf_ans + nrd - strlen(key) - 2) = \'\\0\';\n             break;\n            }\n        }\n    }\n    free(line);\n    fclose(fp);\n    if(sub==NULL) {\n        return NULL;\n    }\n    return conf_ans;\n}\n')),(0,l.kt)("h4",{id:"global"},(0,l.kt)("inlineCode",{parentName:"h4"},"global")),(0,l.kt)("p",null,"\u2f42\u4ef6\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"global.c")," \u3001",(0,l.kt)("inlineCode",{parentName:"p"},"global.h")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"char conf_ans[50];\n")),(0,l.kt)("h4",{id:"make_non_block"},(0,l.kt)("inlineCode",{parentName:"h4"},"make_non_block")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void make_nonblock_ioctl(int fd) {\n    unsigned long ul = 1;\n    ioctl(fd, FIONBIO, &ul);\n}\n\nvoid make_block_ioctl(int fd) {\n    unsigned long ul = 0;\n    ioctl(fd, FIONBIO, &ul);\n}\n\nvoid make_nonblock(int fd) {\n    int flag;\n    if ((flag = fcntl(fd, F_GETFL)) < 0) {\n        return;\n    }\n    flag |= O_NONBLOCK;\n    fcntl(fd, F_SETFL, flag);\n}\n\nvoid make_block(int fd) {\n    int flag;\n    if ((flag = fcntl(fd, F_GETFL)) < 0) {\n        return ;\n    }\n    flag &= ~O_NONBLOCK;\n    fcntl(fd, F_SETFL, flag);\n}\n\n")),(0,l.kt)("h2",{id:"socket\u63a5\u53e3"},"Socket\u63a5\u53e3"),(0,l.kt)("h3",{id:"socket_create_udp"},"socket_create_udp"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u521b\u5efa\u4e00\u4e2a\u7ed1\u5b9a\u786e\u5b9a\u7aef\u2f1d\u7684UDP\u5957\u63a5\u5b57")),(0,l.kt)("p",null,"\u2f42\u4ef6: ",(0,l.kt)("inlineCode",{parentName:"p"},"udp_server.c")," \u3001",(0,l.kt)("inlineCode",{parentName:"p"},"udp_server.h")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"//\u521b\u5efa\u4e00\u4e2aUDP\u5957\u63a5\u5b57\n//\u521b\u5efaSOCK_DGRAM\n//\u8bbe\u7f6e\u5730\u5740\u91cd\u7528\n//\u8bbe\u7f6e\u975e\u963b\u585e\u5957\u63a5\u5b57\n//\u7ed1\u5b9aINADDR_ANY & port\nint socket_create_udp(int port) {\n    int server_listen;\n    if ((server_listen = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {\n        return -1;\n    }\n    struct sockaddr_in server;\n    server.sin_family = AF_INET;\n    server.sin_port = htons(port);\n    server.sin_addr.s_addr = INADDR_ANY;\n    int opt = 1;\n    setsockopt(server_listen, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));\n    \n    make_nonblock(server_listen);\n    if (bind(server_listen, (struct sockaddr *)&server, sizeof(server)) < 0) {\n        return -1;\n    }\n    return server_listen;\n}\n\n\n\n")),(0,l.kt)("h4",{id:"socket_udp"},(0,l.kt)("inlineCode",{parentName:"h4"},"socket_udp")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u521b\u5efa\u2f00\u4e2a\u4e3b\u52a8\u7684UDP\u5957\u63a5\u5b57")),(0,l.kt)("p",null,"\u2f42\u4ef6\uff1a ",(0,l.kt)("inlineCode",{parentName:"p"},"udp_client.c")," \u3001",(0,l.kt)("inlineCode",{parentName:"p"},"udp_client.h")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'//\u521b\u5efa\u4e00\u4e2aSOCK_DGRAM\uff0cUDP\u5957\u63a5\u5b57\nint socket_udp() {\n    int sockfd;\n    if((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {\n        perror("socket");\n        return -1;\n    }\n    printf("socket creat.\\n");\n    return sockfd;\n}\n')),(0,l.kt)("h2",{id:"epoll\u63a5\u53e3"},"Epoll\u63a5\u53e3"),(0,l.kt)("h4",{id:"add_to_sub_reactor"},(0,l.kt)("inlineCode",{parentName:"h4"},"add_to_sub_reactor")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u5c06\u4e3b\u53cd\u5e94\u5806\u4e0a\u63a5\u2f0a\u7684\u5ba2\u6237\u6dfb\u52a0\u5230\u2f00\u4e2a\u4ece\u53cd\u5e94\u5806")),(0,l.kt)("p",null,"\u2f42\u4ef6: ",(0,l.kt)("inlineCode",{parentName:"p"},"udp_epoll.c")," \u3001 ",(0,l.kt)("inlineCode",{parentName:"p"},"udp_epoll.h")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'void add_event(int epollfd, int fd, int events);\nvoid del_event(int epollfd, int fd);\nint udp_connect(int epollfd, struct sockaddr_in *serveraddr);\nint udp_accept(int epollfd, int fd, struct User *user);\nvoid add_to_sub_reactor(struct User *user);\n\n//\u6ce8\u518cepoll\u4e8b\u4ef6\u5230epoll\u5b9e\u4f8b\u4e2d\nvoid add_event(int epollfd, int fd, int events) {\n    struct epoll_event ev;\n    ev.events = events;\n    ev.data.fd = fd;\n    epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, &ev);\n    return;\n}\n\n//\u6ce8\u518cepoll\u5b9e\u4f8b\uff0c\u4f7f\u7528data.ptr\u4fdd\u5b58\u7528\u6237user\u7684\u5730\u5740\nvoid add_event_ptr(int epollfd, int fd, int events, struct User *user) {\n    struct epoll_event ev;\n    ev.events = events;\n    ev.data.ptr = (void *)user;\n\n    epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, &ev);\n    DBG(GREEN"Sub Thread"NONE":After Epoll Add %s.\\n", user->name);\n    return;\n}\n\n//\u4eceepollfd\u4e2d\u6ce8\u9500fd\u6587\u4ef6\n\nvoid del_event(int epollfd, int fd) {\n    epoll_ctl(epollfd, EPOLL_CTL_DEL, fd, NULL);\n    return;\n}\n\nint udp_connect(int epollfd, struct sockaddr_in * serveraddr) {\n    int sockfd;\n  //  if((sockfd = socket_udp()) < 0) {\n    if((sockfd = socket_create_udp(port)) < 0) {\n        perror("socket_udp");\n        return -1;\n    }\n    DBG(GREEN"INFO"NONE": Before connect. \\n");\n    if (connect(sockfd, (struct sockaddr *)serveraddr, sizeof(struct sockaddr)) < 0) {\n        perror("connect");\n        return -1;\n    }\n    DBG(GREEN"INFO"NONE" : After connect.\\n");\n    int ret = send(sockfd, "Login!", sizeof("Login!"), 0);\n    DBG(RED"RET = %d\\n"NONE, ret);\n   // add_event(epollfd, sockfd, EPOLLIN);\n    return sockfd;\n}\n\n\n\nint check_online(struct LogRequest *request) {\n    struct User *team = (request->team ? bteam : rteam);\n    for(int i = 0; i < MAX; i++) {\n        if(rteam[i].online && !strcmp(rteam[i].name, request->name))return 1;\n        if(bteam[i].online && !strcmp(bteam[i].name, request->name))return 1;\n    }\n    return 0;\n}\n\nint udp_accept(int epollfd, int fd, struct User *user) {\n    struct sockaddr_in client;\n    int new_fd, ret;\n    struct LogRequest request;\n    struct LogResponse response;\n\n    bzero(&request, sizeof(request));\n    bzero(&response, sizeof(response));\n    socklen_t len = sizeof(struct sockaddr_in);\n    ret = recvfrom(fd, (void *)&request, sizeof(request), 0,\n                   (struct sockaddr *)&client, &len);\n    if (ret != sizeof(request)) {\n        response.type = 1;\n        strcpy(response.msg, "Login failed with NetWork errors!");\n        sendto(fd, (void *)&response, sizeof(response), 0,\n               (struct sockaddr *)&client, len);\n        return -1;\n    }\n\n    if(check_online(&request)) {\n        response.type = 1;\n        strcpy(response.msg, "You Are Alreadly Playint This Game SomeWhere!");\n        sendto(fd, (void *)&response, sizeof(response), 0,\n               (struct sockaddr *)&client, len);\n        return -1;\n    }\n\n    response.type = 0;\n    strcpy(response.msg, "Login success. Enjoy yourself.");\n    sendto(fd, (void *)&response, sizeof(response), 0,\n           (struct sockaddr *)&client, len);\n\n    if(request.team)\n    DBG(GREEN"INFO"NONE" : "BLUE" %s on %s : %d longin! (%s)\\n"NONE,\n        request.name, inet_ntoa(client.sin_addr), ntohs(client.sin_port),\n        request.msg);\n    else\n    DBG(GREEN"INFO"NONE" : "RED" %s on %s : %d longin! (%s)\\n"NONE,\n        request.name, inet_ntoa(client.sin_addr), ntohs(client.sin_port),\n        request.msg);\n\n    strcpy(user->name, request.name);\n    user->team = request.team;\n    new_fd = udp_connect(epollfd, &client);\n    user->fd = new_fd;\n    return new_fd;\n}\n\n\nint find_sub(struct User *team) {//\u627e\u5230\u4e0d\u5728\u7ebf\u7684\u7a7a\n    for(int i = 0; i< MAX; i++) {\n        if(!team[i].online) return i;\n    }\n    return -1;\n}\n\nvoid add_to_sub_reactor(struct User *user) {\n    struct User *team = (user->team ? bteam : rteam);\n    DBG(YELLOW"Main Thread : "NONE"Add to sub_reactor.\\n");\n    int sub = find_sub(team);\n    team[sub] = *user;//\u6570\u7ec4\u4e2d\u5b58\u653e\u7684\u7ed3\u6784\u4f53user\n    team[sub].online = 1;\n    team[sub].flag = 10;\n    DBG(L_RED"sub = %d, name = %s\\n"NONE, sub, team[sub].name);\n    if(user->team)\n        add_event_ptr(bepollfd, team[sub].fd, EPOLLIN | EPOLLET, &team[sub]);\n    else\n        add_event_ptr(repollfd, team[sub].fd, EPOLLIN | EPOLLET, &team[sub]);\n\n    return;\n}\n')),(0,l.kt)("h2",{id:"\u5171\u7528\u63a5\u53e3"},"\u5171\u7528\u63a5\u53e3"),(0,l.kt)("h4",{id:"show_data_stream"},(0,l.kt)("inlineCode",{parentName:"h4"},"show_data_stream")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u663e\u793a\u6536\u5230\u7684\u6570\u636e\u7c7b\u578b")),(0,l.kt)("p",null,"\u2f42\u4ef6\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"show_data_stream.h")," \u3001",(0,l.kt)("inlineCode",{parentName:"p"}," show_data_stream.c")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"char data_stream[20];\nvoid show_data_stream(char type);\n\nextern char data_stream[20];\nextern WINDOW *Help;\nextern struct Map court;\n//type 'l'(login) 'c'(carry) 'k'(kick) 's'(stop) 'n'normal 'e'(exit)\n//data_stream\u6570\u7ec4\u540e\u79fb\u4e00\u4f4d\uff0c\u5c06type\u52a0\u5230\u7b2c\u4e00\u4f4d\n//\u6839\u636etype\u4e0d\u540c\uff0c\u4f7f\u7528wattron\u8bbe\u7f6eHelp\u7a97\u53e3\u7684\u9886\u8272\n//\u5728\u5408\u9002\u4f4d\u7f6e\u6253\u5370\u4e00\u4e2a\u7a7a\u683c\nvoid show_data_stream(char type) {\n    for(int i = 18; i > 1; i--) {\n        data_stream[i] = data_stream[i - 1];\n    }\n    data_stream[1] = type;\n    for(int i = 1; i < 19; i++) {\n        switch(data_stream[i]) {\n            case 'l': {\n                wattron(Help, COLOR_PAIR(7));\n            }break;\n            case 'c': {\n                wattron(Help, COLOR_PAIR(8));\n            }break;\n            case 'k': {\n                wattron(Help, COLOR_PAIR(9));\n            }break;\n            case 's': {\n                wattron(Help, COLOR_PAIR(10));\n            }break;\n            case 'n': {\n                wattron(Help, COLOR_PAIR(11));\n            }break;\n            case 'e': {\n                wattron(Help, COLOR_PAIR(12));\n            }break;\n        }\n        mvwprintw(Help, court.height, i, \" \");\n        wrefresh(Help);\n    }\n    return;\n}\n\n\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image.MBVXA1",src:t(33466).Z})),(0,l.kt)("h4",{id:"server_exit"},"server_exit"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u670d\u52a1\u7aef\u6536\u5230 ",(0,l.kt)("inlineCode",{parentName:"p"},"ctrl + c")," \u4fe1\u53f7\u540e\u7684\u9000\u51fa\u51fd\u6570\u6570")),(0,l.kt)("p",null,"\u2f42\u4ef6: ",(0,l.kt)("inlineCode",{parentName:"p"},"server_exit.c")," \u3001 ",(0,l.kt)("inlineCode",{parentName:"p"},"server_exit.h")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#define MAX 50\nextern struct User *rteam, *bteam;\n\nextern struct Bpoint ball;\nextern struct Score score;\n\nvoid server_exit(int signum) {\n    struct FootBallMsg msg;\n    msg.type = FT_FIN;\n    for(int i = 0; i < MAX; i++) {\n        if(rteam[i].online) send(rteam[i].fd, (void *)&msg, sizeof(msg), 0);\n        if(bteam[i].online) send(bteam[i].fd, (void *)&msg, sizeof(msg), 0);\n    }\n    endwin();\n    DBG(RED"Server stopped!\\n"NONE);\n    exit(0);\n}\n\n')),(0,l.kt)("h4",{id:"server_send"},(0,l.kt)("inlineCode",{parentName:"h4"},"server_send")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u5411\u6240\u6709\u5728\u7ebf\u7684player\u53d1\u9001\u2f00\u6761\u6d88\u606f")),(0,l.kt)("p",null,"\u2f42\u4ef6\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"server_exit.c")," \u3001 ",(0,l.kt)("inlineCode",{parentName:"p"},"server_exit.h")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void server_send() {\n    struct FootBallMsg msg;\n    msg.type = FT_GAME;\n    for (int i = 0; i < MAX; i++) {//\u53d1\u9001\u7ed9\u6240\u6709\u5728\u7ebf\u7684\u5ba2\u6237\n        if (rteam[i].online) {\n            strcpy(msg.msg, cJSON_Print(game_msg()));\n            send(rteam[i].fd, (void *)&msg, sizeof(msg), 0);\n        }\n        if (bteam[i].online) {\n            strcpy(msg.msg, cJSON_Print(game_msg()));\n            send(bteam[i].fd, (void *)&msg, sizeof(msg), 0);\n        }\n    }\n}\n")),(0,l.kt)("h4",{id:"thread_pool"},(0,l.kt)("inlineCode",{parentName:"h4"},"thread_pool")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u4ece\u53cd\u5e94\u5806\u7ebf\u7a0b\u6c60\u5904\u7406IO\u4e8b\u4ef6")),(0,l.kt)("p",null,"\u2f42\u4ef6: ",(0,l.kt)("inlineCode",{parentName:"p"},"thread_pool.c")," \u3001 ",(0,l.kt)("inlineCode",{parentName:"p"},"thread_poll.h")),(0,l.kt)("h5",{id:"thread_pollh"},"thread_poll.h"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#define MAXTASK 100 //\u6700\u591a\u4efb\u52a1\n#define MAXTHREAD 10 //\u653e10\u4e2a\u7ebf\u7a0b\nstruct task_queue{\n    int sum;//\u591a\u5c11\u4e2a\n    int epollfd;//\u5bf9\u5e94\u7684\u4ece\u53cd\u5e94\u5806\n    struct User **team;//\u961f\n    int head;\n    int tail;\n    pthread_mutex_t mutex;//\u4e92\u65a5\u9501\n    pthread_cond_t cond;\n};\n\nvoid task_queue_init(struct task_queue *taskQueue, int sum, int epollfd);//\u521d\u59cb\u5316\nvoid task_queue_push(struct task_queue *taskQueue, struct User *user);//\u5165\u961f\nstruct User *task_queue_pop(struct task_queue *taskQueue);//\u5f39\u51fa\u4e00\u4e2a\u7528\u6237\nvoid *thread_run(void *arg);//\u505a\u4ec0\u4e48\u7528\u7684\uff0c\u56de\u8c03\u51fd\u6570\n\n")),(0,l.kt)("h5",{id:"thread_pollc"},"thread_poll.c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'\nextern int repollfd, bepollfd;\nextern struct Bpoint ball;\nextern struct BallStatus ball_status;\nvoid do_echo(struct User *user) {\n    struct FootBallMsg msg;\n    char tmp[512] = {0};\n    int size = recv(user->fd, (void *)&msg, sizeof(msg), 0);\n    user->flag = 10;\n    if(msg.type & FT_ACK) {\n        show_data_stream(\'l\');\n        if(user->team)//blue_team\n            DBG(L_BLUE" %s "NONE"\u2764\\n", user->name);\n        else //red_team\n            DBG(L_RED" %s "NONE"\u2764\\n", user->name);\n    } else if(msg.type & (FT_WALL | FT_MSG)) {\n        if(user->team)\n            DBG(L_BLUE" %s :"NONE L_RED"%s\\n"NONE, user->name, msg.msg);\n        else\n            DBG(L_RED" %s :"NONE L_RED"%s\\n"NONE, user->name, msg.msg);\n        strcpy(msg.name, user->name);\n        msg.team = user->team;\n        Show_Message(, user, msg.msg, );\n        send(user->fd, (void *)&msg, sizeof(msg), 0);//\u628a\u4fe1\u606f\u56de\u8fc7\u53bb\n    } else if(msg.type & FT_FIN) {\n        show_data_stream(\'e\');\n        DBG(RED"%s logout.\\n", user->name);\n        sprintf(tmp, "%s logout.", user->name);\n        Show_Message(, NULL, tmp, 1);\n        user->online = 0;\n        int epollfd_tmp = (user->team ? bepollfd : repollfd);\n        del_event(epollfd_tmp, user->fd);\n    } else if(msg.type & FT_CTL) {\n        show_data_stream(\'n\');\n        Show_Message(, user, "Ctl Message", 0);\n        if(msg.ctl.dirx || msg.ctl.diry) {\n            user->loc.x += msg.ctl.dirx;\n            user->loc.y += msg.ctl.diry;\n            if(user->loc.x <= 1) user->loc.x = 1;\n            if(user->loc.x >= court.width - 1) user->loc.x = court.width - 1;\n            if(user->loc.y <= 1) user->loc.y = 1;\n            if(user->loc.y >= court.height -1) user->loc.y = court.height - 1;\n        }\n        if(msg.ctl.action & ACTION_KICK) {\n            show_data_stream(\'k\');\n            ball_status.carry = 0;\n            if(can_kick(&user->loc, msg.ctl.strength)) {\n                ball_status.who = user->team;\n                strcpy(ball_status.name, user->name);\n            }\n        }\n        if(msg.ctl.action & ACTION_STOP) {\n            show_data_stream(\'j\') ;\n            ball_status.carry = 0;\n            if(ball_stop(&user->loc)) {\n            ball_status.who = user->team;\n            strcpy(ball_status.name, user->name);\n            }\n        }\n        if(msg.ctl.action & ACTION_CARRY) {\n            show_data_stream(\'l\');\n            ball_status.carry = 1;\n            user->carry = 1;\n            ball_status.who = user->team;\n            strcpy(ball_status.name, user->name);\n        }\n    }\n}\n\n//\u521d\u59cb\u5316\nvoid task_queue_init(struct task_queue *taskQueue, int sum, int epollfd){\n    taskQueue->sum = sum;\n    taskQueue->epollfd = epollfd;\n    taskQueue->team = calloc(sum, sizeof(void *));//\u7533\u8bf7\u5185\u5b58sum\u4e2a\n    taskQueue->head = taskQueue->tail = 0;\n    pthread_mutex_init(&taskQueue->mutex, NULL);//\u4e92\u65a5\u9501\u521d\u59cb\u5316\n    pthread_cond_init(&taskQueue->cond, NULL);//\u6761\u4ef6\u53d8\u91cf\u521d\u59cb\u5316\n    return;\n}\n\n//push\n//\u628a\u7528\u6237user\u653e\u5230\u961f\u5217\u4e2d\nvoid task_queue_push(struct task_queue *taskQueue, struct User *user) {\n    pthread_mutex_lock(&taskQueue->mutex);//\u5148\u52a0\u9501\n    taskQueue->team[taskQueue->tail] = user;\n    DBG(L_GREEN"Thread poll :"NONE" Task Push %s\\n", user->name);//\u8c01\u5165\u961f\n    if(++taskQueue->tail == taskQueue->sum) {//\u6ee1\u4e86\n        DBG(L_GREEN"Thread poll : "NONE"Task Queue End.\\n");\n        taskQueue->tail = 0;\n    }\n    pthread_cond_signal(&taskQueue->cond);//\u89e3\u9501\u524d\u53d1\u4e2a\u4fe1\u53f7\n    pthread_mutex_unlock(&taskQueue->mutex);//\u89e3\u9501\n    return;\n}\n\n//Pop\nstruct User *task_queue_pop(struct task_queue *taskQueue) {\n    pthread_mutex_lock(&taskQueue->mutex);//\u5148\u52a0\u9501\n    while(taskQueue->tail == taskQueue->head) {//\u662f\u5426\u4e3a\u7a7a\n        DBG(L_GREEN"Thread poll : "NONE\n            "Task Queue Empty, Waiting For Task.\\n");\n        pthread_cond_wait(&taskQueue->cond, &taskQueue->mutex);//\u7b49\u4fe1\u53f7\n    }\n    struct User *user = taskQueue->team[taskQueue->head];//\u62ff\u51fa\u5934\n\n    DBG(L_GREEN"Thread poll : "NONE"Task Pop %s.\\n", user->name);\n\n    if(++taskQueue->head == taskQueue->sum) {//++\u5220\u6389\u5934//\u4e3a\u7a7a\u7684\u65f6\u5019\n        DBG(L_GREEN"Thread poll : "NONE"Task Queue End.\\n");\n        taskQueue->head = 0;\n    }\n    pthread_mutex_unlock(&taskQueue->mutex);//\u5173\u95ed\u9501\n    return user;\n}\n\n//\u5206\u79bb\u7ebf\u7a0b\n//\u6b7b\u5faa\u73af\u5f39\u51fa\u961f\u5217\u5143\n///\u8c03\u7528do_echo\u5904\u7406I0\uff0c\u4f20\u5165\u53c2\u6570\u4e3a\u961f\u5217\u5f39\u51fa\u7684\nvoid *thread_run(void *arg) {\n    pthread_t tid = pthread_self();\n    pthread_detach(tid);\n    struct task_queue *taskQueue = (struct task_queue *)arg;\n    while(1) {\n        struct User *user = task_queue_pop(taskQueue);//\u53bb\u9664user\n        do_echo(user);//\u64cd\u4f5c\n    }\n    return NULL;\n}\n')),(0,l.kt)("h4",{id:"heart_beat"},(0,l.kt)("inlineCode",{parentName:"h4"},"heart_beat")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u670d\u52a1\u7aef\u901a\u8fc7\u2f3c\u8df3\u673a\u5236\u5224\u65ad\u5ba2\u6237\u7aef\u662f\u5426\u5728\u7ebf\uff0c\u5355\u72ec\u7ebf\u7a0b\u6267\u2f8f")),(0,l.kt)("p",null,"\u2f42\u4ef6\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"heart_beat.c"),"\u3001 ",(0,l.kt)("inlineCode",{parentName:"p"},"heart_beat.h")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#define MAX 50\nextern struct User *rteam, *bteam;\nextern int bepollfd, repollfd;\n\n//\u904d\u5386team\u6570\u7ec4\uff0c\u5224\u5728\u7ebf\uff0c\u5219\u53d1\u9001FT_TEST\u5fc3\u8df3\u5305\uff0cflag--\n//\u5224\u65adpalyer\u7684f1ag\u662f\u5426\u4e3a\u51cf\u4e3a0\uff0c\u4e3a0\u5219\u5224\u65ad\u4e3a\u4e0b\u7ebf\n//\u6570\u7ec4\u4e2d\u6807\u8bb0\u4e3aonline = 0\n//\u5728\u4ece\u53cd\u5e94\u5806\u4e2d\u6ce8\u9500IO\n\nvoid heart_beat_team(struct User *team) {\n    struct FootBallMsg msg;\n    msg.type = FT_TEST;\n    for(int i = 0; i < MAX; i++) {\n        if(team[i].online) {\n            if(!team[i].flag) {\n                team[i].online = 0;\n                continue;\n            }\n            send(team[i].fd, (void *)&msg, sizeof(msg), 0);\n            team[i].flag --;\n            if(team[i].flag <= 0) {\n                char tmp[512] = {0};\n                sprintf(tmp, "%s is remove from list.", team[i].name);\n                Show_Message(, NULL, tmp, 1);\n                team[i].online = 0;\n                int epollfd_tmp = (team[i].team ? bepollfd : repollfd);\n                del_event(epollfd_tmp, team[i].fd);\n            }\n        }\n    }\n    return;\n}\n\n//\u6b7b\u5faa\u73af\uff0c\u56fa\u5b9a\u65f6\u95f4\u8c03\u7528\nvoid *heart_beat(void *arg) {\n    while(1) {\n        sleep(10);\n        heart_beat_team(bteam);\n        heart_beat_team(rteam);\n    }\n    return NULL;\n}\n')),(0,l.kt)("h4",{id:"can_kick"},(0,l.kt)("inlineCode",{parentName:"h4"},"can_kick")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u5224\u65adplayer\u662f\u5426\u53ef\u4ee5\u8e22\u7403\uff0c\u82e5\u6210\u529f\uff0c\u5219\u66f4\u65b0\u7403\u7684\u8fd0\u2f8f\u2f45\u5411\uff0c\u52a0\u901f\u5ea6\uff0c \u901f\u5ea6")),(0,l.kt)("p",null,"\u2f42\u4ef6\uff1a ",(0,l.kt)("inlineCode",{parentName:"p"},"ball_status.c"),"\u3001 ",(0,l.kt)("inlineCode",{parentName:"p"},"ball_status.h")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'extern WINDOW *Message;\nextern struct Bpoint ball;\nextern struct BallStatus ball_status;\n//palyer\u548cball\u5750\u6807\u5bf9\u6b64\n//\u5224\u65adpalyer\u548cball\u7684\u5750\u6807\u5728\u4e0a\u4e0b\u5de6\u53f32\u4e2a\u5355\u4f4d\u8ddd\u79bb\u5185\uff0c\u5219\u53ef\u8ddf\u7403\n//\u6a71\u636eplayer\u548cball\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff0c\u8ba1\u7b97\u7403\u7684\u8fd0\u52a8\u65b9\u5411\uff0c\u52a0\u901f\u5ea6\u65b9\u5411\uff0c\u5047\u8bbe\u7403\u53ea\u80fd\u5728palyer\u548cball\u7684\u5ef6\u957f\u7ebf\u4e0a\u8fd0\u52a8\n//\u5047\u8bbeplayer\u8ddf\u7403\u7684\u63a5\u89e6\u65f6\u95f4\u4e3a.2\u79d2\uff0c\u9ed8\u8ba4\u52a0\u901f\u5ea6\u4e3a40\uff0c\u529b\u5ea6\u589e\u52a0\uff0c\u52a0\u901f\u5ea6\u4e5f\u589e\u52a0\n//\u53ef\u8e22\u7403\u8fd4\u56de1\uff0c\u5426\u5219\u8fd4\u56de\nint can_kick(struct Point *loc, int strength) {\n    int px = loc->x, py = loc->y; //\u5c06\u4eba\u548c\u7403\u7684\u5750\u6807\u5bf9\u5176\n    if (abs(px - (int)ball.x) <= 2 && abs(py - (int)ball.y <= 2)) {\n        if (px == (int)ball.x && py == (int)ball.y) return 0;\n        double dx = (ball.x - px) / pow(pow((ball.x - px), 2) + pow((ball.y - py), 2), 0.5);\n        double dy = (ball.y - py) / pow(pow((ball.x - px), 2) + pow((ball.y - py), 2), 0.5);\n        ball_status.a.x = -3 * dx; //a of air resistans\n        ball_status.a.y = -3 * dy;\n        ball_status.v.x = strength * 8 * dx;\n        ball_status.v.y = strength * 8 * dy;\n        char tmp[512] = {0};\n        sprintf(tmp, "a(%lf, %lf) v(%lf, %lf)", ball_status.a.x, ball_status.a.y, ball_status.v.x, ball_status.v.y);\n        Show_Message(Message, NULL, tmp, 1);\n        return 1;\n    }\n    return 0;\n}\n\n')),(0,l.kt)("h4",{id:"ball_stop"},(0,l.kt)("inlineCode",{parentName:"h4"},"ball_stop")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u8ba9\u7403\u505c\u6b62")),(0,l.kt)("p",null,"\u2f42\u4ef6\uff1a ",(0,l.kt)("inlineCode",{parentName:"p"},"ball_stop.c"),"\u3001 ",(0,l.kt)("inlineCode",{parentName:"p"},"ball_stop.h")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"extern WINDOW *Message;\nextern struct Bpoint ball;\nextern struct BallStatus ball_status;\n\nint ball_stop(struct Point *loc) {\n    int px = loc->x;\n    int py = loc->y;\n    if (abs(px - (int)ball.x) <= 2 && abs(py - (int)ball.y) <= 2) {\n        ball_status.a.x = 0;\n        ball_status.a.y = 0;\n        ball_status.v.x = 0;\n        ball_status.v.y = 0;\n        return 1;\n    }\n    return 0;\n}\n")),(0,l.kt)("h4",{id:"gameui"},(0,l.kt)("inlineCode",{parentName:"h4"},"gameui")),(0,l.kt)("h5",{id:"gameh"},(0,l.kt)("inlineCode",{parentName:"h5"},"game.h")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#define DEFARG(name, default_value) ((#name[0]) ? (name + 0) : default_value)\n#define Show_Message(arg0, arg1, arg2, arg3) show_message(DEFARG(arg0, Message),DEFARG(arg1, NULL), arg2, DEFARG(arg3, 0))\n\n#define MAX 50\n\nstruct Map court;/*\u7403\u573a*/\n\n\nWINDOW *Football, *Message, *Help, *Score, *Write, *Football_t;\nWINDOW *create_newwin(int width, int height, int startx, int starty);/*\u521b\u5efa\u4e00\u4e2a\u7a97\u53e3*/\n\nvoid destroy_win(WINDOW *win);//\u9500\u6bc1\u4e00\u4e2a\u7a97\u53e3\nvoid gotoxy(int x, int y);//\u79fb\u52a8\u6253\u5370\u5149\u6807\nvoid gotoxy_putc(int x, int y, char c);//\u6253\u5370\u5b57\u7b26\nvoid gotoxy_puts(int x, int y, char *s);//\u6253\u5370\u5b57\u7b26\u4e32\nvoid w_gotoxy_putc(WINDOW *win, int x, int y, char c);//\u5728\u7a97\u53e3\u4e0a\u6253\u5370\u5b57\u7b26\nvoid w_gotoxy_puts(WINDOW *win, int x, int y, char *s);//\u5728\u7a97\u53e3\u4e0a\u6253\u5370\u5b57\u7b26\u4e32\nvoid initfootball();//\u521d\u59cb\u5316\u6574\u4e2a\u8db3\u7403\u573a\nvoid init_help();//\u521d\u59cb\u5316\u5e2e\u52a9\u4fe1\u606f\nvoid *draw(void *arg);//\u7ed8\u5236\u56fe\n\nvoid show_message(WINDOW *win, struct User *user, char *msg, int type);//\u5c55\u793a\u6d88\u606f\n")),(0,l.kt)("h5",{id:"gamec"},(0,l.kt)("inlineCode",{parentName:"h5"},"game.c")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'extern struct Map court;\nextern WINDOW *Football, *Message, *Help, *Score, *Write, *Football_t;\nint message_num = 0;\nWINDOW *create_newwin(int width, int height, int startx, int starty) {\n    //Create WINDOW\n    WINDOW *win;\n    win = newwin(height, width, starty, startx);\n    box(win, 0, 0);/*0 0\u662f\u5b57\u7b26\u9ed8\u8ba4\u884c\u5217\u8d77\u59cb\u4f4d\u7f6e*/\n    wrefresh(win);/*\u5237\u65b0\u7a97\u53e3\u7f13\u51b2\uff0c\u663e\u793abox*/\n    return win;//\u521b\u5efa\u4e86\u4e00\u4e2a\u7a97\u53e3\u5bf9\u8c61\n}\n\nvoid destroy_win(WINDOW *win) {//\u9500\u6bc1\u7a97\u53e3\n    //Destroy WINDOW\n\n    //delete line\n    wborder(win, \' \', \' \', \' \', \' \', \' \', \' \', \' \', \' \');//\u5220\u6389\u7ebf\n    wrefresh(win);\n    delwin(win);\n}\n\n\nvoid gotoxy(int x, int y) {\n    move(y , x);\n}\n\nvoid gotoxy_putc(int x, int y,char c) {\n    move(y, x);\n    addch(x);\n    move(LINES - 1, 1);\n    refresh();\n}\nvoid gotoxy_puts(int x, int y,char *c) {\n    move(y, x);\n    addstr(c);\n    move(LINES - 1, 1);\n    refresh();\n}\n\nvoid w_gotoxy_putc(WINDOW *win, int x, int y, char c) {\n    mvwaddch(win, y, x, c);\n    move(LINES - 1, 1);\n    wrefresh(win);\n}\n\nvoid w_gotoxy_puts(WINDOW *win, int x, int y, char *s) {\n    mvwprintw(win, y, x, s);\n    move(LINES - 1, 1);\n    wrefresh(win);\n}\n\nvoid initfootball() {//\u521d\u59cb\u5316\u8db3\u7403\u573a\n    initscr();\n    clear();\n    if(!has_colors() || start_color() == ERR) {\n        endwin();\n        fprintf(stderr, "\u7ec8\u7aef\u4e0d\u652f\u6301\u989c\u8272\uff01\\n");\n    }\n    init_pair(1, COLOR_GREEN, COLOR_BLACK);\n    init_pair(2, COLOR_RED, COLOR_BLACK);\n    init_pair(3, COLOR_WHITE, COLOR_BLACK);    \n    init_pair(4, COLOR_YELLOW, COLOR_BLACK);\n    init_pair(5, COLOR_CYAN, COLOR_BLACK);    \n    init_pair(6, COLOR_BLUE, COLOR_BLACK);\n    init_pair(7, COLOR_BLUE, COLOR_GREEN);\n    init_pair(8, COLOR_BLUE, COLOR_RED);\n    init_pair(9, COLOR_BLUE, COLOR_WHITE);\n    init_pair(10, COLOR_BLUE, COLOR_YELLOW);\n    init_pair(11, COLOR_BLUE, COLOR_CYAN);\n    init_pair(12, COLOR_BLUE, COLOR_BLUE);\n\n    Football_t=create_newwin(court.width + 4, court.height + 2, court.start.x - 2, court.start.y - 1);\n    Football = subwin(Football_t, court.height, court.width, court.start.y, court.start.x);\n    box(Football, 0, 0);\n    WINDOW *Message_t=create_newwin(court.width + 4, 7, court.start.x - 2, court.start.y + 1 + court.height);\n    Message = subwin(Message_t, 5, court.width + 2, court.start.y + court.height + 2, court.start.x - 1);\n    scrollok(Message, 1);\n    Help=create_newwin(20, court.height + 2, court.start.x + court.width + 2, court.start.y - 1);\n    Score=create_newwin(20,  7, court.start.x + court.width + 2, court.start.y + 2 + court.height - 1);\n    Write=create_newwin(court.width + 24, 5, court.start.x - 2, court.start.y + 1 + court.height + 7);\n}\nvoid init_help() {\n    w_gotoxy_puts(Help, 1, 1, "[wasd]:\\n| control direction");\n    w_gotoxy_puts(Help, 1, 4, "[ j ]:\\n| stop ball");\n    w_gotoxy_puts(Help, 1, 7, "[ k ]:\\n| kick ball");\n    w_gotoxy_puts(Help, 1, 10, "[ l ]:\\n| carry ball");\n    w_gotoxy_puts(Help, 1, 13, "[space]:\\n| choose strength");\n    w_gotoxy_puts(Help, 1, 16,"[enter]:\\n| send msg");\n}\n\n\nvoid *draw(void *arg) {\n    initfootball();\n    init_help();\n    while(1) {\n        sleep(10);\n    }\n}\n\n\n/*\u5728\u54ea\u4e2a\u7a97\u53e3\u663e\u793a\u4fe1\u606f*/\n/*user\u8c01*/\n/*msg\u4fe1\u606f*/\nvoid show_message(WINDOW *win, struct User *user, char *msg, int type) {\n    //\u65f6\u95f4\n    time_t time_now = time(NULL);\n    struct tm* tm= localtime(&time_now);\n    char timestr[20] = {0};\n    char username[80] = {0};\n    sprintf(timestr, "%02d:%02d:%02d ", tm->tm_hour, tm->tm_min, tm->tm_sec);\n    \n    if (type) {\n        //\u7cfb\u7edf\u4fe1\u606f\n        wattron(win, COLOR_PAIR(4));\n        strcpy(username, "Server Info : ");\n    } else {\n        if(user->team) \n            wattron(win, COLOR_PAIR(6));\n        else \n            wattron(win, COLOR_PAIR(2));\n        sprintf(username, "%s : ", user->name);\n    }\n    //\u6253\u5370\u4fe1\u606f\n    if(message_num < 4) {\n        w_gotoxy_puts(win, 10, message_num, username);\n        wattron(win, COLOR_PAIR(3));\n        w_gotoxy_puts(win, 10 + strlen(username), message_num, msg);\n        wattron(win, COLOR_PAIR(5));\n        w_gotoxy_puts(win, 1, message_num, timestr);\n        message_num++;\n    } else {\n        message_num = 4;\n        scroll(win);//\u6eda\u52a8\n        w_gotoxy_puts(win, 10, message_num, username);\n        wattron(win, COLOR_PAIR(3));\n        w_gotoxy_puts(win, 10 + strlen(username), message_num, msg);\n        wattron(win, COLOR_PAIR(5));\n        w_gotoxy_puts(win, 1, message_num, timestr);\n        message_num++;\n    }\n\n    wrefresh(win);\n}\n\n')),(0,l.kt)("h4",{id:"server_re_drew"},(0,l.kt)("inlineCode",{parentName:"h4"},"server_re_drew")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u670d\u52a1\u7aef\u6e38\u620f\u5237\u65b0\uff0c\u5b9a\u65f6\u6267\u884c\uff0c\u6bcf\u6b21\u6267\u2f8f\u65f6\uff0c\u5224\u65ad\u7403\u7684\u72b6\u6001\uff0c\u6cbf\u7740\u4ec0\u4e48\u2f45\u5411\u79fb\u52a8\u591a\u8fdc\u52a8\uff0c\u4eba\u5e94\u8be5\u79fb\u52a8\u5230\u4ec0\u4e48\u4f4d\u7f6e")),(0,l.kt)("p",null,"\u2f42\u4ef6\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"server_re_drew.c "),"\u3001",(0,l.kt)("inlineCode",{parentName:"p"},"server_re_drew.h")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void re_drew_player(int team, char *name, struct Point *loc);\nvoid re_drew_team(struct User *team);\nvoid re_draw_ball();\nvoid init_score();\nvoid re_drew();\n#define MAX 50\nextern struct User *rteam, *bteam;\nextern WINDOW *Football;\n\nextern struct Bpoint ball;\nextern struct BallStatus ball_status;\nextern struct Score score;\n\nvoid re_drew_player(int team, char *name, struct Point *loc) {\n    char p = 'K';\n    if(team) {\n        wattron(Football, COLOR_PAIR(6));\n    } else {\n        wattron(Football, COLOR_PAIR(2));\n    }\n    w_gotoxy_putc(Football, loc->x, loc->y, p);\n    w_gotoxy_puts(Football, loc->x + 1, loc->y - 1, name);\n}\n\nvoid re_drew_team(struct User *team) {\n    for(int i = 0; i < MAX; i++) {\n        if(!team[i].online)continue;\n        re_drew_player(team[i].team, team[i].name, &team[i].loc);\n    }\n}\n\nvoid re_draw_ball() {\n    int px, py;\n    if(ball_status.carry == 0) {\n    double t = 0.1;\n    if((int)ball_status.v.x != 0 ||(int)ball_status.v.y != 0 ) {\n        ball.x += ball_status.v.x * t + ball_status.a.x * 0.5 * 0.01;\n        ball.y += ball_status.v.y * t + ball_status.a.y * 0.5 * 0.01;\n        ball_status.v.x += ball_status.a.x * t;\n        ball_status.v.y += ball_status.a.y * t;\n    }\n    if (ball_status.v.x || ball_status.v.y) {\n        char tmp[512] = {0};\n        sprintf(tmp, \"a(%lf, %lf) v(%lf, %lf)\", ball_status.a.x, ball_status.a.y, ball_status.v.x, ball_status.v.y);\n        Show_Message( , NULL, tmp, 1);\n    }\n    if (ball.x <= 0 || ball.x >= 114 || ball.y <= 0 || ball.y >= 24) {\n        if((int)ball.y >= court.height / 2 - 4 && (int)ball.y <= court.height / 2 + 4 && ball.x <= 1) {\n            score.blue ++;\n        }\n        if((int)ball.y >= court.height / 2 - 4 && (int)ball.y <= court.height / 2 + 4 && ball.x >= 114) {\n            score.red ++;\n        }\n        ball.x = court.width / 2;\n        ball.y = court.height / 2;\n        ball_status.v.x = ball_status.v.y = 0;\n        ball_status.a.x = ball_status.a.y = 0;\n    }\n    } else if(ball_status.carry == 1) {\n        int dir[8][2] = {1, 0, -1, 0,\n                        1, 1, 1, -1,\n                        0, 1, 0, -1,\n                        -1, 1, -1, -1};\n        for(int i = 0; i < MAX; i++) {\n            if(rteam[i].carry == 1) {\n                px = rteam[i].loc.x;\n                py = rteam[i].loc.y;\n            }\n            if(bteam[i].carry == 1) {\n                px = bteam[i].loc.x;\n                py = bteam[i].loc.y;\n            }\n        }\n        if (abs(px - (int)ball.x) <= 3 && abs(py - (int)ball.y <= 3)) {\n            ball_status.v.x = ball_status.v.y = 0;\n            ball_status.a.x = ball_status.a.y = 0;\n            ball.x = px + dir[rand() % 8][rand() % 2];\n            ball.y = py + dir[rand() % 8][rand() % 2];\n        }\n    }\n    w_gotoxy_putc(Football, (int)ball.x, (int)ball.y, 'O');\n}\n\nvoid ball_door(){\n    for(int i = court.height / 2 - 4; i <= court.height / 2 + 4; i++){\n        w_gotoxy_putc(Football_t, 1, i, 'x');\n        w_gotoxy_putc(Football_t, 117, i, 'x');\n    }\n}\n\nvoid init_score() {\n    w_gotoxy_puts(Score, 1, 1, \"red blue\\n\");\n    char tmp[50];\n    sprintf(tmp, \"%d:%d\", score.red, score.blue);\n    w_gotoxy_puts(Score, 1, 2, tmp);\n}\n\n\nvoid re_drew() {\n    werase(Football);\n    box(Football_t, 0, 0);\n    box(Football, 0, 0);\n    re_drew_team(rteam);\n    re_drew_team(bteam);\n    ball_door();\n    init_score();\n    re_draw_ball();\n    server_send();//\u6bcf\u6b21\u7ed8\u5236\u4e00\u4e0b\u56fe\uff0c\u5c31\u53d1\u9001json\u6253\u5305\u53d1\u9001\u5ba2\u6237\u7aef\n    wrefresh(Football);\n    wrefresh(Football_t);\n}\n")),(0,l.kt)("h4",{id:"clientt_re_drew"},(0,l.kt)("inlineCode",{parentName:"h4"},"clientt_re_drew")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u5ba2\u6237\u7aef\u6e38\u620f\u5237\u65b0\uff0c\u5b9a\u65f6\u6267\u884c\uff0c\u6bcf\u6b21\u6267\u2f8f\u65f6\uff0c\u5224\u65ad\u7403\u7684\u72b6\u6001\uff0c\u6cbf\u7740\u4ec0\u4e48\u2f45\u5411\u79fb\u52a8\u591a\u8fdc\u52a8\uff0c\u4eba\u5e94\u8be5\u79fb\u52a8\u5230\u4ec0\u4e48\u4f4d\u7f6e")),(0,l.kt)("p",null,"\u2f42\u4ef6\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"client_re_drew.c "),"\u3001",(0,l.kt)("inlineCode",{parentName:"p"},"client_re_drew.h")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'void re_drew_player(cJSON *users);\nvoid re_drew_ball(cJSON *c_ball);\nvoid re_drew_score(cJSON *c_score);\nvoid ball_door();\nvoid re_drew(cJSON *root);\n#define MAX 50\nextern WINDOW *Football, *Football_t, *Score;\nextern struct Bpoint ball;\nextern struct Score score;\n\nvoid re_drew_player(cJSON *users) {\n    int user_cnt = cJSON_GetArraySize(users);\n    for (int i = 0; i < user_cnt; i++) {\n        cJSON *user = cJSON_GetArrayItem(users, i);\n        int team = cJSON_GetObjectItem(user, "team")->valueint;\n        int locx = cJSON_GetObjectItem(user, "locx")->valueint;\n        int locy = cJSON_GetObjectItem(user, "locy")->valueint;\n        char p = \'K\';\n        if(team) {\n            wattron(Football, COLOR_PAIR(6));\n        } else {\n            wattron(Football, COLOR_PAIR(2));\n        }\n        w_gotoxy_putc(Football, locx, locy, p);\n        w_gotoxy_puts(Football, locx + 1, locy - 1, cJSON_GetObjectItem(user, "name")->valuestring);\n    }\n}\n\nvoid re_drew_ball(cJSON *c_ball) {\n    int ballx = cJSON_GetObjectItem(c_ball, "x")->valueint;\n    int bally = cJSON_GetObjectItem(c_ball, "y")->valueint;\n    w_gotoxy_putc(Football, ballx, bally, \'o\');\n}\n\nvoid re_drew_score(cJSON *c_score) {\n\n    score.blue = cJSON_GetObjectItem(c_score, "bscore")->valueint;\n    score.red = cJSON_GetObjectItem(c_score, "rscore")->valueint;\n    \n    w_gotoxy_puts(Score, 1, 1, "red blue\\n");\n    char tmp[50];\n    sprintf(tmp, "%d:%d", score.red, score.blue);\n    w_gotoxy_puts(Score, 1, 2, tmp);\n}\n\nvoid ball_door(){\n    for(int i = court.height / 2 - 4; i <= court.height / 2 + 4; i++){\n        w_gotoxy_putc(Football_t, 1, i, \'x\');\n        w_gotoxy_putc(Football_t, 117, i, \'x\');\n    }\n}\n\nvoid re_drew(cJSON *root) {\n    cJSON *users = cJSON_GetObjectItem(root, "users");\n    cJSON *c_ball = cJSON_GetObjectItem(root, "ball");\n    cJSON *c_score = cJSON_GetObjectItem(root, "score");\n\n    werase(Football);\n    box(Football_t, 0, 0);\n    box(Football, 0, 0);\n    re_drew_player(users);\n    re_drew_ball(c_ball);\n    re_drew_score(c_score);\n    ball_door();\n    wrefresh(Football);\n    wrefresh(Football_t);\n}\n')),(0,l.kt)("h2",{id:"\u5ba2\u6237\u7aef\u63a5\u53e3"},"\u5ba2\u6237\u7aef\u63a5\u53e3"),(0,l.kt)("h4",{id:"client_recv"},(0,l.kt)("inlineCode",{parentName:"h4"},"client_recv")),(0,l.kt)("p",null,"\u63a5\u6536\u6765\u5219\u670d\u52a1\u7aef\u7684\u4fe1\u606f\uff0c\u5e76\u8fdb\u884c\u5904\u7406"),(0,l.kt)("p",null,"\u2f42\u4ef6\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"client_recv.h"),"\u3001",(0,l.kt)("inlineCode",{parentName:"p"},"client_recv.c")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'void *client_recv(void *arg) {\n    while(1) {\n        struct FootBallMsg msg;\n        bzero(&msg, sizeof(msg));\n        recv(sockfd, (void *)&msg, sizeof(msg), 0);\n        if(msg.type & FT_TEST) {\n            DBG(RED"HeartBeat from Server \u5fc3\\n"NONE);\n            msg.type = FT_ACK;\n            send(sockfd, (void *)&msg, sizeof(msg), 0);\n        } else if(msg.type & (FT_MSG | FT_WALL)) {\n            DBG(GREEN"Server Msg : "NONE"%s\\n", msg.msg);\n        } else if(msg.type & FT_FIN){\n            DBG(GREEN"Server is going to stop.\\n"NONE);\n            endwin();\n            exit(0);\n        } else if (msg.type & FT_GAME) {//\u670d\u52a1\u7aef\u5411\u5ba2\u6237\u7aef\u5e7f\u64ad\u7684json\u5b9e\u65f6\u5730\u56fe\n            DBG(YELLOW"JSON:"NONE"%s", msg.msg);\n            cJSON *root = cJSON_Parse(msg.msg);\n            re_drew(root);\n        } else {\n            DBG(GREEN"Msg Unsupport\\n"NONE);\n            exit(0);\n        }\n        \n    }\n}\n/*\n{\n    "name": "test",\n    "ball": {\n        "x":    57,\n        "y":    12\n    },\n    "score":    {\n        "bscore":   0,\n        "rscore":   0\n    },\n    "users":    [{\n            "team": 0,\n            "name": "ZFB",\n            "locx": 2,\n            "locy": 12\n        }]\n}\n*/\n\n')),(0,l.kt)("h4",{id:"show_strength"},(0,l.kt)("inlineCode",{parentName:"h4"},"show_strength")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u663e\u793a\u8e22\u7403\u65f6\u7684\u2f12\u5ea6\uff0c\u5e76\u901a\u8fc7\u63a7\u5236\u6309\u952e\u65f6\u673a\u8fbe\u5230\u63a7\u5236\u8e22\u7403\u2f12\u5ea6\u7684\u6548\u679c")),(0,l.kt)("p",null,"\u2f42\u4ef6:",(0,l.kt)("inlineCode",{parentName:"p"},"show_strength.c"),"\u3001",(0,l.kt)("inlineCode",{parentName:"p"},"show_strength.h")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'extern WINDOW *Write;\nextern int sockfd;\n\n//\u5728Write\u7a97\u53e3\u4e2d\uff0c\u663e\u793a\u8e22\u7403\u529b\u5ea6\u6761\uff0c\u5149\u6807\u5728\u8fdb\u5ea6\u6761\u4e0a\u5feb\u901f\u79fb\u52a8\n//\u8bbe\u7f6e\u4e3a0\u975e\u963b\u585eIO\n//whille \u7b49\u5f85`\u7a7a\u683c`\u6216\u8005`K`\u952e\u7684\u6309\u4e0b\uff0c\u5982\u679c\u6309\u4e0b\u9000\u51fa\uff0c\u53d6\u5f97\u5f53\u524d\u7684strength\u3002\n//\u901a\u8fc7sockfd\u5411\u670d\u52a1\u7aef\u53d1\u9001\u63a7\u5236\u4fe1\u606f\uff0c\u8ddf\u7403\n\n#include "head.h"\nextern WINDOW *Write;\nextern int sockfd;\n\nvoid show_strength() {\n    int mousex = 2, offset = 1;\n    int maxx, maxy, strength;\n    getmaxyx(Write, maxy, maxx);\n    for(int i = 2; i < maxx - 2; i++) {\n        if(i < maxx / 5 || i > maxx - maxx / 5) {\n            wattron(Write, COLOR_PAIR(9));\n        } else if(i < (maxx / 5) * 2 || i > (maxx / 5) * 3) {\n            wattron(Write, COLOR_PAIR(12));\n        } else {\n            wattron(Write, COLOR_PAIR(8));\n        }\n        mvwprintw(Write, 2, i, " ");\n    }\n    wattron(Write, COLOR_PAIR(3));\n    make_nonblock(0);\n    while(1) {\n        char c = getchar();\n        if(c != -1) {\n            if(c == \' \' || c == \'k\') {\n                make_block(0);\n                break;\n            }\n        }\n        usleep(20000);\n        if(mousex >= maxx - 2) {\n            offset = -1;\n        } else if(mousex <= 2) {\n            offset = 1;\n        }\n        mvwprintw(Write, 3, mousex, " ");\n        mvwprintw(Write, 1, mousex, " ");\n        mousex += offset;\n        mvwprintw(Write, 3, mousex, "|");\n        mvwprintw(Write, 1, mousex, "|");\n        mvwprintw(Write, 4, maxx, " ");\n        wrefresh(Write);\n    }\n    int arr[5] = {1, 2, 3, 2, 1};\n    struct FootBallMsg msg;\n    bzero(&msg, sizeof(msg));\n    msg.type = FT_CTL;\n    msg.ctl.action = ACTION_KICK;\n    msg.ctl.strength = arr[mousex / (maxx / 5)];\n    send(sockfd, &msg, sizeof(msg), 0);\n    return;\n}\n')),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image.5SC3A1",src:t(65721).Z})),(0,l.kt)("h4",{id:"send_chat"},(0,l.kt)("inlineCode",{parentName:"h4"},"send_chat")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u2f64\u6237\u8f93\u2f0a\u804a\u5929\u4fe1\u606f\uff0c\u5e76\u53d1\u9001\u7ed9\u670d\u52a1\u7aef")),(0,l.kt)("p",null,"\u2f42\u4ef6\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"send_chat.c")," \u3001",(0,l.kt)("inlineCode",{parentName:"p"},"send_chat.h")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'extern int sockfd;\nextern WINDOW *Write;\nextern struct FootBallMsg chat_msg;\n//\u6253\u5f00echo\u56de\u663e\n//\u6253\u5f00\u884c\u7f13\u51b2\n//\u5728Wr1te\u7a97\u53e3\u4e2d\u8f93\u5165\u6570\u636e\u5e76\u8bfb\u5165\n//\u5224\u65ad\u8bfb\u5165\u4fe1\u606f\u975e\u7a7a\uff0c\u53d1\u9001\n//\u91cd\u7ed8Writ\n//\u5173\u95edecho\n//\u5173\u95ed\u884c\u7f13\u51b2\nvoid send_chat() {\n    echo();\n    nocbreak();\n    bzero(&chat_msg.msg, sizeof(chat_msg.msg));\n    w_gotoxy_puts(Write, 1, 1, "Input Message:");\n    mvwscanw(Write, 2, 1, "%[^\\n]s", chat_msg.msg);\n    if (strlen(chat_msg.msg)) {\n        send(sockfd, (void *)&chat_msg, sizeof(chat_msg), 0);\n    }\n    werase(Write);\n    box(Write, 0, 0);\n    wrefresh(Write);\n    noecho();\n    cbreak();\n    return;\n}\n')),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"image.SW30A1",src:t(1736).Z})),(0,l.kt)("h4",{id:"send_ctl"},(0,l.kt)("inlineCode",{parentName:"h4"},"send_ctl")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u5ba2\u6237\u7aef\u53d1\u9001\u63a7\u5236\u4fe1\u606f\u5230\u670d\u52a1\u7aef")),(0,l.kt)("p",null,"\u2f42\u4ef6\uff1a",(0,l.kt)("inlineCode",{parentName:"p"},"send_ctl.c")," \u3001 ",(0,l.kt)("inlineCode",{parentName:"p"},"send_ctl.h")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"extern int sockfd;\nextern struct FootBallMsg ctl_msg;\n\nvoid send_ctl() {\n    if (ctl_msg.ctl.dirx || ctl_msg.ctl.diry) {\n        send(sockfd, (void *)&ctl_msg, sizeof(ctl_msg), 0 );\n    }\n    ctl_msg.ctl.dirx = ctl_msg.ctl.diry = 0;\n}\n")),(0,l.kt)("h2",{id:"\u4e3b\u7a0b\u5e8f"},"\u4e3b\u7a0b\u5e8f"),(0,l.kt)("h3",{id:"client"},"client"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "../common/head.h"\n#include "../common/udp_client.h"\n#include "../common/client_recver.h"\n#include "../common/game.h"\n#include "../common/send_chat.h"\n#include "../common/send_ctl.h"\nchar server_ip[20] = {0};\nint server_port = 0;\nchar *conf = "./football.conf";\nstruct FootBallMsg chat_msg;\nstruct FootBallMsg ctl_msg;\nstruct Score score;\nint sockfd;\n\nvoid ball_send_stop() {\n    struct FootBallMsg msg;\n    bzero(&msg, sizeof(msg));\n    msg.type = FT_CTL;\n    msg.ctl.action = ACTION_STOP;\n    send(sockfd, &msg, sizeof(msg), 0);\n}\n\nvoid logout(int signum) {\n    struct FootBallMsg msg;\n    msg.type = FT_FIN;\n    send(sockfd, (void *)&msg, sizeof(msg), 0);\n    endwin();\n    exit(1);\n}\n\nint main(int argc, char **argv) {\n    int opt;\n    pthread_t recv_t, draw_t;\n    struct LogRequest request;\n    struct LogResponse response;\n    bzero(&request, sizeof(request));\n\n    bzero(&chat_msg, sizeof(chat_msg));\n    bzero(&ctl_msg, sizeof(ctl_msg));\n\n    chat_msg.type = FT_MSG;\n    ctl_msg.type = FT_CTL;\n\n    while ((opt = getopt(argc, argv, "h:p:n:t:m:")) != -1) {\n        switch (opt) {\n            case \'h\': {\n                strcpy(server_ip, optarg);\n            } break;\n            case \'p\': {\n                server_port = atoi(optarg);\n            } break;\n            case \'n\': {\n                strcpy(request.name, optarg);\n            } break;\n            case \'t\': {\n                request.team = atoi(optarg);\n            } break;\n            case \'m\': {\n                strcpy(request.msg, optarg);\n            } break;\n            default: {\n                fprintf(stderr, "Usage : %s [-h host] [-p port]\\n", argv[0]);\n                exit(1);\n            }\n        }\n    }\n\n    argc -= (optind - 1);\n    argv += (optind - 1);\n\n    if (argc > 1) {\n        fprintf(stderr, "Usage : %s [-h host] [-p port]\\n", argv[0]);\n        exit(1);\n    }\n\n    if (!server_port) server_port = atoi(get_value(conf, "SERVERPORT"));\n    if (!strlen(server_ip)) strcpy(server_ip, get_value(conf, "SERVERIP"));\n    if (!strlen(request.name)) strcpy(request.name, get_value(conf, "NAME"));\n    if (!strlen(request.msg)) strcpy(request.msg, get_value(conf, "LOGMSG"));\n    if (!request.team) request.team = atoi(get_value(conf, "TEAM"));\n\n    court.width = atoi(get_value(conf, "COLS"));\n    court.height = atoi(get_value(conf, "LINES"));\n    court.start.x = 3;\n    court.start.y = 1;\n\n\n    signal(SIGINT, logout);\n    struct sockaddr_in server;\n    server.sin_family = AF_INET;\n    server.sin_port = htons(server_port);\n    server.sin_addr.s_addr = inet_addr(server_ip);\n\n    socklen_t len = sizeof(server);\n\nDBG(GREEN "INFO" NONE\n              " : server_ip = %s, server_port = %d, name = %s, team = %s, "\n              "logmsg = %s\\n",\n        server_ip, server_port, request.name, (request.team ? "BLUE" : "RED"),\n        request.msg);\n\n    if ((sockfd = socket_udp()) < 0) {\n        perror("socket_udp");\n        exit(1);\n    }\n\n    sendto(sockfd, (void *)&request, sizeof(request), 0,\n           (struct sockaddr *)&server, len);\n\n    fd_set set;\n    FD_ZERO(&set);\n    FD_SET(sockfd, &set);\n    struct timeval tv;\n    tv.tv_sec = 5;\n    tv.tv_usec = 0;\n\n    int retval = select(sockfd + 1, &set, NULL, NULL, &tv);\n    if (retval == -1) {\n        perror("select");\n        exit(1);\n    } else if (retval) {\n        int ret = recvfrom(sockfd, (void *)&response, sizeof(response), 0,\n                           (struct sockaddr *)&server, &len);\n        if (ret != sizeof(response) || response.type) {\n            DBG(RED\n                "ERROR : " NONE\n                "The Game Server refused your login request!\\n\\t This may be "\n                "helpful: %s\\n",\n                response.msg);\n            exit(1);\n        }\n    } else {\n        DBG(RED "ERROR : " NONE "The Game Server is offline.\\n");\n        exit(1);\n    }\n\n    DBG(GREEN "SERVER : " NONE " %s \\n", response.msg);\n    connect(sockfd, (struct sockaddr *)&server, len);\n#ifndef _D\n    pthread_create(&draw_t, NULL, draw, NULL);\n#endif\n    pthread_create(&recv_t, NULL, client_recv, NULL);\n\n    signal(14, send_ctl);\n    struct itimerval itimer;\n    itimer.it_interval.tv_sec = 0;\n    itimer.it_interval.tv_usec = 100000;\n    itimer.it_value.tv_sec = 0;\n    itimer.it_value.tv_usec = 100000;\n\n    setitimer(ITIMER_REAL, &itimer, NULL);\n\n\n    noecho();\n    cbreak();\n    keypad(stdscr, TRUE);\n    while (1) {\n        int c = getchar();\n        switch (c) {\n            case \'a\': {\n                ctl_msg.ctl.dirx -= 1;\n            } break;\n            case \'d\': {\n                ctl_msg.ctl.dirx += 1;\n            } break;\n            case \'w\': {\n                ctl_msg.ctl.diry -= 1;\n            } break;\n            case \'s\': {\n                ctl_msg.ctl.diry += 1;\n            } break;\n            case 13: {\n                send_chat();\n            } break;\n            case \' \': {\n                show_strength();\n            } break;\n            case \'j\':{\n                ball_send_stop();\n            } break;\n            case \'l\':{\n                struct FootBallMsg msg;\n                bzero(&msg, sizeof(msg));\n                msg.type = FT_CTL;\n                msg.ctl.action = ACTION_CARRY;\n                send(sockfd, &msg, sizeof(msg), 0);\n            }break;\n            default:\n                break;\n        }\n    }\n\n    sleep(10);\n\n    return 0;\n}\n')),(0,l.kt)("h4",{id:"footballconf"},"football.conf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'SERVERIP=39.97.167.241\nSERVERPORT=8888\nNAME=yzw\nLOGMSG="Hi, Let\'s Play!"\nTEAM=1\nLINES=25\nCOLS=115\n')),(0,l.kt)("h3",{id:"server"},"server"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'char *conf = "./server.conf";\n\nstruct User *rteam;/*\u7ea2\u961f*/\nstruct User *bteam;/*\u84dd\u961f*/\nint data_port;/*\u6570\u636e\u7aef\u53e3*/\nint port = 0;\nint repollfd, bepollfd;\n\n// struct Map court;\nstruct Bpoint ball;/*\u7403*/\nstruct BallStatus ball_status;/*\u7403\u7684\u72b6\u6001*/\nstruct Score score;/*\u6bd4\u5206*/\nint main(int argc, char **argv) {\n    int opt, listener, epoll_fd;\n    pthread_t draw_t, red_t, blue_t, heart_t;\n    while ((opt = getopt(argc, argv, "p:")) != -1) {\n        switch (opt) {\n            case \'p\':\n                port = atoi(optarg);\n                break;\n            default:\n                fprintf(stderr, "Usage: %s [-p port]\\n", argv[0]);\n                exit(1);\n        }\n    }\n    argc -= (optind - 1);\n    argv += (optind - 1);\n\n    if (argc > 1) {\n        fprintf(stderr, "Usage: %s [-p port]\\n", argv[0]);\n        exit(1);\n    }\n\n    if (!port) port = atoi(get_value(conf, "PORT"));\n    data_port = atoi(get_value(conf, "DATAPORT"));\n\n    court.width = atoi(get_value(conf, "COLS"));\n    court.height = atoi(get_value(conf, "LINES"));\n    court.start.x = 3;\n    court.start.y = 1;\n\n    rteam = (struct User *)calloc(MAX, sizeof(struct User));\n    bteam = (struct User *)calloc(MAX, sizeof(struct User));\n\n    ball.x = court.width / 2;\n    ball.y = court.height / 2;\n\n    if ((listener = socket_create_udp(port)) < 0) {\n        perror("socket_create_udp");\n        exit(1);\n    }\n\n    DBG(GREEN "INFO" NONE " : Server start on Port %d\\n", port);\n#ifndef _D//\u7ed8\u5236\u754c\u9762\n    pthread_create(&draw_t, NULL, draw, NULL);\n#endif\n    epoll_fd = epoll_create(MAX * 2);\n    repollfd = epoll_create(MAX);\n    bepollfd = epoll_create(MAX);\n\n    if (epoll_fd < 0 || repollfd < 0 || bepollfd < 0) {\n        perror("epoll_create");\n        exit(1);\n    }\n\n    struct task_queue redQueue;\n    struct task_queue blueQueue;\n\n    task_queue_init(&redQueue, MAX, repollfd);\n    task_queue_init(&blueQueue, MAX, bepollfd);\n\n    pthread_create(&red_t, NULL, sub_reactor, (void *)&redQueue);\n    pthread_create(&blue_t, NULL, sub_reactor, (void *)&blueQueue);\n    pthread_create(&heart_t, NULL, heart_beat, NULL);\n\n    signal(SIGINT, server_exit);\n    struct epoll_event ev, events[MAX * 2];\n    ev.events = EPOLLIN;\n    ev.data.fd = listener;\n\n    epoll_ctl(epoll_fd, EPOLL_CTL_ADD, listener, &ev);\n    struct sockaddr_in client;\n    socklen_t len = sizeof(client);\n\n    signal(14, re_drew);\n\n    struct itimerval itimer;\n    itimer.it_interval.tv_sec = 0;\n    itimer.it_interval.tv_usec = 50000;\n    itimer.it_value.tv_sec = 5;\n    itimer.it_value.tv_usec = 0;\n    setitimer(ITIMER_REAL, &itimer, NULL);\n\n    Show_Message( , , "Waiting for Login.", 1);\n    while (1) {\n        DBG(YELLOW "Main Thread" NONE " : Before epoll_wait\\n");\n        int nfds = epoll_wait(epoll_fd, events, MAX * 2, -1);\n        DBG(YELLOW "Main Thread" NONE " : After epoll_wait\\n");\n\n        for (int i = 0; i < nfds; ++i) {\n            struct User user;\n            char buff[512] = {0};\n            DBG(YELLOW "EPOLL" NONE " : Doing with %dth fd\\n", i);\n            if (events[i].data.fd == listener) {\n                int new_fd = udp_accept(epoll_fd, listener, &user);\n                if (new_fd > 0) {\n                    sprintf(buff, "%s Login the Game.", user.name);\n                    DBG(YELLOW "Main Thread" NONE\n                               " : Add %s to %s sub_reactor.\\n",\n                        user.name, (user.team ? "BLUE" : "RED"));\n                    add_to_sub_reactor(&user);//\u7528\u6237\u52a0\u5230\u76f8\u5e94\u7684\u53cd\u5e94\u5806\u91cc\n                    Show_Message(, ,buff, 1);\n                }\n            } else {\n                recv(events[i].data.fd, buff, sizeof(buff), 0);\n                printf(PINK "RECV" NONE " : %s\\n", buff);\n            }\n            // char info[1024] = {0};\n            // w_gotoxy_puts(Message, 1, 2, info);\n        }\n    }\n    return 0;\n}\n')),(0,l.kt)("h4",{id:"serverconf"},"server.conf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"LINES=25\nCOLS=115\nPORT=8888\nDATAPORT=9999\n")),(0,l.kt)("h2",{id:"1-udp\u642d\u914dconnect"},"1. UDP\u642d\u914dconnect"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u5f53udp\u4e2d\u4f7f\u7528connect\uff0c\u5c31\u53ef\u4ee5\u7528send,recv\u4e86"),(0,l.kt)("li",{parentName:"ol"},"\u4e3b\u673a\u53ef\u4e0d\u53ef\u8fbe\u5230"),(0,l.kt)("li",{parentName:"ol"},"\u5957\u63a5\u5b57\u53ea\u8d1f\u8d23\u4e24\u4e2a\u4e3b\u673a\u4e4b\u95f4\u7684\u901a\u4fe1\u3002")),(0,l.kt)("p",null,"\u5373\u4f7f\u7528\u4e86connect\u4efb\u7136\u6ca1\u6709\u4e09\u6b21\u63e1\u624b\u3002"),(0,l.kt)("h2",{id:"2-server\u7aefepoll\u7684\u4f18\u5316"},"2. server\u7aefepoll\u7684\u4f18\u5316"),(0,l.kt)("p",null,"UDP\u76f4\u63a5\u52a0EPOLL\u6548\u679c\u4e0d\u662f\u5f88\u597d\uff0c\u53ea\u6709\u4e00\u4e2a\u5957\u63a5\u5b57\uff0c\u6211\u4eec\u8981\u521b\u5efa\u591a\u4e2a\u5957\u63a5\u5b57"),(0,l.kt)("p",null,"\u7531\u4e3b\u7ebf\u7a0b\u63a5\u6536\u5ba2\u6237\u7aef\uff0c\u63a5\u53d7\u5b8c\u653e\u5728\u5176\u4ed6\u7684\u4efb\u52a1\u961f\u5217\u4e2d\u53bb\u505a\u3002"),(0,l.kt)("p",null,"\u5b9e\u73b0\u4e00\u4e2a\u76f8\u5e94\u7684accept\u51fd\u6570"))}d.isMDXComponent=!0},61279:function(e,n,t){n.Z=t.p+"assets/images/image-20210916103201059-31442d2a2bf239101d8cdf2c2d50de44.png"},65721:function(e,n,t){n.Z=t.p+"assets/images/image.5SC3A1-a9bb31f7f08e0beaf9c83550976aabd1.png"},33466:function(e,n,t){n.Z=t.p+"assets/images/image.MBVXA1-c5dc64a3000bb9dce971bc1eb9c45b00.png"},1736:function(e,n,t){n.Z=t.p+"assets/images/image.SW30A1-969621f6aecbba610791cd5ffaf84980.png"}}]);