(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[3832],{3905:function(e,a,n){"use strict";n.d(a,{Zo:function(){return N},kt:function(){return k}});var t=n(67294);function s(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function m(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function p(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?m(Object(n),!0).forEach((function(a){s(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function r(e,a){if(null==e)return{};var n,t,s=function(e,a){if(null==e)return{};var n,t,s={},m=Object.keys(e);for(t=0;t<m.length;t++)n=m[t],a.indexOf(n)>=0||(s[n]=e[n]);return s}(e,a);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(t=0;t<m.length;t++)n=m[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=t.createContext({}),l=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):p(p({},a),e)),n},N=function(e){var a=l(e.components);return t.createElement(i.Provider,{value:a},e.children)},o={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},c=t.forwardRef((function(e,a){var n=e.components,s=e.mdxType,m=e.originalType,i=e.parentName,N=r(e,["components","mdxType","originalType","parentName"]),c=l(n),k=s,u=c["".concat(i,".").concat(k)]||c[k]||o[k]||m;return n?t.createElement(u,p(p({ref:a},N),{},{components:n})):t.createElement(u,p({ref:a},N))}));function k(e,a){var n=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var m=n.length,p=new Array(m);p[0]=c;var r={};for(var i in a)hasOwnProperty.call(a,i)&&(r[i]=a[i]);r.originalType=e,r.mdxType="string"==typeof e?e:s,p[1]=r;for(var l=2;l<m;l++)p[l]=n[l];return t.createElement.apply(null,p)}return t.createElement.apply(null,n)}c.displayName="MDXCreateElement"},30785:function(e,a,n){"use strict";n.r(a),n.d(a,{frontMatter:function(){return r},metadata:function(){return i},toc:function(){return l},default:function(){return o}});var t=n(22122),s=n(19756),m=(n(67294),n(3905)),p=["components"],r={id:"A1.Leetcode",title:"A1.Leetcode","typora-root-url":"../"},i={unversionedId:"Online_Judge/A1.Leetcode",id:"Online_Judge/A1.Leetcode",isDocsHomePage:!1,title:"A1.Leetcode",description:"[TOC]",source:"@site/docs/3.Online_Judge/A1.Leetcode.md",sourceDirName:"3.Online_Judge",slug:"/Online_Judge/A1.Leetcode",permalink:"/Online_Judge/A1.Leetcode",editUrl:"https://github.com/worst0/wiki_note/edit/main/docs/3.Online_Judge/A1.Leetcode.md",version:"current",lastUpdatedAt:1624240624,formattedLastUpdatedAt:"6/21/2021",frontMatter:{id:"A1.Leetcode",title:"A1.Leetcode","typora-root-url":"../"},sidebar:"Document\ud83d\udcbb",previous:{title:"H1.\u7b97\u6cd5\u8c1c\u9898",permalink:"/Algorithm/H1.\u7b97\u6cd5\u8c1c\u9898"},next:{title:"HZOJ",permalink:"/Online_Judge/B1.HZOJ"}},l=[{value:"\u7ebf\u6027\u8868",id:"\u7ebf\u6027\u8868",children:[{value:"\u6570\u7ec4",id:"\u6570\u7ec4",children:[]}]},{value:"\u5355\u94fe\u8868",id:"\u5355\u94fe\u8868",children:[]},{value:"\u8d2a\u5fc3",id:"\u8d2a\u5fc3",children:[]},{value:"\u5feb\u6162\u6307\u9488",id:"\u5feb\u6162\u6307\u9488",children:[{value:"\u5411\u91cf\u7684\u70b9\u4e58:<strong>a</strong> * <strong>b</strong> -- \u6c42\u5939\u89d2",id:"\u5411\u91cf\u7684\u70b9\u4e58a--b----\u6c42\u5939\u89d2",children:[]},{value:"\u5411\u91cf\u7684\u53c9\u4e58\uff1a<strong>a</strong> \u2227 <strong>b</strong> -- \u6c42\u6cd5\u5411\u91cf",id:"\u5411\u91cf\u7684\u53c9\u4e58\uff1aa-\u2227-b----\u6c42\u6cd5\u5411\u91cf",children:[]},{value:"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32",id:"3-\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32",children:[]}]},{value:"\u6811",id:"\u6811",children:[]},{value:"\u5b57\u7b26\u4e32",id:"\u5b57\u7b26\u4e32",children:[]},{value:"\u4e8c\u5206",id:"\u4e8c\u5206",children:[]},{value:"\u54c8\u5e0c\u8868",id:"\u54c8\u5e0c\u8868",children:[]},{value:"\u77e9\u9635",id:"\u77e9\u9635",children:[]},{value:"\u52a8\u6001\u89c4\u5212",id:"\u52a8\u6001\u89c4\u5212",children:[{value:"\u7279\u5f81",id:"\u7279\u5f81",children:[]}]},{value:"BFS",id:"bfs",children:[]},{value:"DFS",id:"dfs",children:[]}],N={toc:l};function o(e){var a=e.components,r=(0,s.Z)(e,p);return(0,m.kt)("wrapper",(0,t.Z)({},N,r,{components:a,mdxType:"MDXLayout"}),(0,m.kt)("p",null,"[TOC]"),(0,m.kt)("h1",{id:"leetcode"},"Leetcode"),(0,m.kt)("p",null,"\u5728c++ 17\u4e2d\uff0c\u4f60\u80fd\u591f\u4f7f\u7528\u201c\u7ed3\u6784\u5316\u7ed1\u5b9a\u201d\u7279\u6027\uff0c\u5b83\u5141\u8bb8\u4f7f\u7528\u5355\u4e2a\u5143\u7ec4/\u5bf9\u5b9a\u4e49\u591a\u4e2a\u53d8\u91cf\uff0c\u4f7f\u7528\u4e0d\u540c\u7684\u540d\u79f0:"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-javascript"},'for (const auto& [name, description] : planet_descriptions) {\n    std::cout << "Planet " << name << ":\\n" << description << "\\n\\n";\n}\n')),(0,m.kt)("h2",{id:"\u7ebf\u6027\u8868"},"\u7ebf\u6027\u8868"),(0,m.kt)("h3",{id:"\u6570\u7ec4"},"\u6570\u7ec4"),(0,m.kt)("h4",{id:"26\u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/description/"},"26.\u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879")),(0,m.kt)("blockquote",null,(0,m.kt)("p",{parentName:"blockquote"},"\u7ed9\u4f60\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4 ",(0,m.kt)("inlineCode",{parentName:"p"},"nums")," \uff0c\u8bf7\u4f60",(0,m.kt)("strong",{parentName:"p"},(0,m.kt)("a",{parentName:"strong",href:"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"}," \u539f\u5730"))," \u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u6bcf\u4e2a\u5143\u7d20 ",(0,m.kt)("strong",{parentName:"p"},"\u53ea\u51fa\u73b0\u4e00\u6b21")," \uff0c\u8fd4\u56de\u5220\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        return distance(nums.begin(), unique(nums.begin(), nums.end()));\n        if (nums.empty()) return 0;\n        int index = 0;\n        for (int i = 1; i < nums.size(); i++) {\n            if (nums[index] != nums[i]) {\n                nums[++index] = nums[i];\n            }\n        }\n        return index + 1;\n    }\n};\n")),(0,m.kt)("h4",{id:"80\u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879-ii"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/description/"},"80.\u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 II")),(0,m.kt)("blockquote",null,(0,m.kt)("p",{parentName:"blockquote"},"\u7ed9\u4f60\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4 ",(0,m.kt)("inlineCode",{parentName:"p"},"nums")," \uff0c\u8bf7\u4f60",(0,m.kt)("strong",{parentName:"p"},(0,m.kt)("a",{parentName:"strong",href:"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"}," \u539f\u5730"))," \u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u6bcf\u4e2a\u5143\u7d20 ",(0,m.kt)("strong",{parentName:"p"},"\u6700\u591a\u51fa\u73b0\u4e24\u6b21")," \uff0c\u8fd4\u56de\u5220\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        if (nums.size() < 3) return nums.size();\n        int index = 2;\n        for (int i = 2; i < nums.size(); ++i) {\n            if (nums[i] != nums[index - 2]) {\n                nums[index++] = nums[i];\n            }\n        }\n        return index;\n    }\n};\n")),(0,m.kt)("h4",{id:"\u300c\u5220\u9664\u6709\u5e8f\u6570\u7ec4\u91cd\u590d\u9879\u300d\u7684\u901a\u89e3\u901a\u7528\u89e3\u6cd5"},"\u300c\u5220\u9664\u6709\u5e8f\u6570\u7ec4\u91cd\u590d\u9879\u300d\u7684\u901a\u89e3\u901a\u7528\u89e3\u6cd5"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},"\u7531\u4e8e\u662f\u4fdd\u7559 k \u4e2a\u76f8\u540c\u6570\u5b57\uff0c\u5bf9\u4e8e\u524d k \u4e2a\u6570\u5b57\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fdd\u7559"),(0,m.kt)("li",{parentName:"ul"},"\u5bf9\u4e8e\u540e\u9762\u7684\u4efb\u610f\u6570\u5b57\uff0c\u80fd\u591f\u4fdd\u7559\u7684\u524d\u63d0\u662f\uff1a\u4e0e\u5f53\u524d\u5199\u5165\u7684\u4f4d\u7f6e\u524d\u9762\u7684\u7b2c k \u4e2a\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\uff0c\u4e0d\u76f8\u540c\u5219\u4fdd\u7559")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        return handle(nums, 2);\n    }\n    int handle(vector<int>& nums, int k) {\n        if (nums.size() <= k) return nums.size();\n        int index = k;\n        for (int i = k; i < nums.size(); i++) {\n            if (nums[i] != nums[index - k]) {\n                nums[index++] = nums[i];\n            }\n        }\n        return index;\n    }\n};\n")),(0,m.kt)("h4",{id:"33\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/description/"},"33.\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4")),(0,m.kt)("blockquote",null,(0,m.kt)("p",{parentName:"blockquote"},"\u6574\u6570\u6570\u7ec4 ",(0,m.kt)("inlineCode",{parentName:"p"},"nums")," \u6309\u5347\u5e8f\u6392\u5217\uff0c\u6570\u7ec4\u4e2d\u7684\u503c ",(0,m.kt)("strong",{parentName:"p"},"\u4e92\u4e0d\u76f8\u540c")," \u3002"),(0,m.kt)("p",{parentName:"blockquote"},"\u5728\u4f20\u9012\u7ed9\u51fd\u6570\u4e4b\u524d\uff0c",(0,m.kt)("inlineCode",{parentName:"p"},"nums")," \u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u4e0b\u6807 ",(0,m.kt)("inlineCode",{parentName:"p"},"k"),"\uff08",(0,m.kt)("inlineCode",{parentName:"p"},"0 <= k < nums.length"),"\uff09\u4e0a\u8fdb\u884c\u4e86 ",(0,m.kt)("strong",{parentName:"p"},"\u65cb\u8f6c"),"\uff0c\u4f7f\u6570\u7ec4\u53d8\u4e3a ",(0,m.kt)("inlineCode",{parentName:"p"},"[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]"),"\uff08\u4e0b\u6807 ",(0,m.kt)("strong",{parentName:"p"},"\u4ece 0 \u5f00\u59cb")," \u8ba1\u6570\uff09\u3002\u4f8b\u5982\uff0c ",(0,m.kt)("inlineCode",{parentName:"p"},"[0,1,2,4,5,6,7]")," \u5728\u4e0b\u6807 ",(0,m.kt)("inlineCode",{parentName:"p"},"3")," \u5904\u7ecf\u65cb\u8f6c\u540e\u53ef\u80fd\u53d8\u4e3a ",(0,m.kt)("inlineCode",{parentName:"p"},"[4,5,6,7,0,1,2]")," \u3002"),(0,m.kt)("p",{parentName:"blockquote"},"\u7ed9\u4f60 ",(0,m.kt)("strong",{parentName:"p"},"\u65cb\u8f6c\u540e")," \u7684\u6570\u7ec4 ",(0,m.kt)("inlineCode",{parentName:"p"},"nums")," \u548c\u4e00\u4e2a\u6574\u6570 ",(0,m.kt)("inlineCode",{parentName:"p"},"target")," \uff0c\u5982\u679c ",(0,m.kt)("inlineCode",{parentName:"p"},"nums")," \u4e2d\u5b58\u5728\u8fd9\u4e2a\u76ee\u6807\u503c ",(0,m.kt)("inlineCode",{parentName:"p"},"target")," \uff0c\u5219\u8fd4\u56de\u5b83\u7684\u4e0b\u6807\uff0c\u5426\u5219\u8fd4\u56de ",(0,m.kt)("inlineCode",{parentName:"p"},"-1")," \u3002")),(0,m.kt)("p",null,"\u5982\u679c ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"A"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,m.kt)("mi",{parentName:"mrow"},"l"),(0,m.kt)("mi",{parentName:"mrow"},"e"),(0,m.kt)("mi",{parentName:"mrow"},"f"),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,m.kt)("mo",{parentName:"mrow"},"\u2264"),(0,m.kt)("mi",{parentName:"mrow"},"A"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,m.kt)("mi",{parentName:"mrow"},"m"),(0,m.kt)("mi",{parentName:"mrow"},"i"),(0,m.kt)("mi",{parentName:"mrow"},"d"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"]")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"A[left] \\le A[mid]")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"A"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"["),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"]"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"\u2264"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"A"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"["),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"]"))))),"\uff0c\u5219\u5e8f\u5217",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,m.kt)("mi",{parentName:"mrow"},"l"),(0,m.kt)("mi",{parentName:"mrow"},"e"),(0,m.kt)("mi",{parentName:"mrow"},"f"),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,m.kt)("mi",{parentName:"mrow"},"m"),(0,m.kt)("mi",{parentName:"mrow"},"i"),(0,m.kt)("mi",{parentName:"mrow"},"d"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"]")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"[left, mid]")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mopen"},"["),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mpunct"},","),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"]"))))),"\u4e3a\u9012\u589e\u5e8f\u5217\uff0c\u5426\u5219\u4ece\u4e3a\u9012",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,m.kt)("mi",{parentName:"mrow"},"r"),(0,m.kt)("mi",{parentName:"mrow"},"i"),(0,m.kt)("mi",{parentName:"mrow"},"g"),(0,m.kt)("mi",{parentName:"mrow"},"h"),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,m.kt)("mi",{parentName:"mrow"},"r"),(0,m.kt)("mi",{parentName:"mrow"},"i"),(0,m.kt)("mi",{parentName:"mrow"},"g"),(0,m.kt)("mi",{parentName:"mrow"},"h"),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"]")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"[right, right]")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mopen"},"["),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"h"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mpunct"},","),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"h"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"]"))))),"\u589e\u5e8f\u5217\uff0c"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) {\n                return mid;\n            }\n            if (nums[left] <= nums[mid]) {\n                if (nums[left] <= target && target <= nums[mid]) {\n                    right = mid - 1;\n                } else {\n                    left = mid + 1;\n                }\n            } else {\n                if (nums[mid] <= target && target <= nums[right]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n};\n")),(0,m.kt)("h4",{id:"81\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4-ii"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/description/"},"81.\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 II")),(0,m.kt)("blockquote",null,(0,m.kt)("p",{parentName:"blockquote"},"\u5df2\u77e5\u5b58\u5728\u4e00\u4e2a\u6309\u975e\u964d\u5e8f\u6392\u5217\u7684\u6574\u6570\u6570\u7ec4 ",(0,m.kt)("inlineCode",{parentName:"p"},"nums")," \uff0c\u6570\u7ec4\u4e2d\u7684\u503c\u4e0d\u5fc5\u4e92\u4e0d\u76f8\u540c\u3002"),(0,m.kt)("p",{parentName:"blockquote"},"\u5728\u4f20\u9012\u7ed9\u51fd\u6570\u4e4b\u524d\uff0c",(0,m.kt)("inlineCode",{parentName:"p"},"nums")," \u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u4e0b\u6807 ",(0,m.kt)("inlineCode",{parentName:"p"},"k"),"\uff08",(0,m.kt)("inlineCode",{parentName:"p"},"0 <= k < nums.length"),"\uff09\u4e0a\u8fdb\u884c\u4e86 ",(0,m.kt)("strong",{parentName:"p"},"\u65cb\u8f6c")," \uff0c\u4f7f\u6570\u7ec4\u53d8\u4e3a ",(0,m.kt)("inlineCode",{parentName:"p"},"[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]"),"\uff08\u4e0b\u6807 ",(0,m.kt)("strong",{parentName:"p"},"\u4ece 0 \u5f00\u59cb")," \u8ba1\u6570\uff09\u3002\u4f8b\u5982\uff0c ",(0,m.kt)("inlineCode",{parentName:"p"},"[0,1,2,4,4,4,5,6,6,7]")," \u5728\u4e0b\u6807 ",(0,m.kt)("inlineCode",{parentName:"p"},"5")," \u5904\u7ecf\u65cb\u8f6c\u540e\u53ef\u80fd\u53d8\u4e3a ",(0,m.kt)("inlineCode",{parentName:"p"},"[4,5,6,6,7,0,1,2,4,4]")," \u3002"),(0,m.kt)("p",{parentName:"blockquote"},"\u7ed9\u4f60 ",(0,m.kt)("strong",{parentName:"p"},"\u65cb\u8f6c\u540e")," \u7684\u6570\u7ec4 ",(0,m.kt)("inlineCode",{parentName:"p"},"nums")," \u548c\u4e00\u4e2a\u6574\u6570 ",(0,m.kt)("inlineCode",{parentName:"p"},"target")," \uff0c\u8bf7\u4f60\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u7ed9\u5b9a\u7684\u76ee\u6807\u503c\u662f\u5426\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\u3002\u5982\u679c ",(0,m.kt)("inlineCode",{parentName:"p"},"nums")," \u4e2d\u5b58\u5728\u8fd9\u4e2a\u76ee\u6807\u503c ",(0,m.kt)("inlineCode",{parentName:"p"},"target")," \uff0c\u5219\u8fd4\u56de ",(0,m.kt)("inlineCode",{parentName:"p"},"true")," \uff0c\u5426\u5219\u8fd4\u56de ",(0,m.kt)("inlineCode",{parentName:"p"},"false")," \u3002")),(0,m.kt)("p",null,"\u5141\u8bb8\u51fa\u73b0\u91cd\u590d\u5143\u7d20\uff0c\u5219\u5982\u679c ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"A"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,m.kt)("mi",{parentName:"mrow"},"l"),(0,m.kt)("mi",{parentName:"mrow"},"e"),(0,m.kt)("mi",{parentName:"mrow"},"f"),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,m.kt)("mo",{parentName:"mrow"},"\u2264"),(0,m.kt)("mi",{parentName:"mrow"},"A"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,m.kt)("mi",{parentName:"mrow"},"m"),(0,m.kt)("mi",{parentName:"mrow"},"i"),(0,m.kt)("mi",{parentName:"mrow"},"d"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"]")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"A[left] \\le A[mid]")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"A"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"["),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"]"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"\u2264"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"A"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"["),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"]"))))),"\uff0c\u5219\u5e8f\u5217",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,m.kt)("mi",{parentName:"mrow"},"l"),(0,m.kt)("mi",{parentName:"mrow"},"e"),(0,m.kt)("mi",{parentName:"mrow"},"f"),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,m.kt)("mi",{parentName:"mrow"},"m"),(0,m.kt)("mi",{parentName:"mrow"},"i"),(0,m.kt)("mi",{parentName:"mrow"},"d"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"]")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"[left, mid]")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mopen"},"["),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mpunct"},","),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"]"))))),"\u4e0d\u4e00\u5b9a\u4e3a\u9012\u589e\u5e8f\u5217\u3002"),(0,m.kt)("p",null,"\u5982",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mn",{parentName:"mrow"},"1")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"1")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"))))),"\uff0c",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mn",{parentName:"mrow"},"3")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"3")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"3"))))),"\uff0c",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mn",{parentName:"mrow"},"1")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"1")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"))))),"\uff0c",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mn",{parentName:"mrow"},"1")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"1")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"))))),"\uff0c",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mn",{parentName:"mrow"},"1")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"1")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"))))),"\u3002"),(0,m.kt)("p",null,"\u62c6\u5206\u6761\u4ef6\uff1a"),(0,m.kt)("ol",null,(0,m.kt)("li",{parentName:"ol"},(0,m.kt)("p",{parentName:"li"},"\u5982\u679c ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"A"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,m.kt)("mi",{parentName:"mrow"},"l"),(0,m.kt)("mi",{parentName:"mrow"},"e"),(0,m.kt)("mi",{parentName:"mrow"},"f"),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,m.kt)("mo",{parentName:"mrow"},"<"),(0,m.kt)("mi",{parentName:"mrow"},"A"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,m.kt)("mi",{parentName:"mrow"},"m"),(0,m.kt)("mi",{parentName:"mrow"},"i"),(0,m.kt)("mi",{parentName:"mrow"},"d"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"]")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"A[left] \\lt A[mid]")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"A"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"["),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"]"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"<"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"A"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"["),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"]"))))),"\uff0c\u5219\u5e8f\u5217",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,m.kt)("mi",{parentName:"mrow"},"l"),(0,m.kt)("mi",{parentName:"mrow"},"e"),(0,m.kt)("mi",{parentName:"mrow"},"f"),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,m.kt)("mi",{parentName:"mrow"},"m"),(0,m.kt)("mi",{parentName:"mrow"},"i"),(0,m.kt)("mi",{parentName:"mrow"},"d"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"]")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"[left, mid]")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mopen"},"["),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mpunct"},","),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"]"))))),"\u4e00\u5b9a\u4e3a\u9012\u589e\u5e8f\u5217\u3002")),(0,m.kt)("li",{parentName:"ol"},(0,m.kt)("p",{parentName:"li"},"\u5982\u679c",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"A"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,m.kt)("mi",{parentName:"mrow"},"l"),(0,m.kt)("mi",{parentName:"mrow"},"e"),(0,m.kt)("mi",{parentName:"mrow"},"f"),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,m.kt)("mo",{parentName:"mrow"},"="),(0,m.kt)("mi",{parentName:"mrow"},"A"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,m.kt)("mi",{parentName:"mrow"},"m"),(0,m.kt)("mi",{parentName:"mrow"},"i"),(0,m.kt)("mi",{parentName:"mrow"},"d"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"]")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"A[left] = A[mid]")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"A"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"["),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"]"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"="),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"A"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"["),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"]"))))),"\uff0c\u5219",(0,m.kt)("inlineCode",{parentName:"p"},"left++"),"\uff0c\u5f80\u4e0b\u8d70\u4e00\u6b65"))),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool search(vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1, mid;\n        while (left <= right) {\n            mid = left + (right - left) / 2;\n            if(nums[mid] == target)return true;\n            if(nums[mid] == nums[left]) left++;\n            else if(nums[mid] <= nums[right]){\n                if(nums[mid] < target && target <= nums[right]){\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n            else{\n                if(nums[left] <= target && target < nums[mid]) {\n                    right = mid - 1;\n                } else {\n                    left = mid + 1;\n                }\n            }\n        }\n        return false;\n    }\n};\n")),(0,m.kt)("h4",{id:"4\u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/median-of-two-sorted-arrays/description/"},"4.\u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570")),(0,m.kt)("blockquote",null,(0,m.kt)("p",{parentName:"blockquote"},"\u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u5206\u522b\u4e3a ",(0,m.kt)("inlineCode",{parentName:"p"},"m")," \u548c ",(0,m.kt)("inlineCode",{parentName:"p"},"n")," \u7684\u6b63\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff09\u6570\u7ec4 ",(0,m.kt)("inlineCode",{parentName:"p"},"nums1")," \u548c ",(0,m.kt)("inlineCode",{parentName:"p"},"nums2"),"\u3002\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684 ",(0,m.kt)("strong",{parentName:"p"},"\u4e2d\u4f4d\u6570")," \u3002")),(0,m.kt)("p",null,"\u66f4\u901a\u7528\u7684\u5f62\u5f0f\u662f\uff0c\u7ed9\u5b9a\u4e24\u4e2a\u5df2\u7ecf\u6392\u5e8f\u597d\u7684\u6570\u7ec4\uff0c\u627e\u5230\u4e24\u8005\u6240\u6709\u5143\u7d22\u4e2d\u7b2c",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"k")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"k")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"k"))))),"\u5927\u7684\u5143\u7d20\u3002\n",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"m"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(m+n)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"))))),"\u7684\u89e3\u6cd5\uff1a\u76f4\u63a5merge\u4e24\u4e2a\u6570\u7ec4\uff0c\u7136\u540e\u6c42\u7b2ck\u5927\u7684\u5143\u7d20\u3002"),(0,m.kt)("p",null,(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"m"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(m+n)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"))))),"\u7684\u89e3\u6cd5\uff1a\u4e0d\u9700\u8981\u300c\u6392\u5e8f\u300d\uff0c\u7528\u4e00\u4e2a\u8ba1\u6570\u5668\uff0c\u8bb0\u5f55\u5f53\u524d\u5df2\u7ecf\u627e\u5230\u7b2cm\u5927\u7684\u5143\u7d20\u3002\u540c\u65f6\u6211\u4eec\u4f7f\u7528\u4e24\u4e2a\u6307\u9488pA\u548cpB\uff0c\u5206\u522b\u6307\u5411A\u548cB\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u4f7f\u7528\u7c7b\u4f3c\u4e8emerge sort\u7684\u539f\u7406\uff0c\u5982\u679c\u6570\u7ec4A\u5f53\u524d\u5143\u7d20\u5c0f\uff0c\u90a3\u4e48pA++\uff0c\u540c\u65f6m++\uff1b\u5982\u679c\u6570\u7ec4B\u5f53\u524d\u5143\u7d20\u5c0f\uff0c\u90a3\u4e48pB++\uff0c\u540c\u65f6m++\uff0c\u6700\u7ec8\u5f53m\u7b49\u4e8ek\u7684\u65f6\u5019\uff0c\u5f97\u5230\u7b54\u6848"),(0,m.kt)("p",null,(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"log"),(0,m.kt)("mo",{parentName:"mrow"},"\u2061"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"m"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mtext",{parentName:"mrow"},"\u7684\u89e3\u6cd5\uff1a")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(\\log (m+n))\u7684\u89e3\u6cd5\uff1a")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mop"},"lo",(0,m.kt)("span",{parentName:"span",style:{marginRight:"0.01389em"}},"g")),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"),(0,m.kt)("span",{parentName:"span",className:"mord cjk_fallback"},"\u7684"),(0,m.kt)("span",{parentName:"span",className:"mord cjk_fallback"},"\u89e3"),(0,m.kt)("span",{parentName:"span",className:"mord cjk_fallback"},"\u6cd5"),(0,m.kt)("span",{parentName:"span",className:"mord cjk_fallback"},"\uff1a")))))),(0,m.kt)("p",null,"key\uff1a\u7531\u4e8eA\u548cB\u90fd\u662f",(0,m.kt)("strong",{parentName:"p"},"\u6709\u5e8f"),"\u7684\n\u5047\u8bbeA\u548cB\u7684\u5143\u7d20\u4e2a\u6570\u90fd\u5927\u4e8ek/2\uff0c\u6211\u4eec\u5c06A\u7684\u7b2ck/2\u4e2a\u5143\u7d20\uff08\u5373A","[k/2-1]","\uff09\u548cB\u7684\u7b2ck/2\u4e2a\u5143\u7d20\uff08\u5373B","[k/2-1]","\uff09\u8fdb\u884c\u6bd4\u8f83\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5\uff08\u5148\u5047\u8bbe\u4e3a\u5076\u6570\uff0c\u6240\u5f97\u5230\u7684\u7ed3\u8bba\u5bf9\u4e8ek\u662f\u5947\u6570\u4e5f\u662f\u6210\u7acb\u7684\uff09\uff1a"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},"\u5982\u679cA","[k/2-1]","  < B","[k/2-1]","\uff0cA","[k/2-1]","\u4e0d\u53ef\u80fd\u5927\u4e8e",(0,m.kt)("span",{parentName:"li",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"A"),(0,m.kt)("mo",{parentName:"mrow"},"\u222a"),(0,m.kt)("mi",{parentName:"mrow"},"B")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"A \\cup B")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"A"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"\u222a"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05017em"}},"B"))))),"\uff0c\u5220\u9664A\u6570\u7ec4\u7684\u8fd9k/2\u4e2a\u5143\u7d20"),(0,m.kt)("li",{parentName:"ul"},"\u5982\u679cA","[k/2-1]"," > B","[k/2-1]","\u65f6\u540c\u7406\uff0c\u53ef\u4ee5\u5220\u9664B\u6570\u7ec4\u7684k/2\u4e2a\u5143\u7d20\u3002"),(0,m.kt)("li",{parentName:"ul"},"\u5f53A","[k/2\u20141]"," == B","[k/2\u20141]","\u65f6\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u7b2ck\u5927\u7684\u5143\u7d20\uff0c\u76f4\u63a5\u8fd4\u56deA","[k/2\u20141]","\u6216B","[k/2\u20141]","\u5373\u53ef\u3002")),(0,m.kt)("p",null,"\u56e0\u6b64\uff0c\u53ef\u4ee5\u9012\u5f52\u51fd\u6570\u3002\u51fd\u6570\u7ec8\u6b62\u6761\u4ef6\uff1a"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},"\u5f53A\u6216B\u662f\u7a7a\u65f6,\u76f4\u63a5\u8fd4\u56deB","[k-1]","\u6216A","[k-1]"," ;"),(0,m.kt)("li",{parentName:"ul"},"\u5f53k-1\u662f,\u8fd4\u56demin(A ","[0]",", B ","[0]",");"),(0,m.kt)("li",{parentName:"ul"},"\u5f53A ","[k/2-1]"," == B","[k/2-1]","\u65f6,\u8fd4\u56deA","[k/2-1]","\u6216B","[k/2-1]")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        int total = nums1.size() + nums2.size();\n        if (total & 0x1) {\n          return getKth(nums1, nums2, total / 2 + 1);\n        } else {\n          return (getKth(nums1, nums2, total / 2) + getKth(nums1, nums2, total / 2 + 1)) / 2.0;\n        }\n        return -1;\n    }\nprivate:\n   double getKth(vector<int> &n1, vector<int> &n2, int k) {\n        int p1 = 0, p2 = 0, len1 = n1.size(), len2 = n2.size();\n        while (1) {\n            if (p1 == len1) return n2[p2 + k - 1];\n            if (p2 == len2) return n1[p1 + k - 1];\n            if (k == 1) return min(n1[p1], n2[p2]);\n            int x1 = min(p1 + k / 2 - 1, len1 - 1);\n            int x2 = min(p2 + k / 2 - 1, len2 - 1);\n            if (n1[x1] < n2[x2]) {\n                k -= x1 - p1 + 1;\n                p1 = x1 + 1;\n            } else {\n                k -= x2 - p2 + 1;\n                p2 = x2 + 1;\n            }\n        }\n        return -1;\n    }\n\n};\n")),(0,m.kt)("h4",{id:"88\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/merge-sorted-array/description/"},"88.\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4")),(0,m.kt)("blockquote",null,(0,m.kt)("p",{parentName:"blockquote"},"\u7ed9\u4f60\u4e24\u4e2a\u6309 ",(0,m.kt)("strong",{parentName:"p"},"\u975e\u9012\u51cf\u987a\u5e8f")," \u6392\u5217\u7684\u6574\u6570\u6570\u7ec4 ",(0,m.kt)("inlineCode",{parentName:"p"},"nums1")," \u548c ",(0,m.kt)("inlineCode",{parentName:"p"},"nums2"),"\uff0c\u53e6\u6709\u4e24\u4e2a\u6574\u6570 ",(0,m.kt)("inlineCode",{parentName:"p"},"m")," \u548c ",(0,m.kt)("inlineCode",{parentName:"p"},"n")," \uff0c\u5206\u522b\u8868\u793a ",(0,m.kt)("inlineCode",{parentName:"p"},"nums1")," \u548c ",(0,m.kt)("inlineCode",{parentName:"p"},"nums2")," \u4e2d\u7684\u5143\u7d20\u6570\u76ee\u3002"),(0,m.kt)("p",{parentName:"blockquote"},"\u8bf7\u4f60 ",(0,m.kt)("strong",{parentName:"p"},"\u5408\u5e76")," ",(0,m.kt)("inlineCode",{parentName:"p"},"nums2")," \u5230 ",(0,m.kt)("inlineCode",{parentName:"p"},"nums1")," \u4e2d\uff0c\u4f7f\u5408\u5e76\u540e\u7684\u6570\u7ec4\u540c\u6837\u6309 ",(0,m.kt)("strong",{parentName:"p"},"\u975e\u9012\u51cf\u987a\u5e8f")," \u6392\u5217\u3002"),(0,m.kt)("p",{parentName:"blockquote"},(0,m.kt)("strong",{parentName:"p"},"\u6ce8\u610f\uff1a"),"\u6700\u7ec8\uff0c\u5408\u5e76\u540e\u6570\u7ec4\u4e0d\u5e94\u7531\u51fd\u6570\u8fd4\u56de\uff0c\u800c\u662f\u5b58\u50a8\u5728\u6570\u7ec4 ",(0,m.kt)("inlineCode",{parentName:"p"},"nums1")," \u4e2d\u3002")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n        int i = m - 1, j = n - 1, tar = m + n - 1;\n        while (j >= 0) {\n            nums1[tar--] = i >= 0 && nums1[i] > nums2[j] ? nums1[i--]  : nums2[j--];\n        }\n    }\n};\n")),(0,m.kt)("h4",{id:"128\u6700\u957f\u8fde\u7eed\u5e8f\u5217"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/longest-consecutive-sequence/description/"},"128.\u6700\u957f\u8fde\u7eed\u5e8f\u5217")),(0,m.kt)("blockquote",null,(0,m.kt)("p",{parentName:"blockquote"},"\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4 ",(0,m.kt)("inlineCode",{parentName:"p"},"nums")," \uff0c\u627e\u51fa\u6570\u5b57\u8fde\u7eed\u7684\u6700\u957f\u5e8f\u5217\uff08\u4e0d\u8981\u6c42\u5e8f\u5217\u5143\u7d20\u5728\u539f\u6570\u7ec4\u4e2d\u8fde\u7eed\uff09\u7684\u957f\u5ea6\u3002"),(0,m.kt)("p",{parentName:"blockquote"},"\u8bf7\u4f60\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a ",(0,m.kt)("inlineCode",{parentName:"p"},"O(n)")," \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u3002")),(0,m.kt)("p",null,"\u5e8f\u5217\u5143\u7d20\u65e0\u5e8f\uff0cO(n),\u9996\u5148\u60f3\u5230\u54c8\u5e0c\u8868\u3002"),(0,m.kt)("p",null,"\u901a\u8fc7\u54c8\u5e0c\u8868\u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\u662f\u5426\u4f7f\u7528\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\uff0c\u4ee5\u8be5\u5143\u7d20\u4e3a\u4e2d\u5fc3\uff0c\u5de6\u53f3\u6269\u5f20\uff0c\u76f4\u5230\u4e0d\u8fde\u7eed\u4e3a\u6b62\uff0c\u8bb0\u5f55\u6700\u957f\u957f\u5ea6\u3002"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"        unordered_map<int, bool> used;\n        for (auto i : nums) used[i] = false;\n        int longest = 0;\n        for (auto i : nums) {\n            if (used[i]) continue;\n            int length = 1;\n            used[i] = true;\n            for (int j = i + 1; used.find(j) != used.end(); ++j) {\n                used[i] = true;\n                ++length;\n            }\n            for (int j = i - 1; used.find(j) != used.end(); --j) {\n                used[i] = true;\n                ++length;\n            }\n            longest = max(longest, length);\n        }\n        return longest;\n")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution\n{\npublic:\n    int longestConsecutive(vector<int> &nums)\n    {\n        if (nums.size() < 2) return nums.size();\n        sort(nums.begin(), nums.end());\n        int count = 1, maxCount = 1;\n        for (int i = 1; i < nums.size(); ++i) {\n            if (nums[i] != nums[i - 1] && nums[i] != nums[i - 1] + 1) {\n                count = 1;\n            } else if (nums[i] == nums[i - 1] + 1) {\n                count++;\n            }\n            maxCount = max(maxCount, count);\n        }\n        return maxCount;\n    }\n\n};\n\n        /*\n        unordered_set<int> set(nums.begin(), nums.end());\n        int res = 0;\n        for (auto nums[i] : nums) {\n            if (!set.count(nums[i])) continue;\n            set.erase(nums[i]); \n            int pre = nums[i] - 1, next = nums[i] + 1;\n            while (set.count(pre)) set.erase(pre--);\n            while (set.count(next)) set.erase(next++);\n            res = max(res, next - pre - 1);\n        }\n        return res;\n        */\n")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class UnionSet\n{\npublic:\n    vector<int> size, father;\n    void init(int n) {\n        father.resize(n + 5);\n        size.resize(n + 5);\n        for (int i = 0; i <= n; i++) {\n            father[i] = i;\n            size[i] = 1;\n        }\n        return ;\n    }\n    int get(int x) {\n        return father[x] = (father[x] == x ? x : get(father[x]));\n    }\n    void merge(int a, int b) {\n        int fa = get(a), fb = get(b);\n        if (fa == fb) return ;\n        father[fa] = fb;\n        size[fb] += size[fa];\n        return ;\n    }\n};\nclass Solution\n{\npublic:\n    int longestConsecutive(vector<int> &nums)\n    {\n        unordered_map<int, int> s;\n        u.init(nums.size());\n        for (int i = 0; i < nums.size(); i++) {\n            int val = nums[i];\n            if (s.find(val) != s.end()) continue;\n            if (s.find(val - 1) != s.end()) {\n                u.merge(s[val - 1], i);\n            }\n            if (s.find(val + 1) != s.end()) {\n                u.merge(s[val + 1], i);\n            }\n            s[val] = i;\n        }\n        int ans = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            ans = max(ans, u.size[i]);\n        }\n        return ans;\n    }\n\nprivate:\n    UnionSet u;\n};\n")),(0,m.kt)("h4",{id:"1\u4e24\u6570\u4e4b\u548c"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/two-sum/description/"},"1.\u4e24\u6570\u4e4b\u548c")),(0,m.kt)("blockquote",null,(0,m.kt)("p",{parentName:"blockquote"},"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 ",(0,m.kt)("inlineCode",{parentName:"p"},"nums")," \u548c\u4e00\u4e2a\u6574\u6570\u76ee\u6807\u503c ",(0,m.kt)("inlineCode",{parentName:"p"},"target"),"\uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa ",(0,m.kt)("strong",{parentName:"p"},"\u548c\u4e3a\u76ee\u6807\u503c")," ",(0,m.kt)("em",{parentName:"p"},(0,m.kt)("inlineCode",{parentName:"em"},"target"))," \u7684\u90a3 ",(0,m.kt)("strong",{parentName:"p"},"\u4e24\u4e2a")," \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u5b83\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> s;\n        vector<int> ret;\n        for (int i = 0; i < nums.size(); ++i) {\n            if (s.find(target - nums[i]) != s.end()) {\n                ret.push_back(s[target - nums[i]]);\n                ret.push_back(i);\n                break;\n            }\n            s[nums[i]] = i;\n        }\n        return ret;\n    }\n}\n")),(0,m.kt)("h4",{id:"15\u4e09\u6570\u4e4b\u548c"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/3sum/description/"},"15.\u4e09\u6570\u4e4b\u548c")),(0,m.kt)("blockquote",null,(0,m.kt)("p",{parentName:"blockquote"},"\u7ed9\u4f60\u4e00\u4e2a\u5305\u542b ",(0,m.kt)("inlineCode",{parentName:"p"},"n")," \u4e2a\u6574\u6570\u7684\u6570\u7ec4 ",(0,m.kt)("inlineCode",{parentName:"p"},"nums"),"\uff0c\u5224\u65ad ",(0,m.kt)("inlineCode",{parentName:"p"},"nums")," \u4e2d\u662f\u5426\u5b58\u5728\u4e09\u4e2a\u5143\u7d20 ",(0,m.kt)("em",{parentName:"p"},"a\uff0cb\uff0cc \uff0c"),"\u4f7f\u5f97 ",(0,m.kt)("em",{parentName:"p"},"a + b + c =")," 0 \uff1f\u8bf7\u4f60\u627e\u51fa\u6240\u6709\u548c\u4e3a ",(0,m.kt)("inlineCode",{parentName:"p"},"0")," \u4e14\u4e0d\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002"),(0,m.kt)("p",{parentName:"blockquote"},(0,m.kt)("strong",{parentName:"p"},"\u6ce8\u610f\uff1a"),"\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        vector<vector<int>> res;\n        if (nums.size() < 3) return res; \n        sort(nums.begin(), nums.end());\n        for (int i = 0, I = nums.size() - 2; i < I; i++) {\n            if (i && nums[i] == nums[i - 1]) continue;\n            int j = i + 1, k = nums.size() - 1;\n            int target = -nums[i];\n            while (j < k) {\n                if (nums[j] + nums[k] == target) {\n                    res.push_back({nums[i], nums[j], nums[k]});\n                    j++, k--;\n                    while (j < k && nums[j] == nums[j - 1]) j++;\n                    while (j < k && nums[k] == nums[k + 1]) k--;\n                } else if (nums[j] + nums[k] < target) {\n                    j++;\n                    while (j < k && nums[j] == nums[j - 1]) j++;\n                } else {\n                    k--;\n                    while (j < k && nums[k] == nums[k + 1]) k--;\n                }\n            }\n        } \n        return res;\n    }\n};\n")),(0,m.kt)("h4",{id:"16\u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/3sum-closest/description/"},"16.\u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c")),(0,m.kt)("blockquote",null,(0,m.kt)("p",{parentName:"blockquote"},"\u7ed9\u5b9a\u4e00\u4e2a\u5305\u62ec ",(0,m.kt)("em",{parentName:"p"},"n")," \u4e2a\u6574\u6570\u7684\u6570\u7ec4 ",(0,m.kt)("inlineCode",{parentName:"p"},"nums")," \u548c \u4e00\u4e2a\u76ee\u6807\u503c ",(0,m.kt)("inlineCode",{parentName:"p"},"target"),"\u3002\u627e\u51fa ",(0,m.kt)("inlineCode",{parentName:"p"},"nums")," \u4e2d\u7684\u4e09\u4e2a\u6574\u6570\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u4e0e ",(0,m.kt)("inlineCode",{parentName:"p"},"target")," \u6700\u63a5\u8fd1\u3002\u8fd4\u56de\u8fd9\u4e09\u4e2a\u6570\u7684\u548c\u3002\u5047\u5b9a\u6bcf\u7ec4\u8f93\u5165\u53ea\u5b58\u5728\u552f\u4e00\u7b54\u6848\u3002")),(0,m.kt)("p",null,"\u5148\u6392\u5e8f\uff0c\u5de6\u53f3\u5939\u903c"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int threeSumClosest(vector<int>& nums, int target) {\n        int size = nums.size(), flag = 0;\n        sort(nums.begin(), nums.end());\n        int diff = INT_MAX, ans = 0;\n        for (auto a = nums.begin(); a != prev(nums.end(), 2); ++a) {\n            auto b = next(a);\n            auto c = prev(nums.end());\n            while (b < c) {\n                int sum = *a + *b + *c;\n                int gap = abs(sum - target);\n                if (gap < diff) {\n                    ans = sum;\n                    diff = gap;\n                }\n                sum < target ? ++b : --c;\n            }\n\n        }\n        return ans;\n    }\n};\n")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int threeSumClosest(vector<int>& nums, int target) {\n        int size = nums.size(), flag = 0;\n        sort(nums.begin(), nums.end());\n        int diff = INT_MAX, ans = 0;\n        for (int i = 0; i < size - 2; i++) {\n            // value = target - nums[i];\n            if (i > 0 && nums[i] == nums[i - 1]) continue;\n            int l = i + 1, r = size - 1;\n            while (l < r) {\n                int  sum = nums[l] + nums[r] + nums[i];\n                if (sum == target) {\n                    flag = 1;\n                    ans = sum;\n                    break;\n                }\n                if (abs(sum - target) < diff) {\n                    ans = sum;\n                    diff = abs(sum - target);\n                }\n                sum < target ? l++ : r--;\n            }\n            if (flag) break;\n        }\n\n        return ans;\n    }\n};\n")),(0,m.kt)("h4",{id:"18\u56db\u6570\u4e4b\u548c"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/4sum/description/"},"18.\u56db\u6570\u4e4b\u548c")),(0,m.kt)("blockquote",null,(0,m.kt)("p",{parentName:"blockquote"},"\u7ed9\u4f60\u4e00\u4e2a\u7531 ",(0,m.kt)("inlineCode",{parentName:"p"},"n")," \u4e2a\u6574\u6570\u7ec4\u6210\u7684\u6570\u7ec4 ",(0,m.kt)("inlineCode",{parentName:"p"},"nums")," \uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u503c ",(0,m.kt)("inlineCode",{parentName:"p"},"target")," \u3002\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u6ee1\u8db3\u4e0b\u8ff0\u5168\u90e8\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u56db\u5143\u7ec4 ",(0,m.kt)("inlineCode",{parentName:"p"},"[nums[a], nums[b], nums[c], nums[d]]")," \uff1a"),(0,m.kt)("ul",{parentName:"blockquote"},(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"0 <= a, b, c, d < n")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"a"),"\u3001",(0,m.kt)("inlineCode",{parentName:"li"},"b"),"\u3001",(0,m.kt)("inlineCode",{parentName:"li"},"c")," \u548c ",(0,m.kt)("inlineCode",{parentName:"li"},"d")," ",(0,m.kt)("strong",{parentName:"li"},"\u4e92\u4e0d\u76f8\u540c")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"nums[a] + nums[b] + nums[c] + nums[d] == target")))),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    vector<vector<int>> fourSum(vector<int>& nums, int target) {\n        vector<vector<int>> res;\n        if (nums.size() < 4) return res;\n        sort(nums.begin(), nums.end());\n        for (int i = 0; i < nums.size() - 3; ++i) {\n            if (i && nums[i] == nums[i - 1]) continue; //nums[i]\u53d8\n            for (int j = i + 1; j < nums.size() - 2; ++j) {\n                if (j > i + 1 && nums[j] == nums[j - 1]) continue; //nums[j]\u53d8\n                int a = j + 1, b = nums.size() - 1;\n                while (a < b) {\n                    if (nums[a] + nums[b] - target == -(nums[i] + nums[j])) { //\u9632\u6ea2\u51fa\n                        cout << nums[i] << " " << nums[j] << " " << nums[a] << " " << nums[b] << endl;\n                        res.push_back({nums[i], nums[j], nums[a], nums[b]});\n                        ++a;\n                        --b;\n                        while (a < b && nums[a] == nums[a - 1]) ++a;\n                        while (a < b && nums[b] == nums[b + 1]) --b;\n                    } else if (nums[a] + nums[b] - target < -(nums[i] + nums[j])) {\n                        ++a;\n                    } else {\n                        --b;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n};\n')),(0,m.kt)("h2",{id:"\u5355\u94fe\u8868"},"\u5355\u94fe\u8868"),(0,m.kt)("h4",{id:"\u5220\u9664\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9lc19"},"\u5220\u9664\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9LC19"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n     struct ListNode ret, *p, *q;\n    ret.next = head;\n    p = q = &ret;\n    for (int i = 1; i <= n + 1; i++) {\n        q = q->next;\n    }\n    while (q != NULL) {\n        p = p->next;\n        q = q->next;\n    }\n    p->next = p->next->next;\n    free(q);\n    return ret.next;\n    }\n};\n")),(0,m.kt)("h4",{id:"\u4e24\u4e24\u4ea4\u6362\u94fe\u4e2d\u8282\u70b9lc24"},"\u4e24\u4e24\u4ea4\u6362\u94fe\u4e2d\u8282\u70b9LC24"),(0,m.kt)("p",null,"ret->1->2->3->4"),(0,m.kt)("p",null,"p        q"),(0,m.kt)("p",null,"\u5148\u5220\u63891\u8282\u70b9,\u5728\u63d2\u51651\u8282\u70b9"),(0,m.kt)("p",null,"ret->2->3->4\u63d21"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        if (head == NULL|| head->next == NULL) return head;\n        struct ListNode ret,*p , *q;\n        ret.next = head;\n        p = &ret;\n         q = head;\n        while (q && q->next) {\n            p->next = q->next;\n            q->next = p->next->next;\n            p->next->next = q;\n            p = q;\n            q = q->next;\n        }\n        return ret.next;\n    }\n};\n")),(0,m.kt)("h4",{id:"\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u91cd\u590d\u5143\u7d20lc83"},"\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u91cd\u590d\u5143\u7d20LC83"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"public ListNode deleteDuplicates(ListNode head) {\n    ListNode current = head;\n    while (current != null && current.next != null) {\n        if (current.next.val == current.val) {\n            current.next = current.next.next;\n        } else {\n            current = current.next;\n        }\n    }\n    return head;\n}\n")),(0,m.kt)("h4",{id:"\u73af\u5f62\u94fe\u8868lc141"},"\u73af\u5f62\u94fe\u8868LC141"),(0,m.kt)("p",null,"\u5feb\u6162\u6307\u9488"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"public boolean hasCycle(ListNode head) {\n    if (head == null || head.next == null) {\n        return false;\n    }\n    ListNode slow = head;\n    ListNode fast = head.next;\n    while (slow != fast) {\n        if (fast == null || fast.next == null) {\n            return false;\n        }\n        slow = slow.next;\n        fast = fast.next.next;\n    }\n    return true;\n}\n")),(0,m.kt)("h4",{id:"\u76f8\u4ea4\u94fe\u8868lc160"},"\u76f8\u4ea4\u94fe\u8868LC160"),(0,m.kt)("p",null,"\u6d88\u9664\u8ddd\u79bb\u5dee"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cp"},"public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n    if (headA == null || headB == null) return null;\n    ListNode pA = headA, pB = headB;\n    while (pA != pB) {\n        pA = pA == null ? headB : pA.next;\n        pB = pB == null ? headA : pB.next;\n    }\n    return pA;\n}\n")),(0,m.kt)("h4",{id:"\u5947\u5076\u94fe\u8868lc328"},"\u5947\u5076\u94fe\u8868LC328"),(0,m.kt)("p",null,"\u65ad\u5f00\u6210\u4e24\u4e2a\u94fe\u8868(\u5947,\u5076);\u518d\u76f8\u8fde"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"public class Solution {\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null) return null;\n        ListNode odd = head, even = head.next, evenHead = even;\n        while (even != null && even.next != null) {\n            odd.next = even.next;\n            odd = odd.next;\n            even.next = odd.next;\n            even = even.next;\n        }\n        odd.next = evenHead;\n        return head;\n    }\n}\n")),(0,m.kt)("h2",{id:""}),(0,m.kt)("h2",{id:"\u8d2a\u5fc3"},"\u8d2a\u5fc3"),(0,m.kt)("h4",{id:"455\u5206\u53d1\u7cd6\u679c"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/candy/description/"},"455.\u5206\u53d1\u7cd6\u679c")),(0,m.kt)("blockquote",null,(0,m.kt)("p",{parentName:"blockquote"},"\u8001\u5e08\u60f3\u7ed9\u5b69\u5b50\u4eec\u5206\u53d1\u7cd6\u679c\uff0c\u6709 ",(0,m.kt)("em",{parentName:"p"},"N")," \u4e2a\u5b69\u5b50\u7ad9\u6210\u4e86\u4e00\u6761\u76f4\u7ebf\uff0c\u8001\u5e08\u4f1a\u6839\u636e\u6bcf\u4e2a\u5b69\u5b50\u7684\u8868\u73b0\uff0c\u9884\u5148\u7ed9\u4ed6\u4eec\u8bc4\u5206\u3002"),(0,m.kt)("p",{parentName:"blockquote"},"\u4f60\u9700\u8981\u6309\u7167\u4ee5\u4e0b\u8981\u6c42\uff0c\u5e2e\u52a9\u8001\u5e08\u7ed9\u8fd9\u4e9b\u5b69\u5b50\u5206\u53d1\u7cd6\u679c\uff1a"),(0,m.kt)("ul",{parentName:"blockquote"},(0,m.kt)("li",{parentName:"ul"},"\u6bcf\u4e2a\u5b69\u5b50\u81f3\u5c11\u5206\u914d\u5230 1 \u4e2a\u7cd6\u679c\u3002"),(0,m.kt)("li",{parentName:"ul"},"\u8bc4\u5206\u66f4\u9ad8\u7684\u5b69\u5b50\u5fc5\u987b\u6bd4\u4ed6\u4e24\u4fa7\u7684\u90bb\u4f4d\u5b69\u5b50\u83b7\u5f97\u66f4\u591a\u7684\u7cd6\u679c\u3002")),(0,m.kt)("p",{parentName:"blockquote"},"\u90a3\u4e48\u8fd9\u6837\u4e0b\u6765\uff0c\u8001\u5e08\u81f3\u5c11\u9700\u8981\u51c6\u5907\u591a\u5c11\u9897\u7cd6\u679c\u5462\uff1f")),(0,m.kt)("p",null,"\u53ea\u9700\u8981\u7b80\u5355\u7684\u4e24\u6b21\u904d\u5386\u5373\u53ef\uff1a\u628a\u6240\u6709\u5b69\u5b50\u7684\u7cd6\u679c\u6570\u521d\u59cb\u5316\u4e3a 1\uff1b\n\u5148\u4ece\u5de6\u5f80\u53f3\u904d\u5386\u4e00\u904d\uff0c\u5982\u679c\u53f3\u8fb9\u5b69\u5b50\u7684\u8bc4\u5206\u6bd4\u5de6\u8fb9\u7684\u9ad8\uff0c\u5219\u53f3\u8fb9\u5b69\u5b50\u7684\u7cd6\u679c\u6570\u66f4\u65b0\u4e3a\u5de6\u8fb9\u5b69\u5b50\u7684\u7cd6\u679c\u6570\u52a0 1\uff1b\u518d\u4ece\u53f3\u5f80\u5de6\u904d\u5386\u4e00\u904d\uff0c\u5982\u679c\u5de6\u8fb9\u5b69\u5b50\u7684\u8bc4\u5206\u6bd4\u53f3\u8fb9\u7684\u9ad8\uff0c\u4e14\u5de6\u8fb9\u5b69\u5b50\u5f53\u524d\u7684\u7cd6\u679c\u6570\u4e0d\u5927\u4e8e\u53f3\u8fb9\u5b69\u5b50\u7684\u7cd6\u679c\u6570\uff0c\u5219\u5de6\u8fb9\u5b69\u5b50\u7684\u7cd6\u679c\u6570\u66f4\u65b0\u4e3a\u53f3\u8fb9\u5b69\u5b50\u7684\u7cd6\u679c\u6570\u52a0 1\u3002\u901a\u8fc7\u8fd9\u4e24\u6b21\u904d\u5386\uff0c\u5206\u914d\u7684\u7cd6\u679c\u5c31\u53ef\u4ee5\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u4e86\u3002"),(0,m.kt)("p",null,"\u8d2a\u5fc3\u7b56\u7565\u5373\u4e3a\uff0c\u5728\u6bcf\u6b21\u904d\u5386\u4e2d\uff0c\u53ea\u8003\u8651\u5e76\u66f4\u65b0\u76f8\u90bb\u4e00\u4fa7\u7684\u5927\u5c0f\u5173\u7cfb\u3002"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int candy(vector<int>& ratings) {\n        int size = ratings.size();\n        if (size == 1) return 1;\n        vector<int> num(size, 1);\n        for (int i = 1; i < size; i++) {\n            if (ratings[i] > ratings[i - 1]) {\n                num[i] = num[i - 1] + 1;\n            }\n        }\n        for (int i = size - 2; i >= 0; i--) {\n            if (ratings[i] > ratings[i + 1] && num[i] <= num[i + 1]) {\n                num[i] = num[i + 1] + 1;\n            }\n        }\n        return accumulate(num.begin(), num.end(), 0);\n    }\n};\n")),(0,m.kt)("h2",{id:"\u5feb\u6162\u6307\u9488"},"\u5feb\u6162\u6307\u9488"),(0,m.kt)("ol",null,(0,m.kt)("li",{parentName:"ol"},"\u8ba1\u7b97\u94fe\u8868\u7684\u4e2d\u70b9\uff1a\u5feb\u6162\u6307\u9488\u4ece\u5934\u8282\u70b9\u51fa\u53d1\uff0c\u6bcf\u8f6e\u8fed\u4ee3\u4e2d\uff0c\u5feb\u6307\u9488\u5411\u524d\u79fb\u52a8\u4e24\u4e2a\u8282\u70b9\uff0c\u6162\u6307\u9488\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\uff0c\u6700\u7ec8\u5f53\u5feb\u6307\u9488\u5230\u8fbe\u7ec8\u70b9\u7684\u65f6\u5019\uff0c\u6162\u6307\u9488\u521a\u597d\u5728\u4e2d\u95f4\u7684\u8282\u70b9\u3002"),(0,m.kt)("li",{parentName:"ol"},"\u5224\u65ad\u94fe\u8868\u662f\u5426\u6709\u73af\uff1a\u5982\u679c\u94fe\u8868\u4e2d\u5b58\u5728\u73af\uff0c\u5219\u5728\u94fe\u8868\u4e0a\u4e0d\u65ad\u524d\u8fdb\u7684\u6307\u9488\u4f1a\u4e00\u76f4\u5728\u73af\u91cc\u7ed5\u5708\u5b50\uff0c\u4e14\u4e0d\u80fd\u77e5\u9053\u94fe\u8868\u662f\u5426\u6709\u73af\u3002\u4f7f\u7528\u5feb\u6162\u6307\u9488\uff0c\u5f53\u94fe\u8868\u4e2d\u5b58\u5728\u73af\u65f6\uff0c\u4e24\u4e2a\u6307\u9488\u6700\u7ec8\u4f1a\u5728\u73af\u4e2d\u76f8\u9047\u3002"),(0,m.kt)("li",{parentName:"ol"},"\u5224\u65ad\u94fe\u8868\u4e2d\u73af\u7684\u8d77\u70b9\uff1a\u5f53\u6211\u4eec\u5224\u65ad\u51fa\u94fe\u8868\u4e2d\u5b58\u5728\u73af\uff0c\u5e76\u4e14\u77e5\u9053\u4e86\u4e24\u4e2a\u6307\u9488\u76f8\u9047\u7684\u8282\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u5176\u4e2d\u4efb\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5934\u8282\u70b9\uff0c\u7136\u540e\u8ba9\u5b83\u4fe9\u4ee5\u76f8\u540c\u901f\u5ea6\u524d\u8fdb\uff0c\u518d\u6b21\u76f8\u9047\u65f6\u6240\u5728\u7684\u8282\u70b9\u4f4d\u7f6e\u5c31\u662f\u73af\u5f00\u59cb\u7684\u4f4d\u7f6e\u3002"),(0,m.kt)("li",{parentName:"ol"},"\u6c42\u94fe\u8868\u4e2d\u73af\u7684\u957f\u5ea6\uff1a\u53ea\u8981\u76f8\u9047\u540e\u4e00\u4e2a\u4e0d\u52a8\uff0c\u53e6\u4e00\u4e2a\u524d\u8fdb\u76f4\u5230\u76f8\u9047\u7b97\u4e00\u4e0b\u8d70\u4e86\u591a\u5c11\u6b65\u5c31\u597d\u4e86"),(0,m.kt)("li",{parentName:"ol"},"\u6c42\u94fe\u8868\u5012\u6570\u7b2ck\u4e2a\u5143\u7d20\uff1a\u5148\u8ba9\u5176\u4e2d\u4e00\u4e2a\u6307\u9488\u5411\u524d\u8d70k\u6b65\uff0c\u63a5\u7740\u4e24\u4e2a\u6307\u9488\u4ee5\u540c\u6837\u7684\u901f\u5ea6\u4e00\u8d77\u5411\u524d\u8fdb\uff0c\u76f4\u5230\u524d\u9762\u7684\u6307\u9488\u8d70\u5230\u5c3d\u5934\u4e86\uff0c\u5219\u540e\u9762\u7684\u6307\u9488\u5373\u4e3a\u5012\u6570\u7b2ck\u4e2a\u5143\u7d20\u3002\uff08\u4e25\u683c\u6765\u8bf4\u5e94\u8be5\u53eb\u5148\u540e\u6307\u9488\u800c\u975e\u5feb\u6162\u6307\u9488\uff09"),(0,m.kt)("li",{parentName:"ol"},"\u627e\u552f\u4e00\u91cd\u590d\u5143\u7d20")),(0,m.kt)("h4",{id:"19\u5220\u9664\u7b2cn\u4e2a\u8282\u70b9"},"19.\u5220\u9664\u7b2cn\u4e2a\u8282\u70b9"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-c"},"struct ListNode* removeNthFromEnd(struct ListNode* head, int n) {\n    struct ListNode ret, *p, *q;\n    ret.next = head;\n    p = q = &ret;\n    while (n--) { q = q->next; }\n    q = q->next;\n    while (q) {\n        p = p->next;\n        q = q->next;\n    }\n    q = p->next;\n    p->next = q->next;\n    free(q);\n    return ret.next;\n}\n")),(0,m.kt)("h4",{id:"24\u4e24\u4e24\u4ea4\u6362"},"24.\u4e24\u4e24\u4ea4\u6362"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-c"},"struct ListNode* swapPairs(struct ListNode* head) {\n    struct ListNode *p, *q, ret;\n    ret.next = head;\n    p = &ret;\n    q = head;\n    while (q && q->next) {\n        p->next = q->next;\n        q->next = p->next->next;\n        p->next->next = q;\n        p = q;\n        q = q->next; \n    }\n    return ret.next;\n}\n")),(0,m.kt)("h4",{id:"83\u5220\u9664\u6392\u5e8f\u94fe\u8868\u91cd\u590d\u503c"},"83.\u5220\u9664\u6392\u5e8f\u94fe\u8868\u91cd\u590d\u503c"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-c"},"struct ListNode* deleteDuplicates(struct ListNode* head) {\n    struct ListNode *p = head, *q;\n    while (p && p->next) {\n        if (p->val - p->next->val) {\n            p = p->next;\n        } else {\n            q = p->next;\n            p->next = q->next;\n            free(q);\n        }\n    }\n    return head;\n}\n")),(0,m.kt)("h4",{id:"141\u5224\u5708"},"141.\u5224\u5708"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-c"},"bool hasCycle(struct ListNode *head) {\n    struct ListNode *p = head, *q = head;\n    if (p == NULL) return false;\n    do {\n        p = p->next;\n        q = q->next;\n        if (q == NULL || q->next == NULL) return false; \n        q = q->next;\n    } while (p != q);\n    return true;\n}\n")),(0,m.kt)("h4",{id:"142\u73af\u5f62\u94fe\u8868"},"142.\u73af\u5f62\u94fe\u8868"),(0,m.kt)("p",null,"\u6307\u9488\u5df2\u7ecf\u8d70\u5b8c\u4e86\u73af\u7684 n \u5708\uff0c\u56e0\u6b64\u5b83\u8d70\u8fc7\u7684\u603b\u8ddd\u79bb\u4e3a ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"a"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"b"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("mi",{parentName:"mrow"},"c"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("mi",{parentName:"mrow"},"b"),(0,m.kt)("mo",{parentName:"mrow"},"="),(0,m.kt)("mi",{parentName:"mrow"},"a"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mi",{parentName:"mrow"},"b"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mi",{parentName:"mrow"},"c")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"a+n(b+c)+b=a+(n+1)b+nc")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.66666em",verticalAlign:"-0.08333em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"="),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.66666em",verticalAlign:"-0.08333em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"))))),"\u3002"),(0,m.kt)("p",null,(0,m.kt)("img",{alt:"142\u73af\u5f62\u94fe\u88682.png",src:n(69162).Z})),(0,m.kt)("p",null,(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"a"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mi",{parentName:"mrow"},"b"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mi",{parentName:"mrow"},"c"),(0,m.kt)("mo",{parentName:"mrow"},"="),(0,m.kt)("mn",{parentName:"mrow"},"2"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"a"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("mi",{parentName:"mrow"},"b"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mtext",{parentName:"mrow"},"\u2005\u200a"),(0,m.kt)("mo",{parentName:"mrow"},"\u27f9"),(0,m.kt)("mtext",{parentName:"mrow"},"\u2005\u200a"),(0,m.kt)("mi",{parentName:"mrow"},"a"),(0,m.kt)("mo",{parentName:"mrow"},"="),(0,m.kt)("mi",{parentName:"mrow"},"c"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mo",{parentName:"mrow"},"\u2212"),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"b"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("mi",{parentName:"mrow"},"c"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"a+(n+1)b+nc=2(a+b) \\implies a=c+(n-1)(b+c)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.66666em",verticalAlign:"-0.08333em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"="),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"2"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"\u27f9"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"="),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.66666em",verticalAlign:"-0.08333em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"))))),"\n\u6709\u4e86 ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"a"),(0,m.kt)("mo",{parentName:"mrow"},"="),(0,m.kt)("mi",{parentName:"mrow"},"c"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mtext",{parentName:"mrow"},"\u2212"),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"b"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("mi",{parentName:"mrow"},"c"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"a=c+(n\u22121)(b+c)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"="),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.66666em",verticalAlign:"-0.08333em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mord"},"\u2212"),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))," \u7684\u7b49\u91cf\u5173\u7cfb\uff0c"),(0,m.kt)("p",null,(0,m.kt)("strong",{parentName:"p"},"\u4ece\u5934\u7ed3\u70b9\u51fa\u53d1\u4e00\u4e2a\u6307\u9488\uff0c\u4ece\u76f8\u9047\u8282\u70b9 \u4e5f\u51fa\u53d1\u4e00\u4e2a\u6307\u9488\uff0c\u8fd9\u4e24\u4e2a\u6307\u9488\u6bcf\u6b21\u53ea\u8d70\u4e00\u4e2a\u8282\u70b9\uff0c \u90a3\u4e48\u5f53\u8fd9\u4e24\u4e2a\u6307\u9488\u76f8\u9047\u7684\u65f6\u5019\u5c31\u662f \u73af\u5f62\u5165\u53e3\u7684\u8282\u70b9")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        unordered_set<ListNode *> visited;\n        while (head != nullptr) {\n            if (visited.count(head)) {\n                return head;\n            }\n            visited.insert(head);\n            head = head->next;\n        }\n        return nullptr;\n    }\n};\n\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        if (!head) return nullptr;\n        ListNode *p = head, *q = head;\n        do {\n            p = p->next;\n            if (!q || !q->next) return nullptr;\n            q = q->next->next;\n        } while (p != q);\n        p = head;\n        while (p != q) {\n            p = p->next;\n            q = q->next;\n        }\n        return p;\n    }\n};\n")),(0,m.kt)("h4",{id:"202\u5feb\u4e50\u6570-\u4e00\u79cd\u89e3\u6cd5\u5224\u73af"},"202.\u5feb\u4e50\u6570-\u4e00\u79cd\u89e3\u6cd5\u5224\u73af"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-c"},"int get_next(int x) {\n    int temp = 0;\n    while (x) {\n        temp += (x % 10) * (x % 10);\n        x /= 10;\n    }\n    return temp;\n}\n\nbool isHappy(int n) {\n    int p = n, q = n;\n    while (q != 1) {\n        p = get_next(p);\n        q = get_next(get_next(q));\n        if (p == q) break;\n    }\n    return (q == 1);\n}\n")),(0,m.kt)("h4",{id:"160\u76f8\u4ea4\u94fe\u8868\u4ea4\u70b9"},"160.\u76f8\u4ea4\u94fe\u8868\u4ea4\u70b9"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-c"},"struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {\n    struct ListNode *p = headA, *q = headB;    \n    while (p != q) {\n        p = p ? p->next : headB;\n        q = q ? q->next : headA;\n    }\n    return p;\n}\n")),(0,m.kt)("h4",{id:"203\u5220\u9664\u6307\u5b9a\u503c"},"203.\u5220\u9664\u6307\u5b9a\u503c"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-c"},"struct ListNode* removeElements(struct ListNode* head, int val) {\n    struct ListNode ret, *p = &ret, *q;\n    ret.next = head;\n    while (p && p->next) {\n        if (p->next->val == val) {\n            q = p->next;\n            p->next = p->next->next;\n            free(q);\n        } else {\n            p = p->next;\n        }\n    }\n    return ret.next;\n}\n")),(0,m.kt)("h4",{id:"206\u53cd\u8f6c\u94fe\u8868"},"206.\u53cd\u8f6c\u94fe\u8868"),(0,m.kt)("p",null,(0,m.kt)("img",{alt:"8951bc3b8b7eb4da2a46063c1bb96932e7a69910c0a93d973bd8aa5517e59fc8",src:n(31558).Z})),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-c"},"class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        if (head == NULL || head->next == NULL) {\n            return head;\n        }\n        ListNode* ret = reverseList(head->next);\n        head->next->next = head;\n        head->next = NULL;\n        return ret;\n    }\n};\n\nstruct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode ret, *p = head, *q;\n    ret.next = NULL;\n    while (p) {\n        q = p->next;\n        p->next = ret.next;\n        ret.next = p;\n        p = q;\n    }\n    return ret.next;\n}\n\n\n//p:\u5934,q:\u5c3e,\u63d2\u5165q\u7684\u4e0b\u4e00\u4e2a\u503c\nListNode dummy, *p = &dummy, *q = head, *tmp = nullptr;\n        dummy.next = head;\n        while (q->next) {\n            tmp = p->next;\n            p->next = q->next;\n            q->next = q->next->next;\n            p->next->next = tmp;\n        }\n        return dummy.next;\n")),(0,m.kt)("h4",{id:"234\u56de\u6587\u94fe\u8868"},"234.\u56de\u6587\u94fe\u8868"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-c"},"int get_length(struct ListNode *head) {\n    int n = 0;\n    while (head) n += 1, head = head->next;\n    return n;\n}\n\nstruct ListNode *get_node(struct ListNode *head, int ind) {\n    while (ind--) head = head->next;\n    return head;\n}\n\nstruct ListNode *reverse(struct ListNode *head) {\n    struct ListNode ret, *p = head, *q;\n    ret.next = NULL;\n    while (p) {\n        q = p->next;\n        p->next = ret.next;\n        ret.next = p;\n        p = q;\n    }\n    return ret.next;\n}\n\nbool isPalindrome(struct ListNode* head) {\n    int len = get_length(head);\n    struct ListNode *p = head, *q = reverse(get_node(head, (len + 1) / 2));\n    while (q) {\n        if (p->val - q->val) return false;\n        p = p->next;\n        q = q->next;\n    }\n    return true;\n}\n")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-c"},"//\u5feb\u6162\u6307\u9488\nstruct ListNode *reverse(struct ListNode *head) {\n        ListNode ret, *p = head, *q;\n        ret.next = NULL;\n        while (p) {\n            q = p->next;\n            p->next = ret.next;\n            ret.next = p;\n            p = q;\n        }\n        return ret.next;\n    }\n    bool isPalindrome(ListNode* head) {\n        if (!head || !(head->next)) return true;\n        ListNode *p = head, *q = head->next;\n        while (q && q->next) {\n            p = p->next;\n            q = q->next->next;\n        }\n        q = reverse(p->next);\n        p = head;\n        while (q) {\n            if (p->val - q->val) return false;\n            p = p->next;\n            q = q->next;\n        }\n        return true;\n    }\n")),(0,m.kt)("h4",{id:"234\u602a\u5f02\u5220\u9664\u8282\u70b9"},"234.\u602a\u5f02\u5220\u9664\u8282\u70b9"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-c"},"void deleteNode(struct ListNode* node) {\n    struct ListNode *p = node->next;\n    node->val = p->val;\n    node->next = p->next;\n    free(p);\n    return ;\n}\n")),(0,m.kt)("h4",{id:"142\u627e\u73af\u8d77\u70b9"},"142.\u627e\u73af\u8d77\u70b9"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-c"},"void deleteNode(struct ListNode* node) {\n    struct ListNode *p = node->next;\n    node->val = p->val;\n    node->next = p->next;\n    free(p);\n    return ;\n}\n")),(0,m.kt)("h4",{id:"287\u627e\u552f\u4e00\u91cd\u590d\u6570-\u627e\u73af\u8d77\u70b9"},"287.\u627e\u552f\u4e00\u91cd\u590d\u6570-\u627e\u73af\u8d77\u70b9"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-c"},"int findDuplicate(int* nums, int numsSize){\n    int p = nums[0], q = nums[0];\n    do {\n        p = nums[p];\n        q = nums[nums[q]];\n    } while (p != q);\n    q = nums[0];\n    while (p != q) {\n        p = nums[p];\n        q = nums[q];\n    }\n    return p;\n}\n")),(0,m.kt)("h4",{id:"286\u5c11\u6570"},"286.\u5c11\u6570"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-c"},"int missingNumber(int* nums, int numsSize){\n    int ans = 0, n = numsSize + 1;\n    for (int i = 0, j = 2; ; i += 1, j *= 2) {\n        int cnt = n / j * (j >> 1);\n        if (n % j > (j >> 1)) {\n            cnt += n % j - (j >> 1);\n        }\n        if (cnt % 2) ans |= (1 << i);\n        if (j >= n) break;\n    }\n    for (int i = 0; i < numsSize; i++) ans ^= nums[i];\n    return ans;\n}\n")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-c"},"int missingNumber(int* nums, int numsSize){\n    for (int i = 0; i < numsSize; i++) {\n        while (nums[i] != i && nums[i] != numsSize) {\n            int a = nums[i], b = nums[nums[i]];\n            nums[a] = a, nums[i] = b;\n        }\n    }\n    for (int i = 0; i < numsSize; i++) {\n        if (nums[i] - i) return i;\n    }\n    return numsSize;\n}\n")),(0,m.kt)("p",null,"\u5f02\u6216"),(0,m.kt)("p",null,"\u6c42\u548c\u76f8\u51cf"),(0,m.kt)("h4",{id:"25-k-\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/reverse-nodes-in-k-group"},"25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        ListNode dummy, *pre = &dummy, *q = head;\n        pre->next = head;\n        for (int i = 0, I = length(head) / k; i < I; i++) {\n            for (int j = 1; j < k; j++) {\n                ListNode *tmp = pre->next;\n                pre->next =q->next;\n                q->next = q->next->next;\n                pre->next->next = tmp;\n            }\n            pre = q;\n            q = q->next;\n        }\n        return dummy.next;\n    }\n    int length(ListNode *head) {\n        int len = 0;\n        while (head) {\n            head = head->next;\n            len++;\n        }\n        return len;\n    }\n};\n")),(0,m.kt)("h4",{id:"\u725b\u5ba258\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u77e9\u5f62\u5185\u90e8cpp"},"\u725b\u5ba258.\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u77e9\u5f62\u5185\u90e8.cpp"),(0,m.kt)("p",null,(0,m.kt)("strong",{parentName:"p"},"\u5750\u6807\u53d8\u6362")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-c"},"bool is_inside(node leftup, node rightdown, node tar) {\n    if (tar.x <= leftup.x || tar.x >= rightdown.x) {\n        return false;\n    }\n    if (tar.y >= leftup.y || tar.y <= rightdown.y) {\n        return false;\n    }\n    return true;\n}\n\nbool calc() {\n    if (point[1].y == point[2].y) {\n        return is_inside(point[1], point[4], point[5]);\n    }\n    double xx = fabs(point[3].x - point[4].x);\n    double yy = fabs(point[3].y - point[4].y);\n    double l = sqrt(xx * xx + yy * yy);\n    double sin = yy / l;\n    double cos = xx / l;\n    node leftup, rightdown, tar; \n    leftup.x = point[1].x * cos + point[1].y * sin;\n    leftup.y = point[1].y * cos - point[1].x * sin;\n    rightdown.x = point[4].x * cos + point[4].y * sin;\n    rightdown.y = point[4].y * cos - point[4].x * sin;\n    tar.x = point[5].x * cos + point[5].y * sin;\n    tar.y = point[5].y * cos - point[5].x * sin;\n    return is_inside(leftup, rightdown, tar);\n}\n\n\n")),(0,m.kt)("p",null,(0,m.kt)("img",{alt:"20141016154254250",src:n(43312).Z})),(0,m.kt)("p",null,"\u6240\u4ee5(x0, y0)\u7ed5(a, b) \u65cb\u8f6cb\u5ea6\u540e\u5f97\u5230"),(0,m.kt)("p",null,"x = (x0 - a) ",(0,m.kt)("em",{parentName:"p"}," cosb + (y0 - b) ")," sinb."),(0,m.kt)("p",null,"y = (y0 - b) ",(0,m.kt)("em",{parentName:"p"}," cosb + (x0 - a) ")," sinb."),(0,m.kt)("p",null,(0,m.kt)("a",{parentName:"p",href:"https://blog.csdn.net/creat2012/article/details/40141929"},"https://blog.csdn.net/creat2012/article/details/40141929")),(0,m.kt)("p",null,(0,m.kt)("strong",{parentName:"p"},"\u5411\u91cf\u53c9\u4e58\u5224\u8fb9\u4fa7")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-c"},'// p1->p2 * p1->p\n \ndouble get_cross(node p1, node p2, node p) {\n    return (p2.x - p1.x) * (p. y - p1.y) - (p2.y - p1.y) * (p.x - p1.x);\n}\n int main() {\n    for (int i = 1; i < 5; ++i) {\n        cin >> point[i].x >> point[i].y;\n    }\n    cin >> point[0].x >> point[0].y;\n    if (get_cross(point[1], point[2], point[0]) * get_cross(point[3], point[4], point[0]) >= 0) {\n        cout << "No" << endl;\n        return 0;\n    }\n     \n    if (get_cross(point[1], point[3], point[0]) * get_cross(point[2], point[4], point[0]) >= 0) {\n        cout << "No" << endl;\n        return 0;\n    }\n \n    cout << "Yes" << endl;\n    return 0;\n}\n\n')),(0,m.kt)("h3",{id:"\u5411\u91cf\u7684\u70b9\u4e58a--b----\u6c42\u5939\u89d2"},"\u5411\u91cf\u7684\u70b9\u4e58:",(0,m.kt)("strong",{parentName:"h3"},"a")," * ",(0,m.kt)("strong",{parentName:"h3"},"b")," -- \u6c42\u5939\u89d2"),(0,m.kt)("p",null,"\u516c\u5f0f\uff1a",(0,m.kt)("strong",{parentName:"p"},"a")," ",(0,m.kt)("em",{parentName:"p"}," ",(0,m.kt)("strong",{parentName:"em"},"b")," = |",(0,m.kt)("strong",{parentName:"em"},"a"),"| ")," |",(0,m.kt)("strong",{parentName:"p"},"b"),"| * cos\u03b8\n\u70b9\u4e58\u53c8\u53eb\u5411\u91cf\u7684\u5185\u79ef\u3001\u6570\u91cf\u79ef\uff0c\u662f\u4e00\u4e2a\u5411\u91cf\u548c\u5b83\u5728\u53e6\u4e00\u4e2a\u5411\u91cf\u4e0a\u7684\u6295\u5f71\u7684\u957f\u5ea6\u7684\u4e58\u79ef\uff1b\u662f\u6807\u91cf\u3002\n\u70b9\u4e58\u53cd\u6620\u7740\u4e24\u4e2a\u5411\u91cf\u7684\u201c\u76f8\u4f3c\u5ea6\u201d\uff0c\u4e24\u4e2a\u5411\u91cf\u8d8a\u201c\u76f8\u4f3c\u201d\uff0c\u5b83\u4eec\u7684\u70b9\u4e58\u8d8a\u5927\u3002"),(0,m.kt)("h3",{id:"\u5411\u91cf\u7684\u53c9\u4e58\uff1aa-\u2227-b----\u6c42\u6cd5\u5411\u91cf"},"\u5411\u91cf\u7684\u53c9\u4e58\uff1a",(0,m.kt)("strong",{parentName:"h3"},"a")," \u2227 ",(0,m.kt)("strong",{parentName:"h3"},"b")," -- \u6c42\u6cd5\u5411\u91cf"),(0,m.kt)("p",null,(0,m.kt)("strong",{parentName:"p"},"a")," \u2227 ",(0,m.kt)("strong",{parentName:"p"},"b")," = |",(0,m.kt)("strong",{parentName:"p"},"a"),"| ",(0,m.kt)("em",{parentName:"p"}," |",(0,m.kt)("strong",{parentName:"em"},"b"),"| ")," sin\u03b8"),(0,m.kt)("p",null,"\u5411\u91cf\u79ef\u88ab\u5b9a\u4e49\u4e3a\uff1a\n\u6a21\u957f\uff1a\uff08\u5728\u8fd9\u91cc\u03b8\u8868\u793a\u4e24\u5411\u91cf\u4e4b\u95f4\u7684\u5939\u89d2(\u5171\u8d77\u70b9\u7684\u524d\u63d0\u4e0b)\uff080\xb0 \u2264 \u03b8 \u2264 180\xb0\uff09\uff0c\u5b83\u4f4d\u4e8e\u8fd9\u4e24\u4e2a\u77e2\u91cf\u6240\u5b9a\u4e49\u7684\u5e73\u9762\u4e0a\u3002\uff09\n\u65b9\u5411\uff1aa\u5411\u91cf\u4e0eb\u5411\u91cf\u7684\u5411\u91cf\u79ef\u7684\u65b9\u5411\u4e0e\u8fd9\u4e24\u4e2a\u5411\u91cf\u6240\u5728\u5e73\u9762\u5782\u76f4\uff0c\u4e14\u9075\u5b88\u53f3\u624b\u5b9a\u5219"),(0,m.kt)("div",{className:"math math-display"},(0,m.kt)("span",{parentName:"div",className:"katex-display"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mover",{parentName:"mrow",accent:"true"},(0,m.kt)("mi",{parentName:"mover"},"c"),(0,m.kt)("mo",{parentName:"mover"},"\u20d7")),(0,m.kt)("mo",{parentName:"mrow"},"="),(0,m.kt)("mover",{parentName:"mrow",accent:"true"},(0,m.kt)("mi",{parentName:"mover"},"a"),(0,m.kt)("mo",{parentName:"mover"},"\u20d7")),(0,m.kt)("mo",{parentName:"mrow"},"\xd7"),(0,m.kt)("mover",{parentName:"mrow",accent:"true"},(0,m.kt)("mi",{parentName:"mover"},"b"),(0,m.kt)("mo",{parentName:"mover"},"\u20d7")),(0,m.kt)("mo",{parentName:"mrow"},"="),(0,m.kt)("mrow",{parentName:"mrow"},(0,m.kt)("mo",{parentName:"mrow",fence:"true"},"\u2223"),(0,m.kt)("mtable",{parentName:"mrow",rowspacing:"0.15999999999999992em",columnspacing:"1em"},(0,m.kt)("mtr",{parentName:"mtable"},(0,m.kt)("mtd",{parentName:"mtr"},(0,m.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,m.kt)("mrow",{parentName:"mstyle"}))),(0,m.kt)("mtd",{parentName:"mtr"},(0,m.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,m.kt)("mi",{parentName:"mstyle"},"i"))),(0,m.kt)("mtd",{parentName:"mtr"},(0,m.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,m.kt)("mi",{parentName:"mstyle"},"j"))),(0,m.kt)("mtd",{parentName:"mtr"},(0,m.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,m.kt)("mi",{parentName:"mstyle"},"k")))),(0,m.kt)("mtr",{parentName:"mtable"},(0,m.kt)("mtd",{parentName:"mtr"},(0,m.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,m.kt)("mrow",{parentName:"mstyle"}))),(0,m.kt)("mtd",{parentName:"mtr"},(0,m.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,m.kt)("msub",{parentName:"mstyle"},(0,m.kt)("mi",{parentName:"msub"},"a"),(0,m.kt)("mi",{parentName:"msub"},"x")))),(0,m.kt)("mtd",{parentName:"mtr"},(0,m.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,m.kt)("msub",{parentName:"mstyle"},(0,m.kt)("mi",{parentName:"msub"},"a"),(0,m.kt)("mi",{parentName:"msub"},"y")))),(0,m.kt)("mtd",{parentName:"mtr"},(0,m.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,m.kt)("msub",{parentName:"mstyle"},(0,m.kt)("mi",{parentName:"msub"},"a"),(0,m.kt)("mi",{parentName:"msub"},"z"))))),(0,m.kt)("mtr",{parentName:"mtable"},(0,m.kt)("mtd",{parentName:"mtr"},(0,m.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,m.kt)("mrow",{parentName:"mstyle"}))),(0,m.kt)("mtd",{parentName:"mtr"},(0,m.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,m.kt)("msub",{parentName:"mstyle"},(0,m.kt)("mi",{parentName:"msub"},"b"),(0,m.kt)("mi",{parentName:"msub"},"x")))),(0,m.kt)("mtd",{parentName:"mtr"},(0,m.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,m.kt)("msub",{parentName:"mstyle"},(0,m.kt)("mi",{parentName:"msub"},"x"),(0,m.kt)("mi",{parentName:"msub"},"y")))),(0,m.kt)("mtd",{parentName:"mtr"},(0,m.kt)("mstyle",{parentName:"mtd",scriptlevel:"0",displaystyle:"false"},(0,m.kt)("msub",{parentName:"mstyle"},(0,m.kt)("mi",{parentName:"msub"},"b"),(0,m.kt)("mi",{parentName:"msub"},"z")))))),(0,m.kt)("mo",{parentName:"mrow",fence:"true"},"\u2223"))),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\vec{c} = \\vec{a} \\times \\vec{b}= \\begin{vmatrix} &i &j &k \\\\ &a_x &a_y &a_z\\\\ &b_x &x_y &b_z\\\\ \\end{vmatrix}")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.714em",verticalAlign:"0em"}}),(0,m.kt)("span",{parentName:"span",className:"mord accent"},(0,m.kt)("span",{parentName:"span",className:"vlist-t"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.714em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-3em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"))),(0,m.kt)("span",{parentName:"span",style:{top:"-3em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,m.kt)("span",{parentName:"span",className:"accent-body",style:{left:"-0.17994em"}},(0,m.kt)("span",{parentName:"span",className:"overlay",style:{height:"0.714em",width:"0.471em"}},(0,m.kt)("svg",{parentName:"span",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},(0,m.kt)("path",{parentName:"svg",d:"M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z"}))))))))),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"="),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.79733em",verticalAlign:"-0.08333em"}}),(0,m.kt)("span",{parentName:"span",className:"mord accent"},(0,m.kt)("span",{parentName:"span",className:"vlist-t"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.714em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-3em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"))),(0,m.kt)("span",{parentName:"span",style:{top:"-3em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,m.kt)("span",{parentName:"span",className:"accent-body",style:{left:"-0.2355em"}},(0,m.kt)("span",{parentName:"span",className:"overlay",style:{height:"0.714em",width:"0.471em"}},(0,m.kt)("svg",{parentName:"span",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},(0,m.kt)("path",{parentName:"svg",d:"M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z"}))))))))),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.9774399999999999em",verticalAlign:"0em"}}),(0,m.kt)("span",{parentName:"span",className:"mord accent"},(0,m.kt)("span",{parentName:"span",className:"vlist-t"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.9774399999999999em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-3em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"))),(0,m.kt)("span",{parentName:"span",style:{top:"-3.26344em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,m.kt)("span",{parentName:"span",className:"accent-body",style:{left:"-0.2355em"}},(0,m.kt)("span",{parentName:"span",className:"overlay",style:{height:"0.714em",width:"0.471em"}},(0,m.kt)("svg",{parentName:"span",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},(0,m.kt)("path",{parentName:"svg",d:"M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z"}))))))))),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"="),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"3.64199em",verticalAlign:"-1.5500299999999998em"}}),(0,m.kt)("span",{parentName:"span",className:"minner"},(0,m.kt)("span",{parentName:"span",className:"mopen"},(0,m.kt)("span",{parentName:"span",className:"delimsizing mult"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"2.0919600000000003em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-1.05597em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.606em"}}),(0,m.kt)("span",{parentName:"span",className:"delimsizinginner delim-size1"},(0,m.kt)("span",{parentName:"span"},"\u2223"))),(0,m.kt)("span",{parentName:"span",style:{top:"-1.65697em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.606em"}}),(0,m.kt)("span",{parentName:"span",className:"delimsizinginner delim-size1"},(0,m.kt)("span",{parentName:"span"},"\u2223"))),(0,m.kt)("span",{parentName:"span",style:{top:"-2.2579700000000003em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.606em"}}),(0,m.kt)("span",{parentName:"span",className:"delimsizinginner delim-size1"},(0,m.kt)("span",{parentName:"span"},"\u2223"))),(0,m.kt)("span",{parentName:"span",style:{top:"-2.8589700000000002em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.606em"}}),(0,m.kt)("span",{parentName:"span",className:"delimsizinginner delim-size1"},(0,m.kt)("span",{parentName:"span"},"\u2223"))),(0,m.kt)("span",{parentName:"span",style:{top:"-3.45997em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.606em"}}),(0,m.kt)("span",{parentName:"span",className:"delimsizinginner delim-size1"},(0,m.kt)("span",{parentName:"span"},"\u2223"))),(0,m.kt)("span",{parentName:"span",style:{top:"-3.4909600000000003em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.606em"}}),(0,m.kt)("span",{parentName:"span",className:"delimsizinginner delim-size1"},(0,m.kt)("span",{parentName:"span"},"\u2223"))),(0,m.kt)("span",{parentName:"span",style:{top:"-4.09196em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.606em"}}),(0,m.kt)("span",{parentName:"span",className:"delimsizinginner delim-size1"},(0,m.kt)("span",{parentName:"span"},"\u2223")))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.5500299999999998em"}},(0,m.kt)("span",{parentName:"span"})))))),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mtable"},(0,m.kt)("span",{parentName:"span",className:"col-align-c"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"2.05em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-4.05em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"})),(0,m.kt)("span",{parentName:"span",style:{top:"-2.849999999999999em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"})),(0,m.kt)("span",{parentName:"span",style:{top:"-1.6499999999999992em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.84em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"}))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.5500000000000007em"}},(0,m.kt)("span",{parentName:"span"}))))),(0,m.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"0.5em"}}),(0,m.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"0.5em"}}),(0,m.kt)("span",{parentName:"span",className:"col-align-c"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"2.05em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-4.21em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"))),(0,m.kt)("span",{parentName:"span",style:{top:"-3.0099999999999993em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,m.kt)("span",{parentName:"span",className:"msupsub"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.151392em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,m.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"x")))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,m.kt)("span",{parentName:"span"})))))))),(0,m.kt)("span",{parentName:"span",style:{top:"-1.8099999999999994em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,m.kt)("span",{parentName:"span",className:"msupsub"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.151392em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,m.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"x")))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,m.kt)("span",{parentName:"span"}))))))))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.5500000000000007em"}},(0,m.kt)("span",{parentName:"span"}))))),(0,m.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"0.5em"}}),(0,m.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"0.5em"}}),(0,m.kt)("span",{parentName:"span",className:"col-align-c"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"2.05em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-4.21em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05724em"}},"j"))),(0,m.kt)("span",{parentName:"span",style:{top:"-3.0099999999999993em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,m.kt)("span",{parentName:"span",className:"msupsub"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15139200000000003em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,m.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.03588em"}},"y")))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.286108em"}},(0,m.kt)("span",{parentName:"span"})))))))),(0,m.kt)("span",{parentName:"span",style:{top:"-1.8099999999999994em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,m.kt)("span",{parentName:"span",className:"msupsub"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15139200000000003em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,m.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.03588em"}},"y")))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.286108em"}},(0,m.kt)("span",{parentName:"span"}))))))))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.5500000000000007em"}},(0,m.kt)("span",{parentName:"span"}))))),(0,m.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"0.5em"}}),(0,m.kt)("span",{parentName:"span",className:"arraycolsep",style:{width:"0.5em"}}),(0,m.kt)("span",{parentName:"span",className:"col-align-c"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"2.05em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-4.21em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"k"))),(0,m.kt)("span",{parentName:"span",style:{top:"-3.0099999999999993em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,m.kt)("span",{parentName:"span",className:"msupsub"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.151392em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,m.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.04398em"}},"z")))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,m.kt)("span",{parentName:"span"})))))))),(0,m.kt)("span",{parentName:"span",style:{top:"-1.8099999999999994em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,m.kt)("span",{parentName:"span",className:"msupsub"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.151392em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,m.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.04398em"}},"z")))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,m.kt)("span",{parentName:"span"}))))))))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.5500000000000007em"}},(0,m.kt)("span",{parentName:"span"}))))))),(0,m.kt)("span",{parentName:"span",className:"mclose"},(0,m.kt)("span",{parentName:"span",className:"delimsizing mult"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"2.0919600000000003em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-1.05597em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.606em"}}),(0,m.kt)("span",{parentName:"span",className:"delimsizinginner delim-size1"},(0,m.kt)("span",{parentName:"span"},"\u2223"))),(0,m.kt)("span",{parentName:"span",style:{top:"-1.65697em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.606em"}}),(0,m.kt)("span",{parentName:"span",className:"delimsizinginner delim-size1"},(0,m.kt)("span",{parentName:"span"},"\u2223"))),(0,m.kt)("span",{parentName:"span",style:{top:"-2.2579700000000003em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.606em"}}),(0,m.kt)("span",{parentName:"span",className:"delimsizinginner delim-size1"},(0,m.kt)("span",{parentName:"span"},"\u2223"))),(0,m.kt)("span",{parentName:"span",style:{top:"-2.8589700000000002em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.606em"}}),(0,m.kt)("span",{parentName:"span",className:"delimsizinginner delim-size1"},(0,m.kt)("span",{parentName:"span"},"\u2223"))),(0,m.kt)("span",{parentName:"span",style:{top:"-3.45997em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.606em"}}),(0,m.kt)("span",{parentName:"span",className:"delimsizinginner delim-size1"},(0,m.kt)("span",{parentName:"span"},"\u2223"))),(0,m.kt)("span",{parentName:"span",style:{top:"-3.4909600000000003em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.606em"}}),(0,m.kt)("span",{parentName:"span",className:"delimsizinginner delim-size1"},(0,m.kt)("span",{parentName:"span"},"\u2223"))),(0,m.kt)("span",{parentName:"span",style:{top:"-4.09196em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.606em"}}),(0,m.kt)("span",{parentName:"span",className:"delimsizinginner delim-size1"},(0,m.kt)("span",{parentName:"span"},"\u2223")))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.5500299999999998em"}},(0,m.kt)("span",{parentName:"span"})))))))))))),(0,m.kt)("p",null,(0,m.kt)("img",{alt:"449809-20180713175810432-796730532",src:n(52214).Z})),(0,m.kt)("p",null,"\u53ea\u8981\u5224\u65ad(AB X AE ) * (CDX CE)  >= 0 \u5c31\u8bf4\u660eE\u5728AB,CD\u4e2d\u95f4\u5939\u7740\uff0c\u540c\u7406\u8ba1\u7b97\u53e6\u4e24\u8fb9DA\u548cBC\u5c31\u53ef\u4ee5\u4e86\u3002"),(0,m.kt)("p",null,(0,m.kt)("strong",{parentName:"p"},"\u6c42\u89d2\u5ea6\u548c\u662f\u5426\u4e3a"),"2PI"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-c"},'double get_angle(node p1, node p2) {\n    return acos((p1.x * p2.x + p1.y * p2.y) / (sqrt(p1.x * p1.x + p1.y * p1.y) * sqrt(p2.x * p2.x + p2.y * p2.y)));\n}\n\nint main() {\n    for (int i = 1; i < 5; ++i) {\n        cin >> point[i].x >> point[i].y;\n    }\n    cin >> point[0].x >> point[0].y;\n    node vec[5];\n    for (int i = 1; i < 5; ++i) {\n        vec[i].x = point[i].x - point[0].x;\n        vec[i].y = point[i].y - point[0].y;\n    }\n    double sum = get_angle(vec[1], vec[2]) + get_angle(vec[2], vec[4]) + get_angle(vec[4], vec[3]) + get_angle(vec[3], vec[1]);\n    //cout << "sum = " << sum << " 2pi = " << acos(-1) * 2 << endl;\n    if (fabs(sum - acos(-1) * 2) < 1e-6) {\n        cout << "Yes" << endl;\n    } else {\n        cout << "No" << endl;\n    }\n    return 0;\n}\n\n')),(0,m.kt)("h4",{id:"\u725b\u5ba259\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u4e09\u89d2\u5f62\u5185\u90e8cpp"},"\u725b\u5ba259.\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u4e09\u89d2\u5f62\u5185\u90e8.cpp"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-c"},'double get_cross(Point p1, Point p2, Point p) {\n    Point vec1 = p2 - p1;\n    Point vec2 = p - p1;\n    return vec1.x * vec2.y - vec1.y * vec2.x;\n}\n\nint main() {\n    for (int i = 1; i < 4; ++i) {\n        cin >> node[i].x >> node[i].y;\n    }\n    cin >> node[0].x >> node[0].y;\n    if (get_cross(node[1], node[2], node[3]) < 0) {\n        Point tmp;\n        tmp.x = node[2].x;\n        tmp.y = node[2].y;\n        node[2].x = node[3].x;\n        node[2].y = node[3].y;\n        node[3].x = tmp.x;\n        node[3].y = tmp.y;\n    } \n    /*\n    for (int i = 0; i < 4; ++i) {\n        cout << i << " " << node[i].x << " " << node[i].y << endl;\n    }\n    */\n    if (get_cross(node[1], node[2], node[0]) < 0) {\n        cout << "No" << endl;\n        return 0;\n    }\n    if (get_cross(node[2], node[3], node[0]) < 0) {\n        cout << "No" << endl;\n        return 0;\n    }\n    if (get_cross(node[3], node[1], node[0]) < 0) {\n        cout << "No" << endl;\n        return 0;\n    }\n\n    cout << "Yes" << endl;\n    return 0;\n}\n\n')),(0,m.kt)("p",null,(0,m.kt)("strong",{parentName:"p"},"\u4e8c\u5206\u6cd5\u8fd8\u53ef\u4ee5\u7528\u4e8e\u786e\u5b9a\u4e00\u4e2a\u6709\u8303\u56f4\u7684\u6574\u6570"),"\uff08\u8fd9\u4e2a\u601d\u8def\u5f88\u5e38\u89c1\uff09"),(0,m.kt)("p",null,(0,m.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/find-the-duplicate-number/solution/er-fen-fa-si-lu-ji-dai-ma-python-by-liweiwei1419/"},"https://leetcode-cn.com/problems/find-the-duplicate-number/solution/er-fen-fa-si-lu-ji-dai-ma-python-by-liweiwei1419/")),(0,m.kt)("h4",{id:"\u6570\u7ec4top-k"},"\u6570\u7ec4TOP-k"),(0,m.kt)("p",null,(0,m.kt)("img",{alt:"65ec311c3e9792bb17e9c08cabd4a07f251c9cd65a011b6c5ffb54b46d8e5012-image",src:n(62943).Z})),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"\u65b9\u6cd5\u4e00\uff1a\u57fa\u4e8e\u5feb\u901f\u6392\u5e8f\u7684\u9009\u62e9\u65b9\u6cd5\nint findKthLargest(vector<int>& nums, int k) {\n            return quickSelect(nums, 0, nums.size(), nums.size() - k);\n    }\n    int quickSelect(vector<int> &a, int l, int r, int kth) {\n        int q = randomPartition(a, l, r);\n        if (q == kth) return a[q];\n        return q < kth ? quickSelect(a, q + 1, r, kth) : quickSelect(a, l , q - 1, kth);\n    }\n    int randomPartition(vector<int> &a, int l, int r) {\n        int idx = l + rand() % (r - l + 1);\n        swap(a[idx], a[l]);\n        return partition(a, l, r);\n    }\n    int partition(vector<int> &a, int l, int r) {\n        int val = a[l], x = l, y = r;\n        while (x < y) {\n            while (x < y && a[y] > val) y--;\n            if (x < y) swap(a[x++], a[y]);\n            while (x < y && a[x] < val) x++;\n            if (x < y) swap(a[x], a[y--]);\n        }\n        a[x] = val;\n        return x;\n    }\n\nvoid sort(int *arr, int l, int r, function<bool(int, int)> cmp = CMP()) {\n    if (l >= r) return ;\n    int x = l, y = r, z = arr[(l + r) >> 1];\n    do {\n        while (cmp(arr[x], z)) ++x;\n        while (cmp(z, arr[y])) --y;\n        if (x <= y) {\n            swap(arr[x], arr[y]);\n            ++x, --y;\n       }\n    } while (x <= y);\n    sort(arr, l, y, cmp);\n    sort(arr, x, r, cmp);\n    return ;\n}\n\n2.\u57fa\u4e8e\u5806\u6392\u5e8f\u7684\u9009\u62e9\u65b9\u6cd5\n{\n    public:\n    int findKthLargest(vector<int>& nums, int k) {\n        int *arr = new int[nums.size()];\n        for (int i = 0; i < nums.size(); i++) arr[i] = nums[i];\n        int ans = build(arr, k, nums.size());\n        delete[] arr;\n        return ans;\n    }\n\n    void downUpdate(int *nums, int size, int ind) {\n        while ((ind << 1) <= size) {\n            int tmp = ind, l = ind << 1, r = ind << 1 | 1;\n            if (nums[l] > nums[tmp]) tmp = l;\n            if (r <= size && nums[r] > nums[tmp]) tmp = r;\n            if (tmp == ind) break;\n            swap(nums[tmp], nums[ind]);\n            ind = tmp;\n        }\n        return ;\n    }\n\n    int build(int *nums, int k, int size) {\n        nums -= 1;\n        for (int i = size >> 1; i >= 1; i--) {\n            downUpdate(nums, i, size);\n        }\n        for (int i = 1; i < k; i++) {\n            swap(nums[1], nums[size--]);\n            downUpdate(nums, 1, size);\n        }\n        return nums[1];\n    }\n\n")),(0,m.kt)("h4",{id:"\u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/median-of-two-sorted-arrays/description/"},"\u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-c"},'/* \u4e3b\u8981\u601d\u8def\uff1a\u8981\u627e\u5230\u7b2c k (k>1) \u5c0f\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u5c31\u53d6 pivot1 = nums1[k/2-1] \u548c pivot2 = nums2[k/2-1] \u8fdb\u884c\u6bd4\u8f83\n         * \u8fd9\u91cc\u7684 "/" \u8868\u793a\u6574\u9664\n         * nums1 \u4e2d\u5c0f\u4e8e\u7b49\u4e8e pivot1 \u7684\u5143\u7d20\u6709 nums1[0 .. k/2-2] \u5171\u8ba1 k/2-1 \u4e2a\n         * nums2 \u4e2d\u5c0f\u4e8e\u7b49\u4e8e pivot2 \u7684\u5143\u7d20\u6709 nums2[0 .. k/2-2] \u5171\u8ba1 k/2-1 \u4e2a\n         * \u53d6 pivot = min(pivot1, pivot2)\uff0c\u4e24\u4e2a\u6570\u7ec4\u4e2d\u5c0f\u4e8e\u7b49\u4e8e pivot \u7684\u5143\u7d20\u5171\u8ba1\u4e0d\u4f1a\u8d85\u8fc7 (k/2-1) + (k/2-1) <= k-2 \u4e2a\n         * \u8fd9\u6837 pivot \u672c\u8eab\u6700\u5927\u4e5f\u53ea\u80fd\u662f\u7b2c k-1 \u5c0f\u7684\u5143\u7d20\n         * \u5982\u679c pivot = pivot1\uff0c\u90a3\u4e48 nums1[0 .. k/2-1] \u90fd\u4e0d\u53ef\u80fd\u662f\u7b2c k \u5c0f\u7684\u5143\u7d20\u3002\u628a\u8fd9\u4e9b\u5143\u7d20\u5168\u90e8 "\u5220\u9664"\uff0c\u5269\u4e0b\u7684\u4f5c\u4e3a\u65b0\u7684 nums1 \u6570\u7ec4\n         * \u5982\u679c pivot = pivot2\uff0c\u90a3\u4e48 nums2[0 .. k/2-1] \u90fd\u4e0d\u53ef\u80fd\u662f\u7b2c k \u5c0f\u7684\u5143\u7d20\u3002\u628a\u8fd9\u4e9b\u5143\u7d20\u5168\u90e8 "\u5220\u9664"\uff0c\u5269\u4e0b\u7684\u4f5c\u4e3a\u65b0\u7684 nums2 \u6570\u7ec4\n         * \u7531\u4e8e\u6211\u4eec "\u5220\u9664" \u4e86\u4e00\u4e9b\u5143\u7d20\uff08\u8fd9\u4e9b\u5143\u7d20\u90fd\u6bd4\u7b2c k \u5c0f\u7684\u5143\u7d20\u8981\u5c0f\uff09\uff0c\u56e0\u6b64\u9700\u8981\u4fee\u6539 k \u7684\u503c\uff0c\u51cf\u53bb\u5220\u9664\u7684\u6570\u7684\u4e2a\u6570\n         */\n')),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"/*\n * @lc app=leetcode.cn id=4 lang=cpp\n *\n * [4] \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\n */\n\n// @lc code=start\nclass Solution {\npublic:\n    double kth(vector<int> &n1, vector<int> &n2, int k) {\n        int len1 = n1.size(), len2 = n2.size();\n        int t1 = 0, t2 = 0, res = 0;\n        while (true) {\n            if (t1 == len1) {\n                res = n2[t2 + k - 1];\n                break;\n            }\n            if (t2 == len2) {\n                res = n1[t1 + k - 1];\n                break;\n            }\n            if (k == 1) {\n                res = min(n1[t1], n2[t2]);\n                break;\n            }\n            int idx1 = min(t1 + k / 2 - 1, len1 - 1);\n            int idx2 = min(t2 + k / 2 - 1, len2 - 1);\n            if (n1[idx1] <= n2[idx2]) {\n                k -= idx1 - t1 + 1;\n                t1 = idx1 + 1;\n            } else {\n                k -= idx2 - t2 + 1;\n                t2 = idx2 + 1;\n            }\n        }\n        return res;\n\n    }\n\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        int len1 = nums1.size(), len2 = nums2.size();\n        int k = (len1 + len2) >> 1;\n        double m1 = kth(nums1, nums2, k + 1);\n        if ((len1 + len2) & 1 == 1) {\n            return m1;\n        }\n        double m2 = kth(nums1, nums2, k);\n        return (m1 + m2) / 2.0;\n    }\n};\n// @lc code=end\n\n")),(0,m.kt)("h3",{id:"3-\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32"},(0,m.kt)("a",{parentName:"h3",href:"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters"},"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        int map[128];\n        for (int i = 0; i < 128; ++i) map[i] = -1;\n        int pre = -1, ans = 0;\n        for (int i = 0; s[i]; i++) {\n            pre = max(pre, map[s[i]]);\n            ans = max(ans, i - pre);\n            map[s[i]] = i;\n        }\n        return ans;\n    }\n};\n")),(0,m.kt)("p",null,"\u7f13\u5b58:\u9ad8\u901f\u8bbe\u5907\u5bf9\u4f4e\u901f\u8bbe\u5907\u7684\u5b58\u50a8\u673a\u5236;"),(0,m.kt)("h4",{id:"146-lru\u7f13\u5b58\u673a\u5236"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/lru-cache"},"146. LRU\u7f13\u5b58\u673a\u5236")),(0,m.kt)("p",null," ",(0,m.kt)("a",{parentName:"p",href:"https://baike.baidu.com/item/LRU"},"LRU (\u6700\u8fd1\u6700\u5c11\u4f7f\u7528) \u7f13\u5b58\u673a\u5236")),(0,m.kt)("ol",null,(0,m.kt)("li",{parentName:"ol"},"\u54c8\u5e0c\u8868 + \u94fe\u8868\u89e3\u51b3"),(0,m.kt)("li",{parentName:"ol"},"\u5f2f\u8def1:\u4e00\u4e00\u5f00\u59cb\u60f3\u5230\u4e86\u54c8\u5e0c\u8868,\u4f46\u5ffd\u7565\u4e86\u5229\u7528\u94fe\u8868\u5b9e\u73b0"),(0,m.kt)("li",{parentName:"ol"},"\u5f2f\u8def2:\u7531\u4e8e\u5934\u5c3e\u6307\u9488\u4f1a\u53d1\u751f\u751f\u53d8\u5316,\u5ffd\u7565\u4e86\u865a\u62df\u8282\u70b9\u7684\u5904\u7406\u6280\u5de7")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class LRUCache {\npublic:\n    struct Node {\n        Node() : Node(0, 0) {}\n        Node(int key, int value) : pre(nullptr), next(nullptr), key(key), value(value) {}\n        int key, value;\n        Node *pre, *next;\n    };\n\n    unordered_map<int, Node *>ind;\n    Node head, tail;\n    int capacity, node_cnt;\n\n    LRUCache(int capacity) {\n        this->capacity = capacity;\n        this->node_cnt = 0;\n        head.next = &tail;\n        tail.pre = &head;\n        return ;\n    }\n\n    void remove_node(Node *p) {\n        p->next->pre = p->pre;\n        p->pre->next = p->next; \n        return ;\n    }\n    void insert_tail(Node *p) {\n        p->next = &tail;\n        p->pre = tail.pre;\n        tail.pre->next = p;\n        tail.pre = p;\n        return ;\n    }\n    \n    int get(int key) {\n        if (ind.find(key) == ind.end()) return -1;\n        Node *p = ind[key];\n        remove_node(p);\n        insert_tail(p);\n        return p->value;\n    }\n    \n    void put(int key, int value) {\n        Node *p = nullptr;\n        if (ind.find(key) == ind.end()) {\n            p = new Node(key, value);\n            insert_tail(p);\n            ind[key] = p;\n            node_cnt++;\n        } else {\n            p = ind[key];\n            remove_node(p);\n            p->value = value;\n            insert_tail(p);\n        }\n        if (node_cnt > capacity) {\n            p = head.next;\n            remove_node(p);\n            ind.erase(p->key); //\u52ff\u5fd8\u53d6\u6d88\u6807\u8bb0\n            node_cnt--;\n            delete p;\n        }\n        return ;\n    }\n};\n")),(0,m.kt)("h4",{id:"leetcode-460-lfu\u7f13\u5b58"},"Leetcode-460-LFU\u7f13\u5b58"),(0,m.kt)("ol",null,(0,m.kt)("li",{parentName:"ol"},(0,m.kt)("p",{parentName:"li"},"\u7f16\u7801\u8f83\u590d\u6742,\u57fa\u4e8e\u5341\u5b57\u94fe\u8868\u5b9e\u73b0 LFU \u7f13\u5b58\u673a\u5236")),(0,m.kt)("li",{parentName:"ol"},(0,m.kt)("p",{parentName:"li"},"\u5c06\u51fa\u73b0\u6b21\u6570\u76f8\u540c\u7684\u8282\u70b9,\u5b58\u50a8\u5728\u540c\u4e00\u4e00\u4e2a \u53cc\u5411\u94fe\u8868 \u4e2d")),(0,m.kt)("li",{parentName:"ol"},(0,m.kt)("p",{parentName:"li"},"\u5220\u9664\u8282\u70b9\u7684\u64cd\u4f5c,\u7b80\u5316\u6210\u4e86\u4e86:\u5220\u9664\u7b2c\u4e00\u4e00\u4e2a LRUCache \u4e2d\u7684\u5c3e\u7ed3\u70b9")),(0,m.kt)("li",{parentName:"ol"},(0,m.kt)("p",{parentName:"li"},"\u64cd\u4f5c1:\u5220\u9664\u4e00\u4e00\u8282\u70b9")),(0,m.kt)("li",{parentName:"ol"},(0,m.kt)("p",{parentName:"li"},"\u64cd\u4f5c2:\u65b0\u589e\u4e00\u4e2a\u8282\u70b9")),(0,m.kt)("li",{parentName:"ol"},(0,m.kt)("p",{parentName:"li"},"\u64cd\u4f5c3:\u5c06\u4e00\u4e2a\u73b0\u6709\u8282\u70b9,\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a LRUCache \u4e2d"),(0,m.kt)("p",{parentName:"li"},"Map<Integer, Node> cache; // \u5b58\u50a8\u7f13\u5b58\u7684\u5185\u5bb9\nMap<Integer, DoublyLinkedList> freqMap; // \u5b58\u50a8\u6bcf\u4e2a\u9891\u6b21\u5bf9\u5e94\u7684\u53cc\u5411\u94fe\u8868\nint size;\nint capacity;\nint min; // \u5b58\u50a8\u5f53\u524d\u6700\u5c0f\u9891\u6b21"))),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"/*\n * @lc app=leetcode.cn id=460 lang=cpp\n *\n * [460] LFU \u7f13\u5b58\n */\n\n// @lc code=start\nclass LFUCache {\npublic:\n    struct Node {\n        Node() : Node(0, 0, 0) {}\n        Node(int key, int val, int times) : \n            key(key), val(val), times(times), \n            pre(nullptr), next(nullptr) {}\n        int key, val, times;\n        Node *pre, *next;\n    };\n\n    struct ListNode {\n        ListNode() {\n            head.next = &tail;\n            tail.pre = &head;\n        }\n\n        void insert_tail(Node *p) {\n            p->next = &tail;\n            p->pre = tail.pre;\n            tail.pre->next = p;\n            tail.pre = p;\n        }\n\n        void remove_node(Node *p) {\n            p->next->pre = p->pre;\n            p->pre->next = p->next;\n        }\n        Node head, tail;\n    };\n    \n\n    LFUCache(int capacity) {\n        this->min_count = 0;\n        this->cnt = 0;\n        this->capacity = capacity;\n    }\n\n    void updata() {\n        while (ind.find(min_count) != ind.end() && ind[min_count]->head.next == &(ind[min_count]->tail)) {\n            min_count++;\n        }\n        if (ind.find(min_count) == ind.end()) {\n            min_count = 0;\n        }\n    }\n\n    void increase(Node *p) {\n        ListNode *list = ind[p->times];\n        list->remove_node(p);\n        p->times++;\n        if (ind.find(p->times) == ind.end()) {\n            ind[p->times] = new ListNode();\n        }\n        list = ind[p->times];\n        list->insert_tail(p);\n        updata();\n    }\n    \n    int get(int key) {\n        if (cache.find(key) == cache.end()) return -1;\n        Node *p = cache[key];\n        increase(p);\n        return p->val;\n    }\n    \n    void put(int key, int value) {\n        if (capacity == 0) return ;\n        if (cache.find(key) == cache.end()) {\n            if (cnt == capacity) {\n                ListNode *list = ind[min_count];\n                Node *p = list->head.next;\n                list->remove_node(p);\n                cache.erase(p->key);\n                delete p;\n                cnt--;\n                updata();\n            }\n            Node *p = new Node(key, value, 1);\n            cache[key] = p;\n            if (ind.find(1) == ind.end()) {\n                ind[1] = new ListNode();\n            }\n            ListNode *list = ind[1];\n            list->insert_tail(p);\n            cnt++;\n            min_count = 1;\n        } else {\n            Node *p = cache[key];\n            p->val = value;\n            increase(p);\n        }\n    }\nprivate :\n    unordered_map<int, Node *> cache;\n    unordered_map<int, ListNode *> ind;\n    int min_count, cnt, capacity;\n};\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * LFUCache* obj = new LFUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */\n// @lc code=end\n\n")),(0,m.kt)("h4",{id:"15-\u4e09\u6570\u4e4b\u548c"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/3sum"},"15. \u4e09\u6570\u4e4b\u548c")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        vector<vector<int>> ans;\n        if (nums.size() < 3) return ans;\n        sort(nums.begin(), nums.end());\n        for (int i = 0; i < nums.size() - 2 && nums[i] <= 0; i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) continue;\n            int l = i + 1, r = nums.size() - 1, target = -nums[i];\n            while (l < r) {\n                int sum = nums[l] + nums[r];\n                if (sum  == target) {\n                    if (ans.size() == 0) {\n                       ans.push_back({nums[i], nums[l], nums[r]});\n                    } else {\n                        vector<int> &end = ans.back();\n                        if (!(end[1] == nums[l] && end[2] == nums[r])) {\n                            ans.push_back({nums[i], nums[l], nums[r]});\n                        }\n                    }\n                    l++, r--;\n                } else if (sum > target) {\n                    r--;\n                } else {\n                    l++;\n                }\n            }\n        }\n        return ans;\n    }\n};\n\n")),(0,m.kt)("h4",{id:"53-\u6700\u5927\u5b50\u5e8f\u548c"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/maximum-subarray"},"53. \u6700\u5927\u5b50\u5e8f\u548c")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        if (nums.size() == 0) return 0;\n        int ans, pre;\n        ans = pre = nums[0];\n        for (int i = 1; i < nums.size(); i++)  {\n            pre = max(pre + nums[i], nums[i]);\n            ans = max(ans, pre);\n        }\n        return ans;\n    }\n};\n\nclass Solution {\npublic:\n    static const int MAX_N = 30000;\n    struct Node {\n        int sum, lm, rm, m;\n    };\n    Node updata(Node &lchild, Node &rchild) {\n        Node ans;\n        ans.sum = lchild.sum + rchild.sum;\n        ans.lm = max(lchild.lm, lchild.sum + rchild.lm);\n        ans.rm = max(rchild.rm, rchild.sum + lchild.rm);\n        ans.m = max(lchild.m, rchild.m);\n        ans.m = max(ans.m, lchild.rm + rchild.lm);\n        return ans;\n    }\n    Node build( int l, int r, vector<int> &nums) {\n        if (l == r) {\n            return {nums[l], nums[l], nums[l], nums[l]};\n        }\n        int mid = (l + r) >> 1;\n        Node lchild = build(l, mid, nums);\n        Node rchild = build(mid + 1, r, nums);\n        return updata( lchild, rchild);\n    }\n\n    int maxSubArray(vector<int>& nums) {\n        if (nums.size() == 0) return 0;\n        Node ans = build( 0, nums.size() - 1,nums);\n        return ans.m;\n    }\n};\n\n\n")),(0,m.kt)("h2",{id:"\u6811"},"\u6811"),(0,m.kt)("h4",{id:"102-\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal"},"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        vector<vector<int>> ret;\n        vector<int> vec;\n        if(root == NULL)\n            return ret;\n        queue<TreeNode*> q;\n        q.push(root);\n        TreeNode* cur;\n        while(q.size() > 0) {\n            int len = q.size();\n            for(int i = 0; i < len; ++i) {\n                cur = q.front();\n                q.pop();\n                vec.push_back(cur -> val);\n                if (cur -> left != NULL)\n                    q.push(cur -> left);\n                if (cur -> right != NULL)\n                    q.push(cur -> right);\n            }\n            ret.push_back(vec);\n            vec.clear();\n        }\n        return ret;\n    }\n};\n")),(0,m.kt)("h4",{id:"103-\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u6b21\u904d\u5386"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal"},"103. \u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u6b21\u904d\u5386")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"    bool odd = true;\n        for(int i = 0; i < ret.size(); ++i){\n            if(!odd){\n                reverse(ret[i].begin(), ret[i].end());\n            }\n            odd = !odd;\n        }\n\nclass Solution {\npublic:\n    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {\n        vector<vector<int>> res;\n        if (!root) return res;\n        int flag = 1;\n        queue<TreeNode *> que;\n        que.push(root);\n        vector<int> arr;\n        while (!que.empty()) {\n            int size = que.size();\n            arr.resize(size);\n            for (int i = 0; i < size; i++) {\n                auto cur = que.front();\n                que.pop();\n                arr[flag ? i : size - i - 1] = cur->val;\n                if (cur->left) que.push(cur->left);\n                if (cur->right) que.push(cur->right);\n            }\n            flag = !flag;\n            res.push_back(arr);\n            arr.clear();\n        }\n        return res;\n    }\n};\n")),(0,m.kt)("h4",{id:"236-\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree"},"236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if (!root) return NULL;\n        if (root == p || root == q) return root;\n        TreeNode *lchild = lowestCommonAncestor(root->left, p, q);\n        TreeNode *rchild = lowestCommonAncestor(root->right, p, q);\n        if (lchild && rchild) {\n            return root;\n        } \n        return lchild ? lchild : rchild;\n    }\n};\n")),(0,m.kt)("h4",{id:"199-\u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/binary-tree-right-side-view"},"199. \u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> rightSideView(TreeNode* root) {\n      if(root == NULL)\n      return {};\n      queue<TreeNode*> q;\n      vector<int> ans;\n      q.push(root);\n      while(!q.empty()){\n          int n = q.size();\n          ans.push_back(q.front()->val);\n          TreeNode* temp;\n          while(n--){\n              temp = q.front();\n              q.pop();\n              if(temp->right) q.push(temp->right);\n              if(temp->left) q.push(temp->left);\n          }\n      }\n      return ans;\n    }\n};\n")),(0,m.kt)("h2",{id:"\u5b57\u7b26\u4e32"},"\u5b57\u7b26\u4e32"),(0,m.kt)("h4",{id:"415-\u5b57\u7b26\u4e32\u76f8\u52a0"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/add-strings"},"415. \u5b57\u7b26\u4e32\u76f8\u52a0")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    string addStrings(string num1, string num2) {\n        int i = num1.length() - 1, j = num2.length() - 1, add = 0;\n        string ans = \"\";\n        while (i >= 0 || j >= 0 || add != 0) {\n            int x = i >= 0 ? num1[i--] - '0' : 0;\n            int y = j >= 0 ? num2[j--] - '0' : 0;\n            int result = x + y + add;\n            ans.push_back('0' + result % 10);\n            add = result / 10;\n        }\n        // \u8ba1\u7b97\u5b8c\u4ee5\u540e\u7684\u7b54\u6848\u9700\u8981\u7ffb\u8f6c\u8fc7\u6765\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};\n")),(0,m.kt)("h2",{id:"\u4e8c\u5206"},"\u4e8c\u5206"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"/*\n * @lc app=leetcode.cn id=378 lang=cpp\n *\n * [378] \u6709\u5e8f\u77e9\u9635\u4e2d\u7b2c K \u5c0f\u7684\u5143\u7d20\n */\n\n// @lc code=start\nclass Solution {\npublic:\n    int kthSmallest(vector<vector<int>>& matrix, int k) {\n        int row = matrix.size(), col = matrix[0].size();\n        int l = matrix[0][0], r = matrix[row - 1][col - 1];\n        while( row, colile (l < r) {\n            int mid = (l + r) >> 1;\n            if (getCount(matrix, mid, row, col) < k) l = mid + 1;\n            else r = mid;\n        }\n        return r;\n\n    }\n    int getCount(vector<vector<int>> &arr, int val, int row, int col) {\n        int x = 0, y = col - 1;\n        int cnt = 0;\n        while (x < row && y >= 0) {\n            if (arr[x][y] <= val) {\n                cnt += y + 1;\n                x++;\n            } else {\n                y--;\n            }\n        }\n        return cnt;\n    }\n};\n// @lc code=end\n")),(0,m.kt)("h2",{id:"\u54c8\u5e0c\u8868"},"\u54c8\u5e0c\u8868"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"/*\n * @lc app=leetcode.cn id=128 lang=cpp\n *\n * [128] \u6700\u957f\u8fde\u7eed\u5e8f\u5217\n */\n\n// @lc code=start\nclass UnionSet\n{\npublic:\n    vector<int> fa, size;\n    void init(int n)\n    {\n        for (int i = 0; i <= n; ++i)\n        {\n            fa.push_back(i);\n            size.push_back(1);\n        }\n    }\n    int get(int x)\n    {\n        return fa[x] = (fa[x] == x ? x : get(fa[x]));\n    }\n    void merge(int a, int b)\n    {\n        int aa = get(a), bb = get(b);\n        if (aa == bb)\n            return;\n        fa[aa] = bb;\n        size[bb] += size[aa];\n        return;\n    }\n};\nclass Solution\n{\npublic:\n    int longestConsecutive(vector<int> &nums)\n    {\n        /*\n        int maxCount = 0, lCount = 0, rCount = 0;\n        unordered_map<int, int> s;\n        for (auto nums[i] : nums) {\n            if (s[nums[i]]) continue;\n            int l = s[nums[i] - 1], r = s[nums[i] + 1];\n            int sum = l + r + 1;\n            s[nums[i]] = s[nums[i] - l] = s[nums[i] + r] = sum;\n            maxCount = max(maxCount, sum);\n        }\n        return maxCount;\n        */\n        /*\n        unordered_set<int> set(nums.begin(), nums.end());\n        int res = 0;\n        for (auto nums[i] : nums) {\n            if (!set.count(nums[i])) continue;\n            set.erase(nums[i]); \n            int pre = nums[i] - 1, next = nums[i] + 1;\n            while (set.count(pre)) set.erase(pre--);\n            while (set.count(next)) set.erase(next++);\n            res = max(res, next - pre - 1);\n        }\n        return res;\n        */\n\n        unordered_map<int, int> s;\n        u.init(nums.size() + 5);\n        for (int i = 0; i < nums.size(); ++i)\n        {\n            int k = nums[i];\n            if (s.find(k) != s.end())\n                continue;\n            if (s.find(k - 1) != s.end())\n            {\n                u.merge(i, s[k - 1]);\n            }\n            if (s.find(k + 1) != s.end())\n            {\n                u.merge(i, s[k + 1]);\n            }\n            s[k] = i;\n        }\n        int ans = 0;\n        for (int i = 0; i < nums.size(); ++i)\n        {\n            ans = max(ans, u.size[nums[i]]);\n        }\n        return ans;\n    }\n\nprivate:\n    UnionSet u;\n};\n// @lc code=end\n\n")),(0,m.kt)("h2",{id:"\u77e9\u9635"},"\u77e9\u9635"),(0,m.kt)("h4",{id:"54-\u87ba\u65cb\u77e9\u9635"},(0,m.kt)("a",{parentName:"h4",href:"https://leetcode-cn.com/problems/spiral-matrix"},"54. \u87ba\u65cb\u77e9\u9635")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> spiralOrder(vector<vector<int>>& matrix) {\n        int up, down, left, right;\n        up = 0, down = matrix.size() - 1, left = 0, right = matrix[0].size() - 1;\n        vector<int> ans((down + 1) * (right + 1));\n        int ind = 0;\n        while (1) {\n            for (int i = left; i <= right; i++)  ans[ind++] = matrix[up][i];\n            if (++up > down) break;\n            for (int i = up; i <= down; i++) ans[ind++] = matrix[i][right];\n            if (--right < left) break;\n            for (int i = right; i >= left; i--) ans[ind++] = matrix[down][i];\n            if (--down < up) break;\n            for (int i = down; i >= up; i--) ans[ind++] = matrix[i][left];\n            if (++left > right) break;\n        }\n        return ans;\n    }\n};\n")),(0,m.kt)("h2",{id:"\u52a8\u6001\u89c4\u5212"},"\u52a8\u6001\u89c4\u5212"),(0,m.kt)("p",null,(0,m.kt)("img",{alt:"1f95da43d1bdeebdd1213bb804034ddc5f906dc61451cd63f2b5ab5d0eb33b33-\u300c\u52a8\u6001\u89c4\u5212\u300d\u95ee\u9898\u601d\u8003\u65b9\u5411",src:n(60438).Z})),(0,m.kt)("p",null,"1\u3001\u601d\u8003\u72b6\u6001\uff08\u91cd\u70b9\uff09"),(0,m.kt)("p",null,"\u72b6\u6001\u7684\u5b9a\u4e49\uff0c\u5148\u5c1d\u8bd5\u300c\u9898\u76ee\u95ee\u4ec0\u4e48\uff0c\u5c31\u628a\u4ec0\u4e48\u8bbe\u7f6e\u4e3a\u72b6\u6001\u300d\uff1b\n\u7136\u540e\u601d\u8003\u300c\u72b6\u6001\u5982\u4f55\u8f6c\u79fb\u300d\uff0c\u5982\u679c\u300c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u300d\u4e0d\u5bb9\u6613\u5f97\u5230\uff0c\u5c1d\u8bd5\u4fee\u6539\u5b9a\u4e49\uff0c\u76ee\u7684\u4f9d\u7136\u662f\u4e3a\u4e86\u65b9\u4fbf\u5f97\u5230\u300c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u300d\u3002\n\u300c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u300d\u662f\u539f\u59cb\u95ee\u9898\u7684\u4e0d\u540c\u89c4\u6a21\u7684\u5b50\u95ee\u9898\u7684\u8054\u7cfb\u3002\u5373\u5927\u95ee\u9898\u7684\u6700\u4f18\u89e3\u5982\u4f55\u7531\u5c0f\u95ee\u9898\u7684\u6700\u4f18\u89e3\u5f97\u5230\u3002"),(0,m.kt)("p",null,"2\u3001\u601d\u8003\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff08\u6838\u5fc3\u3001\u96be\u70b9\uff09"),(0,m.kt)("p",null,"\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u662f\u52a8\u6001\u89c4\u5212\u7684\u6838\u5fc3\uff0c\u4e5f\u662f\u96be\u70b9\uff1b"),(0,m.kt)("p",null,"\u5e38\u89c1\u7684\u63a8\u5bfc\u6280\u5de7\u662f\uff1a\u5206\u7c7b\u8ba8\u8bba\u3002\u5373\uff1a\u5bf9\u72b6\u6001\u7a7a\u95f4\u8fdb\u884c\u5206\u7c7b\uff1b"),(0,m.kt)("p",null,"\u5f52\u7eb3\u300c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u300d\u662f\u4e00\u4e2a\u5f88\u7075\u6d3b\u7684\u4e8b\u60c5\uff0c\u901a\u5e38\u662f\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\uff1b"),(0,m.kt)("p",null,"\u9664\u4e86\u638c\u63e1\u7ecf\u5178\u7684\u52a8\u6001\u89c4\u5212\u95ee\u9898\u4ee5\u5916\uff0c\u8fd8\u9700\u8981\u591a\u505a\u9898\uff1b"),(0,m.kt)("p",null,"\u5982\u679c\u662f\u9488\u5bf9\u9762\u8bd5\uff0c\u8bf7\u81ea\u884c\u628a\u63e1\u96be\u5ea6\u3002\u638c\u63e1\u5e38\u89c1\u95ee\u9898\u7684\u52a8\u6001\u89c4\u5212\u89e3\u6cd5\uff0c\u7406\u89e3\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u95ee\u9898\uff0c\u662f\u4ece\u4e00\u4e2a\u5c0f\u89c4\u6a21\u95ee\u9898\u51fa\u53d1\uff0c\u9010\u6b65\u5f97\u5230\u5927\u95ee\u9898\u7684\u89e3\uff0c\u5e76\u8bb0\u5f55\u4e2d\u95f4\u8fc7\u7a0b\uff1b"),(0,m.kt)("p",null,"\u300c\u52a8\u6001\u89c4\u5212\u300d\u65b9\u6cd5\u4f9d\u7136\u662f\u300c\u7a7a\u95f4\u6362\u65f6\u95f4\u300d\u601d\u60f3\u7684\u4f53\u73b0\uff0c\u5e38\u89c1\u7684\u89e3\u51b3\u95ee\u9898\u7684\u8fc7\u7a0b\u5f88\u50cf\u5728\u300c\u586b\u8868\u300d\u3002"),(0,m.kt)("p",null,"3\u3001\u601d\u8003\u521d\u59cb\u5316"),(0,m.kt)("p",null,"\u521d\u59cb\u5316\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u4e00\u6b65\u9519\uff0c\u6b65\u6b65\u9519\u3002\u521d\u59cb\u5316\u72b6\u6001\u4e00\u5b9a\u8981\u8bbe\u7f6e\u5bf9\uff0c\u624d\u53ef\u80fd\u5f97\u5230\u6b63\u786e\u7684\u7ed3\u679c\u3002"),(0,m.kt)("p",null,"\u89d2\u5ea6 1\uff1a\u76f4\u63a5\u4ece\u72b6\u6001\u7684\u8bed\u4e49\u51fa\u53d1\uff1b"),(0,m.kt)("p",null,"\u89d2\u5ea6 2\uff1a\u5982\u679c\u72b6\u6001\u7684\u8bed\u4e49\u4e0d\u597d\u601d\u8003\uff0c\u5c31\u8003\u8651\u300c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u300d\u7684\u8fb9\u754c\u9700\u8981\u4ec0\u4e48\u6837\u521d\u59cb\u5316\u7684\u6761\u4ef6\uff1b"),(0,m.kt)("p",null,"\u89d2\u5ea6 3\uff1a\u4ece\u300c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u300d\u65b9\u7a0b\u7684\u4e0b\u6807\u770b\u662f\u5426\u9700\u8981\u591a\u8bbe\u7f6e\u4e00\u884c\u3001\u4e00\u5217\u8868\u793a\u300c\u54e8\u5175\u300d\uff08sentinel\uff09\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u7684\u8ba8\u8bba\u3002"),(0,m.kt)("p",null,"4\u3001\u601d\u8003\u8f93\u51fa"),(0,m.kt)("p",null,"\u6709\u4e9b\u65f6\u5019\u662f\u6700\u540e\u4e00\u4e2a\u72b6\u6001\uff0c\u6709\u4e9b\u65f6\u5019\u53ef\u80fd\u4f1a\u7efc\u5408\u4e4b\u524d\u6240\u6709\u8ba1\u7b97\u8fc7\u7684\u72b6\u6001\u3002"),(0,m.kt)("p",null,"5\u3001\u601d\u8003\u4f18\u5316\u7a7a\u95f4\uff08\u4e5f\u53ef\u4ee5\u53eb\u505a\u8868\u683c\u590d\u7528\uff09"),(0,m.kt)("p",null,"\u300c\u4f18\u5316\u7a7a\u95f4\u300d\u4f1a\u4f7f\u5f97\u4ee3\u7801\u96be\u4e8e\u7406\u89e3\uff0c\u4e14\u662f\u7684\u300c\u72b6\u6001\u300d\u4e22\u5931\u539f\u6765\u7684\u8bed\u4e49\uff0c\u521d\u5b66\u7684\u65f6\u5019\u53ef\u4ee5\u4e0d\u4e00\u6b65\u5230\u4f4d\u3002\u5148\u628a\u4ee3\u7801\u5199\u6b63\u786e\u662f\u66f4\u91cd\u8981\uff1b\n\u300c\u4f18\u5316\u7a7a\u95f4\u300d\u5728\u6709\u4e00\u79cd\u60c5\u51b5\u4e0b\u662f\u5f88\u6709\u5fc5\u8981\u7684\uff0c\u90a3\u5c31\u662f\u72b6\u6001\u7a7a\u95f4\u975e\u5e38\u5e9e\u5927\u7684\u65f6\u5019\uff08\u5904\u7406\u6d77\u91cf\u6570\u636e\uff09\uff0c\u6b64\u65f6\u7a7a\u95f4\u4e0d\u591f\u7528\uff0c\u5c31\u5fc5\u987b\u300c\u4f18\u5316\u7a7a\u95f4\u300d\uff1b\n\u975e\u5e38\u7ecf\u5178\u7684\u300c\u4f18\u5316\u7a7a\u95f4\u300d\u7684\u5178\u578b\u95ee\u9898\u662f\u300c0-1 \u80cc\u5305\u300d\u95ee\u9898\u548c\u300c\u5b8c\u5168\u80cc\u5305\u300d\u95ee\u9898\u3002"),(0,m.kt)("p",null,(0,m.kt)("strong",{parentName:"p"},"\u66b4\u529b\u7684\u9012\u5f52\u89e3\u6cd5 -> \u5e26\u5907\u5fd8\u5f55\u7684\u9012\u5f52\u89e3\u6cd5 -> \u8fed\u4ee3\u7684\u52a8\u6001\u89c4\u5212\u89e3\u6cd5"),"\u3002"),(0,m.kt)("p",null,(0,m.kt)("strong",{parentName:"p"},"\u52a8\u6001\u89c4\u5212\u95ee\u9898\u7684\u4e00\u822c\u5f62\u5f0f\u5c31\u662f\u6c42\u6700\u503c\uff0c\u6838\u5fc3\u95ee\u9898\u662f\u7a77\u4e3e"),"\u3002"),(0,m.kt)("h3",{id:"\u7279\u5f81"},"\u7279\u5f81"),(0,m.kt)("ol",null,(0,m.kt)("li",{parentName:"ol"},"\u5b58\u5728\u91cd\u53e0\u5b50\u95ee\u9898\uff0c\u901a\u8fc7\u5907\u5fd8\u5f55\u6216DP Table\u4f18\u5316"),(0,m.kt)("li",{parentName:"ol"},"\u5177\u5907\u6700\u4f18\u5b50\u7ed3\u6784\u3002\u5b50\u95ee\u9898\u76f8\u4e92\u72ec\u7acb\uff0c\u53ef\u4ee5\u4ece\u5b50\u95ee\u9898\u7684\u6700\u4f18\u7ed3\u679c\u63a8\u51fa\u66f4\u5927\u89c4\u6a21\u95ee\u9898\u7684\u6700\u4f18\u7ed3\u679c\u3002"),(0,m.kt)("li",{parentName:"ol"},"\u65e0\u540e\u6548\u6027\uff1a\u53ea\u8bb0\u5f55\u9636\u6bb5\u7ed3\u679c\uff0c\u800c\u4e0d\u5173\u5fc3\u600e\u4e48\u6765\u7684")),(0,m.kt)("p",null,"\u660e\u786e\u300c\u72b6\u6001\u300d -> \u5b9a\u4e49 dp \u6570\u7ec4/\u51fd\u6570\u7684\u542b\u4e49 -> \u660e\u786e\u300c\u9009\u62e9\u300d-> \u660e\u786e base case\u3002"),(0,m.kt)("p",null,(0,m.kt)("strong",{parentName:"p"},"\u8ba1\u7b97\u673a\u89e3\u51b3\u95ee\u9898\u5176\u5b9e\u6ca1\u6709\u4efb\u4f55\u5947\u6280\u6deb\u5de7\uff0c\u5b83\u552f\u4e00\u7684\u89e3\u51b3\u529e\u6cd5\u5c31\u662f\u7a77\u4e3e")),(0,m.kt)("p",null,(0,m.kt)("strong",{parentName:"p"},"1\u3001\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6240\u9700\u7684\u72b6\u6001\u5fc5\u987b\u662f\u5df2\u7ecf\u8ba1\u7b97\u51fa\u6765\u7684"),"\u3002"),(0,m.kt)("p",null,(0,m.kt)("strong",{parentName:"p"},"2\u3001\u904d\u5386\u7684\u7ec8\u70b9\u5fc5\u987b\u662f\u5b58\u50a8\u7ed3\u679c\u7684\u90a3\u4e2a\u4f4d\u7f6e")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    string longestPalindrome(string s) {\n        int len = s.size();\n       vector<vector<int>> dp(len, vector<int>(len));\n       string ans;\n        for(int k = 0; k < len; ++k) {\n            for(int i = 0; i + k < len; ++i) {\n                int j = k + i;\n                if (k == 0) {\n                    dp[i][j] = 1;\n                } else if (k == 1) {\n                    dp[i][j] = s[i] == s[j];\n                } else {\n                    dp[i][j] = (s[i] == s[j] && dp[i + 1][j - 1]); \n                }\n                if (dp[i][j] && k + 1 > ans.size()) {\n                    ans = s.substr(i, k + 1);\n                }\n            }\n        }\n        return ans;\n    }  \n};\n")),(0,m.kt)("h2",{id:"bfs"},"BFS"),(0,m.kt)("p",null,"\u5de6\u8fb9\u662fBFS\uff0c\u6309\u7167\u5c42\u8fdb\u884c\u641c\u7d22\uff1b\u56fe\u53f3\u8fb9\u662fDFS\uff0c\u5148\u4e00\u8def\u8d70\u5230\u5e95\uff0c\u7136\u540e\u518d\u56de\u5934\u641c\u7d22\u3002"),(0,m.kt)("p",null,"BFS\nBFS\u4f7f\u7528\u961f\u5217\uff0c\u628a\u6bcf\u4e2a\u8fd8\u6ca1\u6709\u641c\u7d22\u5230\u7684\u70b9\u4f9d\u6b21\u653e\u5165\u961f\u5217\uff0c\u7136\u540e\u518d\u5f39\u51fa\u961f\u5217\u7684\u5934\u90e8\u5143\u7d20\u5f53\u505a\u5f53\u524d\u904d\u5386\u70b9\u3002BFS\u603b\u5171\u6709\u4e24\u4e2a\u6a21\u677f\uff1a"),(0,m.kt)("p",null,"\u5982\u679c\u4e0d\u9700\u8981\u786e\u5b9a\u5f53\u524d\u904d\u5386\u5230\u4e86\u54ea\u4e00\u5c42\uff0cBFS\u6a21\u677f\u5982\u4e0b\u3002"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"while queue \u4e0d\u7a7a\uff1a\n    cur = queue.pop()\n    for \u8282\u70b9 in cur\u7684\u6240\u6709\u76f8\u90bb\u8282\u70b9\uff1a\n        if \u8be5\u8282\u70b9\u6709\u6548\u4e14\u672a\u8bbf\u95ee\u8fc7\uff1a\n            queue.push(\u8be5\u8282\u70b9)\n")),(0,m.kt)("p",null,"\u5982\u679c\u8981\u786e\u5b9a\u5f53\u524d\u904d\u5386\u5230\u4e86\u54ea\u4e00\u5c42\uff0cBFS\u6a21\u677f\u5982\u4e0b\u3002\n\u8fd9\u91cc\u589e\u52a0\u4e86level\u8868\u793a\u5f53\u524d\u904d\u5386\u5230\u4e8c\u53c9\u6811\u4e2d\u7684\u54ea\u4e00\u5c42\u4e86\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u5728\u4e00\u4e2a\u56fe\u4e2d\uff0c\u73b0\u5728\u5df2\u7ecf\u8d70\u4e86\u591a\u5c11\u6b65\u4e86\u3002size\u8868\u793a\u5728\u5f53\u524d\u904d\u5386\u5c42\u6709\u591a\u5c11\u4e2a\u5143\u7d20\uff0c\u4e5f\u5c31\u662f\u961f\u5217\u4e2d\u7684\u5143\u7d20\u6570\uff0c\u6211\u4eec\u628a\u8fd9\u4e9b\u5143\u7d20\u4e00\u6b21\u6027\u904d\u5386\u5b8c\uff0c\u5373\u628a\u5f53\u524d\u5c42\u7684\u6240\u6709\u5143\u7d20\u90fd\u5411\u5916\u8d70\u4e86\u4e00\u6b65\u3002"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"level = 0\nwhile queue \u4e0d\u7a7a\uff1a\n    size = queue.size()\n    while (size --) {\n        cur = queue.pop()\n        for \u8282\u70b9 in cur\u7684\u6240\u6709\u76f8\u90bb\u8282\u70b9\uff1a\n            if \u8be5\u8282\u70b9\u6709\u6548\u4e14\u672a\u88ab\u8bbf\u95ee\u8fc7\uff1a\n                queue.push(\u8be5\u8282\u70b9)\n    }\n    level ++;\n")),(0,m.kt)("p",null,"\u4e0a\u9762\u4e24\u4e2a\u662f\u901a\u7528\u6a21\u677f\uff0c\u5728\u4efb\u4f55\u9898\u76ee\u4e2d\u90fd\u53ef\u4ee5\u7528\uff0c\u662f\u8981\u8bb0\u4f4f\u7684\uff01"),(0,m.kt)("p",null,"\u672c\u9898\u8981\u6c42\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386\uff0c\u6240\u4ee5\u540c\u4e00\u5c42\u7684\u8282\u70b9\u5e94\u8be5\u653e\u5728\u4e00\u8d77\uff0c\u6545\u4f7f\u7528\u6a21\u677f\u4e8c\u3002"),(0,m.kt)("p",null,"\u4f7f\u7528\u961f\u5217\u4fdd\u5b58\u6bcf\u5c42\u7684\u6240\u6709\u8282\u70b9\uff0c\u6bcf\u6b21\u628a\u961f\u5217\u91cc\u7684\u539f\u5148\u6240\u6709\u8282\u70b9\u8fdb\u884c\u51fa\u961f\u5217\u64cd\u4f5c\uff0c\u518d\u628a\u6bcf\u4e2a\u5143\u7d20\u7684\u975e\u7a7a\u5de6\u53f3\u5b50\u8282\u70b9\u8fdb\u5165\u961f\u5217\u3002\u56e0\u6b64\u5373\u53ef\u5f97\u5230\u6bcf\u5c42\u7684\u904d\u5386\u3002"),(0,m.kt)("p",null,"\u5404\u8bed\u8a00\u7684\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"}," /*\n* Definition for a binary tree node.\n * struct TreeNode {\n * int val;\n * TreeNode *left;\n * TreeNode *right;\n * TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n   */\n   class Solution {\n   public:\n   vector<vector<int>> levelOrder(TreeNode* root) {\n       queue<TreeNode*> que;\n       que.push(root);\n       vector<vector<int>> res;\n       while (que.size() != 0) {\n           int size = que.size();\n           vector<int> level;\n           while (size --) {\n               TreeNode* cur = que.front();\n               que.pop();\n               if (!cur) {\n                   continue;\n               }\n               level.push_back(cur->val);\n               que.push(cur->left);\n               que.push(cur->right);\n           }\n           if (level.size() != 0) {\n               res.push_back(level);\n           }\n       }\n       return res;\n   }\n   };\n")),(0,m.kt)("h2",{id:"dfs"},"DFS"),(0,m.kt)("p",null,"\u672c\u9898\u4f7f\u7528 DFS \u540c\u6837\u80fd\u505a\u3002\u7531\u4e8e\u9898\u76ee\u8981\u6c42\u6bcf\u4e00\u5c42\u7684\u8282\u70b9\u90fd\u662f\u4ece\u5de6\u5230\u53f3\u904d\u5386\uff0c\u56e0\u6b64\u9012\u5f52\u65f6\u4e5f\u8981\u5148\u9012\u5f52\u5de6\u5b50\u6811\u3001\u518d\u9012\u5f52\u53f3\u5b50\u6811\u3002"),(0,m.kt)("p",null,"DFS \u505a\u672c\u9898\u7684\u4e3b\u8981\u95ee\u9898\u662f\uff1a DFS \u4e0d\u662f\u6309\u7167\u5c42\u6b21\u904d\u5386\u7684\u3002\u4e3a\u4e86\u8ba9\u9012\u5f52\u7684\u8fc7\u7a0b\u4e2d\u540c\u4e00\u5c42\u7684\u8282\u70b9\u653e\u5230\u540c\u4e00\u4e2a\u5217\u8868\u4e2d\uff0c\u5728\u9012\u5f52\u65f6\u8981\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6 level\u3002\u9012\u5f52\u5230\u65b0\u8282\u70b9\u8981\u628a\u8be5\u8282\u70b9\u653e\u5165 level \u5bf9\u5e94\u5217\u8868\u7684\u672b\u5c3e\u3002"),(0,m.kt)("p",null,"\u5f53\u904d\u5386\u5230\u4e00\u4e2a\u65b0\u7684\u6df1\u5ea6 level\uff0c\u800c\u6700\u7ec8\u7ed3\u679c res \u4e2d\u8fd8\u6ca1\u6709\u521b\u5efa level \u5bf9\u5e94\u7684\u5217\u8868\u65f6\uff0c\u5e94\u8be5\u5728 res \u4e2d\u65b0\u5efa\u4e00\u4e2a\u5217\u8868\u7528\u6765\u4fdd\u5b58\u8be5 level \u7684\u6240\u6709\u8282\u70b9\u3002\n\u94fe\u63a5\uff1a",(0,m.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/tao-mo-ban-bfs-he-dfs-du-ke-yi-jie-jue-by-fuxuemin/"},"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/tao-mo-ban-bfs-he-dfs-du-ke-yi-jie-jue-by-fuxuemin/")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-cpp"},"dummy \u865a\u62df\u5934\n")))}o.isMDXComponent=!0},60438:function(e,a,n){"use strict";a.Z=n.p+"assets/images/1f95da43d1bdeebdd1213bb804034ddc5f906dc61451cd63f2b5ab5d0eb33b33-\u300c\u52a8\u6001\u89c4\u5212\u300d\u95ee\u9898\u601d\u8003\u65b9\u5411-1623669435439-9fff2b458707f084598c7c4bd806cf20.png"},43312:function(e,a,n){"use strict";a.Z=n.p+"assets/images/20141016154254250-d9353cdf02678b16482bc99d6390cd49.jpeg"},69162:function(e,a,n){"use strict";a.Z=n.p+"assets/images/3be69ecc0e8948a5c0d74edfaed34d3eb92768ab781c1516bf00e618621eda66-142\u73af\u5f62\u94fe\u88682-3909e731218c6f2b6dff4975a1e71b14.png"},52214:function(e,a,n){"use strict";a.Z=n.p+"assets/images/449809-20180713175810432-796730532-1623669364470-36a4d0e4d896d5e54c4b5ff2d973ac5f.png"},62943:function(e,a,n){"use strict";a.Z=n.p+"assets/images/65ec311c3e9792bb17e9c08cabd4a07f251c9cd65a011b6c5ffb54b46d8e5012-image-1623669402464-18af543ae2c3885c0f4ae7ce9d116a5a.png"},31558:function(e,a,n){"use strict";a.Z=n.p+"assets/images/8951bc3b8b7eb4da2a46063c1bb96932e7a69910c0a93d973bd8aa5517e59fc8-1623669121482-c009b266d82a8b169548b5c022d51ce0.gif"}}]);